# coding: utf-8

"""
    vedbm

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class CreateDBInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_type': 'str',
        'create_type': 'str',
        'db_engine_version': 'str',
        'db_time_zone': 'str',
        'instance_name': 'str',
        'lower_case_table_names': 'str',
        'node_number': 'int',
        'node_spec': 'str',
        'project_name': 'str',
        'storage_pool_name': 'str',
        'storage_pool_type': 'str',
        'subnet_id': 'str',
        'super_account_name': 'str',
        'super_account_password': 'str',
        'tags': 'list[TagForCreateDBInstanceInput]',
        'vpc_id': 'str',
        'zone_ids': 'str',
        'zone_node_infos': 'list[ZoneNodeInfoForCreateDBInstanceInput]'
    }

    attribute_map = {
        'charge_type': 'ChargeType',
        'create_type': 'CreateType',
        'db_engine_version': 'DBEngineVersion',
        'db_time_zone': 'DBTimeZone',
        'instance_name': 'InstanceName',
        'lower_case_table_names': 'LowerCaseTableNames',
        'node_number': 'NodeNumber',
        'node_spec': 'NodeSpec',
        'project_name': 'ProjectName',
        'storage_pool_name': 'StoragePoolName',
        'storage_pool_type': 'StoragePoolType',
        'subnet_id': 'SubnetId',
        'super_account_name': 'SuperAccountName',
        'super_account_password': 'SuperAccountPassword',
        'tags': 'Tags',
        'vpc_id': 'VpcId',
        'zone_ids': 'ZoneIds',
        'zone_node_infos': 'ZoneNodeInfos'
    }

    def __init__(self, charge_type=None, create_type=None, db_engine_version=None, db_time_zone=None, instance_name=None, lower_case_table_names=None, node_number=None, node_spec=None, project_name=None, storage_pool_name=None, storage_pool_type=None, subnet_id=None, super_account_name=None, super_account_password=None, tags=None, vpc_id=None, zone_ids=None, zone_node_infos=None, _configuration=None):  # noqa: E501
        """CreateDBInstanceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_type = None
        self._create_type = None
        self._db_engine_version = None
        self._db_time_zone = None
        self._instance_name = None
        self._lower_case_table_names = None
        self._node_number = None
        self._node_spec = None
        self._project_name = None
        self._storage_pool_name = None
        self._storage_pool_type = None
        self._subnet_id = None
        self._super_account_name = None
        self._super_account_password = None
        self._tags = None
        self._vpc_id = None
        self._zone_ids = None
        self._zone_node_infos = None
        self.discriminator = None

        if charge_type is not None:
            self.charge_type = charge_type
        if create_type is not None:
            self.create_type = create_type
        if db_engine_version is not None:
            self.db_engine_version = db_engine_version
        if db_time_zone is not None:
            self.db_time_zone = db_time_zone
        if instance_name is not None:
            self.instance_name = instance_name
        if lower_case_table_names is not None:
            self.lower_case_table_names = lower_case_table_names
        if node_number is not None:
            self.node_number = node_number
        if node_spec is not None:
            self.node_spec = node_spec
        if project_name is not None:
            self.project_name = project_name
        if storage_pool_name is not None:
            self.storage_pool_name = storage_pool_name
        if storage_pool_type is not None:
            self.storage_pool_type = storage_pool_type
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if super_account_name is not None:
            self.super_account_name = super_account_name
        if super_account_password is not None:
            self.super_account_password = super_account_password
        if tags is not None:
            self.tags = tags
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if zone_ids is not None:
            self.zone_ids = zone_ids
        if zone_node_infos is not None:
            self.zone_node_infos = zone_node_infos

    @property
    def charge_type(self):
        """Gets the charge_type of this CreateDBInstanceRequest.  # noqa: E501


        :return: The charge_type of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this CreateDBInstanceRequest.


        :param charge_type: The charge_type of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def create_type(self):
        """Gets the create_type of this CreateDBInstanceRequest.  # noqa: E501


        :return: The create_type of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._create_type

    @create_type.setter
    def create_type(self, create_type):
        """Sets the create_type of this CreateDBInstanceRequest.


        :param create_type: The create_type of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._create_type = create_type

    @property
    def db_engine_version(self):
        """Gets the db_engine_version of this CreateDBInstanceRequest.  # noqa: E501


        :return: The db_engine_version of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._db_engine_version

    @db_engine_version.setter
    def db_engine_version(self, db_engine_version):
        """Sets the db_engine_version of this CreateDBInstanceRequest.


        :param db_engine_version: The db_engine_version of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._db_engine_version = db_engine_version

    @property
    def db_time_zone(self):
        """Gets the db_time_zone of this CreateDBInstanceRequest.  # noqa: E501


        :return: The db_time_zone of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._db_time_zone

    @db_time_zone.setter
    def db_time_zone(self, db_time_zone):
        """Sets the db_time_zone of this CreateDBInstanceRequest.


        :param db_time_zone: The db_time_zone of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._db_time_zone = db_time_zone

    @property
    def instance_name(self):
        """Gets the instance_name of this CreateDBInstanceRequest.  # noqa: E501


        :return: The instance_name of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this CreateDBInstanceRequest.


        :param instance_name: The instance_name of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def lower_case_table_names(self):
        """Gets the lower_case_table_names of this CreateDBInstanceRequest.  # noqa: E501


        :return: The lower_case_table_names of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._lower_case_table_names

    @lower_case_table_names.setter
    def lower_case_table_names(self, lower_case_table_names):
        """Sets the lower_case_table_names of this CreateDBInstanceRequest.


        :param lower_case_table_names: The lower_case_table_names of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._lower_case_table_names = lower_case_table_names

    @property
    def node_number(self):
        """Gets the node_number of this CreateDBInstanceRequest.  # noqa: E501


        :return: The node_number of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: int
        """
        return self._node_number

    @node_number.setter
    def node_number(self, node_number):
        """Sets the node_number of this CreateDBInstanceRequest.


        :param node_number: The node_number of this CreateDBInstanceRequest.  # noqa: E501
        :type: int
        """

        self._node_number = node_number

    @property
    def node_spec(self):
        """Gets the node_spec of this CreateDBInstanceRequest.  # noqa: E501


        :return: The node_spec of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_spec

    @node_spec.setter
    def node_spec(self, node_spec):
        """Sets the node_spec of this CreateDBInstanceRequest.


        :param node_spec: The node_spec of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._node_spec = node_spec

    @property
    def project_name(self):
        """Gets the project_name of this CreateDBInstanceRequest.  # noqa: E501


        :return: The project_name of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateDBInstanceRequest.


        :param project_name: The project_name of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def storage_pool_name(self):
        """Gets the storage_pool_name of this CreateDBInstanceRequest.  # noqa: E501


        :return: The storage_pool_name of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool_name

    @storage_pool_name.setter
    def storage_pool_name(self, storage_pool_name):
        """Sets the storage_pool_name of this CreateDBInstanceRequest.


        :param storage_pool_name: The storage_pool_name of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._storage_pool_name = storage_pool_name

    @property
    def storage_pool_type(self):
        """Gets the storage_pool_type of this CreateDBInstanceRequest.  # noqa: E501


        :return: The storage_pool_type of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool_type

    @storage_pool_type.setter
    def storage_pool_type(self, storage_pool_type):
        """Sets the storage_pool_type of this CreateDBInstanceRequest.


        :param storage_pool_type: The storage_pool_type of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._storage_pool_type = storage_pool_type

    @property
    def subnet_id(self):
        """Gets the subnet_id of this CreateDBInstanceRequest.  # noqa: E501


        :return: The subnet_id of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this CreateDBInstanceRequest.


        :param subnet_id: The subnet_id of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def super_account_name(self):
        """Gets the super_account_name of this CreateDBInstanceRequest.  # noqa: E501


        :return: The super_account_name of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._super_account_name

    @super_account_name.setter
    def super_account_name(self, super_account_name):
        """Sets the super_account_name of this CreateDBInstanceRequest.


        :param super_account_name: The super_account_name of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._super_account_name = super_account_name

    @property
    def super_account_password(self):
        """Gets the super_account_password of this CreateDBInstanceRequest.  # noqa: E501


        :return: The super_account_password of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._super_account_password

    @super_account_password.setter
    def super_account_password(self, super_account_password):
        """Sets the super_account_password of this CreateDBInstanceRequest.


        :param super_account_password: The super_account_password of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._super_account_password = super_account_password

    @property
    def tags(self):
        """Gets the tags of this CreateDBInstanceRequest.  # noqa: E501


        :return: The tags of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: list[TagForCreateDBInstanceInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDBInstanceRequest.


        :param tags: The tags of this CreateDBInstanceRequest.  # noqa: E501
        :type: list[TagForCreateDBInstanceInput]
        """

        self._tags = tags

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateDBInstanceRequest.  # noqa: E501


        :return: The vpc_id of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateDBInstanceRequest.


        :param vpc_id: The vpc_id of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def zone_ids(self):
        """Gets the zone_ids of this CreateDBInstanceRequest.  # noqa: E501


        :return: The zone_ids of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._zone_ids

    @zone_ids.setter
    def zone_ids(self, zone_ids):
        """Sets the zone_ids of this CreateDBInstanceRequest.


        :param zone_ids: The zone_ids of this CreateDBInstanceRequest.  # noqa: E501
        :type: str
        """

        self._zone_ids = zone_ids

    @property
    def zone_node_infos(self):
        """Gets the zone_node_infos of this CreateDBInstanceRequest.  # noqa: E501


        :return: The zone_node_infos of this CreateDBInstanceRequest.  # noqa: E501
        :rtype: list[ZoneNodeInfoForCreateDBInstanceInput]
        """
        return self._zone_node_infos

    @zone_node_infos.setter
    def zone_node_infos(self, zone_node_infos):
        """Sets the zone_node_infos of this CreateDBInstanceRequest.


        :param zone_node_infos: The zone_node_infos of this CreateDBInstanceRequest.  # noqa: E501
        :type: list[ZoneNodeInfoForCreateDBInstanceInput]
        """

        self._zone_node_infos = zone_node_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDBInstanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDBInstanceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDBInstanceRequest):
            return True

        return self.to_dict() != other.to_dict()
