[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "narwhals"
version = "1.0.4"
authors = [
  { name="Marco Gorelli", email="33491632+MarcoGorelli@users.noreply.github.com" },
]
description = "Extremely lightweight compatibility layer between pandas, Polars, cuDF, and Modin"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.hatch.build]
exclude = [
  "/.*",
  "/docs",
  "/tests",
  "/tpch",
]

[project.optional-dependencies]
pandas = ["pandas>=0.25.3"]
polars = ["polars>=0.20.3"]
pyarrow = ['pyarrow>=11.0.0']

[project.urls]
"Homepage" = "https://github.com/narwhals-dev/narwhals"
"Bug Tracker" = "https://github.com/narwhals-dev/narwhals"

[tool.ruff]
line-length = 90
fix = true
target-version = "py38"

lint.select = [
  "ALL",
]
lint.ignore = [
  'A001',
  'A003',
  'ANN101',
  'ANN401',
  'C901',
  'COM812',
  'D',
  'DTZ001',
  'E501',
  'EM101',
  'FIX',
  'ISC001',
  'PD901',  # This is a auxiliary library so dataframe variables have no concrete business meaning
  'PLR0911',
  'PLR0912',
  'PLR0913',
  'PLR2004',
  'PTH',
  'RET505',
  'S',
  'SLF001',
  'TD003',
  'TRY003',  # TODO(Unassigned): enable
  'TRY004'
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
filterwarnings = [
  "error",
  'ignore:distutils Version classes are deprecated:DeprecationWarning',
  'ignore:In the future `np.bool`',
  'ignore:The copy keyword is deprecated and will be removed',
  'ignore:make_block is deprecated and will be removed',
  'ignore:np.find_common_type is deprecated',
  'ignore:is_sparse is deprecated and will be removed',
]
xfail_strict = true
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.coverage.report]
omit = ['narwhals/typing.py']
exclude_also = [
  "> POLARS_VERSION",
  "if sys.version_info() <",
  "if implementation is Implementation.MODIN",
  "if implementation is Implementation.CUDF",
  'request.applymarker\(pytest.mark.xfail\)'
]

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
# the pandas API is just too inconsistent for type hinting to be useful.
module = [
    "pandas.*",
    "cudf.*",
    "modin.*",
]
ignore_missing_imports = true
