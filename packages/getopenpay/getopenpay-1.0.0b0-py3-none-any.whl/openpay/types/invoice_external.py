# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .billing_reason_enum import BillingReasonEnum
from .collection_method_enum import CollectionMethodEnum
from .currency_enum import CurrencyEnum
from .discount_external import DiscountExternal
from .invoice_discount_amounts_external import InvoiceDiscountAmountsExternal
from .invoice_item_external import InvoiceItemExternal
from .invoice_status_enum import InvoiceStatusEnum
from .object_name import ObjectName


class InvoiceExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique identifier of the invoice.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    account_id: str = pydantic_v1.Field()
    """
    Unique identifier of the account.
    """

    billing_reason: BillingReasonEnum = pydantic_v1.Field()
    """
    Indicates the reason why the invoice was created.
    """

    collection_method: CollectionMethodEnum = pydantic_v1.Field()
    """
    Indicates method of payment collection of the invoice.
    """

    customer_id: str = pydantic_v1.Field()
    """
    Unique identifier of the customer.
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Three-letter ISO currency code, in lowercase.
    """

    default_payment_method_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the payment_method.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary string describing the invoice for user.
    """

    latest_payment_intent_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the payment_intent.
    """

    period_end: dt.datetime = pydantic_v1.Field()
    """
    End of the usage period during which invoice_items were added to this invoice. It is in 'ISO 8601' format.
    """

    period_start: dt.datetime = pydantic_v1.Field()
    """
    Start of the usage period during which invoice_items were added to this invoice. It is in 'ISO 8601' format.
    """

    status: InvoiceStatusEnum = pydantic_v1.Field()
    """
    Status of the invoice.
    """

    paid_out_of_band: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Boolean representing whether an invoice is paid outside of OpenPay.
    """

    subscription_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the subscription.
    """

    total_amount_atom: int = pydantic_v1.Field()
    """
    Total amount of the invoice. Sum of invoice_itemsâ€™ total amount. It is in atomic units (in USD this is cents).
    """

    remaining_amount_atom: int = pydantic_v1.Field()
    """
    Remaining amount of the invoice to be paid. It is in atomic units (in USD this is cents).
    """

    tax_amount_atom: int = pydantic_v1.Field()
    """
    Total tax amount in atomic units.
    """

    lines: typing.List[InvoiceItemExternal] = pydantic_v1.Field()
    """
    List of individual line items that make up the invoice.
    """

    pre_payment_credit_notes_amount: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total amount of all pre-payment credit notes issued for this invoice.
    """

    post_payment_credit_notes_amount: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total amount of all post-payment credit notes issued for this invoice.
    """

    credit_note_ids: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    List of unique identifiers of all the credit notes issued for this invoice.
    """

    applied_balance_amount_atom: int = pydantic_v1.Field()
    """
    Amount applied from customer balance either from credit or debit. It is in atomic units (in USD this is cents).
    """

    due_amount_atom: int = pydantic_v1.Field()
    """
    Final amount due at this time for this invoice. It isin atomic units (in USD this is cents).
    """

    paid_amount_atom: int = pydantic_v1.Field()
    """
    The amount that was paid in atomic units (in USD this is cents).
    """

    discounts: typing.Optional[typing.List[DiscountExternal]] = pydantic_v1.Field(default=None)
    """
    The discounts applied to the invoice.
    """

    total_discount_amount_atoms: typing.Optional[typing.List[InvoiceDiscountAmountsExternal]] = pydantic_v1.Field(
        default=None
    )
    """
    The aggregate amount_atoms calculated per discount across all line items.
    """

    net_d: typing.Optional[int] = pydantic_v1.Field(default=-1)
    """
    Number of days the customer has to pay the invoice, from 0 to 365, where -1 indicates due immediately.
    """

    hosted_invoice_url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
    """

    latest_payment_attempt_failure_message: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Human readable failure message of latest payment attempt, if any.
    """

    tax_processor_updated_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    When the tax processor was last updated successfully with this invoice
    """

    refund_ids: typing.List[str] = pydantic_v1.Field()
    """
    Ids of refund object for this invoice.
    """

    refunded_amount_atom: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Amount refunded to customer in source payment method. This does not involve credits to customer balance.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
