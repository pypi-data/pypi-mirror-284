# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .currency_enum import CurrencyEnum
from .invoice_item_discount_amounts_external import InvoiceItemDiscountAmountsExternal
from .object_name import ObjectName


class InvoiceItemExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique identifier of the invoice_item.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    invoice_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the invoice.
    """

    account_id: str = pydantic_v1.Field()
    """
    Unique identifier of the account.
    """

    amount_atom: int = pydantic_v1.Field()
    """
    Total amount of invoice_item in atomic units (in USD this is cents).
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Three-letter ISO currency code, in lowercase.
    """

    customer_id: str = pydantic_v1.Field()
    """
    Unique identifier of the customer.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary string describing the invoice_item for user.
    """

    period_end: dt.datetime = pydantic_v1.Field()
    """
    End of the usage period of the invoice_item. It is in 'ISO 8601' format.
    """

    period_start: dt.datetime = pydantic_v1.Field()
    """
    Start of the usage period of the invoice_item. It is in 'ISO 8601' format.
    """

    price_id: str = pydantic_v1.Field()
    """
    Unique identifier of the price.
    """

    product_id: str = pydantic_v1.Field()
    """
    Unique identifier of the product.
    """

    quantity: int = pydantic_v1.Field()
    """
    Quantity of the invoice_item.
    """

    subscription_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the subscription.
    """

    subscription_item_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the subscription_item.
    """

    discounts: typing.List[str] = pydantic_v1.Field()
    """
    The discounts only directly applied to the InvoiceItem.
    """

    discount_amount_atoms: typing.List[InvoiceItemDiscountAmountsExternal] = pydantic_v1.Field()
    """
    The amount_atom of all discount.
    """

    amount_atom_considering_discount_applied: int = pydantic_v1.Field()
    """
    Total amount of invoice_item in atomic units considering discounts. Contains both invoice-level and invoice item-level discounts
    """

    proration_details_debit_invoice_item: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    For a credit proration invoice_item, the original debit invoice_item to which the credit proration applies.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
