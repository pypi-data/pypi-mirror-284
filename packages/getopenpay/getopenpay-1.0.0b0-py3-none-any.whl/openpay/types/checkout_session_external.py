# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .checkout_mode import CheckoutMode
from .checkout_session_line_item_external import CheckoutSessionLineItemExternal
from .checkout_session_status import CheckoutSessionStatus
from .object_name import ObjectName


class CheckoutSessionExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique Identifier of the checkout session.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    account_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the account.
    """

    account_name: str = pydantic_v1.Field()
    """
    Name of the account.
    """

    amount_subtotal_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the subtotal amount for the line items.
    """

    amount_total_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the total amount for the line items, after discounts and taxes.
    """

    client_reference_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The client reference ID initially referenced during checkout session creation.
    """

    currency: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Currency code, e.g., USD.
    """

    customer_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the customer.
    """

    customer_email: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The customer's email.
    """

    line_items: typing.List[CheckoutSessionLineItemExternal] = pydantic_v1.Field()
    """
    The line items purchased by the customers.
    """

    mode: CheckoutMode = pydantic_v1.Field()
    """
    The mode of the Checkout Session.
    """

    payment_intent_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The ID of the payment intent associated with the checkout session.
    """

    return_url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
    """

    secure_token: str = pydantic_v1.Field()
    """
    The random secure token associated with the checkout session.
    """

    status: CheckoutSessionStatus = pydantic_v1.Field()
    """
    The current status of the checkout session.
    """

    subscription_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The subscription associated with the checkout session.
    """

    success_url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The URL to which OpenPay should send customers when payment or setup is complete. This parameter is not allowed if ui_mode is embedded.
    """

    tax_amount_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the tax amount for the line items.
    """

    url: str = pydantic_v1.Field()
    """
    The main URL for this checkout session.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
