# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .billing_scheme_enum import BillingSchemeEnum
from .calendar_interval_enum import CalendarIntervalEnum
from .invoice_settings import InvoiceSettings
from .object_name import ObjectName
from .price_tier_external import PriceTierExternal
from .price_type_enum import PriceTypeEnum
from .pricing_tiers_enum import PricingTiersEnum
from .recurring_details import RecurringDetails


class PriceExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique identifier of the price.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    is_active: bool = pydantic_v1.Field()
    """
    Whether the price can be used for new purchases. Price can be activated later.
    """

    product_id: str = pydantic_v1.Field()
    """
    Unique identifier of the product.
    """

    internal_description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary string describing this price.
    """

    billing_scheme: BillingSchemeEnum = pydantic_v1.Field()
    """
    Describes how to compute the price per period.
    """

    unit_amount_atom: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The unit amount in atom to be charged.It is in atomic units (in USD this is cents).
    """

    transform_quantity_divide_by: float = pydantic_v1.Field()
    """
    This transformation will be applied on quantity before mulitplying by 'unit_amount_atom'.
    """

    price_tiers: typing.List[PriceTierExternal] = pydantic_v1.Field()
    """
    List of price_tiers.
    """

    price_type: PriceTypeEnum = pydantic_v1.Field()
    """
    One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    """

    recurring_details: typing.Optional[RecurringDetails] = pydantic_v1.Field(default=None)
    """
    Object containing recurring components of a price such as 'interval' and 'usage_type'.
    """

    tiers_mode: typing.Optional[PricingTiersEnum] = pydantic_v1.Field(default=None)
    """
    Defines if the tiering price should be 'graduated' or 'volume' based. In volume-based tiering, the maximum quantity within a period determines the per unit price. In graduated tiering, pricing can change as the quantity grows.
    """

    billing_interval: typing.Optional[CalendarIntervalEnum] = pydantic_v1.Field(default=None)
    """
    The interval unit for billing within the contract term. For recurring payments, this indicates how often each billing cycle occurs. For one-time payments, it dictates how the total amount is divided and billed over time.
    """

    billing_interval_count: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The number of interval units that make up one complete billing cycle. For example, "MONTH" and a count of "3" means billing happens every 3 months.
    """

    contract_term_multiple: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Defines a multiple on top of billing_interval, billing_interval_count for which this price should be under contract for.
    """

    contract_auto_renew: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not the contract auto-renews at the end of its term.
    """

    invoice_settings: typing.Optional[InvoiceSettings] = pydantic_v1.Field(default=None)
    """
    Default Net D
    """

    is_licensed: bool = pydantic_v1.Field()
    """
    Whether the price is licensed or not.
    """

    is_exclusive: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether the price is exclusive or not.
    """

    listed_exclusively_for_customers: typing.List[str] = pydantic_v1.Field()
    """
    If is_exclusive, this is the list of customers who can see the price.
    """

    can_only_be_purchased_with: typing.List[str] = pydantic_v1.Field()
    """
    This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.
    """

    optional_add_ons: typing.List[str] = pydantic_v1.Field()
    """
    Add-ons that can be optionally purchased with this price.
    """

    eligible_for_updates: bool = pydantic_v1.Field()
    """
    If the price can be updated or not.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
