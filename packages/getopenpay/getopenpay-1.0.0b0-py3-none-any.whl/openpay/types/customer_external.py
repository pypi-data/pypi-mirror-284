# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .complete_address import CompleteAddress
from .discount_external import DiscountExternal
from .object_name import ObjectName
from .subscription_external import SubscriptionExternal


class CustomerExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique identifier of the customer.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    account_id: str = pydantic_v1.Field()
    """
    Unique identifier for the account.
    """

    email: str = pydantic_v1.Field()
    """
    Customer’s email address.
    """

    first_name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Customer’s first name.
    """

    last_name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Customer’s last name.
    """

    address: typing.Optional[CompleteAddress] = pydantic_v1.Field(default=None)
    """
    Customer’s full address
    """

    subscriptions: typing.Optional[typing.List[SubscriptionExternal]] = pydantic_v1.Field(default=None)
    """
    List of customer’s subscriptions.
    """

    balance_atom: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The customer's balance in the smallest unit of currency (e.g., cents for USD). Positive values indicate the amount owed by the customer, to be applied to the next invoice. Negative values represent credit to apply to future invoices.
    """

    discount: typing.Optional[DiscountExternal] = pydantic_v1.Field(default=None)
    """
    Describes the current discount active on the customer, if there is one.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
