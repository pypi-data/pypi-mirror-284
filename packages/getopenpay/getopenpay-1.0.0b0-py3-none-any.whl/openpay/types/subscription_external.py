# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .calendar_interval_enum import CalendarIntervalEnum
from .discount_external import DiscountExternal
from .object_name import ObjectName
from .subscription_cancellation_details import SubscriptionCancellationDetails
from .subscription_item_external import SubscriptionItemExternal


class SubscriptionExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique Identifier of the subscription.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    name: str = pydantic_v1.Field()
    """
    Name for this subscription.
    """

    account_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the account.
    """

    customer_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the customer.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary String describing the subscription.
    """

    status: str = pydantic_v1.Field()
    """
    Current status of the subscription.
    """

    initial_start: dt.datetime = pydantic_v1.Field()
    """
    Very beginning of the subscription, in 'ISO 8601' format.
    """

    current_period_start: dt.datetime = pydantic_v1.Field()
    """
    Starting of the current billing period, in 'ISO 8601' format.
    """

    current_period_end: dt.datetime = pydantic_v1.Field()
    """
    End of the current billing period, in 'ISO 8601' format.
    """

    default_payment_method_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the payment_method.
    """

    cancel_at_end: bool = pydantic_v1.Field()
    """
    Whether this subscription should cancel at the end of contract or billing cycle.
    """

    pause_at_end: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether this subscription should pause at the end of contract or billing cycle.
    """

    pause_for_cycles: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Fow how may billing cycles this subscription should be paused.
    """

    billing_interval: typing.Optional[CalendarIntervalEnum] = pydantic_v1.Field(default=None)
    """
    billing interval for recurring subscriptions.
    """

    billing_interval_count: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    billing interval count for recurring subscriptions.
    """

    contract_start: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Start date of the subscription contract.
    """

    contract_auto_renew: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not the contract auto-renews at the end of its term.
    """

    subscription_items: typing.List[SubscriptionItemExternal] = pydantic_v1.Field()
    """
    List of subscription items.
    """

    cancellation_details: typing.Optional[SubscriptionCancellationDetails] = pydantic_v1.Field(default=None)
    """
    Cancellation detail of the subscription if canceled.
    """

    cancelled_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    DateTime at which the subscription was cancelled, in 'ISO 8601' format.
    """

    trial_start: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Start date of the trial
    """

    trial_end: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    End date of the trial
    """

    discount: typing.Optional[DiscountExternal] = pydantic_v1.Field(default=None)
    """
    Discount applied to the subscription.
    """

    total_billing_cycles: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total billing cycles in the contract.
    """

    remaining_billing_cycles: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Number of billing cycles remaining in contract.
    """

    paused_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Datetime at which subscription was paused.
    """

    resumes_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Datetime at which subscription will resume.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
