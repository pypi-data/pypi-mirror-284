# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PaymentIntentStatus(str, enum.Enum):
    REQUIRES_CONFIRMATION = "requires_confirmation"
    REQUIRES_CAPTURE = "requires_capture"
    REQUIRES_ACTION = "requires_action"
    REQUIRES_PAYMENT_METHOD = "requires_payment_method"
    PROCESSING = "processing"
    CANCELED = "canceled"
    SUCCEEDED = "succeeded"
    EXCEPTION = "exception"

    def visit(
        self,
        requires_confirmation: typing.Callable[[], T_Result],
        requires_capture: typing.Callable[[], T_Result],
        requires_action: typing.Callable[[], T_Result],
        requires_payment_method: typing.Callable[[], T_Result],
        processing: typing.Callable[[], T_Result],
        canceled: typing.Callable[[], T_Result],
        succeeded: typing.Callable[[], T_Result],
        exception: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PaymentIntentStatus.REQUIRES_CONFIRMATION:
            return requires_confirmation()
        if self is PaymentIntentStatus.REQUIRES_CAPTURE:
            return requires_capture()
        if self is PaymentIntentStatus.REQUIRES_ACTION:
            return requires_action()
        if self is PaymentIntentStatus.REQUIRES_PAYMENT_METHOD:
            return requires_payment_method()
        if self is PaymentIntentStatus.PROCESSING:
            return processing()
        if self is PaymentIntentStatus.CANCELED:
            return canceled()
        if self is PaymentIntentStatus.SUCCEEDED:
            return succeeded()
        if self is PaymentIntentStatus.EXCEPTION:
            return exception()
