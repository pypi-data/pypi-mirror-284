# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class InvoiceStatusEnum(str, enum.Enum):
    DRAFT = "draft"
    OPEN = "open"
    VOID = "void"
    PAID = "paid"
    PAST_DUE = "past_due"
    UNCOLLECTIBLE = "uncollectible"

    def visit(
        self,
        draft: typing.Callable[[], T_Result],
        open: typing.Callable[[], T_Result],
        void: typing.Callable[[], T_Result],
        paid: typing.Callable[[], T_Result],
        past_due: typing.Callable[[], T_Result],
        uncollectible: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is InvoiceStatusEnum.DRAFT:
            return draft()
        if self is InvoiceStatusEnum.OPEN:
            return open()
        if self is InvoiceStatusEnum.VOID:
            return void()
        if self is InvoiceStatusEnum.PAID:
            return paid()
        if self is InvoiceStatusEnum.PAST_DUE:
            return past_due()
        if self is InvoiceStatusEnum.UNCOLLECTIBLE:
            return uncollectible()
