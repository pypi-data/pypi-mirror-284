# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ObjectName(str, enum.Enum):
    ACCOUNT = "account"
    API_TOKEN = "api_token"
    CHARGE = "charge"
    CHECKOUT_SESSION = "checkout_session"
    CHECKOUT_SESSION_ITEM = "checkout_session_item"
    COUPON = "coupon"
    CREDIT_NOTE = "credit_note"
    CREDIT_NOTE_ITEM = "credit_note_item"
    CUSTOMER = "customer"
    CUSTOMER_BALANCE_TRANSACTION = "customer_balance_transaction"
    DELIVERY_ATTEMPT = "delivery_attempt"
    DISCOUNT = "discount"
    EVENT = "event"
    INVITE = "invite"
    INVOICE_ITEM_DISCOUNT = "invoice_item_discount"
    INVOICE = "invoice"
    INVOICE_DISCOUNT = "invoice_discount"
    INVOICE_ITEM = "invoice_item"
    PAYMENT_INTENT = "payment_intent"
    PAYMENT_LINK = "payment_link"
    PAYMENT_LINK_LINE_ITEM = "payment_link_line_item"
    PAYMENT_METHOD = "payment_method"
    PAYMENT_METHOD_MAPPING = "payment_method_mapping"
    PAYMENT_PROCESSOR = "payment_processor"
    PORTAL_SESSION = "portal_session"
    PRICE = "price"
    PRICE_TIER = "price_tier"
    PRODUCT = "product"
    PRODUCT_FAMILY = "product_family"
    PROMOTION_CODE = "promotion_code"
    REFUND = "refund"
    SUBSCRIPTION = "subscription"
    SUBSCRIPTION_ITEM = "subscription_item"
    TAX_INTEGRATION = "tax_integration"
    USER = "user"
    USER_LOGIN = "user_login"
    USER_RECORD = "user_record"
    USER_RECORD_SUMMARY = "user_record_summary"
    TRANSITION_ELIGIBILITY = "transition_eligibility"
    WEBHOOK_ENDPOINT = "webhook_endpoint"

    def visit(
        self,
        account: typing.Callable[[], T_Result],
        api_token: typing.Callable[[], T_Result],
        charge: typing.Callable[[], T_Result],
        checkout_session: typing.Callable[[], T_Result],
        checkout_session_item: typing.Callable[[], T_Result],
        coupon: typing.Callable[[], T_Result],
        credit_note: typing.Callable[[], T_Result],
        credit_note_item: typing.Callable[[], T_Result],
        customer: typing.Callable[[], T_Result],
        customer_balance_transaction: typing.Callable[[], T_Result],
        delivery_attempt: typing.Callable[[], T_Result],
        discount: typing.Callable[[], T_Result],
        event: typing.Callable[[], T_Result],
        invite: typing.Callable[[], T_Result],
        invoice_item_discount: typing.Callable[[], T_Result],
        invoice: typing.Callable[[], T_Result],
        invoice_discount: typing.Callable[[], T_Result],
        invoice_item: typing.Callable[[], T_Result],
        payment_intent: typing.Callable[[], T_Result],
        payment_link: typing.Callable[[], T_Result],
        payment_link_line_item: typing.Callable[[], T_Result],
        payment_method: typing.Callable[[], T_Result],
        payment_method_mapping: typing.Callable[[], T_Result],
        payment_processor: typing.Callable[[], T_Result],
        portal_session: typing.Callable[[], T_Result],
        price: typing.Callable[[], T_Result],
        price_tier: typing.Callable[[], T_Result],
        product: typing.Callable[[], T_Result],
        product_family: typing.Callable[[], T_Result],
        promotion_code: typing.Callable[[], T_Result],
        refund: typing.Callable[[], T_Result],
        subscription: typing.Callable[[], T_Result],
        subscription_item: typing.Callable[[], T_Result],
        tax_integration: typing.Callable[[], T_Result],
        user: typing.Callable[[], T_Result],
        user_login: typing.Callable[[], T_Result],
        user_record: typing.Callable[[], T_Result],
        user_record_summary: typing.Callable[[], T_Result],
        transition_eligibility: typing.Callable[[], T_Result],
        webhook_endpoint: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ObjectName.ACCOUNT:
            return account()
        if self is ObjectName.API_TOKEN:
            return api_token()
        if self is ObjectName.CHARGE:
            return charge()
        if self is ObjectName.CHECKOUT_SESSION:
            return checkout_session()
        if self is ObjectName.CHECKOUT_SESSION_ITEM:
            return checkout_session_item()
        if self is ObjectName.COUPON:
            return coupon()
        if self is ObjectName.CREDIT_NOTE:
            return credit_note()
        if self is ObjectName.CREDIT_NOTE_ITEM:
            return credit_note_item()
        if self is ObjectName.CUSTOMER:
            return customer()
        if self is ObjectName.CUSTOMER_BALANCE_TRANSACTION:
            return customer_balance_transaction()
        if self is ObjectName.DELIVERY_ATTEMPT:
            return delivery_attempt()
        if self is ObjectName.DISCOUNT:
            return discount()
        if self is ObjectName.EVENT:
            return event()
        if self is ObjectName.INVITE:
            return invite()
        if self is ObjectName.INVOICE_ITEM_DISCOUNT:
            return invoice_item_discount()
        if self is ObjectName.INVOICE:
            return invoice()
        if self is ObjectName.INVOICE_DISCOUNT:
            return invoice_discount()
        if self is ObjectName.INVOICE_ITEM:
            return invoice_item()
        if self is ObjectName.PAYMENT_INTENT:
            return payment_intent()
        if self is ObjectName.PAYMENT_LINK:
            return payment_link()
        if self is ObjectName.PAYMENT_LINK_LINE_ITEM:
            return payment_link_line_item()
        if self is ObjectName.PAYMENT_METHOD:
            return payment_method()
        if self is ObjectName.PAYMENT_METHOD_MAPPING:
            return payment_method_mapping()
        if self is ObjectName.PAYMENT_PROCESSOR:
            return payment_processor()
        if self is ObjectName.PORTAL_SESSION:
            return portal_session()
        if self is ObjectName.PRICE:
            return price()
        if self is ObjectName.PRICE_TIER:
            return price_tier()
        if self is ObjectName.PRODUCT:
            return product()
        if self is ObjectName.PRODUCT_FAMILY:
            return product_family()
        if self is ObjectName.PROMOTION_CODE:
            return promotion_code()
        if self is ObjectName.REFUND:
            return refund()
        if self is ObjectName.SUBSCRIPTION:
            return subscription()
        if self is ObjectName.SUBSCRIPTION_ITEM:
            return subscription_item()
        if self is ObjectName.TAX_INTEGRATION:
            return tax_integration()
        if self is ObjectName.USER:
            return user()
        if self is ObjectName.USER_LOGIN:
            return user_login()
        if self is ObjectName.USER_RECORD:
            return user_record()
        if self is ObjectName.USER_RECORD_SUMMARY:
            return user_record_summary()
        if self is ObjectName.TRANSITION_ELIGIBILITY:
            return transition_eligibility()
        if self is ObjectName.WEBHOOK_ENDPOINT:
            return webhook_endpoint()
