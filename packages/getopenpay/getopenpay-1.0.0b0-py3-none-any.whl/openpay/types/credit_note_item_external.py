# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .credit_note_line_type import CreditNoteLineType
from .currency_enum import CurrencyEnum
from .object_name import ObjectName


class CreditNoteItemExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique Identifier of the credit_note_item.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    amount_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the gross amount being credited for this credit_note_item. It is in atomic units (in USD this is cents).
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Three-letter ISO currency code, in lowercase.
    """

    type: CreditNoteLineType = pydantic_v1.Field()
    """
    The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.
    """

    quantity: typing.Optional[int] = pydantic_v1.Field(default=1)
    """
    Quantity of the product being credited.
    """

    invoice_item_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique Identifier of the invoice line item being credited
    """

    unit_amount_atom: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The cost of each unit of product being credited. It is in atomic units (in USD this is cents).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
