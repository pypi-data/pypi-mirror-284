# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .credit_card_type import CreditCardType


class TokenizedCreditCardInput(UncheckedBaseModel):
    card_token: str = pydantic_v1.Field()
    """
    Card token.
    """

    last_four: str = pydantic_v1.Field()
    """
    Last four digits of credit card
    """

    zip_code: str = pydantic_v1.Field()
    """
    ZIP or postal code.
    """

    line_1: typing.Optional[str] = pydantic_v1.Field(alias="line1", default=None)
    """
    Address line 1 (Street address/PO Box/Company name).
    """

    line_2: typing.Optional[str] = pydantic_v1.Field(alias="line2", default=None)
    """
    Address line 2 (Apartment/Suite/Unit/Building).
    """

    line_3: typing.Optional[str] = pydantic_v1.Field(alias="line3", default=None)
    """
    Address line 3.
    """

    city: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    City/District/Suburb/Town/Village.
    """

    state: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    State/Province/Region.
    """

    country: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Billing address country.
    """

    card_type: typing.Optional[CreditCardType] = pydantic_v1.Field(default=None)
    """
    Visa, Amex, Mastercard, etc
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
