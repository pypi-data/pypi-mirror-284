# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SubscriptionStatusEnum(str, enum.Enum):
    TRIALING = "trialing"
    ACTIVE = "active"
    PAUSED = "paused"
    PAST_DUE = "past_due"
    CANCELED = "canceled"

    def visit(
        self,
        trialing: typing.Callable[[], T_Result],
        active: typing.Callable[[], T_Result],
        paused: typing.Callable[[], T_Result],
        past_due: typing.Callable[[], T_Result],
        canceled: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is SubscriptionStatusEnum.TRIALING:
            return trialing()
        if self is SubscriptionStatusEnum.ACTIVE:
            return active()
        if self is SubscriptionStatusEnum.PAUSED:
            return paused()
        if self is SubscriptionStatusEnum.PAST_DUE:
            return past_due()
        if self is SubscriptionStatusEnum.CANCELED:
            return canceled()
