# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.create_credit_note_line import CreateCreditNoteLine
from ..types.credit_note_external import CreditNoteExternal
from ..types.credit_note_reason import CreditNoteReason
from ..types.currency_enum import CurrencyEnum
from ..types.date_time_filter import DateTimeFilter
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_credit_note_external import ListResponseCreditNoteExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CreditNotesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        invoice_id: str,
        total_amount_atom: int,
        lines: typing.Sequence[CreateCreditNoteLine],
        reason: typing.Optional[CreditNoteReason] = OMIT,
        credit_amount_atom: typing.Optional[int] = OMIT,
        refund_amount_atom: typing.Optional[int] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreditNoteExternal:
        """
        Issue a credit note to adjust the amount of a finalized invoice.
        You may issue multiple credit notes for an invoice.
        The sum of all credit notes issued for an invoice can’t exceed the
        total amount of the invoice.
        For a paid invoice, the sum of the refund and credit must equal the invoice total.
        Each credit note will increment the invoice’s pre_payment_credit_notes_amount_atom
        or post_payment_credit_notes_amount_atom depending on its status at the time
        of credit note creation.

        Parameters
        ----------
        invoice_id : str
            ID of the invoice

        total_amount_atom : int
            The int amount representing the total amount of the credit note.

        lines : typing.Sequence[CreateCreditNoteLine]
            Line items that make up the credit note.

        reason : typing.Optional[CreditNoteReason]
            Reason for issuing this credit note

        credit_amount_atom : typing.Optional[int]
            The integer amount representing the amount to credit the customer’s balance, which will be automatically applied to their next invoice.

        refund_amount_atom : typing.Optional[int]
            The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.

        currency : typing.Optional[CurrencyEnum]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreditNoteExternal
            Successful Response

        Examples
        --------
        from openpay import CreateCreditNoteLine, CreditNoteLineType
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.credit_notes.create(
            invoice_id="invoice_id",
            total_amount_atom=1,
            lines=[
                CreateCreditNoteLine(
                    amount_atom=1,
                    type=CreditNoteLineType.INVOICE_LINE_ITEM,
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "credit-notes/",
            method="POST",
            json={
                "invoice_id": invoice_id,
                "reason": reason,
                "total_amount_atom": total_amount_atom,
                "credit_amount_atom": credit_amount_atom,
                "refund_amount_atom": refund_amount_atom,
                "lines": lines,
                "currency": currency,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreditNoteExternal, construct_type(type_=CreditNoteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        invoice_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CreditNoteExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        invoice_id : typing.Optional[str]
            Only return credit notes for the invoice specified by this invoice ID.

        customer_id : typing.Optional[str]
            Only return credit notes for the customer specified by this customer ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CreditNoteExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.credit_notes.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "credit-notes/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "invoice_id": invoice_id,
                "customer_id": customer_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCreditNoteExternal, construct_type(type_=ListResponseCreditNoteExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    invoice_id=invoice_id,
                    customer_id=customer_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, credit_note_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreditNoteExternal:
        """
        Parameters
        ----------
        credit_note_id : str
            Unique Identifier of the credit_note.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreditNoteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.credit_notes.get(
            credit_note_id="credit_note_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"credit-notes/{jsonable_encoder(credit_note_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreditNoteExternal, construct_type(type_=CreditNoteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCreditNotesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        invoice_id: str,
        total_amount_atom: int,
        lines: typing.Sequence[CreateCreditNoteLine],
        reason: typing.Optional[CreditNoteReason] = OMIT,
        credit_amount_atom: typing.Optional[int] = OMIT,
        refund_amount_atom: typing.Optional[int] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreditNoteExternal:
        """
        Issue a credit note to adjust the amount of a finalized invoice.
        You may issue multiple credit notes for an invoice.
        The sum of all credit notes issued for an invoice can’t exceed the
        total amount of the invoice.
        For a paid invoice, the sum of the refund and credit must equal the invoice total.
        Each credit note will increment the invoice’s pre_payment_credit_notes_amount_atom
        or post_payment_credit_notes_amount_atom depending on its status at the time
        of credit note creation.

        Parameters
        ----------
        invoice_id : str
            ID of the invoice

        total_amount_atom : int
            The int amount representing the total amount of the credit note.

        lines : typing.Sequence[CreateCreditNoteLine]
            Line items that make up the credit note.

        reason : typing.Optional[CreditNoteReason]
            Reason for issuing this credit note

        credit_amount_atom : typing.Optional[int]
            The integer amount representing the amount to credit the customer’s balance, which will be automatically applied to their next invoice.

        refund_amount_atom : typing.Optional[int]
            The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.

        currency : typing.Optional[CurrencyEnum]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreditNoteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import CreateCreditNoteLine, CreditNoteLineType
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.credit_notes.create(
                invoice_id="invoice_id",
                total_amount_atom=1,
                lines=[
                    CreateCreditNoteLine(
                        amount_atom=1,
                        type=CreditNoteLineType.INVOICE_LINE_ITEM,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "credit-notes/",
            method="POST",
            json={
                "invoice_id": invoice_id,
                "reason": reason,
                "total_amount_atom": total_amount_atom,
                "credit_amount_atom": credit_amount_atom,
                "refund_amount_atom": refund_amount_atom,
                "lines": lines,
                "currency": currency,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreditNoteExternal, construct_type(type_=CreditNoteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        invoice_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CreditNoteExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        invoice_id : typing.Optional[str]
            Only return credit notes for the invoice specified by this invoice ID.

        customer_id : typing.Optional[str]
            Only return credit notes for the customer specified by this customer ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CreditNoteExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.credit_notes.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "credit-notes/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "invoice_id": invoice_id,
                "customer_id": customer_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCreditNoteExternal, construct_type(type_=ListResponseCreditNoteExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    invoice_id=invoice_id,
                    customer_id=customer_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, credit_note_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreditNoteExternal:
        """
        Parameters
        ----------
        credit_note_id : str
            Unique Identifier of the credit_note.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreditNoteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.credit_notes.get(
                credit_note_id="credit_note_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"credit-notes/{jsonable_encoder(credit_note_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreditNoteExternal, construct_type(type_=CreditNoteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
