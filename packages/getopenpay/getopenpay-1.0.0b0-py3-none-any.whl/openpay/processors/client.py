# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.delete_payment_processor_response import DeletePaymentProcessorResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_payment_processor_external import ListResponsePaymentProcessorExternal
from ..types.payment_processor_external import PaymentProcessorExternal
from ..types.payment_processor_name import PaymentProcessorName

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProcessorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponsePaymentProcessorExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePaymentProcessorExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "processors/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePaymentProcessorExternal, construct_type(type_=ListResponsePaymentProcessorExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique Identifier of the payment processor..

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.get(
            payment_processor_id="payment_processor_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        payment_processor_id: str,
        *,
        processor_name: PaymentProcessorName,
        api_keys: typing.Dict[str, str],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        processor_name : PaymentProcessorName
            Name of payment processor.

        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to payment processor.

        description : typing.Optional[str]
            Description of payment processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        from openpay import PaymentProcessorName
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.update(
            payment_processor_id="payment_processor_id",
            processor_name=PaymentProcessorName.BRAINTREE,
            api_keys={"api_keys": "api_keys"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}",
            method="PUT",
            json={"processor_name": processor_name, "api_keys": api_keys, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePaymentProcessorResponse:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePaymentProcessorResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.delete(
            payment_processor_id="payment_processor_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeletePaymentProcessorResponse, construct_type(type_=DeletePaymentProcessorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        processor_name: PaymentProcessorName,
        api_keys: typing.Dict[str, str],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        processor_name : PaymentProcessorName
            Name of payment processor.

        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to payment processor.

        description : typing.Optional[str]
            Description of payment processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        from openpay import PaymentProcessorName
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.create(
            processor_name=PaymentProcessorName.BRAINTREE,
            api_keys={"api_keys": "api_keys"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "processors/",
            method="POST",
            json={"processor_name": processor_name, "api_keys": api_keys, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def set_default(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.processors.set_default(
            payment_processor_id="payment_processor_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}/set-default",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProcessorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponsePaymentProcessorExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePaymentProcessorExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "processors/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePaymentProcessorExternal, construct_type(type_=ListResponsePaymentProcessorExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique Identifier of the payment processor..

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.get(
                payment_processor_id="payment_processor_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        payment_processor_id: str,
        *,
        processor_name: PaymentProcessorName,
        api_keys: typing.Dict[str, str],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        processor_name : PaymentProcessorName
            Name of payment processor.

        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to payment processor.

        description : typing.Optional[str]
            Description of payment processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import PaymentProcessorName
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.update(
                payment_processor_id="payment_processor_id",
                processor_name=PaymentProcessorName.BRAINTREE,
                api_keys={"api_keys": "api_keys"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}",
            method="PUT",
            json={"processor_name": processor_name, "api_keys": api_keys, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePaymentProcessorResponse:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePaymentProcessorResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.delete(
                payment_processor_id="payment_processor_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeletePaymentProcessorResponse, construct_type(type_=DeletePaymentProcessorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        processor_name: PaymentProcessorName,
        api_keys: typing.Dict[str, str],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        processor_name : PaymentProcessorName
            Name of payment processor.

        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to payment processor.

        description : typing.Optional[str]
            Description of payment processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import PaymentProcessorName
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.create(
                processor_name=PaymentProcessorName.BRAINTREE,
                api_keys={"api_keys": "api_keys"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "processors/",
            method="POST",
            json={"processor_name": processor_name, "api_keys": api_keys, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def set_default(
        self, payment_processor_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentProcessorExternal:
        """
        Parameters
        ----------
        payment_processor_id : str
            Unique identifier of the payment_processor.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentProcessorExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processors.set_default(
                payment_processor_id="payment_processor_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(payment_processor_id)}/set-default",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentProcessorExternal, construct_type(type_=PaymentProcessorExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
