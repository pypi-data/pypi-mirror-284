# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.create_subscription_response import CreateSubscriptionResponse
from ..types.date_time_filter import DateTimeFilter
from ..types.delete_subscription_request import DeleteSubscriptionRequest
from ..types.http_validation_error import HttpValidationError
from ..types.inline_subscription_item_update import InlineSubscriptionItemUpdate
from ..types.list_response_subscription_external import ListResponseSubscriptionExternal
from ..types.proration_enum import ProrationEnum
from ..types.selected_price_quantity import SelectedPriceQuantity
from ..types.subscription_external import SubscriptionExternal
from ..types.subscription_status_enum import SubscriptionStatusEnum
from ..types.update_subscription_response import UpdateSubscriptionResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SubscriptionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        product_id: typing.Optional[str] = OMIT,
        price_id: typing.Optional[str] = OMIT,
        status: typing.Optional[SubscriptionStatusEnum] = OMIT,
        current_period_start: typing.Optional[DateTimeFilter] = OMIT,
        current_period_end: typing.Optional[DateTimeFilter] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[SubscriptionExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        customer_id : typing.Optional[str]
            Unique Identifier of the customer.

        product_id : typing.Optional[str]
            Unique identifier of product.

        price_id : typing.Optional[str]
            Unique Identifier of the price.

        status : typing.Optional[SubscriptionStatusEnum]
            Current status of the subscription.

        current_period_start : typing.Optional[DateTimeFilter]
            Filter for selecting subscriptions based on the range of current period starting dates. Includes options for equality, and greater than/less than comparisons.

        current_period_end : typing.Optional[DateTimeFilter]
            Filter for selecting subscriptions based on the range of current period ending dates. Includes options for equality, and greater than/less than comparisons.

        coupon_id : typing.Optional[str]
            Coupon id which is applied to a subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[SubscriptionExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.subscriptions.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "subscriptions/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "customer_id": customer_id,
                "product_id": product_id,
                "price_id": price_id,
                "status": status,
                "current_period_start": current_period_start,
                "current_period_end": current_period_end,
                "coupon_id": coupon_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseSubscriptionExternal, construct_type(type_=ListResponseSubscriptionExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    customer_id=customer_id,
                    product_id=product_id,
                    price_id=price_id,
                    status=status,
                    current_period_start=current_period_start,
                    current_period_end=current_period_end,
                    coupon_id=coupon_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.get(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        subscription_id: str,
        *,
        payment_method_id: typing.Optional[str] = OMIT,
        cancel_at_end: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        proration_behavior: typing.Optional[ProrationEnum] = OMIT,
        trial_end: typing.Optional[dt.datetime] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[InlineSubscriptionItemUpdate]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSubscriptionResponse:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        payment_method_id : typing.Optional[str]
            ID of the default payment method for the subscription. It must belong to the customer associated with the subscription.

        cancel_at_end : typing.Optional[bool]
            Boolean indicating whether this subscription should cancel at the end of the current period.

        description : typing.Optional[str]
            Arbitrary String describing this subscription.

        proration_behavior : typing.Optional[ProrationEnum]
            Determines how to handle prorations when the billable items changes

        trial_end : typing.Optional[dt.datetime]
            ISO datetime representing the end of the trial period the customer will get before being charged for the first time. The operation is only allowed for currently trialing subscriptions

        trial_period_days : typing.Optional[int]
            Integer representing the number of trial period days before the customer is charged for the first time. This are additional days from now, and overwrites current trial_end. The operation is only allowed for currently trialing subscriptions

        coupon_id : typing.Optional[str]
            The ID of the coupon to apply to this subscription. The coupon will also be applied to any subscriptions spawned during update call.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to this subscription. The promotion code will also be applied to any subscriptions spawned during update call.

        items : typing.Optional[typing.Sequence[InlineSubscriptionItemUpdate]]
            A list of up to 20 subscription items, each with an attached price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSubscriptionResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.update(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}",
            method="PUT",
            json={
                "payment_method_id": payment_method_id,
                "cancel_at_end": cancel_at_end,
                "description": description,
                "proration_behavior": proration_behavior,
                "trial_end": trial_end,
                "trial_period_days": trial_period_days,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
                "items": items,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UpdateSubscriptionResponse, construct_type(type_=UpdateSubscriptionResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        subscription_id: str,
        *,
        request: typing.Optional[DeleteSubscriptionRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request : typing.Optional[DeleteSubscriptionRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.delete(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}",
            method="DELETE",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        customer_id: str,
        payment_method_id: str,
        selected_product_price_quantity: typing.Sequence[SelectedPriceQuantity],
        total_amount_atom: int,
        cancel_at_end: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        trial_end: typing.Optional[dt.datetime] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        trial_from_price: typing.Optional[bool] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSubscriptionResponse:
        """
        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        payment_method_id : str
            ID of the default payment method for the subscription. It must belong to the customer associated with the subscription.

        selected_product_price_quantity : typing.Sequence[SelectedPriceQuantity]
            This object contains details of selected product' price and quantity.

        total_amount_atom : int
            Total amount of this subscription. It is in atomic units (in USD this is cents).

        cancel_at_end : typing.Optional[bool]
            Boolean indicating whether this subscription should cancel at the end of the current period.

        description : typing.Optional[str]
            Arbitrary String describing this subscription.

        trial_end : typing.Optional[dt.datetime]
            ISO datetime representing the end of the trial period the customer will get before being charged for the first time.

        trial_period_days : typing.Optional[int]
            Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a price

        trial_from_price : typing.Optional[bool]
            Indicates if a price’s trial_period_days should be applied to the subscription. Setting trial_end per subscription is preferred, and this defaults to false. Setting this flag to true together with trial_end is not allowed. In case of subscription containing multiple prices and the trial period of them are not same, minimum of trial days will be used.

        coupon_id : typing.Optional[str]
            The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSubscriptionResponse
            Successful Response

        Examples
        --------
        from openpay import SelectedPriceQuantity
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.create(
            customer_id="cus_dev_abc123",
            payment_method_id="cc_dev_abc123",
            selected_product_price_quantity=[
                SelectedPriceQuantity(
                    price_id="price_dev_abc123",
                    quantity=2,
                )
            ],
            total_amount_atom=9000,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "subscriptions/",
            method="POST",
            json={
                "customer_id": customer_id,
                "payment_method_id": payment_method_id,
                "selected_product_price_quantity": selected_product_price_quantity,
                "total_amount_atom": total_amount_atom,
                "cancel_at_end": cancel_at_end,
                "description": description,
                "trial_end": trial_end,
                "trial_period_days": trial_period_days,
                "trial_from_price": trial_from_price,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreateSubscriptionResponse, construct_type(type_=CreateSubscriptionResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def pause(
        self,
        subscription_id: str,
        *,
        number_of_billing_cycles_to_skip: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        number_of_billing_cycles_to_skip : int
            Number of billing cycles this subscription will be paused.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.pause(
            subscription_id="subscription_id",
            number_of_billing_cycles_to_skip=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/pause",
            method="PUT",
            json={"number_of_billing_cycles_to_skip": number_of_billing_cycles_to_skip},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def resume(
        self,
        subscription_id: str,
        *,
        proration_behavior: typing.Optional[ProrationEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        proration_behavior : typing.Optional[ProrationEnum]
            Determines how to handle prorations when the subscription is resumed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.resume(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/resume",
            method="PUT",
            json={"proration_behavior": proration_behavior},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_discount(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.delete_discount(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/discount",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def refresh_status(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.refresh_status(
            subscription_id="subscription_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/refresh-status",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseSubscriptionExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseSubscriptionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.subscriptions.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "subscriptions/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseSubscriptionExternal, construct_type(type_=ListResponseSubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSubscriptionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        product_id: typing.Optional[str] = OMIT,
        price_id: typing.Optional[str] = OMIT,
        status: typing.Optional[SubscriptionStatusEnum] = OMIT,
        current_period_start: typing.Optional[DateTimeFilter] = OMIT,
        current_period_end: typing.Optional[DateTimeFilter] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[SubscriptionExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        customer_id : typing.Optional[str]
            Unique Identifier of the customer.

        product_id : typing.Optional[str]
            Unique identifier of product.

        price_id : typing.Optional[str]
            Unique Identifier of the price.

        status : typing.Optional[SubscriptionStatusEnum]
            Current status of the subscription.

        current_period_start : typing.Optional[DateTimeFilter]
            Filter for selecting subscriptions based on the range of current period starting dates. Includes options for equality, and greater than/less than comparisons.

        current_period_end : typing.Optional[DateTimeFilter]
            Filter for selecting subscriptions based on the range of current period ending dates. Includes options for equality, and greater than/less than comparisons.

        coupon_id : typing.Optional[str]
            Coupon id which is applied to a subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[SubscriptionExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.subscriptions.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "subscriptions/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "customer_id": customer_id,
                "product_id": product_id,
                "price_id": price_id,
                "status": status,
                "current_period_start": current_period_start,
                "current_period_end": current_period_end,
                "coupon_id": coupon_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseSubscriptionExternal, construct_type(type_=ListResponseSubscriptionExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    customer_id=customer_id,
                    product_id=product_id,
                    price_id=price_id,
                    status=status,
                    current_period_start=current_period_start,
                    current_period_end=current_period_end,
                    coupon_id=coupon_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.get(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        subscription_id: str,
        *,
        payment_method_id: typing.Optional[str] = OMIT,
        cancel_at_end: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        proration_behavior: typing.Optional[ProrationEnum] = OMIT,
        trial_end: typing.Optional[dt.datetime] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[InlineSubscriptionItemUpdate]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSubscriptionResponse:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        payment_method_id : typing.Optional[str]
            ID of the default payment method for the subscription. It must belong to the customer associated with the subscription.

        cancel_at_end : typing.Optional[bool]
            Boolean indicating whether this subscription should cancel at the end of the current period.

        description : typing.Optional[str]
            Arbitrary String describing this subscription.

        proration_behavior : typing.Optional[ProrationEnum]
            Determines how to handle prorations when the billable items changes

        trial_end : typing.Optional[dt.datetime]
            ISO datetime representing the end of the trial period the customer will get before being charged for the first time. The operation is only allowed for currently trialing subscriptions

        trial_period_days : typing.Optional[int]
            Integer representing the number of trial period days before the customer is charged for the first time. This are additional days from now, and overwrites current trial_end. The operation is only allowed for currently trialing subscriptions

        coupon_id : typing.Optional[str]
            The ID of the coupon to apply to this subscription. The coupon will also be applied to any subscriptions spawned during update call.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to this subscription. The promotion code will also be applied to any subscriptions spawned during update call.

        items : typing.Optional[typing.Sequence[InlineSubscriptionItemUpdate]]
            A list of up to 20 subscription items, each with an attached price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSubscriptionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.update(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}",
            method="PUT",
            json={
                "payment_method_id": payment_method_id,
                "cancel_at_end": cancel_at_end,
                "description": description,
                "proration_behavior": proration_behavior,
                "trial_end": trial_end,
                "trial_period_days": trial_period_days,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
                "items": items,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UpdateSubscriptionResponse, construct_type(type_=UpdateSubscriptionResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        subscription_id: str,
        *,
        request: typing.Optional[DeleteSubscriptionRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request : typing.Optional[DeleteSubscriptionRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.delete(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}",
            method="DELETE",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        customer_id: str,
        payment_method_id: str,
        selected_product_price_quantity: typing.Sequence[SelectedPriceQuantity],
        total_amount_atom: int,
        cancel_at_end: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        trial_end: typing.Optional[dt.datetime] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        trial_from_price: typing.Optional[bool] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSubscriptionResponse:
        """
        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        payment_method_id : str
            ID of the default payment method for the subscription. It must belong to the customer associated with the subscription.

        selected_product_price_quantity : typing.Sequence[SelectedPriceQuantity]
            This object contains details of selected product' price and quantity.

        total_amount_atom : int
            Total amount of this subscription. It is in atomic units (in USD this is cents).

        cancel_at_end : typing.Optional[bool]
            Boolean indicating whether this subscription should cancel at the end of the current period.

        description : typing.Optional[str]
            Arbitrary String describing this subscription.

        trial_end : typing.Optional[dt.datetime]
            ISO datetime representing the end of the trial period the customer will get before being charged for the first time.

        trial_period_days : typing.Optional[int]
            Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a price

        trial_from_price : typing.Optional[bool]
            Indicates if a price’s trial_period_days should be applied to the subscription. Setting trial_end per subscription is preferred, and this defaults to false. Setting this flag to true together with trial_end is not allowed. In case of subscription containing multiple prices and the trial period of them are not same, minimum of trial days will be used.

        coupon_id : typing.Optional[str]
            The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSubscriptionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import SelectedPriceQuantity
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.create(
                customer_id="cus_dev_abc123",
                payment_method_id="cc_dev_abc123",
                selected_product_price_quantity=[
                    SelectedPriceQuantity(
                        price_id="price_dev_abc123",
                        quantity=2,
                    )
                ],
                total_amount_atom=9000,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "subscriptions/",
            method="POST",
            json={
                "customer_id": customer_id,
                "payment_method_id": payment_method_id,
                "selected_product_price_quantity": selected_product_price_quantity,
                "total_amount_atom": total_amount_atom,
                "cancel_at_end": cancel_at_end,
                "description": description,
                "trial_end": trial_end,
                "trial_period_days": trial_period_days,
                "trial_from_price": trial_from_price,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CreateSubscriptionResponse, construct_type(type_=CreateSubscriptionResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def pause(
        self,
        subscription_id: str,
        *,
        number_of_billing_cycles_to_skip: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        number_of_billing_cycles_to_skip : int
            Number of billing cycles this subscription will be paused.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.pause(
                subscription_id="subscription_id",
                number_of_billing_cycles_to_skip=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/pause",
            method="PUT",
            json={"number_of_billing_cycles_to_skip": number_of_billing_cycles_to_skip},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def resume(
        self,
        subscription_id: str,
        *,
        proration_behavior: typing.Optional[ProrationEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        proration_behavior : typing.Optional[ProrationEnum]
            Determines how to handle prorations when the subscription is resumed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.resume(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/resume",
            method="PUT",
            json={"proration_behavior": proration_behavior},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_discount(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.delete_discount(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/discount",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def refresh_status(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionExternal:
        """
        Parameters
        ----------
        subscription_id : str
            Unique identifier of the subscription.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.refresh_status(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"subscriptions/{jsonable_encoder(subscription_id)}/refresh-status",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubscriptionExternal, construct_type(type_=SubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseSubscriptionExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseSubscriptionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.subscriptions.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "subscriptions/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseSubscriptionExternal, construct_type(type_=ListResponseSubscriptionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
