# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.tax_integration_external import TaxIntegrationExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TaxIntegrationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        api_keys: typing.Dict[str, str],
        accounting_tz: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> TaxIntegrationExternal:
        """
        Parameters
        ----------
        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to the tax processor.

        accounting_tz : str
            The timezone name for the accounting timezone (see pytz.all_timezones for a full list)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaxIntegrationExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.tax_integrations.create(
            api_keys={
                "api_key": "00000000000/aaaaaaaaaaaaa/secret.ZZZZZZZZZZZZZZZZZZZZZZZZZZ"
            },
            accounting_tz="US/Pacific",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "integrations/tax/",
            method="POST",
            json={"api_keys": api_keys, "accounting_tz": accounting_tz, "api_name": "anrok_v1"},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(TaxIntegrationExternal, construct_type(type_=TaxIntegrationExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTaxIntegrationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        api_keys: typing.Dict[str, str],
        accounting_tz: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> TaxIntegrationExternal:
        """
        Parameters
        ----------
        api_keys : typing.Dict[str, str]
            These keys will allow to authenticate API requests to the tax processor.

        accounting_tz : str
            The timezone name for the accounting timezone (see pytz.all_timezones for a full list)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaxIntegrationExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tax_integrations.create(
                api_keys={
                    "api_key": "00000000000/aaaaaaaaaaaaa/secret.ZZZZZZZZZZZZZZZZZZZZZZZZZZ"
                },
                accounting_tz="US/Pacific",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "integrations/tax/",
            method="POST",
            json={"api_keys": api_keys, "accounting_tz": accounting_tz, "api_name": "anrok_v1"},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(TaxIntegrationExternal, construct_type(type_=TaxIntegrationExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
