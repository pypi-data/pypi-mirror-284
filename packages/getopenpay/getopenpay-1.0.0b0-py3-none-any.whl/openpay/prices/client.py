# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.calendar_interval_enum import CalendarIntervalEnum
from ..types.currency_enum import CurrencyEnum
from ..types.date_time_filter import DateTimeFilter
from ..types.delete_price_response import DeletePriceResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_price_external import ListResponsePriceExternal
from ..types.price_external import PriceExternal
from ..types.price_tier_params import PriceTierParams
from ..types.price_type_enum import PriceTypeEnum
from ..types.pricing_model import PricingModel
from ..types.usage_agg_method_enum import UsageAggMethodEnum
from ..types.usage_type_enum import UsageTypeEnum

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PricesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        is_active: bool,
        pricing_model: PricingModel,
        price_type: PriceTypeEnum,
        product_id: str,
        internal_description: typing.Optional[str] = OMIT,
        unit_amount_atom: typing.Optional[int] = OMIT,
        transform_quantity_divide_by: typing.Optional[float] = OMIT,
        price_tiers: typing.Optional[typing.Sequence[PriceTierParams]] = OMIT,
        billing_interval: typing.Optional[CalendarIntervalEnum] = OMIT,
        billing_interval_count: typing.Optional[int] = OMIT,
        contract_term_multiple: typing.Optional[int] = OMIT,
        contract_auto_renew: typing.Optional[bool] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        usage_type: typing.Optional[UsageTypeEnum] = OMIT,
        aggregate_usage: typing.Optional[UsageAggMethodEnum] = OMIT,
        default_net_d: typing.Optional[int] = OMIT,
        is_exclusive: typing.Optional[bool] = OMIT,
        listed_exclusively_for_customers: typing.Optional[typing.Sequence[str]] = OMIT,
        can_only_be_purchased_with: typing.Optional[typing.Sequence[str]] = OMIT,
        is_default: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PriceExternal:
        """
        Parameters
        ----------
        is_active : bool
            Whether the price can be used for new purchases.

        pricing_model : PricingModel
            Indicates which pricing model to be used for product.

        price_type : PriceTypeEnum
            One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.

        product_id : str
            Unique identifier of the product.

        internal_description : typing.Optional[str]
            Arbitrary string describing this price.

        unit_amount_atom : typing.Optional[int]
            The unit amount in atomic units (in USD this is cents) to be charged.

        transform_quantity_divide_by : typing.Optional[float]
            This transformation will be applied on quantity before multiplying by unit_amount_atom.

        price_tiers : typing.Optional[typing.Sequence[PriceTierParams]]
            List of price_tiers.

        billing_interval : typing.Optional[CalendarIntervalEnum]
            The interval unit for billing within the contract term (e.g., month, quarter).

        billing_interval_count : typing.Optional[int]
            The number of billing interval units between billing cycles.

        contract_term_multiple : typing.Optional[int]
            Defines a multiple on top of billing_interval, billing_interval_count for which this price should be under contract for.

        contract_auto_renew : typing.Optional[bool]
            Whether or not the contract auto-renews at the end of its term.

        trial_period_days : typing.Optional[int]
            Number of trail days for this Price.

        usage_type : typing.Optional[UsageTypeEnum]
            Configures how the quantity per period should be determined. Can be either 'metered' or 'licensed'. 'licensed' automatically bills the quantity set when adding it to a subscription. 'metered' aggregates the total usage based on usage records. Defaults to 'licensed'.

        aggregate_usage : typing.Optional[UsageAggMethodEnum]
            Specifies a usage aggregation strategy for prices of usage_type 'metered'.

        default_net_d : typing.Optional[int]
            Number of days a customer has to pay invoices generated from this price.If there are mutliple prices in the invoice the minimum net-d will be respected.Value should be within -1 to 365, where -1 represents DUE_IMMEDIATELY.

        is_exclusive : typing.Optional[bool]
            If true, this price is listed exclusively for customers in the `listed_exclusively_for_customers` field.Defaults to False (not exclusive).

        listed_exclusively_for_customers : typing.Optional[typing.Sequence[str]]
            If is_exclusive, this is the initial list of customers who can see the price.Please do not pass a value if a price is not exclusive.

        can_only_be_purchased_with : typing.Optional[typing.Sequence[str]]
            This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.

        is_default : typing.Optional[bool]
            Boolean identifying if this price object is default price for the product or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        from openpay import PriceTypeEnum, PricingModel
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.prices.create(
            is_active=True,
            pricing_model=PricingModel.STANDARD,
            price_type=PriceTypeEnum.ONE_TIME,
            product_id="product_dev_abc123",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "prices/",
            method="POST",
            json={
                "is_active": is_active,
                "internal_description": internal_description,
                "pricing_model": pricing_model,
                "unit_amount_atom": unit_amount_atom,
                "transform_quantity_divide_by": transform_quantity_divide_by,
                "price_tiers": price_tiers,
                "price_type": price_type,
                "billing_interval": billing_interval,
                "billing_interval_count": billing_interval_count,
                "contract_term_multiple": contract_term_multiple,
                "contract_auto_renew": contract_auto_renew,
                "trial_period_days": trial_period_days,
                "usage_type": usage_type,
                "aggregate_usage": aggregate_usage,
                "default_net_d": default_net_d,
                "is_exclusive": is_exclusive,
                "listed_exclusively_for_customers": listed_exclusively_for_customers,
                "can_only_be_purchased_with": can_only_be_purchased_with,
                "product_id": product_id,
                "is_default": is_default,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        product_id: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        price_type: typing.Optional[PriceTypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[PriceExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        product_id : typing.Optional[str]
            Unique identifier of the product.

        is_active : typing.Optional[bool]
            Whether price is active or not.

        currency : typing.Optional[CurrencyEnum]
            Currency in which the price is.

        price_type : typing.Optional[PriceTypeEnum]
            Type of price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[PriceExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.prices.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "prices/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "product_id": product_id,
                "is_active": is_active,
                "currency": currency,
                "price_type": price_type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponsePriceExternal, construct_type(type_=ListResponsePriceExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    product_id=product_id,
                    is_active=is_active,
                    currency=currency,
                    price_type=price_type,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, price_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> PriceExternal:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.prices.get(
            price_id="price_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        price_id: str,
        *,
        is_active: typing.Optional[bool] = OMIT,
        internal_description: typing.Optional[str] = OMIT,
        pricing_model: typing.Optional[PricingModel] = OMIT,
        unit_amount_atom: typing.Optional[int] = OMIT,
        transform_quantity_divide_by: typing.Optional[float] = OMIT,
        price_tiers: typing.Optional[typing.Sequence[PriceTierParams]] = OMIT,
        price_type: typing.Optional[PriceTypeEnum] = OMIT,
        billing_interval: typing.Optional[CalendarIntervalEnum] = OMIT,
        billing_interval_count: typing.Optional[int] = OMIT,
        contract_term_multiple: typing.Optional[int] = OMIT,
        contract_auto_renew: typing.Optional[bool] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        usage_type: typing.Optional[UsageTypeEnum] = OMIT,
        aggregate_usage: typing.Optional[UsageAggMethodEnum] = OMIT,
        default_net_d: typing.Optional[int] = OMIT,
        can_only_be_purchased_with: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PriceExternal:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        is_active : typing.Optional[bool]
            Whether the price can be used for new purchases.

        internal_description : typing.Optional[str]
            Arbitrary string describing this price.

        pricing_model : typing.Optional[PricingModel]
            Indicates which pricing model to be used for product.

        unit_amount_atom : typing.Optional[int]
            The unit amount in atomic units (in USD this is cents) to be charged.

        transform_quantity_divide_by : typing.Optional[float]
            This transformation will be applied on quantity before multiplying by unit_amount_atom.

        price_tiers : typing.Optional[typing.Sequence[PriceTierParams]]
            List of price_tiers.

        price_type : typing.Optional[PriceTypeEnum]
            One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.

        billing_interval : typing.Optional[CalendarIntervalEnum]
            The interval unit for billing within the contract term (e.g., month, quarter).

        billing_interval_count : typing.Optional[int]
            The number of billing interval units between billing cycles.

        contract_term_multiple : typing.Optional[int]
            Defines a multiple on top of billing_interval, billing_interval_count for which this price should be under contract for.

        contract_auto_renew : typing.Optional[bool]
            Whether or not the contract auto-renews at the end of its term.

        trial_period_days : typing.Optional[int]
            Number of trail days for this Price.

        usage_type : typing.Optional[UsageTypeEnum]
            Configures how the quantity per period should be determined. Can be either 'metered' or 'licensed'. 'licensed' automatically bills the quantity set when adding it to a subscription. 'metered' aggregates the total usage based on usage records. Defaults to 'licensed'.

        aggregate_usage : typing.Optional[UsageAggMethodEnum]
            Specifies a usage aggregation strategy for prices of usage_type 'metered'.

        default_net_d : typing.Optional[int]
            Number of days a customer has to pay invoices generated from this price.If there are mutliple prices in the invoice the minimum net-d will be respected.Value should be within -1 to 365, where -1 represents DUE_IMMEDIATELY.

        can_only_be_purchased_with : typing.Optional[typing.Sequence[str]]
            This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.prices.update(
            price_id="price_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}",
            method="PUT",
            json={
                "is_active": is_active,
                "internal_description": internal_description,
                "pricing_model": pricing_model,
                "unit_amount_atom": unit_amount_atom,
                "transform_quantity_divide_by": transform_quantity_divide_by,
                "price_tiers": price_tiers,
                "price_type": price_type,
                "billing_interval": billing_interval,
                "billing_interval_count": billing_interval_count,
                "contract_term_multiple": contract_term_multiple,
                "contract_auto_renew": contract_auto_renew,
                "trial_period_days": trial_period_days,
                "usage_type": usage_type,
                "aggregate_usage": aggregate_usage,
                "default_net_d": default_net_d,
                "can_only_be_purchased_with": can_only_be_purchased_with,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, price_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DeletePriceResponse:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePriceResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.prices.delete(
            price_id="price_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeletePriceResponse, construct_type(type_=DeletePriceResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponsePriceExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePriceExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.prices.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "prices/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePriceExternal, construct_type(type_=ListResponsePriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPricesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        is_active: bool,
        pricing_model: PricingModel,
        price_type: PriceTypeEnum,
        product_id: str,
        internal_description: typing.Optional[str] = OMIT,
        unit_amount_atom: typing.Optional[int] = OMIT,
        transform_quantity_divide_by: typing.Optional[float] = OMIT,
        price_tiers: typing.Optional[typing.Sequence[PriceTierParams]] = OMIT,
        billing_interval: typing.Optional[CalendarIntervalEnum] = OMIT,
        billing_interval_count: typing.Optional[int] = OMIT,
        contract_term_multiple: typing.Optional[int] = OMIT,
        contract_auto_renew: typing.Optional[bool] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        usage_type: typing.Optional[UsageTypeEnum] = OMIT,
        aggregate_usage: typing.Optional[UsageAggMethodEnum] = OMIT,
        default_net_d: typing.Optional[int] = OMIT,
        is_exclusive: typing.Optional[bool] = OMIT,
        listed_exclusively_for_customers: typing.Optional[typing.Sequence[str]] = OMIT,
        can_only_be_purchased_with: typing.Optional[typing.Sequence[str]] = OMIT,
        is_default: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PriceExternal:
        """
        Parameters
        ----------
        is_active : bool
            Whether the price can be used for new purchases.

        pricing_model : PricingModel
            Indicates which pricing model to be used for product.

        price_type : PriceTypeEnum
            One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.

        product_id : str
            Unique identifier of the product.

        internal_description : typing.Optional[str]
            Arbitrary string describing this price.

        unit_amount_atom : typing.Optional[int]
            The unit amount in atomic units (in USD this is cents) to be charged.

        transform_quantity_divide_by : typing.Optional[float]
            This transformation will be applied on quantity before multiplying by unit_amount_atom.

        price_tiers : typing.Optional[typing.Sequence[PriceTierParams]]
            List of price_tiers.

        billing_interval : typing.Optional[CalendarIntervalEnum]
            The interval unit for billing within the contract term (e.g., month, quarter).

        billing_interval_count : typing.Optional[int]
            The number of billing interval units between billing cycles.

        contract_term_multiple : typing.Optional[int]
            Defines a multiple on top of billing_interval, billing_interval_count for which this price should be under contract for.

        contract_auto_renew : typing.Optional[bool]
            Whether or not the contract auto-renews at the end of its term.

        trial_period_days : typing.Optional[int]
            Number of trail days for this Price.

        usage_type : typing.Optional[UsageTypeEnum]
            Configures how the quantity per period should be determined. Can be either 'metered' or 'licensed'. 'licensed' automatically bills the quantity set when adding it to a subscription. 'metered' aggregates the total usage based on usage records. Defaults to 'licensed'.

        aggregate_usage : typing.Optional[UsageAggMethodEnum]
            Specifies a usage aggregation strategy for prices of usage_type 'metered'.

        default_net_d : typing.Optional[int]
            Number of days a customer has to pay invoices generated from this price.If there are mutliple prices in the invoice the minimum net-d will be respected.Value should be within -1 to 365, where -1 represents DUE_IMMEDIATELY.

        is_exclusive : typing.Optional[bool]
            If true, this price is listed exclusively for customers in the `listed_exclusively_for_customers` field.Defaults to False (not exclusive).

        listed_exclusively_for_customers : typing.Optional[typing.Sequence[str]]
            If is_exclusive, this is the initial list of customers who can see the price.Please do not pass a value if a price is not exclusive.

        can_only_be_purchased_with : typing.Optional[typing.Sequence[str]]
            This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.

        is_default : typing.Optional[bool]
            Boolean identifying if this price object is default price for the product or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import PriceTypeEnum, PricingModel
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prices.create(
                is_active=True,
                pricing_model=PricingModel.STANDARD,
                price_type=PriceTypeEnum.ONE_TIME,
                product_id="product_dev_abc123",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "prices/",
            method="POST",
            json={
                "is_active": is_active,
                "internal_description": internal_description,
                "pricing_model": pricing_model,
                "unit_amount_atom": unit_amount_atom,
                "transform_quantity_divide_by": transform_quantity_divide_by,
                "price_tiers": price_tiers,
                "price_type": price_type,
                "billing_interval": billing_interval,
                "billing_interval_count": billing_interval_count,
                "contract_term_multiple": contract_term_multiple,
                "contract_auto_renew": contract_auto_renew,
                "trial_period_days": trial_period_days,
                "usage_type": usage_type,
                "aggregate_usage": aggregate_usage,
                "default_net_d": default_net_d,
                "is_exclusive": is_exclusive,
                "listed_exclusively_for_customers": listed_exclusively_for_customers,
                "can_only_be_purchased_with": can_only_be_purchased_with,
                "product_id": product_id,
                "is_default": is_default,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        product_id: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        price_type: typing.Optional[PriceTypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[PriceExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        product_id : typing.Optional[str]
            Unique identifier of the product.

        is_active : typing.Optional[bool]
            Whether price is active or not.

        currency : typing.Optional[CurrencyEnum]
            Currency in which the price is.

        price_type : typing.Optional[PriceTypeEnum]
            Type of price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[PriceExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.prices.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "prices/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "product_id": product_id,
                "is_active": is_active,
                "currency": currency,
                "price_type": price_type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponsePriceExternal, construct_type(type_=ListResponsePriceExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    product_id=product_id,
                    is_active=is_active,
                    currency=currency,
                    price_type=price_type,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, price_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> PriceExternal:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prices.get(
                price_id="price_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        price_id: str,
        *,
        is_active: typing.Optional[bool] = OMIT,
        internal_description: typing.Optional[str] = OMIT,
        pricing_model: typing.Optional[PricingModel] = OMIT,
        unit_amount_atom: typing.Optional[int] = OMIT,
        transform_quantity_divide_by: typing.Optional[float] = OMIT,
        price_tiers: typing.Optional[typing.Sequence[PriceTierParams]] = OMIT,
        price_type: typing.Optional[PriceTypeEnum] = OMIT,
        billing_interval: typing.Optional[CalendarIntervalEnum] = OMIT,
        billing_interval_count: typing.Optional[int] = OMIT,
        contract_term_multiple: typing.Optional[int] = OMIT,
        contract_auto_renew: typing.Optional[bool] = OMIT,
        trial_period_days: typing.Optional[int] = OMIT,
        usage_type: typing.Optional[UsageTypeEnum] = OMIT,
        aggregate_usage: typing.Optional[UsageAggMethodEnum] = OMIT,
        default_net_d: typing.Optional[int] = OMIT,
        can_only_be_purchased_with: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PriceExternal:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        is_active : typing.Optional[bool]
            Whether the price can be used for new purchases.

        internal_description : typing.Optional[str]
            Arbitrary string describing this price.

        pricing_model : typing.Optional[PricingModel]
            Indicates which pricing model to be used for product.

        unit_amount_atom : typing.Optional[int]
            The unit amount in atomic units (in USD this is cents) to be charged.

        transform_quantity_divide_by : typing.Optional[float]
            This transformation will be applied on quantity before multiplying by unit_amount_atom.

        price_tiers : typing.Optional[typing.Sequence[PriceTierParams]]
            List of price_tiers.

        price_type : typing.Optional[PriceTypeEnum]
            One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.

        billing_interval : typing.Optional[CalendarIntervalEnum]
            The interval unit for billing within the contract term (e.g., month, quarter).

        billing_interval_count : typing.Optional[int]
            The number of billing interval units between billing cycles.

        contract_term_multiple : typing.Optional[int]
            Defines a multiple on top of billing_interval, billing_interval_count for which this price should be under contract for.

        contract_auto_renew : typing.Optional[bool]
            Whether or not the contract auto-renews at the end of its term.

        trial_period_days : typing.Optional[int]
            Number of trail days for this Price.

        usage_type : typing.Optional[UsageTypeEnum]
            Configures how the quantity per period should be determined. Can be either 'metered' or 'licensed'. 'licensed' automatically bills the quantity set when adding it to a subscription. 'metered' aggregates the total usage based on usage records. Defaults to 'licensed'.

        aggregate_usage : typing.Optional[UsageAggMethodEnum]
            Specifies a usage aggregation strategy for prices of usage_type 'metered'.

        default_net_d : typing.Optional[int]
            Number of days a customer has to pay invoices generated from this price.If there are mutliple prices in the invoice the minimum net-d will be respected.Value should be within -1 to 365, where -1 represents DUE_IMMEDIATELY.

        can_only_be_purchased_with : typing.Optional[typing.Sequence[str]]
            This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PriceExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prices.update(
                price_id="price_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}",
            method="PUT",
            json={
                "is_active": is_active,
                "internal_description": internal_description,
                "pricing_model": pricing_model,
                "unit_amount_atom": unit_amount_atom,
                "transform_quantity_divide_by": transform_quantity_divide_by,
                "price_tiers": price_tiers,
                "price_type": price_type,
                "billing_interval": billing_interval,
                "billing_interval_count": billing_interval_count,
                "contract_term_multiple": contract_term_multiple,
                "contract_auto_renew": contract_auto_renew,
                "trial_period_days": trial_period_days,
                "usage_type": usage_type,
                "aggregate_usage": aggregate_usage,
                "default_net_d": default_net_d,
                "can_only_be_purchased_with": can_only_be_purchased_with,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PriceExternal, construct_type(type_=PriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, price_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePriceResponse:
        """
        Parameters
        ----------
        price_id : str
            Unique identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePriceResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prices.delete(
                price_id="price_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prices/{jsonable_encoder(price_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeletePriceResponse, construct_type(type_=DeletePriceResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponsePriceExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePriceExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prices.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "prices/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePriceExternal, construct_type(type_=ListResponsePriceExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
