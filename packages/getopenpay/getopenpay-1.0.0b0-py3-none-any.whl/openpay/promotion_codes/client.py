# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.date_time_filter import DateTimeFilter
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_promotion_code_external import ListResponsePromotionCodeExternal
from ..types.promo_restrictions import PromoRestrictions
from ..types.promotion_code_external import PromotionCodeExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PromotionCodesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        coupon_id: str,
        code: str,
        customer_id: typing.Optional[str] = OMIT,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        max_redemptions: typing.Optional[int] = OMIT,
        restrictions: typing.Optional[PromoRestrictions] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        coupon_id : str
            The unique id of coupon for this promotion code.

        code : str
            The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer.

        customer_id : typing.Optional[str]
            The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.

        expires_at : typing.Optional[dt.datetime]
            ISO datetime at which this promotion code will expire. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.

        max_redemptions : typing.Optional[int]
            A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.

        restrictions : typing.Optional[PromoRestrictions]
            Settings that restrict the redemption of the promotion code.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.promotion_codes.create(
            coupon_id="coupon_id",
            code="code",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "promotion-codes/",
            method="POST",
            json={
                "coupon_id": coupon_id,
                "code": code,
                "customer_id": customer_id,
                "expires_at": expires_at,
                "max_redemptions": max_redemptions,
                "restrictions": restrictions,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        code: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[PromotionCodeExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        coupon_id : typing.Optional[str]
            Only return promotion codes for this coupon.

        customer_id : typing.Optional[str]
            Only return promotion codes that are restricted to this customer.

        is_active : typing.Optional[bool]

        code : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[PromotionCodeExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.promotion_codes.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "promotion-codes/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "coupon_id": coupon_id,
                "customer_id": customer_id,
                "is_active": is_active,
                "code": code,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponsePromotionCodeExternal, construct_type(type_=ListResponsePromotionCodeExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    coupon_id=coupon_id,
                    customer_id=customer_id,
                    is_active=is_active,
                    code=code,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, promo_code_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        promo_code_id : str
            Unique identifier of the PromotionCode.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.promotion_codes.get(
            promo_code_id="promo_code_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"promotion-codes/{jsonable_encoder(promo_code_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, promo_code_id: str, *, is_active: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        promo_code_id : str
            Unique identifier of the PromotionCode.

        is_active : bool
            Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.promotion_codes.update(
            promo_code_id="promo_code_id",
            is_active=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"promotion-codes/{jsonable_encoder(promo_code_id)}",
            method="PUT",
            json={"is_active": is_active},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPromotionCodesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        coupon_id: str,
        code: str,
        customer_id: typing.Optional[str] = OMIT,
        expires_at: typing.Optional[dt.datetime] = OMIT,
        max_redemptions: typing.Optional[int] = OMIT,
        restrictions: typing.Optional[PromoRestrictions] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        coupon_id : str
            The unique id of coupon for this promotion code.

        code : str
            The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer.

        customer_id : typing.Optional[str]
            The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.

        expires_at : typing.Optional[dt.datetime]
            ISO datetime at which this promotion code will expire. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.

        max_redemptions : typing.Optional[int]
            A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.

        restrictions : typing.Optional[PromoRestrictions]
            Settings that restrict the redemption of the promotion code.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.promotion_codes.create(
                coupon_id="coupon_id",
                code="code",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "promotion-codes/",
            method="POST",
            json={
                "coupon_id": coupon_id,
                "code": code,
                "customer_id": customer_id,
                "expires_at": expires_at,
                "max_redemptions": max_redemptions,
                "restrictions": restrictions,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        code: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[PromotionCodeExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        coupon_id : typing.Optional[str]
            Only return promotion codes for this coupon.

        customer_id : typing.Optional[str]
            Only return promotion codes that are restricted to this customer.

        is_active : typing.Optional[bool]

        code : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[PromotionCodeExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.promotion_codes.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "promotion-codes/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "coupon_id": coupon_id,
                "customer_id": customer_id,
                "is_active": is_active,
                "code": code,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponsePromotionCodeExternal, construct_type(type_=ListResponsePromotionCodeExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    coupon_id=coupon_id,
                    customer_id=customer_id,
                    is_active=is_active,
                    code=code,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, promo_code_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        promo_code_id : str
            Unique identifier of the PromotionCode.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.promotion_codes.get(
                promo_code_id="promo_code_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"promotion-codes/{jsonable_encoder(promo_code_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, promo_code_id: str, *, is_active: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> PromotionCodeExternal:
        """
        Parameters
        ----------
        promo_code_id : str
            Unique identifier of the PromotionCode.

        is_active : bool
            Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromotionCodeExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.promotion_codes.update(
                promo_code_id="promo_code_id",
                is_active=True,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"promotion-codes/{jsonable_encoder(promo_code_id)}",
            method="PUT",
            json={"is_active": is_active},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PromotionCodeExternal, construct_type(type_=PromotionCodeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
