# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.coupon_duration import CouponDuration
from ..types.coupon_external import CouponExternal
from ..types.currency_enum import CurrencyEnum
from ..types.date_time_filter import DateTimeFilter
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_coupon_external import ListResponseCouponExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CouponsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        name: str,
        amount_atom_off: typing.Optional[int] = OMIT,
        percent_off: typing.Optional[int] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        duration: typing.Optional[CouponDuration] = OMIT,
        duration_in_months: typing.Optional[int] = OMIT,
        product_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        product_family_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        max_redemptions: typing.Optional[int] = OMIT,
        redeem_by: typing.Optional[dt.datetime] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CouponExternal:
        """
        Parameters
        ----------
        name : str
            Name of the coupon displayed to customers on, for instance invoices, or receipts.

        amount_atom_off : typing.Optional[int]
            A positive integer representing the amount to subtract from an invoice total (required if percent_off is not passed).

        percent_off : typing.Optional[int]
            A positive int larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if amount_atom_off is not passed).

        currency : typing.Optional[CurrencyEnum]
            Three-letter ISO code for the currency of the amount_atom_off parameter (required if amount_atom_off is passed).

        duration : typing.Optional[CouponDuration]
            Specifies how long the discount will be in effect if used on a subscription. Defaults to once.

        duration_in_months : typing.Optional[int]
            Required only if duration is repeating, in which case it must be a positive integer that specifies the number of months the discount will be in effect.

        product_ids : typing.Optional[typing.Sequence[str]]
            An array of Product IDs that this Coupon can apply to.

        product_family_ids : typing.Optional[typing.Sequence[str]]
            An array of Product Family IDs that this Coupon can apply to.

        max_redemptions : typing.Optional[int]
            A positive integer specifying the number of times the coupon can be redeemed before itâ€™s no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.

        redeem_by : typing.Optional[dt.datetime]
            Datetime specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.

        is_active : typing.Optional[bool]
            Whether the coupon is available to be redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.coupons.create(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "coupons/",
            method="POST",
            json={
                "name": name,
                "amount_atom_off": amount_atom_off,
                "percent_off": percent_off,
                "currency": currency,
                "duration": duration,
                "duration_in_months": duration_in_months,
                "product_ids": product_ids,
                "product_family_ids": product_family_ids,
                "max_redemptions": max_redemptions,
                "redeem_by": redeem_by,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CouponExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        is_active : typing.Optional[bool]
            Whether coupon is active or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CouponExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.coupons.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "coupons/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCouponExternal, construct_type(type_=ListResponseCouponExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    is_active=is_active,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, coupon_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> CouponExternal:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.coupons.get(
            coupon_id="coupon_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        coupon_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CouponExternal:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        name : typing.Optional[str]
            Name of the coupon displayed to customers on, for instance invoices, or receipts.

        is_active : typing.Optional[bool]
            Whether the coupon is available to be redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.coupons.update(
            coupon_id="coupon_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}",
            method="PUT",
            json={"name": name, "is_active": is_active},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, coupon_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.coupons.delete(
            coupon_id="coupon_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.Any, construct_type(type_=typing.Any, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCouponsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        name: str,
        amount_atom_off: typing.Optional[int] = OMIT,
        percent_off: typing.Optional[int] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        duration: typing.Optional[CouponDuration] = OMIT,
        duration_in_months: typing.Optional[int] = OMIT,
        product_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        product_family_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        max_redemptions: typing.Optional[int] = OMIT,
        redeem_by: typing.Optional[dt.datetime] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CouponExternal:
        """
        Parameters
        ----------
        name : str
            Name of the coupon displayed to customers on, for instance invoices, or receipts.

        amount_atom_off : typing.Optional[int]
            A positive integer representing the amount to subtract from an invoice total (required if percent_off is not passed).

        percent_off : typing.Optional[int]
            A positive int larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if amount_atom_off is not passed).

        currency : typing.Optional[CurrencyEnum]
            Three-letter ISO code for the currency of the amount_atom_off parameter (required if amount_atom_off is passed).

        duration : typing.Optional[CouponDuration]
            Specifies how long the discount will be in effect if used on a subscription. Defaults to once.

        duration_in_months : typing.Optional[int]
            Required only if duration is repeating, in which case it must be a positive integer that specifies the number of months the discount will be in effect.

        product_ids : typing.Optional[typing.Sequence[str]]
            An array of Product IDs that this Coupon can apply to.

        product_family_ids : typing.Optional[typing.Sequence[str]]
            An array of Product Family IDs that this Coupon can apply to.

        max_redemptions : typing.Optional[int]
            A positive integer specifying the number of times the coupon can be redeemed before itâ€™s no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.

        redeem_by : typing.Optional[dt.datetime]
            Datetime specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.

        is_active : typing.Optional[bool]
            Whether the coupon is available to be redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.coupons.create(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "coupons/",
            method="POST",
            json={
                "name": name,
                "amount_atom_off": amount_atom_off,
                "percent_off": percent_off,
                "currency": currency,
                "duration": duration,
                "duration_in_months": duration_in_months,
                "product_ids": product_ids,
                "product_family_ids": product_family_ids,
                "max_redemptions": max_redemptions,
                "redeem_by": redeem_by,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CouponExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        is_active : typing.Optional[bool]
            Whether coupon is active or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CouponExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.coupons.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "coupons/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCouponExternal, construct_type(type_=ListResponseCouponExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    is_active=is_active,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, coupon_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> CouponExternal:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.coupons.get(
                coupon_id="coupon_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        coupon_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CouponExternal:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        name : typing.Optional[str]
            Name of the coupon displayed to customers on, for instance invoices, or receipts.

        is_active : typing.Optional[bool]
            Whether the coupon is available to be redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CouponExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.coupons.update(
                coupon_id="coupon_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}",
            method="PUT",
            json={"name": name, "is_active": is_active},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CouponExternal, construct_type(type_=CouponExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, coupon_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters
        ----------
        coupon_id : str
            Unique identifier of the Coupon.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.coupons.delete(
                coupon_id="coupon_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"coupons/{jsonable_encoder(coupon_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.Any, construct_type(type_=typing.Any, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
