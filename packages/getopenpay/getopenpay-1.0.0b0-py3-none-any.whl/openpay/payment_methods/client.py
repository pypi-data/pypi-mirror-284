# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.payment_method_external import PaymentMethodExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PaymentMethodsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self, payment_method_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.payment_methods.get(
            payment_method_id="payment_method_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def attach(
        self, payment_method_id: str, *, customer_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Attaches the payment_method to a customer.
        A Payment_method must be attached to a customer before it can be used for payment.
        Once attached to a customer, it can not be reattached to a different customer.

        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        customer_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.payment_methods.attach(
            payment_method_id="payment_method_id",
            customer_id="cus_dev_abc123",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/attach",
            method="POST",
            json={"customer_id": customer_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def detach(
        self, payment_method_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Detaches a payment method from a customer.

        A detached payment method can no longer be used for payment,
        nor can it be reattached to the same or a different customer.

        A payment method cannot be detached if it is the default payment
        method for at least one customer, invoice, or active subscription.

        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.payment_methods.detach(
            payment_method_id="payment_method_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/detach",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def authorize_credit_card(
        self,
        payment_method_id: str,
        *,
        authorization_amount_atom: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodExternal:
        """
        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        authorization_amount_atom : typing.Optional[int]
            Amount to authorize in the smallest currency unit (e.g., cents).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.payment_methods.authorize_credit_card(
            payment_method_id="payment_method_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/authorize",
            method="PUT",
            params={"authorization_amount_atom": authorization_amount_atom},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPaymentMethodsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self, payment_method_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_methods.get(
                payment_method_id="payment_method_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def attach(
        self, payment_method_id: str, *, customer_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Attaches the payment_method to a customer.
        A Payment_method must be attached to a customer before it can be used for payment.
        Once attached to a customer, it can not be reattached to a different customer.

        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        customer_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_methods.attach(
                payment_method_id="payment_method_id",
                customer_id="cus_dev_abc123",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/attach",
            method="POST",
            json={"customer_id": customer_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def detach(
        self, payment_method_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentMethodExternal:
        """
        Detaches a payment method from a customer.

        A detached payment method can no longer be used for payment,
        nor can it be reattached to the same or a different customer.

        A payment method cannot be detached if it is the default payment
        method for at least one customer, invoice, or active subscription.

        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_methods.detach(
                payment_method_id="payment_method_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/detach",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def authorize_credit_card(
        self,
        payment_method_id: str,
        *,
        authorization_amount_atom: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodExternal:
        """
        Parameters
        ----------
        payment_method_id : str
            Unique Identifier of the payment_method.

        authorization_amount_atom : typing.Optional[int]
            Amount to authorize in the smallest currency unit (e.g., cents).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_methods.authorize_credit_card(
                payment_method_id="payment_method_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"payment-methods/{jsonable_encoder(payment_method_id)}/authorize",
            method="PUT",
            params={"authorization_amount_atom": authorization_amount_atom},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(PaymentMethodExternal, construct_type(type_=PaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
