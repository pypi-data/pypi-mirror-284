# This file was auto-generated by Fern from our API Definition.

import os
import typing

import httpx

from .accounts.client import AccountsClient, AsyncAccountsClient
from .api_tokens.client import ApiTokensClient, AsyncApiTokensClient
from .authentication.client import AsyncAuthenticationClient, AuthenticationClient
from .billing_portal.client import AsyncBillingPortalClient, BillingPortalClient
from .charges.client import AsyncChargesClient, ChargesClient
from .checkout.client import AsyncCheckoutClient, CheckoutClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .coupons.client import AsyncCouponsClient, CouponsClient
from .credit_notes.client import AsyncCreditNotesClient, CreditNotesClient
from .customers.client import AsyncCustomersClient, CustomersClient
from .environment import OpenPayEnvironment
from .events.client import AsyncEventsClient, EventsClient
from .invites.client import AsyncInvitesClient, InvitesClient
from .invoice_items.client import AsyncInvoiceItemsClient, InvoiceItemsClient
from .invoices.client import AsyncInvoicesClient, InvoicesClient
from .payment_intents.client import AsyncPaymentIntentsClient, PaymentIntentsClient
from .payment_links.client import AsyncPaymentLinksClient, PaymentLinksClient
from .payment_methods.client import AsyncPaymentMethodsClient, PaymentMethodsClient
from .prices.client import AsyncPricesClient, PricesClient
from .processors.client import AsyncProcessorsClient, ProcessorsClient
from .product_family.client import AsyncProductFamilyClient, ProductFamilyClient
from .products.client import AsyncProductsClient, ProductsClient
from .promotion_codes.client import AsyncPromotionCodesClient, PromotionCodesClient
from .refunds.client import AsyncRefundsClient, RefundsClient
from .subscription_items.client import AsyncSubscriptionItemsClient, SubscriptionItemsClient
from .subscriptions.client import AsyncSubscriptionsClient, SubscriptionsClient
from .tax_integrations.client import AsyncTaxIntegrationsClient, TaxIntegrationsClient
from .transition_eligibility.client import AsyncTransitionEligibilityClient, TransitionEligibilityClient
from .usage_records.client import AsyncUsageRecordsClient, UsageRecordsClient
from .users.client import AsyncUsersClient, UsersClient
from .webhooks.client import AsyncWebhooksClient, WebhooksClient


class OpenPay:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : OpenPayEnvironment
        The environment to use for requests from the client. from .environment import OpenPayEnvironment



        Defaults to OpenPayEnvironment.PRODUCTION



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from openpay.client import OpenPay

    client = OpenPay(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: OpenPayEnvironment = OpenPayEnvironment.PRODUCTION,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("OPENPAY_TOKEN"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.api_tokens = ApiTokensClient(client_wrapper=self._client_wrapper)
        self.authentication = AuthenticationClient(client_wrapper=self._client_wrapper)
        self.charges = ChargesClient(client_wrapper=self._client_wrapper)
        self.credit_notes = CreditNotesClient(client_wrapper=self._client_wrapper)
        self.coupons = CouponsClient(client_wrapper=self._client_wrapper)
        self.customers = CustomersClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.invites = InvitesClient(client_wrapper=self._client_wrapper)
        self.invoices = InvoicesClient(client_wrapper=self._client_wrapper)
        self.invoice_items = InvoiceItemsClient(client_wrapper=self._client_wrapper)
        self.payment_intents = PaymentIntentsClient(client_wrapper=self._client_wrapper)
        self.payment_methods = PaymentMethodsClient(client_wrapper=self._client_wrapper)
        self.processors = ProcessorsClient(client_wrapper=self._client_wrapper)
        self.products = ProductsClient(client_wrapper=self._client_wrapper)
        self.prices = PricesClient(client_wrapper=self._client_wrapper)
        self.promotion_codes = PromotionCodesClient(client_wrapper=self._client_wrapper)
        self.refunds = RefundsClient(client_wrapper=self._client_wrapper)
        self.subscriptions = SubscriptionsClient(client_wrapper=self._client_wrapper)
        self.subscription_items = SubscriptionItemsClient(client_wrapper=self._client_wrapper)
        self.usage_records = UsageRecordsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.transition_eligibility = TransitionEligibilityClient(client_wrapper=self._client_wrapper)
        self.checkout = CheckoutClient(client_wrapper=self._client_wrapper)
        self.product_family = ProductFamilyClient(client_wrapper=self._client_wrapper)
        self.billing_portal = BillingPortalClient(client_wrapper=self._client_wrapper)
        self.payment_links = PaymentLinksClient(client_wrapper=self._client_wrapper)
        self.tax_integrations = TaxIntegrationsClient(client_wrapper=self._client_wrapper)


class AsyncOpenPay:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : OpenPayEnvironment
        The environment to use for requests from the client. from .environment import OpenPayEnvironment



        Defaults to OpenPayEnvironment.PRODUCTION



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from openpay.client import AsyncOpenPay

    client = AsyncOpenPay(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: OpenPayEnvironment = OpenPayEnvironment.PRODUCTION,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("OPENPAY_TOKEN"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.api_tokens = AsyncApiTokensClient(client_wrapper=self._client_wrapper)
        self.authentication = AsyncAuthenticationClient(client_wrapper=self._client_wrapper)
        self.charges = AsyncChargesClient(client_wrapper=self._client_wrapper)
        self.credit_notes = AsyncCreditNotesClient(client_wrapper=self._client_wrapper)
        self.coupons = AsyncCouponsClient(client_wrapper=self._client_wrapper)
        self.customers = AsyncCustomersClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.invites = AsyncInvitesClient(client_wrapper=self._client_wrapper)
        self.invoices = AsyncInvoicesClient(client_wrapper=self._client_wrapper)
        self.invoice_items = AsyncInvoiceItemsClient(client_wrapper=self._client_wrapper)
        self.payment_intents = AsyncPaymentIntentsClient(client_wrapper=self._client_wrapper)
        self.payment_methods = AsyncPaymentMethodsClient(client_wrapper=self._client_wrapper)
        self.processors = AsyncProcessorsClient(client_wrapper=self._client_wrapper)
        self.products = AsyncProductsClient(client_wrapper=self._client_wrapper)
        self.prices = AsyncPricesClient(client_wrapper=self._client_wrapper)
        self.promotion_codes = AsyncPromotionCodesClient(client_wrapper=self._client_wrapper)
        self.refunds = AsyncRefundsClient(client_wrapper=self._client_wrapper)
        self.subscriptions = AsyncSubscriptionsClient(client_wrapper=self._client_wrapper)
        self.subscription_items = AsyncSubscriptionItemsClient(client_wrapper=self._client_wrapper)
        self.usage_records = AsyncUsageRecordsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.transition_eligibility = AsyncTransitionEligibilityClient(client_wrapper=self._client_wrapper)
        self.checkout = AsyncCheckoutClient(client_wrapper=self._client_wrapper)
        self.product_family = AsyncProductFamilyClient(client_wrapper=self._client_wrapper)
        self.billing_portal = AsyncBillingPortalClient(client_wrapper=self._client_wrapper)
        self.payment_links = AsyncPaymentLinksClient(client_wrapper=self._client_wrapper)
        self.tax_integrations = AsyncTaxIntegrationsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: OpenPayEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
