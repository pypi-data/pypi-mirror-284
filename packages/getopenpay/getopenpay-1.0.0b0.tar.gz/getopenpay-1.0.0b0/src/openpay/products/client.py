# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.date_time_filter import DateTimeFilter
from ..types.delete_product_response import DeleteProductResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_product_external import ListResponseProductExternal
from ..types.product_external import ProductExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProductsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        created_by: typing.Optional[str] = OMIT,
        name_contains: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[ProductExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        is_active : typing.Optional[bool]
            Whether product is active or not.

        created_by : typing.Optional[str]
            Unique identifier of user who created the product.

        name_contains : typing.Optional[str]
            List only products containing this string (case-insensitive).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[ProductExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.products.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "products/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "is_active": is_active,
                "created_by": created_by,
                "name_contains": name_contains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseProductExternal, construct_type(type_=ListResponseProductExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    is_active=is_active,
                    created_by=created_by,
                    name_contains=name_contains,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, product_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProductExternal:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.products.get(
            product_id="product_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        product_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        account_sku: typing.Optional[str] = OMIT,
        features: typing.Optional[typing.Sequence[str]] = OMIT,
        unit_label: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        default_price_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProductExternal:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        name : typing.Optional[str]
            Name of product.

        description : typing.Optional[str]
            Product's description.

        account_sku : typing.Optional[str]
            SKU for given product. eg. Barcode numbers of inventory item.

        features : typing.Optional[typing.Sequence[str]]
            List of product features.

        unit_label : typing.Optional[str]
            A label that represents units of this product.

        is_active : typing.Optional[bool]
            Whether or not this product is accepting new subscriptions.

        default_price_id : typing.Optional[int]
            Unique identifier of the default price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.products.update(
            product_id="product_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "account_sku": account_sku,
                "features": features,
                "unit_label": unit_label,
                "is_active": is_active,
                "default_price_id": default_price_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, product_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteProductResponse:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProductResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.products.delete(
            product_id="product_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeleteProductResponse, construct_type(type_=DeleteProductResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: str,
        account_sku: typing.Optional[str] = OMIT,
        features: typing.Optional[typing.Sequence[str]] = OMIT,
        unit_label: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProductExternal:
        """
        Parameters
        ----------
        name : str
            Name of product.

        description : str
            Product's description.

        account_sku : typing.Optional[str]
            SKU for given product. eg. Barcode numbers of inventory item.

        features : typing.Optional[typing.Sequence[str]]
            List of product features.

        unit_label : typing.Optional[str]
            A label that represents units of this product.

        is_active : typing.Optional[bool]
            Whether or not this product is accepting new subscriptions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.products.create(
            name="product1",
            description="This is description for product1",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "products/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "account_sku": account_sku,
                "features": features,
                "unit_label": unit_label,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseProductExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseProductExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.products.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "products/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseProductExternal, construct_type(type_=ListResponseProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProductsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        created_by: typing.Optional[str] = OMIT,
        name_contains: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[ProductExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        is_active : typing.Optional[bool]
            Whether product is active or not.

        created_by : typing.Optional[str]
            Unique identifier of user who created the product.

        name_contains : typing.Optional[str]
            List only products containing this string (case-insensitive).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[ProductExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.products.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "products/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "is_active": is_active,
                "created_by": created_by,
                "name_contains": name_contains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseProductExternal, construct_type(type_=ListResponseProductExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    is_active=is_active,
                    created_by=created_by,
                    name_contains=name_contains,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, product_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProductExternal:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.products.get(
                product_id="product_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        product_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        account_sku: typing.Optional[str] = OMIT,
        features: typing.Optional[typing.Sequence[str]] = OMIT,
        unit_label: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        default_price_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProductExternal:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        name : typing.Optional[str]
            Name of product.

        description : typing.Optional[str]
            Product's description.

        account_sku : typing.Optional[str]
            SKU for given product. eg. Barcode numbers of inventory item.

        features : typing.Optional[typing.Sequence[str]]
            List of product features.

        unit_label : typing.Optional[str]
            A label that represents units of this product.

        is_active : typing.Optional[bool]
            Whether or not this product is accepting new subscriptions.

        default_price_id : typing.Optional[int]
            Unique identifier of the default price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.products.update(
                product_id="product_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "account_sku": account_sku,
                "features": features,
                "unit_label": unit_label,
                "is_active": is_active,
                "default_price_id": default_price_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, product_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteProductResponse:
        """
        Parameters
        ----------
        product_id : str
            Unique identifier of the product.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProductResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.products.delete(
                product_id="product_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"products/{jsonable_encoder(product_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeleteProductResponse, construct_type(type_=DeleteProductResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: str,
        account_sku: typing.Optional[str] = OMIT,
        features: typing.Optional[typing.Sequence[str]] = OMIT,
        unit_label: typing.Optional[str] = OMIT,
        is_active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProductExternal:
        """
        Parameters
        ----------
        name : str
            Name of product.

        description : str
            Product's description.

        account_sku : typing.Optional[str]
            SKU for given product. eg. Barcode numbers of inventory item.

        features : typing.Optional[typing.Sequence[str]]
            List of product features.

        unit_label : typing.Optional[str]
            A label that represents units of this product.

        is_active : typing.Optional[bool]
            Whether or not this product is accepting new subscriptions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProductExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.products.create(
                name="product1",
                description="This is description for product1",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "products/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "account_sku": account_sku,
                "features": features,
                "unit_label": unit_label,
                "is_active": is_active,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ProductExternal, construct_type(type_=ProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseProductExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseProductExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.products.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "products/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseProductExternal, construct_type(type_=ListResponseProductExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
