# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.active_sub_response import ActiveSubResponse
from ..types.currency_enum import CurrencyEnum
from ..types.customer_balance_transaction_external import CustomerBalanceTransactionExternal
from ..types.customer_external import CustomerExternal
from ..types.date_time_filter import DateTimeFilter
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_customer_external import ListResponseCustomerExternal
from ..types.list_response_payment_method_external import ListResponsePaymentMethodExternal
from ..types.payment_provider_type import PaymentProviderType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CustomersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        email: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CustomerExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        email : typing.Optional[str]
            Email Address of the customer.

        coupon_id : typing.Optional[str]
            Coupon id which is applied to a customer.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CustomerExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.customers.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "customers/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "email": email,
                "coupon_id": coupon_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCustomerExternal, construct_type(type_=ListResponseCustomerExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    email=email,
                    coupon_id=coupon_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        customer_id: str,
        *,
        expand: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_id : str

        expand : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.get(
            customer_id="customer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}",
            method="GET",
            params={"expand": expand},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        first_name: str,
        last_name: str,
        state: str,
        country: str,
        zip_code: str,
        email: str,
        line_1: typing.Optional[str] = OMIT,
        line_2: typing.Optional[str] = OMIT,
        line_3: typing.Optional[str] = OMIT,
        city: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        first_name : str
            The customer’s first name.

        last_name : str
            The customer’s last name.

        state : str
            State, province, or region.

        country : str
            Country name. If possible two-letter country code.

        zip_code : str
            ZIP or postal code.

        email : str
            The customer’s email address.

        line_1 : typing.Optional[str]
            Address line 1.

        line_2 : typing.Optional[str]
            Address line 2.

        line_3 : typing.Optional[str]
            Address line 3.

        city : typing.Optional[str]
            City, district, suburb, town, or village.

        coupon_id : typing.Optional[str]
            If you provide a coupon_id, the customer will have a discount applied on all recurring charges. If there is an existing customer, this coupon will override it.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to the customer. This is not PromotionCode alphabetic code. PromotionCode with restrictions cannot be redeemed on a customer. The customer will have a discount applied on all recurring payments. This is effectively same as proving Coupon attached to the promotion_code. If there is an existing customer, this will override it.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.create(
            first_name="john",
            last_name="doe",
            state="California",
            country="US",
            zip_code="90001",
            email="johndoes@xyz.com",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "customers/",
            method="POST",
            json={
                "first_name": first_name,
                "last_name": last_name,
                "line1": line_1,
                "line2": line_2,
                "line3": line_3,
                "city": city,
                "state": state,
                "country": country,
                "zip_code": zip_code,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
                "email": email,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        customer_external_id: str,
        *,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        line_1: typing.Optional[str] = OMIT,
        line_2: typing.Optional[str] = OMIT,
        line_3: typing.Optional[str] = OMIT,
        city: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        country: typing.Optional[str] = OMIT,
        zip_code: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_external_id : str

        first_name : typing.Optional[str]
            The customer’s first name.

        last_name : typing.Optional[str]
            The customer’s last name.

        line_1 : typing.Optional[str]
            Address line 1.

        line_2 : typing.Optional[str]
            Address line 2.

        line_3 : typing.Optional[str]
            Address line 3.

        city : typing.Optional[str]
            City, district, suburb, town, or village.

        state : typing.Optional[str]
            State, province, or region.

        country : typing.Optional[str]
            Country name. If possible two-letter country code.

        zip_code : typing.Optional[str]
            ZIP or postal code.

        coupon_id : typing.Optional[str]
            If you provide a coupon_id, the customer will have a discount applied on all recurring charges. If there is an existing customer, this coupon will override it.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to the customer. This is not PromotionCode alphabetic code. PromotionCode with restrictions cannot be redeemed on a customer. The customer will have a discount applied on all recurring payments. This is effectively same as proving Coupon attached to the promotion_code. If there is an existing customer, this will override it.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.update(
            customer_external_id="customer_external_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_external_id)}",
            method="PUT",
            json={
                "first_name": first_name,
                "last_name": last_name,
                "line1": line_1,
                "line2": line_2,
                "line3": line_3,
                "city": city,
                "state": state,
                "country": country,
                "zip_code": zip_code,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_discount(
        self, customer_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.delete_discount(
            customer_id="customer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/discount", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_payment_methods(
        self,
        customer_id: str,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        provider_type: typing.Optional[PaymentProviderType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponsePaymentMethodExternal:
        """
        Retrieves payment methods for a given customer.
        Can optionally filter by payment provider type.

        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        provider_type : typing.Optional[PaymentProviderType]
            Filter by the payment provider type.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePaymentMethodExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.list_payment_methods(
            customer_id="customer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/payment-methods",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "provider_type": provider_type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePaymentMethodExternal, construct_type(type_=ListResponsePaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_valid_subscriptions(
        self,
        customer_id: str,
        *,
        product_id: typing.Optional[str] = OMIT,
        price_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActiveSubResponse:
        """
        Lists valid subscriptions for given product_id or price_id. All 'active' or 'trialing'
        subscriptions are considered to be valid.

        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        product_id : typing.Optional[str]
            Unique identifier of product.

        price_id : typing.Optional[str]
            Unique Identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActiveSubResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.list_valid_subscriptions(
            customer_id="customer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers{jsonable_encoder(customer_id)}/list_valid_subscriptions",
            method="POST",
            json={"product_id": product_id, "price_id": price_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ActiveSubResponse, construct_type(type_=ActiveSubResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseCustomerExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseCustomerExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "customers/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseCustomerExternal, construct_type(type_=ListResponseCustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_balance_transactions(
        self, customer_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[CustomerBalanceTransactionExternal]:
        """
        Parameters
        ----------
        customer_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CustomerBalanceTransactionExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.list_balance_transactions(
            customer_id="customer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[CustomerBalanceTransactionExternal], construct_type(type_=typing.List[CustomerBalanceTransactionExternal], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_balance_transaction(
        self,
        customer_id: str,
        *,
        amount_atom: int,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerBalanceTransactionExternal:
        """
        Each customer has a Balance value, which denotes a debit or credit that's
        automatically applied to their next invoice upon finalization.
        Creates an immutable transaction that updates the customer's credit balance.

        Parameters
        ----------
        customer_id : str

        amount_atom : int
            The amount of the transaction in atomic units (in USD this is cents). A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s balance.

        currency : typing.Optional[CurrencyEnum]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerBalanceTransactionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.create_balance_transaction(
            customer_id="customer_id",
            amount_atom=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions",
            method="POST",
            json={"amount_atom": amount_atom, "currency": currency, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerBalanceTransactionExternal, construct_type(type_=CustomerBalanceTransactionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_balance_transaction(
        self, customer_id: str, transaction_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomerBalanceTransactionExternal:
        """
        Parameters
        ----------
        customer_id : str

        transaction_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerBalanceTransactionExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.customers.get_balance_transaction(
            customer_id="customer_id",
            transaction_id="transaction_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions/{jsonable_encoder(transaction_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerBalanceTransactionExternal, construct_type(type_=CustomerBalanceTransactionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCustomersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        email: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CustomerExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        email : typing.Optional[str]
            Email Address of the customer.

        coupon_id : typing.Optional[str]
            Coupon id which is applied to a customer.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CustomerExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.customers.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "customers/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "email": email,
                "coupon_id": coupon_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseCustomerExternal, construct_type(type_=ListResponseCustomerExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    email=email,
                    coupon_id=coupon_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        customer_id: str,
        *,
        expand: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_id : str

        expand : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.get(
                customer_id="customer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}",
            method="GET",
            params={"expand": expand},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        first_name: str,
        last_name: str,
        state: str,
        country: str,
        zip_code: str,
        email: str,
        line_1: typing.Optional[str] = OMIT,
        line_2: typing.Optional[str] = OMIT,
        line_3: typing.Optional[str] = OMIT,
        city: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        first_name : str
            The customer’s first name.

        last_name : str
            The customer’s last name.

        state : str
            State, province, or region.

        country : str
            Country name. If possible two-letter country code.

        zip_code : str
            ZIP or postal code.

        email : str
            The customer’s email address.

        line_1 : typing.Optional[str]
            Address line 1.

        line_2 : typing.Optional[str]
            Address line 2.

        line_3 : typing.Optional[str]
            Address line 3.

        city : typing.Optional[str]
            City, district, suburb, town, or village.

        coupon_id : typing.Optional[str]
            If you provide a coupon_id, the customer will have a discount applied on all recurring charges. If there is an existing customer, this coupon will override it.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to the customer. This is not PromotionCode alphabetic code. PromotionCode with restrictions cannot be redeemed on a customer. The customer will have a discount applied on all recurring payments. This is effectively same as proving Coupon attached to the promotion_code. If there is an existing customer, this will override it.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.create(
                first_name="john",
                last_name="doe",
                state="California",
                country="US",
                zip_code="90001",
                email="johndoes@xyz.com",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "customers/",
            method="POST",
            json={
                "first_name": first_name,
                "last_name": last_name,
                "line1": line_1,
                "line2": line_2,
                "line3": line_3,
                "city": city,
                "state": state,
                "country": country,
                "zip_code": zip_code,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
                "email": email,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        customer_external_id: str,
        *,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        line_1: typing.Optional[str] = OMIT,
        line_2: typing.Optional[str] = OMIT,
        line_3: typing.Optional[str] = OMIT,
        city: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        country: typing.Optional[str] = OMIT,
        zip_code: typing.Optional[str] = OMIT,
        coupon_id: typing.Optional[str] = OMIT,
        promotion_code_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_external_id : str

        first_name : typing.Optional[str]
            The customer’s first name.

        last_name : typing.Optional[str]
            The customer’s last name.

        line_1 : typing.Optional[str]
            Address line 1.

        line_2 : typing.Optional[str]
            Address line 2.

        line_3 : typing.Optional[str]
            Address line 3.

        city : typing.Optional[str]
            City, district, suburb, town, or village.

        state : typing.Optional[str]
            State, province, or region.

        country : typing.Optional[str]
            Country name. If possible two-letter country code.

        zip_code : typing.Optional[str]
            ZIP or postal code.

        coupon_id : typing.Optional[str]
            If you provide a coupon_id, the customer will have a discount applied on all recurring charges. If there is an existing customer, this coupon will override it.

        promotion_code_id : typing.Optional[str]
            The API ID of a promotion code to apply to the customer. This is not PromotionCode alphabetic code. PromotionCode with restrictions cannot be redeemed on a customer. The customer will have a discount applied on all recurring payments. This is effectively same as proving Coupon attached to the promotion_code. If there is an existing customer, this will override it.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.update(
                customer_external_id="customer_external_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_external_id)}",
            method="PUT",
            json={
                "first_name": first_name,
                "last_name": last_name,
                "line1": line_1,
                "line2": line_2,
                "line3": line_3,
                "city": city,
                "state": state,
                "country": country,
                "zip_code": zip_code,
                "coupon_id": coupon_id,
                "promotion_code_id": promotion_code_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_discount(
        self, customer_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomerExternal:
        """
        Parameters
        ----------
        customer_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.delete_discount(
                customer_id="customer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/discount", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerExternal, construct_type(type_=CustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_payment_methods(
        self,
        customer_id: str,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        provider_type: typing.Optional[PaymentProviderType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponsePaymentMethodExternal:
        """
        Retrieves payment methods for a given customer.
        Can optionally filter by payment provider type.

        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        provider_type : typing.Optional[PaymentProviderType]
            Filter by the payment provider type.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponsePaymentMethodExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.list_payment_methods(
                customer_id="customer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/payment-methods",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "provider_type": provider_type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponsePaymentMethodExternal, construct_type(type_=ListResponsePaymentMethodExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_valid_subscriptions(
        self,
        customer_id: str,
        *,
        product_id: typing.Optional[str] = OMIT,
        price_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActiveSubResponse:
        """
        Lists valid subscriptions for given product_id or price_id. All 'active' or 'trialing'
        subscriptions are considered to be valid.

        Parameters
        ----------
        customer_id : str
            Unique Identifier of the customer.

        product_id : typing.Optional[str]
            Unique identifier of product.

        price_id : typing.Optional[str]
            Unique Identifier of the price.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActiveSubResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.list_valid_subscriptions(
                customer_id="customer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers{jsonable_encoder(customer_id)}/list_valid_subscriptions",
            method="POST",
            json={"product_id": product_id, "price_id": price_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ActiveSubResponse, construct_type(type_=ActiveSubResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListResponseCustomerExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseCustomerExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "customers/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseCustomerExternal, construct_type(type_=ListResponseCustomerExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_balance_transactions(
        self, customer_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[CustomerBalanceTransactionExternal]:
        """
        Parameters
        ----------
        customer_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CustomerBalanceTransactionExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.list_balance_transactions(
                customer_id="customer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[CustomerBalanceTransactionExternal], construct_type(type_=typing.List[CustomerBalanceTransactionExternal], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_balance_transaction(
        self,
        customer_id: str,
        *,
        amount_atom: int,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CustomerBalanceTransactionExternal:
        """
        Each customer has a Balance value, which denotes a debit or credit that's
        automatically applied to their next invoice upon finalization.
        Creates an immutable transaction that updates the customer's credit balance.

        Parameters
        ----------
        customer_id : str

        amount_atom : int
            The amount of the transaction in atomic units (in USD this is cents). A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s balance.

        currency : typing.Optional[CurrencyEnum]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerBalanceTransactionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.create_balance_transaction(
                customer_id="customer_id",
                amount_atom=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions",
            method="POST",
            json={"amount_atom": amount_atom, "currency": currency, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerBalanceTransactionExternal, construct_type(type_=CustomerBalanceTransactionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_balance_transaction(
        self, customer_id: str, transaction_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomerBalanceTransactionExternal:
        """
        Parameters
        ----------
        customer_id : str

        transaction_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomerBalanceTransactionExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.customers.get_balance_transaction(
                customer_id="customer_id",
                transaction_id="transaction_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"customers/{jsonable_encoder(customer_id)}/balance-transactions/{jsonable_encoder(transaction_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CustomerBalanceTransactionExternal, construct_type(type_=CustomerBalanceTransactionExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
