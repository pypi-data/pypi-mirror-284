# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.invite_external import InviteExternal
from ..types.invite_user_response import InviteUserResponse
from ..types.list_response_invite_external import ListResponseInviteExternal
from ..types.role_enum import RoleEnum

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InvitesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def invite_user(
        self,
        *,
        email: str,
        role: RoleEnum,
        skip_user_confirmation: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InviteUserResponse:
        """
        Parameters
        ----------
        email : str
            Email of the user.

        role : RoleEnum
            Role of the user in the team.

        skip_user_confirmation : typing.Optional[bool]
            Should send the user an invite and let them accept or add a verified OpenPay user without requiring their confirmation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteUserResponse
            Successful Response

        Examples
        --------
        from openpay import RoleEnum
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.invite_user(
            email="email",
            role=RoleEnum.ADMIN,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "invites/invite-user",
            method="POST",
            json={"email": email, "role": role, "skip_user_confirmation": skip_user_confirmation},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteUserResponse, construct_type(type_=InviteUserResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponseInviteExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseInviteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.list()
        """
        _response = self._client_wrapper.httpx_client.request("invites/", method="GET", request_options=request_options)
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseInviteExternal, construct_type(type_=ListResponseInviteExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_invitees(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponseInviteExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseInviteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.list_invitees()
        """
        _response = self._client_wrapper.httpx_client.request(
            "invites/invitees", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseInviteExternal, construct_type(type_=ListResponseInviteExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def accept(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.accept(
            invite_external_id="invite_external_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/accept", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.cancel(
            invite_external_id="invite_external_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/cancel", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def decline(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.invites.decline(
            invite_external_id="invite_external_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/decline", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInvitesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def invite_user(
        self,
        *,
        email: str,
        role: RoleEnum,
        skip_user_confirmation: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InviteUserResponse:
        """
        Parameters
        ----------
        email : str
            Email of the user.

        role : RoleEnum
            Role of the user in the team.

        skip_user_confirmation : typing.Optional[bool]
            Should send the user an invite and let them accept or add a verified OpenPay user without requiring their confirmation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteUserResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import RoleEnum
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.invite_user(
                email="email",
                role=RoleEnum.ADMIN,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "invites/invite-user",
            method="POST",
            json={"email": email, "role": role, "skip_user_confirmation": skip_user_confirmation},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteUserResponse, construct_type(type_=InviteUserResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponseInviteExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseInviteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "invites/", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseInviteExternal, construct_type(type_=ListResponseInviteExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_invitees(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponseInviteExternal:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseInviteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.list_invitees()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "invites/invitees", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseInviteExternal, construct_type(type_=ListResponseInviteExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def accept(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.accept(
                invite_external_id="invite_external_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/accept", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.cancel(
                invite_external_id="invite_external_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/cancel", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def decline(
        self, invite_external_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteExternal:
        """
        Parameters
        ----------
        invite_external_id : str
            Unique Identifier of the invite.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invites.decline(
                invite_external_id="invite_external_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"invites/{jsonable_encoder(invite_external_id)}/decline", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(InviteExternal, construct_type(type_=InviteExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
