# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.event_type import EventType
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_webhook_endpoint_external_no_secret import ListResponseWebhookEndpointExternalNoSecret
from ..types.webhook_endpoint_external import WebhookEndpointExternal
from ..types.webhook_endpoint_external_no_secret import WebhookEndpointExternalNoSecret

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WebhooksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponseWebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseWebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "webhook-endpoints/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseWebhookEndpointExternalNoSecret, construct_type(type_=ListResponseWebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.get(
            webhook_endpoint_id="webhook_endpoint_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        webhook_endpoint_id: str,
        *,
        enabled_events: typing.Sequence[EventType],
        url: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        enabled_events : typing.Sequence[EventType]
            The list of events to enable for this endpoint. You may specify ['ALL'] to enable all events. You are advised to select only necessary events.

        url : str
            The URL of the webhook endpoint.

        description : typing.Optional[str]
            An optional description of what the webhook is used for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        from openpay import EventType
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.update(
            webhook_endpoint_id="webhook_endpoint_id",
            enabled_events=[EventType.CUSTOMER_SUBSCRIPTION_CREATED],
            url="https://your-domain.com/webhook-endpoint-url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}",
            method="PUT",
            json={"enabled_events": enabled_events, "url": url, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.delete(
            webhook_endpoint_id="webhook_endpoint_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        enabled_events: typing.Sequence[EventType],
        url: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        enabled_events : typing.Sequence[EventType]
            The list of events to enable for this endpoint. You may specify ['ALL'] to enable all events. You are advised to select only necessary events.

        url : str
            The URL of the webhook endpoint.

        description : typing.Optional[str]
            An optional description of what the webhook is used for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        from openpay import EventType
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.create(
            enabled_events=[EventType.CUSTOMER_SUBSCRIPTION_CREATED],
            url="https://your-domain.com/webhook-endpoint-url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "webhook-endpoints/",
            method="POST",
            json={"enabled_events": enabled_events, "url": url, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def roll_secret(
        self,
        webhook_endpoint_id: str,
        *,
        delay_sec: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        delay_sec : typing.Optional[int]
            Delay in seconds after which, current secret expires.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.roll_secret(
            webhook_endpoint_id="webhook_endpoint_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}/secret_roll",
            method="POST",
            json={"delay_sec": delay_sec},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_secret(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.webhooks.get_secret(
            webhook_endpoint_id="webhook_endpoint_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}/reveal_secret",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWebhooksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponseWebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseWebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "webhook-endpoints/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseWebhookEndpointExternalNoSecret, construct_type(type_=ListResponseWebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.get(
                webhook_endpoint_id="webhook_endpoint_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        webhook_endpoint_id: str,
        *,
        enabled_events: typing.Sequence[EventType],
        url: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        enabled_events : typing.Sequence[EventType]
            The list of events to enable for this endpoint. You may specify ['ALL'] to enable all events. You are advised to select only necessary events.

        url : str
            The URL of the webhook endpoint.

        description : typing.Optional[str]
            An optional description of what the webhook is used for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import EventType
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.update(
                webhook_endpoint_id="webhook_endpoint_id",
                enabled_events=[EventType.CUSTOMER_SUBSCRIPTION_CREATED],
                url="https://your-domain.com/webhook-endpoint-url",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}",
            method="PUT",
            json={"enabled_events": enabled_events, "url": url, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternalNoSecret:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternalNoSecret
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.delete(
                webhook_endpoint_id="webhook_endpoint_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternalNoSecret, construct_type(type_=WebhookEndpointExternalNoSecret, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        enabled_events: typing.Sequence[EventType],
        url: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        enabled_events : typing.Sequence[EventType]
            The list of events to enable for this endpoint. You may specify ['ALL'] to enable all events. You are advised to select only necessary events.

        url : str
            The URL of the webhook endpoint.

        description : typing.Optional[str]
            An optional description of what the webhook is used for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay import EventType
        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.create(
                enabled_events=[EventType.CUSTOMER_SUBSCRIPTION_CREATED],
                url="https://your-domain.com/webhook-endpoint-url",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "webhook-endpoints/",
            method="POST",
            json={"enabled_events": enabled_events, "url": url, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def roll_secret(
        self,
        webhook_endpoint_id: str,
        *,
        delay_sec: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        delay_sec : typing.Optional[int]
            Delay in seconds after which, current secret expires.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.roll_secret(
                webhook_endpoint_id="webhook_endpoint_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}/secret_roll",
            method="POST",
            json={"delay_sec": delay_sec},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_secret(
        self, webhook_endpoint_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookEndpointExternal:
        """
        Parameters
        ----------
        webhook_endpoint_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookEndpointExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhooks.get_secret(
                webhook_endpoint_id="webhook_endpoint_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"webhook-endpoints/{jsonable_encoder(webhook_endpoint_id)}/reveal_secret",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(WebhookEndpointExternal, construct_type(type_=WebhookEndpointExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
