# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.charge_external import ChargeExternal
from ..types.charge_status_enum import ChargeStatusEnum
from ..types.date_time_filter import DateTimeFilter
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_charge_external import ListResponseChargeExternal

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChargesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        payment_method_id: typing.Optional[str] = OMIT,
        payment_intent_id: typing.Optional[str] = OMIT,
        invoice_id: typing.Optional[str] = OMIT,
        status: typing.Optional[ChargeStatusEnum] = OMIT,
        refunded: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> SyncPager[ChargeExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        customer_id : typing.Optional[str]
            Filter charges by customer ID.

        payment_method_id : typing.Optional[str]
            Filter charges by payment method ID.

        payment_intent_id : typing.Optional[str]
            Filter charges by payment intent ID.

        invoice_id : typing.Optional[str]
            Filter charges by invoice ID.

        status : typing.Optional[ChargeStatusEnum]
            Filter charges by status.

        refunded : typing.Optional[bool]
            Filter charges by refunded status.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[ChargeExternal]
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        response = client.charges.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page_number = page_number if page_number is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "charges/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "customer_id": customer_id,
                "payment_method_id": payment_method_id,
                "payment_intent_id": payment_intent_id,
                "invoice_id": invoice_id,
                "status": status,
                "refunded": refunded,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseChargeExternal, construct_type(type_=ListResponseChargeExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    customer_id=customer_id,
                    payment_method_id=payment_method_id,
                    payment_intent_id=payment_intent_id,
                    invoice_id=invoice_id,
                    status=status,
                    refunded=refunded,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponseChargeExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseChargeExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.charges.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "charges/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseChargeExternal, construct_type(type_=ListResponseChargeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChargesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        sort_key: typing.Optional[str] = OMIT,
        sort_descending: typing.Optional[bool] = OMIT,
        created_at: typing.Optional[DateTimeFilter] = OMIT,
        expand: typing.Optional[typing.Sequence[str]] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        payment_method_id: typing.Optional[str] = OMIT,
        payment_intent_id: typing.Optional[str] = OMIT,
        invoice_id: typing.Optional[str] = OMIT,
        status: typing.Optional[ChargeStatusEnum] = OMIT,
        refunded: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncPager[ChargeExternal]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        sort_key : typing.Optional[str]
            Key name based on which data is sorted.

        sort_descending : typing.Optional[bool]
            Sort direction.

        created_at : typing.Optional[DateTimeFilter]
            Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.

        expand : typing.Optional[typing.Sequence[str]]
            Specifies which fields in the response should be expanded.

        customer_id : typing.Optional[str]
            Filter charges by customer ID.

        payment_method_id : typing.Optional[str]
            Filter charges by payment method ID.

        payment_intent_id : typing.Optional[str]
            Filter charges by payment intent ID.

        invoice_id : typing.Optional[str]
            Filter charges by invoice ID.

        status : typing.Optional[ChargeStatusEnum]
            Filter charges by status.

        refunded : typing.Optional[bool]
            Filter charges by refunded status.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[ChargeExternal]
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.charges.list()
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page_number = page_number if page_number is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "charges/list",
            method="POST",
            json={
                "page_number": page_number,
                "page_size": page_size,
                "sort_key": sort_key,
                "sort_descending": sort_descending,
                "created_at": created_at,
                "expand": expand,
                "customer_id": customer_id,
                "payment_method_id": payment_method_id,
                "payment_intent_id": payment_intent_id,
                "invoice_id": invoice_id,
                "status": status,
                "refunded": refunded,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListResponseChargeExternal, construct_type(type_=ListResponseChargeExternal, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page_number=page_number + 1,
                    page_size=page_size,
                    sort_key=sort_key,
                    sort_descending=sort_descending,
                    created_at=created_at,
                    expand=expand,
                    customer_id=customer_id,
                    payment_method_id=payment_method_id,
                    payment_intent_id=payment_intent_id,
                    invoice_id=invoice_id,
                    status=status,
                    refunded=refunded,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        page_number: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> ListResponseChargeExternal:
        """
        Parameters
        ----------
        query : str
            The search query string in limited Lucene Query Syntax. Query is case insensitive.
                Limitations:
                  1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.
                  2. Nesting of Queries by ( ) is not supported.
                Example searches.
                  1. search by exact field. example: `name:'field_name'`
                  2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`
                  3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.


        page_number : typing.Optional[int]
            Page number

        page_size : typing.Optional[int]
            Page size

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseChargeExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.charges.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "charges/search",
            method="POST",
            json={"page_number": page_number, "page_size": page_size, "query": query},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseChargeExternal, construct_type(type_=ListResponseChargeExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
