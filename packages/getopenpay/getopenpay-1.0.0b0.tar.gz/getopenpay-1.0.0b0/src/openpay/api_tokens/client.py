# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.api_token_external import ApiTokenExternal
from ..types.delete_token_response import DeleteTokenResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_response_api_token_external import ListResponseApiTokenExternal
from ..types.role_enum import RoleEnum

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiTokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        role: typing.Optional[RoleEnum] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiTokenExternal:
        """
        Create a new API token for the authenticated user.

        Parameters
        ----------
        role : typing.Optional[RoleEnum]
            Role of the token being created.

        description : typing.Optional[str]
            Description for this api_token (e.g. how is it used).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiTokenExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.api_tokens.create()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api-tokens/",
            method="POST",
            json={"role": role, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ApiTokenExternal, construct_type(type_=ApiTokenExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponseApiTokenExternal:
        """
        List all API tokens for the authenticated user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseApiTokenExternal
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.api_tokens.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api-tokens/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseApiTokenExternal, construct_type(type_=ListResponseApiTokenExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deactivate(
        self, external_token_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteTokenResponse:
        """
        Deactivate an API token by soft-deleting it.

        Parameters
        ----------
        external_token_id : str
            Unique identifier of the api_token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteTokenResponse
            Successful Response

        Examples
        --------
        from openpay.client import OpenPay

        client = OpenPay(
            token="YOUR_TOKEN",
        )
        client.api_tokens.deactivate(
            external_token_id="external_token_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api-tokens/{jsonable_encoder(external_token_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeleteTokenResponse, construct_type(type_=DeleteTokenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApiTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        role: typing.Optional[RoleEnum] = OMIT,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiTokenExternal:
        """
        Create a new API token for the authenticated user.

        Parameters
        ----------
        role : typing.Optional[RoleEnum]
            Role of the token being created.

        description : typing.Optional[str]
            Description for this api_token (e.g. how is it used).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiTokenExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.api_tokens.create()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api-tokens/",
            method="POST",
            json={"role": role, "description": description},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ApiTokenExternal, construct_type(type_=ApiTokenExternal, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListResponseApiTokenExternal:
        """
        List all API tokens for the authenticated user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListResponseApiTokenExternal
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.api_tokens.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api-tokens/list", method="POST", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListResponseApiTokenExternal, construct_type(type_=ListResponseApiTokenExternal, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deactivate(
        self, external_token_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteTokenResponse:
        """
        Deactivate an API token by soft-deleting it.

        Parameters
        ----------
        external_token_id : str
            Unique identifier of the api_token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteTokenResponse
            Successful Response

        Examples
        --------
        import asyncio

        from openpay.client import AsyncOpenPay

        client = AsyncOpenPay(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.api_tokens.deactivate(
                external_token_id="external_token_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api-tokens/{jsonable_encoder(external_token_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DeleteTokenResponse, construct_type(type_=DeleteTokenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
