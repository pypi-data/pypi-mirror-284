# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .currency_enum import CurrencyEnum
from .invoice_item_discount_amounts_public import InvoiceItemDiscountAmountsPublic
from .price_tier_public import PriceTierPublic


class InvoiceItemPublic(UncheckedBaseModel):
    name: str = pydantic_v1.Field()
    """
    The name of the line item as it appears in the invoice.
    """

    quantity: int = pydantic_v1.Field()
    """
    Quantity of the line item.
    """

    amount_atom: int = pydantic_v1.Field()
    """
    Total amount of invoice_item in atomic units (in USD this is cents).
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Three-letter ISO currency code, in lowercase.
    """

    invoice_item_description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary string describing the invoice_item for user.
    """

    discounts: typing.List[str] = pydantic_v1.Field()
    """
    The discounts only directly applied to the InvoiceItem.
    """

    discount_amount_atoms: typing.List[InvoiceItemDiscountAmountsPublic] = pydantic_v1.Field()
    """
    The amount_atom of all discount.
    """

    amount_atom_considering_discount_applied: int = pydantic_v1.Field()
    """
    Total amount of invoice_item in atomic units considering discounts
    """

    price_tiers: typing.Optional[typing.List[PriceTierPublic]] = pydantic_v1.Field(default=None)
    """
    The price tiers of the product, if applicable.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
