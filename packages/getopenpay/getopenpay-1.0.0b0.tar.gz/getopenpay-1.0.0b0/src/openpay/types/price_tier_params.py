# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel


class PriceTierParams(UncheckedBaseModel):
    units_from: int = pydantic_v1.Field()
    """
    The starting unit for the price tier.
    """

    units_upto: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The ending unit for the price tier. The last tier in the list should not have this key or null, indicating that the tier extends to an infinite number of units.
    """

    unit_amount_atom: int = pydantic_v1.Field()
    """
    The price for the unit in the smallest denomination.It is in atomic units (in USD this is cents).
    """

    flat_amount_atom: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Flat fee for the tier the smallest denomination.It is in atomic units (in USD this is cents).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
