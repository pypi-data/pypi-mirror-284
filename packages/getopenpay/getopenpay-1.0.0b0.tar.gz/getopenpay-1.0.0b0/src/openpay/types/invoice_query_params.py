# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .billing_reason_enum import BillingReasonEnum
from .date_time_filter import DateTimeFilter
from .int_range_filter import IntRangeFilter
from .invoice_status_enum import InvoiceStatusEnum


class InvoiceQueryParams(UncheckedBaseModel):
    page_number: typing.Optional[int] = pydantic_v1.Field(default=1)
    """
    Page number
    """

    page_size: typing.Optional[int] = pydantic_v1.Field(default=100)
    """
    Page size
    """

    sort_key: typing.Optional[str] = pydantic_v1.Field(default="created_at")
    """
    Key name based on which data is sorted.
    """

    sort_descending: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Sort direction.
    """

    created_at: typing.Optional[DateTimeFilter] = pydantic_v1.Field(default=None)
    """
    Filter for selecting objects based on the range of creation dates. Includes options for equality, and greater than/less than comparisons.
    """

    expand: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    Specifies which fields in the response should be expanded.
    """

    customer_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the customer.
    """

    status: typing.Optional[InvoiceStatusEnum] = pydantic_v1.Field(default=None)
    """
    Status of invoice.
    """

    subscription_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the subscription.
    """

    billing_reason: typing.Optional[BillingReasonEnum] = pydantic_v1.Field(default=None)
    """
    Indicates the reason why the invoice was created.
    """

    total_amount_atom: typing.Optional[IntRangeFilter] = pydantic_v1.Field(default=None)
    """
    This contains fields used for range filters on total_amount_atom field.
    """

    period_start: typing.Optional[DateTimeFilter] = pydantic_v1.Field(default=None)
    """
    Filter for selecting invoices based on the range of period starting dates. Includes options for equality, and greater than/less than comparisons.
    """

    period_end: typing.Optional[DateTimeFilter] = pydantic_v1.Field(default=None)
    """
    Filter for selecting invoices based on the range of period ending dates. Includes options for equality, and greater than/less than comparisons.
    """

    coupon_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Coupon id which is applied to an invoice.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
