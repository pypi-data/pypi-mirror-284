# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class BillingReasonEnum(str, enum.Enum):
    MANUAL = "manual"
    SUBSCRIPTION_CREATE = "subscription_create"
    SUBSCRIPTION_CYCLE = "subscription_cycle"
    SUBSCRIPTION_THRESHOLD = "subscription_threshold"
    SUBSCRIPTION_UPDATE = "subscription_update"
    UPCOMING = "upcoming"

    def visit(
        self,
        manual: typing.Callable[[], T_Result],
        subscription_create: typing.Callable[[], T_Result],
        subscription_cycle: typing.Callable[[], T_Result],
        subscription_threshold: typing.Callable[[], T_Result],
        subscription_update: typing.Callable[[], T_Result],
        upcoming: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is BillingReasonEnum.MANUAL:
            return manual()
        if self is BillingReasonEnum.SUBSCRIPTION_CREATE:
            return subscription_create()
        if self is BillingReasonEnum.SUBSCRIPTION_CYCLE:
            return subscription_cycle()
        if self is BillingReasonEnum.SUBSCRIPTION_THRESHOLD:
            return subscription_threshold()
        if self is BillingReasonEnum.SUBSCRIPTION_UPDATE:
            return subscription_update()
        if self is BillingReasonEnum.UPCOMING:
            return upcoming()
