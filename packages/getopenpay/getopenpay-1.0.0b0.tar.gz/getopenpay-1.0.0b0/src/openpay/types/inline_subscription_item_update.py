# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel


class InlineSubscriptionItemUpdate(UncheckedBaseModel):
    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Subscription item to update. If skipped a new subscription item will be created
    """

    delete: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    A flag that, if set to true, will delete the specified item immediately from subscription. drop_at_end flag cannot be used while using this behaviour
    """

    add_at_period_end: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If the flag is set to True, item will be added when renewing the subscription at next billing cycle.
    """

    drop_at_end: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    A flag that, if set to true, will drop the subscription item from subscription when renewing subscription. delete flag cannot be used while using this behaviour
    """

    price_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The ID of the price. When changing a subscription itemâ€™s price, quantity is set to 1 unless a quantity parameter is provided.
    """

    quantity: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Updated quantity for this item.
    """

    starts_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The datetime when the subscription item updates start. Defaults to now if unset.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
