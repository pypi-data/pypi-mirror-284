# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SubscriptionCancelFeedbackEnum(str, enum.Enum):
    TOO_EXPENSIVE = "too_expensive"
    MISSING_FEATURES = "missing_features"
    SWITCHED_SERVICE = "switched_service"
    UNUSED = "unused"
    CUSTOMER_SERVICE = "customer_service"
    TOO_COMPLEX = "too_complex"
    LOW_QUALITY = "low_quality"
    OTHER = "other"

    def visit(
        self,
        too_expensive: typing.Callable[[], T_Result],
        missing_features: typing.Callable[[], T_Result],
        switched_service: typing.Callable[[], T_Result],
        unused: typing.Callable[[], T_Result],
        customer_service: typing.Callable[[], T_Result],
        too_complex: typing.Callable[[], T_Result],
        low_quality: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is SubscriptionCancelFeedbackEnum.TOO_EXPENSIVE:
            return too_expensive()
        if self is SubscriptionCancelFeedbackEnum.MISSING_FEATURES:
            return missing_features()
        if self is SubscriptionCancelFeedbackEnum.SWITCHED_SERVICE:
            return switched_service()
        if self is SubscriptionCancelFeedbackEnum.UNUSED:
            return unused()
        if self is SubscriptionCancelFeedbackEnum.CUSTOMER_SERVICE:
            return customer_service()
        if self is SubscriptionCancelFeedbackEnum.TOO_COMPLEX:
            return too_complex()
        if self is SubscriptionCancelFeedbackEnum.LOW_QUALITY:
            return low_quality()
        if self is SubscriptionCancelFeedbackEnum.OTHER:
            return other()
