# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .inline_subscription_item_update import InlineSubscriptionItemUpdate
from .proration_enum import ProrationEnum


class UpdateSubscriptionRequest(UncheckedBaseModel):
    payment_method_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription.
    """

    cancel_at_end: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Boolean indicating whether this subscription should cancel at the end of the current period.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Arbitrary String describing this subscription.
    """

    proration_behavior: typing.Optional[ProrationEnum] = pydantic_v1.Field(default=None)
    """
    Determines how to handle prorations when the billable items changes
    """

    trial_end: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    ISO datetime representing the end of the trial period the customer will get before being charged for the first time. The operation is only allowed for currently trialing subscriptions
    """

    trial_period_days: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Integer representing the number of trial period days before the customer is charged for the first time. This are additional days from now, and overwrites current trial_end. The operation is only allowed for currently trialing subscriptions
    """

    coupon_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The ID of the coupon to apply to this subscription. The coupon will also be applied to any subscriptions spawned during update call.
    """

    promotion_code_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The API ID of a promotion code to apply to this subscription. The promotion code will also be applied to any subscriptions spawned during update call.
    """

    items: typing.Optional[typing.List[InlineSubscriptionItemUpdate]] = pydantic_v1.Field(default=None)
    """
    A list of up to 20 subscription items, each with an attached price.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
