# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .credit_note_item_external import CreditNoteItemExternal
from .credit_note_reason import CreditNoteReason
from .currency_enum import CurrencyEnum
from .object_name import ObjectName


class CreditNoteExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique Identifier of the credit_note.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    total_amount_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the total amount of the credit note. It is in atomic units (in USD this is cents).
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Three-letter ISO currency code, in lowercase.
    """

    reason: typing.Optional[CreditNoteReason] = pydantic_v1.Field(default=None)
    """
    Reason for issuing this credit note
    """

    invoice_id: str = pydantic_v1.Field()
    """
    Unique ID of the invoice.
    """

    items: typing.List[CreditNoteItemExternal] = pydantic_v1.Field()
    """
    List of credit_note_items.
    """

    credit_amount_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the amount to credit the customerâ€™s balance, which will be automatically applied to their next invoice. It is in atomic units (in USD this is cents).
    """

    refund_amount_atom: int = pydantic_v1.Field()
    """
    The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. It is in atomic units (in USD this is cents).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
