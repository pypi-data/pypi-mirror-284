# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .charge_status_enum import ChargeStatusEnum
from .currency_enum import CurrencyEnum
from .object_name import ObjectName


class ChargeExternal(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique Identifier of the charge.
    """

    object: typing.Optional[ObjectName] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was created, in 'ISO 8601' format.
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    DateTime at which the object was updated, in 'ISO 8601' format.
    """

    is_deleted: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, indicates that this object has been deleted
    """

    amount_atom: int = pydantic_v1.Field()
    """
    Amount charged, in smallest currency unit.
    """

    currency: CurrencyEnum = pydantic_v1.Field()
    """
    Currency code, e.g., USD.
    """

    customer_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the customer associated with this charge.
    """

    payment_method_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the payment method used for this charge.
    """

    payment_intent_id: str = pydantic_v1.Field()
    """
    Unique Identifier of the payment intent associated with this charge.
    """

    invoice_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique Identifier of the invoice associated with this charge, if applicable.
    """

    status: ChargeStatusEnum = pydantic_v1.Field()
    """
    Status of the charge.
    """

    refunded: bool = pydantic_v1.Field()
    """
    Indicates whether the charge has been refunded.
    """

    refunded_amount_atom: int = pydantic_v1.Field()
    """
    Amount refunded, in smallest currency unit.
    """

    disputed: bool = pydantic_v1.Field()
    """
    Indicates whether the charge is disputed.
    """

    failure_code: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Failure code if the charge failed.
    """

    failure_message: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Failure message if the charge failed.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
