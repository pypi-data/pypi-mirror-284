import exec
import yum

# for resource typing
import postgresql::ha

# can not be uppercase
typedef username_t as string matching /[a-z0-9]*/

entity PostgresqlServer:
    # Nothing
    bool managed = true
    int log_min_duration_statement = -1
    bool pg_stat_statements=false
    int pg_version = 13
end

PostgresqlServer.host [1] -- std::Host

entity PostgresqlTools:
    """Install the postgresql client tools on a host."""
    int pg_version = 13
end

PostgresqlServer.databases [0:] -- Database.server [1]
PostgresqlServer.users [0:] -- User.server [1]

PostgresqlTools.host [1] -- std::Host

PostgresqlServer._packages [0:] -- std::Entity
"""
internal Wait point: do Something(requires=_packages) to wait for all packages to be installed
"""

implement PostgresqlServer using postgresqlServer, install when managed
implement PostgresqlServer using std::none when not managed
implement PostgresqlTools using install_tools


implementation install for PostgresqlServer:
    pre_install = exec::Run(
        host=self.host,
        command="dnf module disable postgresql -y",
        onlyif="which dnf",
        requires=self.requires,
    )
    postgresql_repo = yum::Repository(host=self.host,
                                      name="postgresql-{{ pg_version }}",
                                      gpgcheck=true,
                                      enabled=true,
                                      baseurl="https://download.postgresql.org/pub/repos/yum/{{ pg_version }}/redhat/rhel-$releasever-$basearch",
                                      gpgkey="https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL",
                                      requires=pre_install)
    install_postgresql_package = std::Package(name="postgresql{{ pg_version }}-server", host=self.host, state="latest", requires=[postgresql_repo])
    install_postgresql_contrib_package = std::Package(name="postgresql{{ pg_version }}-contrib", host=self.host, state="latest", requires=[postgresql_repo])
    self._packages = [install_postgresql_package, install_postgresql_contrib_package]
end

implementation install_tools for PostgresqlTools:
    postgresql_repo = yum::Repository(host=self.host,
                                      name="postgresql-{{ pg_version }}",
                                      gpgcheck=true,
                                      enabled=true,
                                      baseurl="https://download.postgresql.org/pub/repos/yum/{{ pg_version }}/redhat/rhel-$releasever-$basearch",
                                      gpgkey="https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL",
                                      requires=self.requires)
    install_postgresql_package = std::Package(name="postgresql{{ pg_version }}", host=self.host, state="latest", requires=[postgresql_repo])
    install_postgresql_package.provides = self.provides
end

implementation postgresqlServer for PostgresqlServer:
    postgresql_initdb_script = exec::Run(host=self.host,
                                        creates="/var/lib/pgsql/{{ pg_version }}/data/pg_hba.conf",
                                        reload="/bin/true", # fix for https://github.com/inmanta/exec/issues/185
                                        command=exec::in_shell("sudo su -c '/usr/pgsql-{{ pg_version }}/bin/initdb /var/lib/pgsql/{{ pg_version }}/data' - postgres"),
                                        requires=self._packages)
    postgresql_pg_hba_file = std::File(host=self.host,
                                    path="/var/lib/pgsql/{{ pg_version }}/data/pg_hba.conf",
                                    mode=600,
                                    owner="postgres",
                                    group="postgres",
                                    content=std::template('postgresql/pg_hba.conf.j2'),
                                    requires=[postgresql_initdb_script],
                                    reload=true)
    postgresql_conf_file = std::File(host=self.host,
                                    path="/var/lib/pgsql/{{ pg_version }}/data/postgresql.conf",
                                    mode=600,
                                    owner="postgres",
                                    group="postgres",
                                    content=std::template('postgresql/postgresql.conf.j2'),
                                    requires=[postgresql_initdb_script],
                                    reload=true)
    postgresql_service = std::Service(name="postgresql-{{ pg_version }}", host=self.host, state="running", onboot=true,
                                    requires=[postgresql_conf_file, postgresql_pg_hba_file, postgresql_initdb_script], provides=self.provides)
end


entity User extends std::PurgeableResource:
"""
    :attr from: network location this user is allowed to connect from
"""
    username_t username
    string password
    string[] from = ["127.0.0.1/32", "::1/128"]
end

index User(server, username)

implement User using user_requires

implementation user_requires for User:
    self.requires = self.server
end


entity Database extends std::PurgeableResource:
    string db_name
end

index Database(server, db_name)

Database.owner [1] -- User.databases [0:]

implement Database using db_requires

implementation db_requires for Database:
    self.requires = self.server
    self.requires = self.owner
end
