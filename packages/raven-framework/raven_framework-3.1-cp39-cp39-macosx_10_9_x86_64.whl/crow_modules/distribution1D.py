# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _distribution1D
else:
    import _distribution1D

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _distribution1D.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _distribution1D.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _distribution1D.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _distribution1D.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _distribution1D.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _distribution1D.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _distribution1D.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _distribution1D.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _distribution1D.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _distribution1D.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _distribution1D.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _distribution1D.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _distribution1D.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _distribution1D.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _distribution1D.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _distribution1D.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _distribution1D.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _distribution1D:
_distribution1D.SwigPyIterator_swigregister(SwigPyIterator)

MULTIPLICATIVE = _distribution1D.MULTIPLICATIVE
SUM = _distribution1D.SUM
class BasicDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _distribution1D.delete_BasicDistribution

    def getVariable(self, variable_name: "std::string const") -> "double":
        return _distribution1D.BasicDistribution_getVariable(self, variable_name)

    def getVariableVector(self, variable_name: "std::string const") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicDistribution_getVariableVector(self, variable_name)

    def updateVariable(self, variable_name: "std::string const &", new_value: "double &") -> "void":
        return _distribution1D.BasicDistribution_updateVariable(self, variable_name, new_value)

    def getRandom(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_getRandom(self, x)

    def pdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_pdf(self, x)

    def cdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_cdf(self, x)

    def inverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_inverseCdf(self, x)

    def untrPdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_untrPdf(self, x)

    def untrCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_untrCdf(self, x)

    def untrCdfComplement(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_untrCdfComplement(self, x)

    def untrInverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_untrInverseCdf(self, x)

    def untrMean(self) -> "double":
        return _distribution1D.BasicDistribution_untrMean(self)

    def untrStdDev(self) -> "double":
        return _distribution1D.BasicDistribution_untrStdDev(self)

    def untrMedian(self) -> "double":
        return _distribution1D.BasicDistribution_untrMedian(self)

    def untrMode(self) -> "double":
        return _distribution1D.BasicDistribution_untrMode(self)

    def untrHazard(self, x: "double") -> "double":
        return _distribution1D.BasicDistribution_untrHazard(self, x)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicDistribution_returnDimensionality(self)

    def getType(self) -> "std::string &":
        return _distribution1D.BasicDistribution_getType(self)

    def getSeed(self) -> "unsigned int":
        return _distribution1D.BasicDistribution_getSeed(self)

    def getVariableNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _distribution1D.BasicDistribution_getVariableNames(self)

# Register BasicDistribution in _distribution1D:
_distribution1D.BasicDistribution_swigregister(BasicDistribution)
cvar = _distribution1D.cvar
_defaultSeed = cvar._defaultSeed

class DistributionContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "DistributionContainer &":
        return _distribution1D.DistributionContainer_instance()

    def addDistributionInContainer(self, type: "std::string const &", name: "std::string const &", dist: "std::shared_ptr< BasicDistribution >") -> "void":
        return _distribution1D.DistributionContainer_addDistributionInContainer(self, type, name, dist)

    def addDistributionInContainerND(self, type: "std::string const &", name: "std::string const &", dist: "std::shared_ptr< BasicDistributionND >") -> "void":
        return _distribution1D.DistributionContainer_addDistributionInContainerND(self, type, name, dist)

    def isEmpty(self) -> "bool":
        return _distribution1D.DistributionContainer_isEmpty(self)

    def getType(self, *args) -> "std::string":
        return _distribution1D.DistributionContainer_getType(self, *args)

    def getVariable(self, *args) -> "double":
        return _distribution1D.DistributionContainer_getVariable(self, *args)

    def updateVariable(self, *args) -> "void":
        return _distribution1D.DistributionContainer_updateVariable(self, *args)

    def getDistributionVariableNames(self, dist_alias: "std::string const") -> "std::vector< std::string,std::allocator< std::string > >":
        return _distribution1D.DistributionContainer_getDistributionVariableNames(self, dist_alias)

    def getDistributionNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _distribution1D.DistributionContainer_getDistributionNames(self)

    def pdf(self, *args) -> "double":
        return _distribution1D.DistributionContainer_pdf(self, *args)

    def cdf(self, *args) -> "double":
        return _distribution1D.DistributionContainer_cdf(self, *args)

    def inverseCdf(self, *args) -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.DistributionContainer_inverseCdf(self, *args)

    def checkCdf(self, *args) -> "bool":
        return _distribution1D.DistributionContainer_checkCdf(self, *args)

    def getTriggerStatus(self, *args) -> "bool":
        return _distribution1D.DistributionContainer_getTriggerStatus(self, *args)

    def lastDistributionTriggered(self) -> "std::string":
        return _distribution1D.DistributionContainer_lastDistributionTriggered(self)

    def atLeastADistTriggered(self) -> "bool":
        return _distribution1D.DistributionContainer_atLeastADistTriggered(self)

    def returnDimensionality(self, *args) -> "int":
        return _distribution1D.DistributionContainer_returnDimensionality(self, *args)

# Register DistributionContainer in _distribution1D:
_distribution1D.DistributionContainer_swigregister(DistributionContainer)

def DistributionContainer_instance() -> "DistributionContainer &":
    return _distribution1D.DistributionContainer_instance()


def strToStringP(s: "char *") -> "std::string *":
    return _distribution1D.strToStringP(s)

def stringPToSt(s: "std::string const *") -> "char const *":
    return _distribution1D.stringPToSt(s)

def freeStringP(s: "std::string *") -> "void":
    return _distribution1D.freeStringP(s)
class BasicTruncatedDistribution(BasicDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _distribution1D.BasicTruncatedDistribution_swiginit(self, _distribution1D.new_BasicTruncatedDistribution(*args))

    def pdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_pdf(self, x)

    def cdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_cdf(self, x)

    def inverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_inverseCdf(self, x)

    def untrPdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrPdf(self, x)

    def untrCdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrCdf(self, x)

    def untrCdfComplement(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrCdfComplement(self, x)

    def untrInverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrInverseCdf(self, x)

    def untrMean(self) -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrMean(self)

    def untrStdDev(self) -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrStdDev(self)

    def untrMedian(self) -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrMedian(self)

    def untrMode(self) -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrMode(self)

    def untrHazard(self, x: "double") -> "double":
        return _distribution1D.BasicTruncatedDistribution_untrHazard(self, x)
    __swig_destroy__ = _distribution1D.delete_BasicTruncatedDistribution

# Register BasicTruncatedDistribution in _distribution1D:
_distribution1D.BasicTruncatedDistribution_swigregister(BasicTruncatedDistribution)

class BasicDiscreteDistribution(BasicDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def pdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_pdf(self, x)

    def cdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_cdf(self, x)

    def inverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_inverseCdf(self, x)

    def untrPdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrPdf(self, x)

    def untrCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrCdf(self, x)

    def untrCdfComplement(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrCdfComplement(self, x)

    def untrInverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrInverseCdf(self, x)

    def untrMean(self) -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrMean(self)

    def untrStdDev(self) -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrStdDev(self)

    def untrMedian(self) -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrMedian(self)

    def untrMode(self) -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrMode(self)

    def untrHazard(self, x: "double") -> "double":
        return _distribution1D.BasicDiscreteDistribution_untrHazard(self, x)

    def __init__(self):
        _distribution1D.BasicDiscreteDistribution_swiginit(self, _distribution1D.new_BasicDiscreteDistribution())
    __swig_destroy__ = _distribution1D.delete_BasicDiscreteDistribution

# Register BasicDiscreteDistribution in _distribution1D:
_distribution1D.BasicDiscreteDistribution_swigregister(BasicDiscreteDistribution)

class BasicUniformDistribution(BasicTruncatedDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x_min: "double", x_max: "double"):
        _distribution1D.BasicUniformDistribution_swiginit(self, _distribution1D.new_BasicUniformDistribution(x_min, x_max))
    __swig_destroy__ = _distribution1D.delete_BasicUniformDistribution

    def pdf(self, x: "double") -> "double":
        return _distribution1D.BasicUniformDistribution_pdf(self, x)

    def cdf(self, x: "double") -> "double":
        return _distribution1D.BasicUniformDistribution_cdf(self, x)

    def inverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicUniformDistribution_inverseCdf(self, x)

# Register BasicUniformDistribution in _distribution1D:
_distribution1D.BasicUniformDistribution_swigregister(BasicUniformDistribution)

class BasicNormalDistribution(BasicTruncatedDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _distribution1D.BasicNormalDistribution_swiginit(self, _distribution1D.new_BasicNormalDistribution(*args))
    __swig_destroy__ = _distribution1D.delete_BasicNormalDistribution

    def inverseCdf(self, x: "double") -> "double":
        return _distribution1D.BasicNormalDistribution_inverseCdf(self, x)

# Register BasicNormalDistribution in _distribution1D:
_distribution1D.BasicNormalDistribution_swigregister(BasicNormalDistribution)


def checkUpperBound(upper_bound: "double", values: "vectord_cxx") -> "bool":
    return _distribution1D.checkUpperBound(upper_bound, values)

def checkLowerBound(lower_bound: "double", values: "vectord_cxx") -> "bool":
    return _distribution1D.checkLowerBound(lower_bound, values)

def intToBinary(value: "int", size: "int") -> "std::vector< double,std::allocator< double > >":
    return _distribution1D.intToBinary(value, size)
class NDInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDInterpolation_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDInterpolation_getGradientAt(self, point_coordinate)

    def fit(self, coordinates: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >", values: "vectord_cxx") -> "void":
        return _distribution1D.NDInterpolation_fit(self, coordinates, values)

    def ndInverseFunctionGrid(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.NDInterpolation_ndInverseFunctionGrid(self, f, g)

    def averageCellValue(self, center: "vectord_cxx", dx: "vectord_cxx") -> "double":
        return _distribution1D.NDInterpolation_averageCellValue(self, center, dx)

    def updateRNGParameters(self, tolerance: "double", initial_divisions: "double") -> "void":
        return _distribution1D.NDInterpolation_updateRNGParameters(self, tolerance, initial_divisions)

    def ndDerivative(self, coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDInterpolation_ndDerivative(self, coordinate)

    def returnDimensionality(self) -> "int":
        return _distribution1D.NDInterpolation_returnDimensionality(self)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.NDInterpolation_returnUpperBound(self, dimension)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.NDInterpolation_returnLowerBound(self, dimension)

    def __init__(self):
        _distribution1D.NDInterpolation_swiginit(self, _distribution1D.new_NDInterpolation())
    __swig_destroy__ = _distribution1D.delete_NDInterpolation

# Register NDInterpolation in _distribution1D:
_distribution1D.NDInterpolation_swigregister(NDInterpolation)

class NDSpline(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDSpline_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDSpline_getGradientAt(self, point_coordinate)

    def integralSpline(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.NDSpline_integralSpline(self, point_coordinate)

    def splineCartesianMarginalIntegration(self, coordinate: "double", marginal_variable: "int") -> "double":
        return _distribution1D.NDSpline_splineCartesianMarginalIntegration(self, coordinate, marginal_variable)

    def splineCartesianInverseMarginal(self, cdf: "double", marginal_variable: "int", precision: "double") -> "double":
        return _distribution1D.NDSpline_splineCartesianInverseMarginal(self, cdf, marginal_variable, precision)

    def fit(self, coordinates: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >", values: "vectord_cxx") -> "void":
        return _distribution1D.NDSpline_fit(self, coordinates, values)

    def ndSplineInit(self, discretizations: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &", values: "vectord_cxx", alpha: "vectord_cxx", beta: "vectord_cxx") -> "void":
        return _distribution1D.NDSpline_ndSplineInit(self, discretizations, values, alpha, beta)

    def getDiscretizations(self, vector: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &") -> "void":
        return _distribution1D.NDSpline_getDiscretizations(self, vector)

    def printFunction(self) -> "void":
        return _distribution1D.NDSpline_printFunction(self)

    def __init__(self, *args):
        _distribution1D.NDSpline_swiginit(self, _distribution1D.new_NDSpline(*args))
    __swig_destroy__ = _distribution1D.delete_NDSpline

    def checkUB(self, upper_bound: "double") -> "bool":
        return _distribution1D.NDSpline_checkUB(self, upper_bound)

    def checkLB(self, lower_bound: "double") -> "bool":
        return _distribution1D.NDSpline_checkLB(self, lower_bound)

    def checkBoundaries(self, point: "vectord_cxx") -> "bool":
        return _distribution1D.NDSpline_checkBoundaries(self, point)

    def getH(self, dim: "int") -> "double":
        return _distribution1D.NDSpline_getH(self, dim)

# Register NDSpline in _distribution1D:
_distribution1D.NDSpline_swigregister(NDSpline)

class InverseDistanceWeighting(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.InverseDistanceWeighting_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.InverseDistanceWeighting_getGradientAt(self, point_coordinate)

    def fit(self, coordinates: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >", values: "vectord_cxx") -> "void":
        return _distribution1D.InverseDistanceWeighting_fit(self, coordinates, values)

    def __init__(self, *args):
        _distribution1D.InverseDistanceWeighting_swiginit(self, _distribution1D.new_InverseDistanceWeighting(*args))
    __swig_destroy__ = _distribution1D.delete_InverseDistanceWeighting

    def checkUB(self, upper_bound: "double") -> "bool":
        return _distribution1D.InverseDistanceWeighting_checkUB(self, upper_bound)

    def checkLB(self, lower_bound: "double") -> "bool":
        return _distribution1D.InverseDistanceWeighting_checkLB(self, lower_bound)

    def getCellPoint0(self) -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.InverseDistanceWeighting_getCellPoint0(self)

    def getCellDxs(self) -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.InverseDistanceWeighting_getCellDxs(self)

# Register InverseDistanceWeighting in _distribution1D:
_distribution1D.InverseDistanceWeighting_swigregister(InverseDistanceWeighting)

class MicroSphere(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.MicroSphere_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate: "vectord_cxx") -> "double":
        return _distribution1D.MicroSphere_getGradientAt(self, point_coordinate)

    def fit(self, coordinates: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >", values: "vectord_cxx") -> "void":
        return _distribution1D.MicroSphere_fit(self, coordinates, values)

    def __init__(self, *args):
        _distribution1D.MicroSphere_swiginit(self, _distribution1D.new_MicroSphere(*args))
    __swig_destroy__ = _distribution1D.delete_MicroSphere

# Register MicroSphere in _distribution1D:
_distribution1D.MicroSphere_swigregister(MicroSphere)

PDF = _distribution1D.PDF
CDF = _distribution1D.CDF
class BasicDistributionND(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _distribution1D.delete_BasicDistributionND

    def getVariable(self, variable_name: "std::string const &") -> "double":
        return _distribution1D.BasicDistributionND_getVariable(self, variable_name)

    def updateVariable(self, variable_name: "std::string const &", new_value: "double &") -> "void":
        return _distribution1D.BasicDistributionND_updateVariable(self, variable_name, new_value)

    def pdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicDistributionND_pdf(self, x)

    def cdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicDistributionND_cdf(self, x)

    def inverseCdf(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicDistributionND_inverseCdf(self, f, g)

    def inverseMarginal(self, f: "double", dimension: "int") -> "double":
        return _distribution1D.BasicDistributionND_inverseMarginal(self, f, dimension)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicDistributionND_returnDimensionality(self)

    def cellIntegral(self, center: "vectord_cxx", dx: "vectord_cxx") -> "double":
        return _distribution1D.BasicDistributionND_cellIntegral(self, center, dx)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicDistributionND_returnUpperBound(self, dimension)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicDistributionND_returnLowerBound(self, dimension)

    def getType(self) -> "std::string &":
        return _distribution1D.BasicDistributionND_getType(self)

    def oneDtoNDconverter(self, one_d_coordinate: "int", indexes: "vectori_cxx") -> "std::vector< int,std::allocator< int > >":
        return _distribution1D.BasicDistributionND_oneDtoNDconverter(self, one_d_coordinate, indexes)

# Register BasicDistributionND in _distribution1D:
_distribution1D.BasicDistributionND_swigregister(BasicDistributionND)

class BasicMultiDimensionalCartesianSpline(BasicDistributionND):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def basicMultiDimensionalCartesianSplineInit(self) -> "void":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_basicMultiDimensionalCartesianSplineInit(self)

    def __init__(self, *args):
        _distribution1D.BasicMultiDimensionalCartesianSpline_swiginit(self, _distribution1D.new_BasicMultiDimensionalCartesianSpline(*args))
    __swig_destroy__ = _distribution1D.delete_BasicMultiDimensionalCartesianSpline

    def pdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_pdf(self, x)

    def cdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_cdf(self, x)

    def inverseCdf(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_inverseCdf(self, f, g)

    def inverseMarginal(self, f: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_inverseMarginal(self, f, dimension)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_returnDimensionality(self)

    def updateRNGparameter(self, tolerance: "double", initial_divisions: "double") -> "void":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_updateRNGparameter(self, tolerance, initial_divisions)

    def marginal(self, x: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_marginal(self, x, dimension)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_returnUpperBound(self, dimension)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalCartesianSpline_returnLowerBound(self, dimension)

# Register BasicMultiDimensionalCartesianSpline in _distribution1D:
_distribution1D.BasicMultiDimensionalCartesianSpline_swigregister(BasicMultiDimensionalCartesianSpline)

class BasicMultiDimensionalInverseWeight(BasicDistributionND):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _distribution1D.BasicMultiDimensionalInverseWeight_swiginit(self, _distribution1D.new_BasicMultiDimensionalInverseWeight(*args))

    def basicMultiDimensionalInverseWeightInit(self) -> "void":
        return _distribution1D.BasicMultiDimensionalInverseWeight_basicMultiDimensionalInverseWeightInit(self)
    __swig_destroy__ = _distribution1D.delete_BasicMultiDimensionalInverseWeight

    def pdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_pdf(self, x)

    def cdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_cdf(self, x)

    def updateRNGparameter(self, tolerance: "double", initial_divisions: "double") -> "void":
        return _distribution1D.BasicMultiDimensionalInverseWeight_updateRNGparameter(self, tolerance, initial_divisions)

    def inverseCdf(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicMultiDimensionalInverseWeight_inverseCdf(self, f, g)

    def inverseMarginal(self, f: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_inverseMarginal(self, f, dimension)

    def marginal(self, x: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_marginal(self, x, dimension)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicMultiDimensionalInverseWeight_returnDimensionality(self)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_returnUpperBound(self, dimension)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalInverseWeight_returnLowerBound(self, dimension)

# Register BasicMultiDimensionalInverseWeight in _distribution1D:
_distribution1D.BasicMultiDimensionalInverseWeight_swigregister(BasicMultiDimensionalInverseWeight)

class BasicMultiDimensionalScatteredMS(BasicDistributionND):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _distribution1D.BasicMultiDimensionalScatteredMS_swiginit(self, _distribution1D.new_BasicMultiDimensionalScatteredMS(*args))
    __swig_destroy__ = _distribution1D.delete_BasicMultiDimensionalScatteredMS

    def pdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalScatteredMS_pdf(self, x)

    def cdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultiDimensionalScatteredMS_cdf(self, x)

    def inverseCdf(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicMultiDimensionalScatteredMS_inverseCdf(self, f, g)

    def inverseMarginal(self, arg2: "double", arg3: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalScatteredMS_inverseMarginal(self, arg2, arg3)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicMultiDimensionalScatteredMS_returnDimensionality(self)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalScatteredMS_returnLowerBound(self, dimension)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultiDimensionalScatteredMS_returnUpperBound(self, dimension)

# Register BasicMultiDimensionalScatteredMS in _distribution1D:
_distribution1D.BasicMultiDimensionalScatteredMS_swigregister(BasicMultiDimensionalScatteredMS)

class BasicMultivariateNormal(BasicDistributionND):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _distribution1D.BasicMultivariateNormal_swiginit(self, _distribution1D.new_BasicMultivariateNormal(*args))

    def basicMultivariateNormalInit(self, rows: "unsigned int &", columns: "unsigned int &", cov_matrix: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >", mu: "vectord_cxx") -> "void":
        return _distribution1D.BasicMultivariateNormal_basicMultivariateNormalInit(self, rows, columns, cov_matrix, mu)
    __swig_destroy__ = _distribution1D.delete_BasicMultivariateNormal

    def pdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultivariateNormal_pdf(self, x)

    def cdf(self, x: "vectord_cxx") -> "double":
        return _distribution1D.BasicMultivariateNormal_cdf(self, x)

    def inverseCdf(self, f: "double", g: "double") -> "std::vector< double,std::allocator< double > >":
        return _distribution1D.BasicMultivariateNormal_inverseCdf(self, f, g)

    def inverseMarginal(self, f: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultivariateNormal_inverseMarginal(self, f, dimension)

    def updateRNGparameter(self, tolerance: "double", initial_divisions: "double") -> "void":
        return _distribution1D.BasicMultivariateNormal_updateRNGparameter(self, tolerance, initial_divisions)

    def marginal(self, x: "double", dimension: "int") -> "double":
        return _distribution1D.BasicMultivariateNormal_marginal(self, x, dimension)

    def returnDimensionality(self) -> "int":
        return _distribution1D.BasicMultivariateNormal_returnDimensionality(self)

    def phi(self, x: "double") -> "double":
        return _distribution1D.BasicMultivariateNormal_phi(self, x)

    def phiInv(self, x: "double") -> "double":
        return _distribution1D.BasicMultivariateNormal_phiInv(self, x)

    def cholesky(self, A: "double *", n: "int") -> "double *":
        return _distribution1D.BasicMultivariateNormal_cholesky(self, A, n)

    def choleskyDecomposition(self, matrix: "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _distribution1D.BasicMultivariateNormal_choleskyDecomposition(self, matrix)

    def showMatrix(self, A: "double *", n: "int") -> "void":
        return _distribution1D.BasicMultivariateNormal_showMatrix(self, A, n)

    def returnLowerBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultivariateNormal_returnLowerBound(self, dimension)

    def returnUpperBound(self, dimension: "int") -> "double":
        return _distribution1D.BasicMultivariateNormal_returnUpperBound(self, dimension)

# Register BasicMultivariateNormal in _distribution1D:
_distribution1D.BasicMultivariateNormal_swigregister(BasicMultivariateNormal)

class vectord_cxx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _distribution1D.vectord_cxx_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _distribution1D.vectord_cxx___nonzero__(self)

    def __bool__(self) -> "bool":
        return _distribution1D.vectord_cxx___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _distribution1D.vectord_cxx___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _distribution1D.vectord_cxx___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _distribution1D.vectord_cxx___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _distribution1D.vectord_cxx___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _distribution1D.vectord_cxx___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _distribution1D.vectord_cxx___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _distribution1D.vectord_cxx___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _distribution1D.vectord_cxx_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _distribution1D.vectord_cxx_append(self, x)

    def empty(self) -> "bool":
        return _distribution1D.vectord_cxx_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _distribution1D.vectord_cxx_size(self)

    def swap(self, v: "vectord_cxx") -> "void":
        return _distribution1D.vectord_cxx_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _distribution1D.vectord_cxx_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _distribution1D.vectord_cxx_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _distribution1D.vectord_cxx_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _distribution1D.vectord_cxx_rend(self)

    def clear(self) -> "void":
        return _distribution1D.vectord_cxx_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _distribution1D.vectord_cxx_get_allocator(self)

    def pop_back(self) -> "void":
        return _distribution1D.vectord_cxx_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _distribution1D.vectord_cxx_erase(self, *args)

    def __init__(self, *args):
        _distribution1D.vectord_cxx_swiginit(self, _distribution1D.new_vectord_cxx(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _distribution1D.vectord_cxx_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _distribution1D.vectord_cxx_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _distribution1D.vectord_cxx_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _distribution1D.vectord_cxx_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _distribution1D.vectord_cxx_resize(self, *args)

    def insert(self, *args) -> "void":
        return _distribution1D.vectord_cxx_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _distribution1D.vectord_cxx_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _distribution1D.vectord_cxx_capacity(self)
    __swig_destroy__ = _distribution1D.delete_vectord_cxx

# Register vectord_cxx in _distribution1D:
_distribution1D.vectord_cxx_swigregister(vectord_cxx)

class vectori_cxx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _distribution1D.vectori_cxx_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _distribution1D.vectori_cxx___nonzero__(self)

    def __bool__(self) -> "bool":
        return _distribution1D.vectori_cxx___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _distribution1D.vectori_cxx___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _distribution1D.vectori_cxx___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _distribution1D.vectori_cxx___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _distribution1D.vectori_cxx___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _distribution1D.vectori_cxx___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _distribution1D.vectori_cxx___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _distribution1D.vectori_cxx___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _distribution1D.vectori_cxx_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _distribution1D.vectori_cxx_append(self, x)

    def empty(self) -> "bool":
        return _distribution1D.vectori_cxx_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _distribution1D.vectori_cxx_size(self)

    def swap(self, v: "vectori_cxx") -> "void":
        return _distribution1D.vectori_cxx_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _distribution1D.vectori_cxx_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _distribution1D.vectori_cxx_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _distribution1D.vectori_cxx_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _distribution1D.vectori_cxx_rend(self)

    def clear(self) -> "void":
        return _distribution1D.vectori_cxx_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _distribution1D.vectori_cxx_get_allocator(self)

    def pop_back(self) -> "void":
        return _distribution1D.vectori_cxx_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _distribution1D.vectori_cxx_erase(self, *args)

    def __init__(self, *args):
        _distribution1D.vectori_cxx_swiginit(self, _distribution1D.new_vectori_cxx(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _distribution1D.vectori_cxx_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _distribution1D.vectori_cxx_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _distribution1D.vectori_cxx_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _distribution1D.vectori_cxx_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _distribution1D.vectori_cxx_resize(self, *args)

    def insert(self, *args) -> "void":
        return _distribution1D.vectori_cxx_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _distribution1D.vectori_cxx_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _distribution1D.vectori_cxx_capacity(self)
    __swig_destroy__ = _distribution1D.delete_vectori_cxx

# Register vectori_cxx in _distribution1D:
_distribution1D.vectori_cxx_swigregister(vectori_cxx)



