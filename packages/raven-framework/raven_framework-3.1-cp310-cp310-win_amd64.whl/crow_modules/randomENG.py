# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _randomENG
else:
    import _randomENG

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _randomENG.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _randomENG.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _randomENG.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _randomENG.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _randomENG.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _randomENG.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _randomENG.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _randomENG.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _randomENG.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _randomENG.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _randomENG.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _randomENG.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _randomENG.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _randomENG.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _randomENG.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _randomENG.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _randomENG.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _randomENG:
_randomENG.SwigPyIterator_swigregister(SwigPyIterator)

class RandomClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _randomENG.RandomClass_swiginit(self, _randomENG.new_RandomClass())
    __swig_destroy__ = _randomENG.delete_RandomClass

    def seed(self, seed: "unsigned long") -> "void":
        return _randomENG.RandomClass_seed(self, seed)

    def random(self) -> "double":
        return _randomENG.RandomClass_random(self)

    def get_rng_state(self) -> "int":
        return _randomENG.RandomClass_get_rng_state(self)

    def forward_seed(self, counts: "unsigned int") -> "void":
        return _randomENG.RandomClass_forward_seed(self, counts)

    def get_rng_seed(self) -> "int":
        return _randomENG.RandomClass_get_rng_seed(self)

# Register RandomClass in _randomENG:
_randomENG.RandomClass_swigregister(RandomClass)

class vectd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _randomENG.vectd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _randomENG.vectd___nonzero__(self)

    def __bool__(self) -> "bool":
        return _randomENG.vectd___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _randomENG.vectd___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _randomENG.vectd___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _randomENG.vectd___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _randomENG.vectd___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _randomENG.vectd___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _randomENG.vectd___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _randomENG.vectd___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _randomENG.vectd_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _randomENG.vectd_append(self, x)

    def empty(self) -> "bool":
        return _randomENG.vectd_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _randomENG.vectd_size(self)

    def swap(self, v: "vectd") -> "void":
        return _randomENG.vectd_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _randomENG.vectd_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _randomENG.vectd_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _randomENG.vectd_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _randomENG.vectd_rend(self)

    def clear(self) -> "void":
        return _randomENG.vectd_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _randomENG.vectd_get_allocator(self)

    def pop_back(self) -> "void":
        return _randomENG.vectd_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _randomENG.vectd_erase(self, *args)

    def __init__(self, *args):
        _randomENG.vectd_swiginit(self, _randomENG.new_vectd(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _randomENG.vectd_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _randomENG.vectd_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _randomENG.vectd_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _randomENG.vectd_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _randomENG.vectd_resize(self, *args)

    def insert(self, *args) -> "void":
        return _randomENG.vectd_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _randomENG.vectd_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _randomENG.vectd_capacity(self)
    __swig_destroy__ = _randomENG.delete_vectd

# Register vectd in _randomENG:
_randomENG.vectd_swigregister(vectd)

class vectd2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _randomENG.vectd2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _randomENG.vectd2d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _randomENG.vectd2d___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _randomENG.vectd2d___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _randomENG.vectd2d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _randomENG.vectd2d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _randomENG.vectd2d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _randomENG.vectd2d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _randomENG.vectd2d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _randomENG.vectd2d___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _randomENG.vectd2d_pop(self)

    def append(self, x: "vectd") -> "void":
        return _randomENG.vectd2d_append(self, x)

    def empty(self) -> "bool":
        return _randomENG.vectd2d_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _randomENG.vectd2d_size(self)

    def swap(self, v: "vectd2d") -> "void":
        return _randomENG.vectd2d_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _randomENG.vectd2d_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _randomENG.vectd2d_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _randomENG.vectd2d_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _randomENG.vectd2d_rend(self)

    def clear(self) -> "void":
        return _randomENG.vectd2d_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _randomENG.vectd2d_get_allocator(self)

    def pop_back(self) -> "void":
        return _randomENG.vectd2d_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _randomENG.vectd2d_erase(self, *args)

    def __init__(self, *args):
        _randomENG.vectd2d_swiginit(self, _randomENG.new_vectd2d(*args))

    def push_back(self, x: "vectd") -> "void":
        return _randomENG.vectd2d_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _randomENG.vectd2d_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _randomENG.vectd2d_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "vectd") -> "void":
        return _randomENG.vectd2d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _randomENG.vectd2d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _randomENG.vectd2d_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _randomENG.vectd2d_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _randomENG.vectd2d_capacity(self)
    __swig_destroy__ = _randomENG.delete_vectd2d

# Register vectd2d in _randomENG:
_randomENG.vectd2d_swigregister(vectd2d)

class vecti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _randomENG.vecti_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _randomENG.vecti___nonzero__(self)

    def __bool__(self) -> "bool":
        return _randomENG.vecti___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _randomENG.vecti___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _randomENG.vecti___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _randomENG.vecti___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _randomENG.vecti___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _randomENG.vecti___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _randomENG.vecti___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _randomENG.vecti___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _randomENG.vecti_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _randomENG.vecti_append(self, x)

    def empty(self) -> "bool":
        return _randomENG.vecti_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _randomENG.vecti_size(self)

    def swap(self, v: "vecti") -> "void":
        return _randomENG.vecti_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _randomENG.vecti_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _randomENG.vecti_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _randomENG.vecti_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _randomENG.vecti_rend(self)

    def clear(self) -> "void":
        return _randomENG.vecti_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _randomENG.vecti_get_allocator(self)

    def pop_back(self) -> "void":
        return _randomENG.vecti_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _randomENG.vecti_erase(self, *args)

    def __init__(self, *args):
        _randomENG.vecti_swiginit(self, _randomENG.new_vecti(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _randomENG.vecti_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _randomENG.vecti_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _randomENG.vecti_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _randomENG.vecti_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _randomENG.vecti_resize(self, *args)

    def insert(self, *args) -> "void":
        return _randomENG.vecti_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _randomENG.vecti_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _randomENG.vecti_capacity(self)
    __swig_destroy__ = _randomENG.delete_vecti

# Register vecti in _randomENG:
_randomENG.vecti_swigregister(vecti)

class vecti2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _randomENG.vecti2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _randomENG.vecti2d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _randomENG.vecti2d___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _randomENG.vecti2d___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _randomENG.vecti2d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _randomENG.vecti2d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _randomENG.vecti2d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _randomENG.vecti2d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _randomENG.vecti2d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _randomENG.vecti2d___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _randomENG.vecti2d_pop(self)

    def append(self, x: "vecti") -> "void":
        return _randomENG.vecti2d_append(self, x)

    def empty(self) -> "bool":
        return _randomENG.vecti2d_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _randomENG.vecti2d_size(self)

    def swap(self, v: "vecti2d") -> "void":
        return _randomENG.vecti2d_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _randomENG.vecti2d_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _randomENG.vecti2d_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _randomENG.vecti2d_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _randomENG.vecti2d_rend(self)

    def clear(self) -> "void":
        return _randomENG.vecti2d_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _randomENG.vecti2d_get_allocator(self)

    def pop_back(self) -> "void":
        return _randomENG.vecti2d_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _randomENG.vecti2d_erase(self, *args)

    def __init__(self, *args):
        _randomENG.vecti2d_swiginit(self, _randomENG.new_vecti2d(*args))

    def push_back(self, x: "vecti") -> "void":
        return _randomENG.vecti2d_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _randomENG.vecti2d_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _randomENG.vecti2d_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "vecti") -> "void":
        return _randomENG.vecti2d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _randomENG.vecti2d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _randomENG.vecti2d_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _randomENG.vecti2d_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _randomENG.vecti2d_capacity(self)
    __swig_destroy__ = _randomENG.delete_vecti2d

# Register vecti2d in _randomENG:
_randomENG.vecti2d_swigregister(vecti2d)



