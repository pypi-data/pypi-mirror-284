# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amsc
else:
    import _amsc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amsc.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _amsc.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _amsc.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _amsc.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _amsc.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _amsc.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _amsc.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _amsc.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _amsc.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _amsc.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _amsc.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _amsc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _amsc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _amsc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _amsc.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _amsc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _amsc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _amsc:
_amsc.SwigPyIterator_swigregister(SwigPyIterator)

class FlowPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amsc.FlowPair_swiginit(self, _amsc.new_FlowPair(*args))
    down = property(_amsc.FlowPair_down_get, _amsc.FlowPair_down_set)
    up = property(_amsc.FlowPair_up_get, _amsc.FlowPair_up_set)
    __swig_destroy__ = _amsc.delete_FlowPair

# Register FlowPair in _amsc:
_amsc.FlowPair_swigregister(FlowPair)

class AMSCFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Xin: "vectorFloat", yin: "vectorFloat", _names: "vectorString", graph: "std::string", gradientMethod: "std::string", maxN: "int", beta: "float", persistenceType: "std::string", win: "vectorFloat", edgeIndices: "vectorInt", verbosity: "bool"=False):
        _amsc.AMSCFloat_swiginit(self, _amsc.new_AMSCFloat(Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity))

    def Dimension(self) -> "int":
        return _amsc.AMSCFloat_Dimension(self)

    def Size(self) -> "int":
        return _amsc.AMSCFloat_Size(self)

    def MaxY(self) -> "float":
        return _amsc.AMSCFloat_MaxY(self)

    def MinY(self) -> "float":
        return _amsc.AMSCFloat_MinY(self)

    def RangeY(self) -> "float":
        return _amsc.AMSCFloat_RangeY(self)

    def MaxX(self, dim: "int") -> "float":
        return _amsc.AMSCFloat_MaxX(self, dim)

    def MinX(self, dim: "int") -> "float":
        return _amsc.AMSCFloat_MinX(self, dim)

    def RangeX(self, dim: "int") -> "float":
        return _amsc.AMSCFloat_RangeX(self, dim)

    def GetX(self, *args) -> "float":
        return _amsc.AMSCFloat_GetX(self, *args)

    def GetY(self, i: "int") -> "float":
        return _amsc.AMSCFloat_GetY(self, i)

    def MinLabel(self, i: "int", pers: "float") -> "int":
        return _amsc.AMSCFloat_MinLabel(self, i, pers)

    def MaxLabel(self, i: "int", pers: "float") -> "int":
        return _amsc.AMSCFloat_MaxLabel(self, i, pers)

    def Name(self, dim: "int") -> "std::string":
        return _amsc.AMSCFloat_Name(self, dim)

    def Neighbors(self, index: "int") -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _amsc.AMSCFloat_Neighbors(self, index)

    def PrintHierarchy(self) -> "std::string":
        return _amsc.AMSCFloat_PrintHierarchy(self)

    def SortedPersistences(self) -> "std::vector< float,std::allocator< float > >":
        return _amsc.AMSCFloat_SortedPersistences(self)

    def XMLFormattedHierarchy(self) -> "std::string":
        return _amsc.AMSCFloat_XMLFormattedHierarchy(self)

    def GetPartitions(self, persistence: "float") -> "std::map< std::string,std::vector< int,std::allocator< int > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCFloat_GetPartitions(self, persistence)

    def GetStableManifolds(self, persistence: "float") -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCFloat_GetStableManifolds(self, persistence)

    def GetUnstableManifolds(self, persistence: "float") -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCFloat_GetUnstableManifolds(self, persistence)
    __swig_destroy__ = _amsc.delete_AMSCFloat

# Register AMSCFloat in _amsc:
_amsc.AMSCFloat_swigregister(AMSCFloat)

class AMSCDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Xin: "vectorDouble", yin: "vectorDouble", _names: "vectorString", graph: "std::string", gradientMethod: "std::string", maxN: "int", beta: "double", persistenceType: "std::string", win: "vectorDouble", edgeIndices: "vectorInt", verbosity: "bool"=False):
        _amsc.AMSCDouble_swiginit(self, _amsc.new_AMSCDouble(Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity))

    def Dimension(self) -> "int":
        return _amsc.AMSCDouble_Dimension(self)

    def Size(self) -> "int":
        return _amsc.AMSCDouble_Size(self)

    def MaxY(self) -> "double":
        return _amsc.AMSCDouble_MaxY(self)

    def MinY(self) -> "double":
        return _amsc.AMSCDouble_MinY(self)

    def RangeY(self) -> "double":
        return _amsc.AMSCDouble_RangeY(self)

    def MaxX(self, dim: "int") -> "double":
        return _amsc.AMSCDouble_MaxX(self, dim)

    def MinX(self, dim: "int") -> "double":
        return _amsc.AMSCDouble_MinX(self, dim)

    def RangeX(self, dim: "int") -> "double":
        return _amsc.AMSCDouble_RangeX(self, dim)

    def GetX(self, *args) -> "double":
        return _amsc.AMSCDouble_GetX(self, *args)

    def GetY(self, i: "int") -> "double":
        return _amsc.AMSCDouble_GetY(self, i)

    def MinLabel(self, i: "int", pers: "double") -> "int":
        return _amsc.AMSCDouble_MinLabel(self, i, pers)

    def MaxLabel(self, i: "int", pers: "double") -> "int":
        return _amsc.AMSCDouble_MaxLabel(self, i, pers)

    def Name(self, dim: "int") -> "std::string":
        return _amsc.AMSCDouble_Name(self, dim)

    def Neighbors(self, index: "int") -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _amsc.AMSCDouble_Neighbors(self, index)

    def PrintHierarchy(self) -> "std::string":
        return _amsc.AMSCDouble_PrintHierarchy(self)

    def SortedPersistences(self) -> "std::vector< double,std::allocator< double > >":
        return _amsc.AMSCDouble_SortedPersistences(self)

    def XMLFormattedHierarchy(self) -> "std::string":
        return _amsc.AMSCDouble_XMLFormattedHierarchy(self)

    def GetPartitions(self, persistence: "double") -> "std::map< std::string,std::vector< int,std::allocator< int > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCDouble_GetPartitions(self, persistence)

    def GetStableManifolds(self, persistence: "double") -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCDouble_GetStableManifolds(self, persistence)

    def GetUnstableManifolds(self, persistence: "double") -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _amsc.AMSCDouble_GetUnstableManifolds(self, persistence)
    __swig_destroy__ = _amsc.delete_AMSCDouble

# Register AMSCDouble in _amsc:
_amsc.AMSCDouble_swigregister(AMSCDouble)

class vectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.vectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.vectorFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.vectorFloat___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _amsc.vectorFloat___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _amsc.vectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amsc.vectorFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _amsc.vectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amsc.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _amsc.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amsc.vectorFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _amsc.vectorFloat_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _amsc.vectorFloat_append(self, x)

    def empty(self) -> "bool":
        return _amsc.vectorFloat_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _amsc.vectorFloat_size(self)

    def swap(self, v: "vectorFloat") -> "void":
        return _amsc.vectorFloat_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _amsc.vectorFloat_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _amsc.vectorFloat_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _amsc.vectorFloat_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _amsc.vectorFloat_rend(self)

    def clear(self) -> "void":
        return _amsc.vectorFloat_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _amsc.vectorFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _amsc.vectorFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _amsc.vectorFloat_erase(self, *args)

    def __init__(self, *args):
        _amsc.vectorFloat_swiginit(self, _amsc.new_vectorFloat(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _amsc.vectorFloat_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _amsc.vectorFloat_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _amsc.vectorFloat_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _amsc.vectorFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amsc.vectorFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amsc.vectorFloat_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _amsc.vectorFloat_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _amsc.vectorFloat_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorFloat

# Register vectorFloat in _amsc:
_amsc.vectorFloat_swigregister(vectorFloat)

class vectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.vectorDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.vectorDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _amsc.vectorDouble___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _amsc.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amsc.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _amsc.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amsc.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _amsc.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amsc.vectorDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _amsc.vectorDouble_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _amsc.vectorDouble_append(self, x)

    def empty(self) -> "bool":
        return _amsc.vectorDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _amsc.vectorDouble_size(self)

    def swap(self, v: "vectorDouble") -> "void":
        return _amsc.vectorDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _amsc.vectorDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _amsc.vectorDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _amsc.vectorDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _amsc.vectorDouble_rend(self)

    def clear(self) -> "void":
        return _amsc.vectorDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _amsc.vectorDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _amsc.vectorDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _amsc.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        _amsc.vectorDouble_swiginit(self, _amsc.new_vectorDouble(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _amsc.vectorDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _amsc.vectorDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _amsc.vectorDouble_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _amsc.vectorDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amsc.vectorDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amsc.vectorDouble_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _amsc.vectorDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _amsc.vectorDouble_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorDouble

# Register vectorDouble in _amsc:
_amsc.vectorDouble_swigregister(vectorDouble)

class vectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.vectorString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.vectorString___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _amsc.vectorString___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _amsc.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amsc.vectorString___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _amsc.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amsc.vectorString___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _amsc.vectorString___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amsc.vectorString___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _amsc.vectorString_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _amsc.vectorString_append(self, x)

    def empty(self) -> "bool":
        return _amsc.vectorString_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _amsc.vectorString_size(self)

    def swap(self, v: "vectorString") -> "void":
        return _amsc.vectorString_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _amsc.vectorString_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _amsc.vectorString_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _amsc.vectorString_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _amsc.vectorString_rend(self)

    def clear(self) -> "void":
        return _amsc.vectorString_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _amsc.vectorString_get_allocator(self)

    def pop_back(self) -> "void":
        return _amsc.vectorString_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _amsc.vectorString_erase(self, *args)

    def __init__(self, *args):
        _amsc.vectorString_swiginit(self, _amsc.new_vectorString(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _amsc.vectorString_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _amsc.vectorString_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _amsc.vectorString_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _amsc.vectorString_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amsc.vectorString_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amsc.vectorString_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _amsc.vectorString_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _amsc.vectorString_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorString

# Register vectorString in _amsc:
_amsc.vectorString_swigregister(vectorString)

class vectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.vectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.vectorInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _amsc.vectorInt___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _amsc.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amsc.vectorInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _amsc.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amsc.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _amsc.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amsc.vectorInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _amsc.vectorInt_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _amsc.vectorInt_append(self, x)

    def empty(self) -> "bool":
        return _amsc.vectorInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _amsc.vectorInt_size(self)

    def swap(self, v: "vectorInt") -> "void":
        return _amsc.vectorInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _amsc.vectorInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _amsc.vectorInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _amsc.vectorInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _amsc.vectorInt_rend(self)

    def clear(self) -> "void":
        return _amsc.vectorInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _amsc.vectorInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _amsc.vectorInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _amsc.vectorInt_erase(self, *args)

    def __init__(self, *args):
        _amsc.vectorInt_swiginit(self, _amsc.new_vectorInt(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _amsc.vectorInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _amsc.vectorInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _amsc.vectorInt_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _amsc.vectorInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amsc.vectorInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amsc.vectorInt_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _amsc.vectorInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _amsc.vectorInt_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorInt

# Register vectorInt in _amsc:
_amsc.vectorInt_swigregister(vectorInt)

class setInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.setInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.setInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.setInt___bool__(self)

    def __len__(self) -> "std::set< int >::size_type":
        return _amsc.setInt___len__(self)

    def append(self, x: "std::set< int >::value_type") -> "void":
        return _amsc.setInt_append(self, x)

    def __contains__(self, x: "std::set< int >::value_type") -> "bool":
        return _amsc.setInt___contains__(self, x)

    def __getitem__(self, i: "std::set< int >::difference_type") -> "std::set< int >::value_type":
        return _amsc.setInt___getitem__(self, i)

    def add(self, x: "std::set< int >::value_type") -> "void":
        return _amsc.setInt_add(self, x)

    def discard(self, x: "std::set< int >::value_type") -> "void":
        return _amsc.setInt_discard(self, x)

    def __init__(self, *args):
        _amsc.setInt_swiginit(self, _amsc.new_setInt(*args))

    def empty(self) -> "bool":
        return _amsc.setInt_empty(self)

    def size(self) -> "std::set< int >::size_type":
        return _amsc.setInt_size(self)

    def clear(self) -> "void":
        return _amsc.setInt_clear(self)

    def swap(self, v: "setInt") -> "void":
        return _amsc.setInt_swap(self, v)

    def count(self, x: "std::set< int >::key_type const &") -> "std::set< int >::size_type":
        return _amsc.setInt_count(self, x)

    def begin(self) -> "std::set< int >::iterator":
        return _amsc.setInt_begin(self)

    def end(self) -> "std::set< int >::iterator":
        return _amsc.setInt_end(self)

    def rbegin(self) -> "std::set< int >::reverse_iterator":
        return _amsc.setInt_rbegin(self)

    def rend(self) -> "std::set< int >::reverse_iterator":
        return _amsc.setInt_rend(self)

    def erase(self, *args) -> "void":
        return _amsc.setInt_erase(self, *args)

    def find(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _amsc.setInt_find(self, x)

    def lower_bound(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _amsc.setInt_lower_bound(self, x)

    def upper_bound(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _amsc.setInt_upper_bound(self, x)

    def equal_range(self, x: "std::set< int >::key_type const &") -> "std::pair< std::set< int >::iterator,std::set< int >::iterator >":
        return _amsc.setInt_equal_range(self, x)

    def insert(self, __x: "std::set< int >::value_type const &") -> "std::pair< std::set< int >::iterator,bool >":
        return _amsc.setInt_insert(self, __x)
    __swig_destroy__ = _amsc.delete_setInt

# Register setInt in _amsc:
_amsc.setInt_swigregister(setInt)

class mapPartition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapPartition_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.mapPartition___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.mapPartition___bool__(self)

    def __len__(self) -> "std::map< std::string,std::vector< int > >::size_type":
        return _amsc.mapPartition___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,std::vector< int > >::key_type const &") -> "std::map< std::string,std::vector< int > >::mapped_type const &":
        return _amsc.mapPartition___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,std::vector< int > >::key_type const &") -> "void":
        return _amsc.mapPartition___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _amsc.mapPartition_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _amsc.mapPartition_keys(self)

    def values(self) -> "PyObject *":
        return _amsc.mapPartition_values(self)

    def items(self) -> "PyObject *":
        return _amsc.mapPartition_items(self)

    def __contains__(self, key: "std::map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _amsc.mapPartition___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapPartition_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapPartition_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _amsc.mapPartition___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _amsc.mapPartition_asdict(self)

    def __init__(self, *args):
        _amsc.mapPartition_swiginit(self, _amsc.new_mapPartition(*args))

    def empty(self) -> "bool":
        return _amsc.mapPartition_empty(self)

    def size(self) -> "std::map< std::string,std::vector< int > >::size_type":
        return _amsc.mapPartition_size(self)

    def swap(self, v: "mapPartition") -> "void":
        return _amsc.mapPartition_swap(self, v)

    def begin(self) -> "std::map< std::string,std::vector< int > >::iterator":
        return _amsc.mapPartition_begin(self)

    def end(self) -> "std::map< std::string,std::vector< int > >::iterator":
        return _amsc.mapPartition_end(self)

    def rbegin(self) -> "std::map< std::string,std::vector< int > >::reverse_iterator":
        return _amsc.mapPartition_rbegin(self)

    def rend(self) -> "std::map< std::string,std::vector< int > >::reverse_iterator":
        return _amsc.mapPartition_rend(self)

    def clear(self) -> "void":
        return _amsc.mapPartition_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::vector< int > >::allocator_type":
        return _amsc.mapPartition_get_allocator(self)

    def count(self, x: "std::map< std::string,std::vector< int > >::key_type const &") -> "std::map< std::string,std::vector< int > >::size_type":
        return _amsc.mapPartition_count(self, x)

    def erase(self, *args) -> "void":
        return _amsc.mapPartition_erase(self, *args)

    def find(self, x: "std::map< std::string,std::vector< int > >::key_type const &") -> "std::map< std::string,std::vector< int > >::iterator":
        return _amsc.mapPartition_find(self, x)

    def lower_bound(self, x: "std::map< std::string,std::vector< int > >::key_type const &") -> "std::map< std::string,std::vector< int > >::iterator":
        return _amsc.mapPartition_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,std::vector< int > >::key_type const &") -> "std::map< std::string,std::vector< int > >::iterator":
        return _amsc.mapPartition_upper_bound(self, x)
    __swig_destroy__ = _amsc.delete_mapPartition

# Register mapPartition in _amsc:
_amsc.mapPartition_swigregister(mapPartition)

class mapManifolds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapManifolds_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amsc.mapManifolds___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amsc.mapManifolds___bool__(self)

    def __len__(self) -> "std::map< int,std::vector< int > >::size_type":
        return _amsc.mapManifolds___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< int,std::vector< int > >::key_type const &") -> "std::map< int,std::vector< int > >::mapped_type const &":
        return _amsc.mapManifolds___getitem__(self, key)

    def __delitem__(self, key: "std::map< int,std::vector< int > >::key_type const &") -> "void":
        return _amsc.mapManifolds___delitem__(self, key)

    def has_key(self, key: "std::map< int,std::vector< int > >::key_type const &") -> "bool":
        return _amsc.mapManifolds_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _amsc.mapManifolds_keys(self)

    def values(self) -> "PyObject *":
        return _amsc.mapManifolds_values(self)

    def items(self) -> "PyObject *":
        return _amsc.mapManifolds_items(self)

    def __contains__(self, key: "std::map< int,std::vector< int > >::key_type const &") -> "bool":
        return _amsc.mapManifolds___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapManifolds_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _amsc.mapManifolds_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _amsc.mapManifolds___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _amsc.mapManifolds_asdict(self)

    def __init__(self, *args):
        _amsc.mapManifolds_swiginit(self, _amsc.new_mapManifolds(*args))

    def empty(self) -> "bool":
        return _amsc.mapManifolds_empty(self)

    def size(self) -> "std::map< int,std::vector< int > >::size_type":
        return _amsc.mapManifolds_size(self)

    def swap(self, v: "mapManifolds") -> "void":
        return _amsc.mapManifolds_swap(self, v)

    def begin(self) -> "std::map< int,std::vector< int > >::iterator":
        return _amsc.mapManifolds_begin(self)

    def end(self) -> "std::map< int,std::vector< int > >::iterator":
        return _amsc.mapManifolds_end(self)

    def rbegin(self) -> "std::map< int,std::vector< int > >::reverse_iterator":
        return _amsc.mapManifolds_rbegin(self)

    def rend(self) -> "std::map< int,std::vector< int > >::reverse_iterator":
        return _amsc.mapManifolds_rend(self)

    def clear(self) -> "void":
        return _amsc.mapManifolds_clear(self)

    def get_allocator(self) -> "std::map< int,std::vector< int > >::allocator_type":
        return _amsc.mapManifolds_get_allocator(self)

    def count(self, x: "std::map< int,std::vector< int > >::key_type const &") -> "std::map< int,std::vector< int > >::size_type":
        return _amsc.mapManifolds_count(self, x)

    def erase(self, *args) -> "void":
        return _amsc.mapManifolds_erase(self, *args)

    def find(self, x: "std::map< int,std::vector< int > >::key_type const &") -> "std::map< int,std::vector< int > >::iterator":
        return _amsc.mapManifolds_find(self, x)

    def lower_bound(self, x: "std::map< int,std::vector< int > >::key_type const &") -> "std::map< int,std::vector< int > >::iterator":
        return _amsc.mapManifolds_lower_bound(self, x)

    def upper_bound(self, x: "std::map< int,std::vector< int > >::key_type const &") -> "std::map< int,std::vector< int > >::iterator":
        return _amsc.mapManifolds_upper_bound(self, x)
    __swig_destroy__ = _amsc.delete_mapManifolds

# Register mapManifolds in _amsc:
_amsc.mapManifolds_swigregister(mapManifolds)



