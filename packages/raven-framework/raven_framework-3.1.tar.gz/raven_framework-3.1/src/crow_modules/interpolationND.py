# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _interpolationND
else:
    import _interpolationND

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _interpolationND.delete_SwigPyIterator

    def value(self):
        return _interpolationND.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _interpolationND.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _interpolationND.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _interpolationND.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _interpolationND.SwigPyIterator_equal(self, x)

    def copy(self):
        return _interpolationND.SwigPyIterator_copy(self)

    def next(self):
        return _interpolationND.SwigPyIterator_next(self)

    def __next__(self):
        return _interpolationND.SwigPyIterator___next__(self)

    def previous(self):
        return _interpolationND.SwigPyIterator_previous(self)

    def advance(self, n):
        return _interpolationND.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _interpolationND.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _interpolationND.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _interpolationND.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _interpolationND.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _interpolationND.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _interpolationND.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _interpolationND:
_interpolationND.SwigPyIterator_swigregister(SwigPyIterator)

def checkUpperBound(upper_bound, values):
    return _interpolationND.checkUpperBound(upper_bound, values)

def checkLowerBound(lower_bound, values):
    return _interpolationND.checkLowerBound(lower_bound, values)

def intToBinary(value, size):
    return _interpolationND.intToBinary(value, size)
class NDInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate):
        return _interpolationND.NDInterpolation_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate):
        return _interpolationND.NDInterpolation_getGradientAt(self, point_coordinate)

    def fit(self, coordinates, values):
        return _interpolationND.NDInterpolation_fit(self, coordinates, values)

    def ndInverseFunctionGrid(self, f, g):
        return _interpolationND.NDInterpolation_ndInverseFunctionGrid(self, f, g)

    def averageCellValue(self, center, dx):
        return _interpolationND.NDInterpolation_averageCellValue(self, center, dx)

    def updateRNGParameters(self, tolerance, initial_divisions):
        return _interpolationND.NDInterpolation_updateRNGParameters(self, tolerance, initial_divisions)

    def ndDerivative(self, coordinate):
        return _interpolationND.NDInterpolation_ndDerivative(self, coordinate)

    def returnDimensionality(self):
        return _interpolationND.NDInterpolation_returnDimensionality(self)

    def returnUpperBound(self, dimension):
        return _interpolationND.NDInterpolation_returnUpperBound(self, dimension)

    def returnLowerBound(self, dimension):
        return _interpolationND.NDInterpolation_returnLowerBound(self, dimension)

    def __init__(self):
        _interpolationND.NDInterpolation_swiginit(self, _interpolationND.new_NDInterpolation())
    __swig_destroy__ = _interpolationND.delete_NDInterpolation

# Register NDInterpolation in _interpolationND:
_interpolationND.NDInterpolation_swigregister(NDInterpolation)
class NDSpline(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate):
        return _interpolationND.NDSpline_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate):
        return _interpolationND.NDSpline_getGradientAt(self, point_coordinate)

    def integralSpline(self, point_coordinate):
        return _interpolationND.NDSpline_integralSpline(self, point_coordinate)

    def splineCartesianMarginalIntegration(self, coordinate, marginal_variable):
        return _interpolationND.NDSpline_splineCartesianMarginalIntegration(self, coordinate, marginal_variable)

    def splineCartesianInverseMarginal(self, cdf, marginal_variable, precision):
        return _interpolationND.NDSpline_splineCartesianInverseMarginal(self, cdf, marginal_variable, precision)

    def fit(self, coordinates, values):
        return _interpolationND.NDSpline_fit(self, coordinates, values)

    def ndSplineInit(self, discretizations, values, alpha, beta):
        return _interpolationND.NDSpline_ndSplineInit(self, discretizations, values, alpha, beta)

    def getDiscretizations(self, vector):
        return _interpolationND.NDSpline_getDiscretizations(self, vector)

    def printFunction(self):
        return _interpolationND.NDSpline_printFunction(self)

    def __init__(self, *args):
        _interpolationND.NDSpline_swiginit(self, _interpolationND.new_NDSpline(*args))
    __swig_destroy__ = _interpolationND.delete_NDSpline

    def checkUB(self, upper_bound):
        return _interpolationND.NDSpline_checkUB(self, upper_bound)

    def checkLB(self, lower_bound):
        return _interpolationND.NDSpline_checkLB(self, lower_bound)

    def checkBoundaries(self, point):
        return _interpolationND.NDSpline_checkBoundaries(self, point)

    def getH(self, dim):
        return _interpolationND.NDSpline_getH(self, dim)

# Register NDSpline in _interpolationND:
_interpolationND.NDSpline_swigregister(NDSpline)
class InverseDistanceWeighting(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate):
        return _interpolationND.InverseDistanceWeighting_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate):
        return _interpolationND.InverseDistanceWeighting_getGradientAt(self, point_coordinate)

    def fit(self, coordinates, values):
        return _interpolationND.InverseDistanceWeighting_fit(self, coordinates, values)

    def __init__(self, *args):
        _interpolationND.InverseDistanceWeighting_swiginit(self, _interpolationND.new_InverseDistanceWeighting(*args))
    __swig_destroy__ = _interpolationND.delete_InverseDistanceWeighting

    def checkUB(self, upper_bound):
        return _interpolationND.InverseDistanceWeighting_checkUB(self, upper_bound)

    def checkLB(self, lower_bound):
        return _interpolationND.InverseDistanceWeighting_checkLB(self, lower_bound)

    def getCellPoint0(self):
        return _interpolationND.InverseDistanceWeighting_getCellPoint0(self)

    def getCellDxs(self):
        return _interpolationND.InverseDistanceWeighting_getCellDxs(self)

# Register InverseDistanceWeighting in _interpolationND:
_interpolationND.InverseDistanceWeighting_swigregister(InverseDistanceWeighting)
class MicroSphere(NDInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def interpolateAt(self, point_coordinate):
        return _interpolationND.MicroSphere_interpolateAt(self, point_coordinate)

    def getGradientAt(self, point_coordinate):
        return _interpolationND.MicroSphere_getGradientAt(self, point_coordinate)

    def fit(self, coordinates, values):
        return _interpolationND.MicroSphere_fit(self, coordinates, values)

    def __init__(self, *args):
        _interpolationND.MicroSphere_swiginit(self, _interpolationND.new_MicroSphere(*args))
    __swig_destroy__ = _interpolationND.delete_MicroSphere

# Register MicroSphere in _interpolationND:
_interpolationND.MicroSphere_swigregister(MicroSphere)
class vectd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _interpolationND.vectd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _interpolationND.vectd___nonzero__(self)

    def __bool__(self):
        return _interpolationND.vectd___bool__(self)

    def __len__(self):
        return _interpolationND.vectd___len__(self)

    def __getslice__(self, i, j):
        return _interpolationND.vectd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _interpolationND.vectd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _interpolationND.vectd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _interpolationND.vectd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _interpolationND.vectd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _interpolationND.vectd___setitem__(self, *args)

    def pop(self):
        return _interpolationND.vectd_pop(self)

    def append(self, x):
        return _interpolationND.vectd_append(self, x)

    def empty(self):
        return _interpolationND.vectd_empty(self)

    def size(self):
        return _interpolationND.vectd_size(self)

    def swap(self, v):
        return _interpolationND.vectd_swap(self, v)

    def begin(self):
        return _interpolationND.vectd_begin(self)

    def end(self):
        return _interpolationND.vectd_end(self)

    def rbegin(self):
        return _interpolationND.vectd_rbegin(self)

    def rend(self):
        return _interpolationND.vectd_rend(self)

    def clear(self):
        return _interpolationND.vectd_clear(self)

    def get_allocator(self):
        return _interpolationND.vectd_get_allocator(self)

    def pop_back(self):
        return _interpolationND.vectd_pop_back(self)

    def erase(self, *args):
        return _interpolationND.vectd_erase(self, *args)

    def __init__(self, *args):
        _interpolationND.vectd_swiginit(self, _interpolationND.new_vectd(*args))

    def push_back(self, x):
        return _interpolationND.vectd_push_back(self, x)

    def front(self):
        return _interpolationND.vectd_front(self)

    def back(self):
        return _interpolationND.vectd_back(self)

    def assign(self, n, x):
        return _interpolationND.vectd_assign(self, n, x)

    def resize(self, *args):
        return _interpolationND.vectd_resize(self, *args)

    def insert(self, *args):
        return _interpolationND.vectd_insert(self, *args)

    def reserve(self, n):
        return _interpolationND.vectd_reserve(self, n)

    def capacity(self):
        return _interpolationND.vectd_capacity(self)
    __swig_destroy__ = _interpolationND.delete_vectd

# Register vectd in _interpolationND:
_interpolationND.vectd_swigregister(vectd)
class vectd2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _interpolationND.vectd2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _interpolationND.vectd2d___nonzero__(self)

    def __bool__(self):
        return _interpolationND.vectd2d___bool__(self)

    def __len__(self):
        return _interpolationND.vectd2d___len__(self)

    def __getslice__(self, i, j):
        return _interpolationND.vectd2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _interpolationND.vectd2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _interpolationND.vectd2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _interpolationND.vectd2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _interpolationND.vectd2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _interpolationND.vectd2d___setitem__(self, *args)

    def pop(self):
        return _interpolationND.vectd2d_pop(self)

    def append(self, x):
        return _interpolationND.vectd2d_append(self, x)

    def empty(self):
        return _interpolationND.vectd2d_empty(self)

    def size(self):
        return _interpolationND.vectd2d_size(self)

    def swap(self, v):
        return _interpolationND.vectd2d_swap(self, v)

    def begin(self):
        return _interpolationND.vectd2d_begin(self)

    def end(self):
        return _interpolationND.vectd2d_end(self)

    def rbegin(self):
        return _interpolationND.vectd2d_rbegin(self)

    def rend(self):
        return _interpolationND.vectd2d_rend(self)

    def clear(self):
        return _interpolationND.vectd2d_clear(self)

    def get_allocator(self):
        return _interpolationND.vectd2d_get_allocator(self)

    def pop_back(self):
        return _interpolationND.vectd2d_pop_back(self)

    def erase(self, *args):
        return _interpolationND.vectd2d_erase(self, *args)

    def __init__(self, *args):
        _interpolationND.vectd2d_swiginit(self, _interpolationND.new_vectd2d(*args))

    def push_back(self, x):
        return _interpolationND.vectd2d_push_back(self, x)

    def front(self):
        return _interpolationND.vectd2d_front(self)

    def back(self):
        return _interpolationND.vectd2d_back(self)

    def assign(self, n, x):
        return _interpolationND.vectd2d_assign(self, n, x)

    def resize(self, *args):
        return _interpolationND.vectd2d_resize(self, *args)

    def insert(self, *args):
        return _interpolationND.vectd2d_insert(self, *args)

    def reserve(self, n):
        return _interpolationND.vectd2d_reserve(self, n)

    def capacity(self):
        return _interpolationND.vectd2d_capacity(self)
    __swig_destroy__ = _interpolationND.delete_vectd2d

# Register vectd2d in _interpolationND:
_interpolationND.vectd2d_swigregister(vectd2d)
class vecti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _interpolationND.vecti_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _interpolationND.vecti___nonzero__(self)

    def __bool__(self):
        return _interpolationND.vecti___bool__(self)

    def __len__(self):
        return _interpolationND.vecti___len__(self)

    def __getslice__(self, i, j):
        return _interpolationND.vecti___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _interpolationND.vecti___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _interpolationND.vecti___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _interpolationND.vecti___delitem__(self, *args)

    def __getitem__(self, *args):
        return _interpolationND.vecti___getitem__(self, *args)

    def __setitem__(self, *args):
        return _interpolationND.vecti___setitem__(self, *args)

    def pop(self):
        return _interpolationND.vecti_pop(self)

    def append(self, x):
        return _interpolationND.vecti_append(self, x)

    def empty(self):
        return _interpolationND.vecti_empty(self)

    def size(self):
        return _interpolationND.vecti_size(self)

    def swap(self, v):
        return _interpolationND.vecti_swap(self, v)

    def begin(self):
        return _interpolationND.vecti_begin(self)

    def end(self):
        return _interpolationND.vecti_end(self)

    def rbegin(self):
        return _interpolationND.vecti_rbegin(self)

    def rend(self):
        return _interpolationND.vecti_rend(self)

    def clear(self):
        return _interpolationND.vecti_clear(self)

    def get_allocator(self):
        return _interpolationND.vecti_get_allocator(self)

    def pop_back(self):
        return _interpolationND.vecti_pop_back(self)

    def erase(self, *args):
        return _interpolationND.vecti_erase(self, *args)

    def __init__(self, *args):
        _interpolationND.vecti_swiginit(self, _interpolationND.new_vecti(*args))

    def push_back(self, x):
        return _interpolationND.vecti_push_back(self, x)

    def front(self):
        return _interpolationND.vecti_front(self)

    def back(self):
        return _interpolationND.vecti_back(self)

    def assign(self, n, x):
        return _interpolationND.vecti_assign(self, n, x)

    def resize(self, *args):
        return _interpolationND.vecti_resize(self, *args)

    def insert(self, *args):
        return _interpolationND.vecti_insert(self, *args)

    def reserve(self, n):
        return _interpolationND.vecti_reserve(self, n)

    def capacity(self):
        return _interpolationND.vecti_capacity(self)
    __swig_destroy__ = _interpolationND.delete_vecti

# Register vecti in _interpolationND:
_interpolationND.vecti_swigregister(vecti)
class vecti2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _interpolationND.vecti2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _interpolationND.vecti2d___nonzero__(self)

    def __bool__(self):
        return _interpolationND.vecti2d___bool__(self)

    def __len__(self):
        return _interpolationND.vecti2d___len__(self)

    def __getslice__(self, i, j):
        return _interpolationND.vecti2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _interpolationND.vecti2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _interpolationND.vecti2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _interpolationND.vecti2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _interpolationND.vecti2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _interpolationND.vecti2d___setitem__(self, *args)

    def pop(self):
        return _interpolationND.vecti2d_pop(self)

    def append(self, x):
        return _interpolationND.vecti2d_append(self, x)

    def empty(self):
        return _interpolationND.vecti2d_empty(self)

    def size(self):
        return _interpolationND.vecti2d_size(self)

    def swap(self, v):
        return _interpolationND.vecti2d_swap(self, v)

    def begin(self):
        return _interpolationND.vecti2d_begin(self)

    def end(self):
        return _interpolationND.vecti2d_end(self)

    def rbegin(self):
        return _interpolationND.vecti2d_rbegin(self)

    def rend(self):
        return _interpolationND.vecti2d_rend(self)

    def clear(self):
        return _interpolationND.vecti2d_clear(self)

    def get_allocator(self):
        return _interpolationND.vecti2d_get_allocator(self)

    def pop_back(self):
        return _interpolationND.vecti2d_pop_back(self)

    def erase(self, *args):
        return _interpolationND.vecti2d_erase(self, *args)

    def __init__(self, *args):
        _interpolationND.vecti2d_swiginit(self, _interpolationND.new_vecti2d(*args))

    def push_back(self, x):
        return _interpolationND.vecti2d_push_back(self, x)

    def front(self):
        return _interpolationND.vecti2d_front(self)

    def back(self):
        return _interpolationND.vecti2d_back(self)

    def assign(self, n, x):
        return _interpolationND.vecti2d_assign(self, n, x)

    def resize(self, *args):
        return _interpolationND.vecti2d_resize(self, *args)

    def insert(self, *args):
        return _interpolationND.vecti2d_insert(self, *args)

    def reserve(self, n):
        return _interpolationND.vecti2d_reserve(self, n)

    def capacity(self):
        return _interpolationND.vecti2d_capacity(self)
    __swig_destroy__ = _interpolationND.delete_vecti2d

# Register vecti2d in _interpolationND:
_interpolationND.vecti2d_swigregister(vecti2d)

