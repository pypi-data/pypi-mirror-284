import pickle
import base64

##########################################
##TODO remove dependencies to rdfobj here

from rdfobj import  ModelPopulator
# +from .utils , .meta_model
##########################################


#utilities to manipulate the classes generated 

from biopax.molecularinteraction import MolecularInteraction
from biopax.complexassembly import ComplexAssembly
from biopax.modulation import Modulation
from biopax.experimentalform import ExperimentalForm
from biopax.rna import Rna
from biopax.entityreferencetypevocabulary import EntityReferenceTypeVocabulary
from biopax.controlledvocabulary import ControlledVocabulary
from biopax.sequenceinterval import SequenceInterval
from biopax.experimentalformvocabulary import ExperimentalFormVocabulary
from biopax.fragmentfeature import FragmentFeature
from biopax.templatereactionregulation import TemplateReactionRegulation
from biopax.transport import Transport
from biopax.complex import Complex
from biopax.physicalentity import PhysicalEntity
from biopax.smallmolecule import SmallMolecule
from biopax.biochemicalpathwaystep import BiochemicalPathwayStep
from biopax.smallmoleculereference import SmallMoleculeReference
from biopax.bindingfeature import BindingFeature
from biopax.dnaregionreference import DnaRegionReference
from biopax.chemicalstructure import ChemicalStructure
from biopax.entityfeature import EntityFeature
from biopax.sequenceregionvocabulary import SequenceRegionVocabulary
from biopax.sequencesite import SequenceSite
from biopax.gene import Gene
from biopax.stoichiometry import Stoichiometry
from biopax.transportwithbiochemicalreaction import TransportWithBiochemicalReaction
from biopax.phenotypevocabulary import PhenotypeVocabulary
from biopax.publicationxref import PublicationXref
from biopax.score import Score
from biopax.unificationxref import UnificationXref
from biopax.dnareference import DnaReference
from biopax.dnaregion import DnaRegion
from biopax.degradation import Degradation
from biopax.evidence import Evidence
from biopax.interaction import Interaction
from biopax.cellvocabulary import CellVocabulary
from biopax.proteinreference import ProteinReference
from biopax.tissuevocabulary import TissueVocabulary
from biopax.modificationfeature import ModificationFeature
from biopax.kprime import KPrime
from biopax.sequencemodificationvocabulary import SequenceModificationVocabulary
from biopax.control import Control
from biopax.provenance import Provenance
from biopax.protein import Protein
from biopax.rnaregionreference import RnaRegionReference
from biopax.xref import Xref
from biopax.relationshipxref import RelationshipXref
from biopax.covalentbindingfeature import CovalentBindingFeature
from biopax.entityreference import EntityReference
from biopax.rnareference import RnaReference
from biopax.geneticinteraction import GeneticInteraction
from biopax.templatereaction import TemplateReaction
from biopax.relationshiptypevocabulary import RelationshipTypeVocabulary
from biopax.biosource import BioSource
from biopax.evidencecodevocabulary import EvidenceCodeVocabulary
from biopax.interactionvocabulary import InteractionVocabulary
from biopax.pathwaystep import PathwayStep
from biopax.catalysis import Catalysis
from biopax.dna import Dna
from biopax.rnaregion import RnaRegion
from biopax.biochemicalreaction import BiochemicalReaction
from biopax.sequencelocation import SequenceLocation
from biopax.cellularlocationvocabulary import CellularLocationVocabulary
from biopax.conversion import Conversion
from biopax.pathway import Pathway
from biopax.deltag import DeltaG
from biopax.entity import Entity
from biopax.utilityclass import UtilityClass
  



#return an instance of a class corresponding to the input keywork
def define_model_instance(clsn):


  if clsn is None:
    inst=None
  else:
    clsn=str(clsn).strip().lower()
    if clsn =='':
      inst=None 
    elif clsn.lower() == 'molecularinteraction':
      inst = MolecularInteraction() 
    elif clsn.lower() == 'complexassembly':
      inst = ComplexAssembly() 
    elif clsn.lower() == 'modulation':
      inst = Modulation() 
    elif clsn.lower() == 'experimentalform':
      inst = ExperimentalForm() 
    elif clsn.lower() == 'rna':
      inst = Rna() 
    elif clsn.lower() == 'entityreferencetypevocabulary':
      inst = EntityReferenceTypeVocabulary() 
    elif clsn.lower() == 'controlledvocabulary':
      inst = ControlledVocabulary() 
    elif clsn.lower() == 'sequenceinterval':
      inst = SequenceInterval() 
    elif clsn.lower() == 'experimentalformvocabulary':
      inst = ExperimentalFormVocabulary() 
    elif clsn.lower() == 'fragmentfeature':
      inst = FragmentFeature() 
    elif clsn.lower() == 'templatereactionregulation':
      inst = TemplateReactionRegulation() 
    elif clsn.lower() == 'transport':
      inst = Transport() 
    elif clsn.lower() == 'complex':
      inst = Complex() 
    elif clsn.lower() == 'physicalentity':
      inst = PhysicalEntity() 
    elif clsn.lower() == 'smallmolecule':
      inst = SmallMolecule() 
    elif clsn.lower() == 'biochemicalpathwaystep':
      inst = BiochemicalPathwayStep() 
    elif clsn.lower() == 'smallmoleculereference':
      inst = SmallMoleculeReference() 
    elif clsn.lower() == 'bindingfeature':
      inst = BindingFeature() 
    elif clsn.lower() == 'dnaregionreference':
      inst = DnaRegionReference() 
    elif clsn.lower() == 'chemicalstructure':
      inst = ChemicalStructure() 
    elif clsn.lower() == 'entityfeature':
      inst = EntityFeature() 
    elif clsn.lower() == 'sequenceregionvocabulary':
      inst = SequenceRegionVocabulary() 
    elif clsn.lower() == 'sequencesite':
      inst = SequenceSite() 
    elif clsn.lower() == 'gene':
      inst = Gene() 
    elif clsn.lower() == 'stoichiometry':
      inst = Stoichiometry() 
    elif clsn.lower() == 'transportwithbiochemicalreaction':
      inst = TransportWithBiochemicalReaction() 
    elif clsn.lower() == 'phenotypevocabulary':
      inst = PhenotypeVocabulary() 
    elif clsn.lower() == 'publicationxref':
      inst = PublicationXref() 
    elif clsn.lower() == 'score':
      inst = Score() 
    elif clsn.lower() == 'unificationxref':
      inst = UnificationXref() 
    elif clsn.lower() == 'dnareference':
      inst = DnaReference() 
    elif clsn.lower() == 'dnaregion':
      inst = DnaRegion() 
    elif clsn.lower() == 'degradation':
      inst = Degradation() 
    elif clsn.lower() == 'evidence':
      inst = Evidence() 
    elif clsn.lower() == 'interaction':
      inst = Interaction() 
    elif clsn.lower() == 'cellvocabulary':
      inst = CellVocabulary() 
    elif clsn.lower() == 'proteinreference':
      inst = ProteinReference() 
    elif clsn.lower() == 'tissuevocabulary':
      inst = TissueVocabulary() 
    elif clsn.lower() == 'modificationfeature':
      inst = ModificationFeature() 
    elif clsn.lower() == 'kprime':
      inst = KPrime() 
    elif clsn.lower() == 'sequencemodificationvocabulary':
      inst = SequenceModificationVocabulary() 
    elif clsn.lower() == 'control':
      inst = Control() 
    elif clsn.lower() == 'provenance':
      inst = Provenance() 
    elif clsn.lower() == 'protein':
      inst = Protein() 
    elif clsn.lower() == 'rnaregionreference':
      inst = RnaRegionReference() 
    elif clsn.lower() == 'xref':
      inst = Xref() 
    elif clsn.lower() == 'relationshipxref':
      inst = RelationshipXref() 
    elif clsn.lower() == 'covalentbindingfeature':
      inst = CovalentBindingFeature() 
    elif clsn.lower() == 'entityreference':
      inst = EntityReference() 
    elif clsn.lower() == 'rnareference':
      inst = RnaReference() 
    elif clsn.lower() == 'geneticinteraction':
      inst = GeneticInteraction() 
    elif clsn.lower() == 'templatereaction':
      inst = TemplateReaction() 
    elif clsn.lower() == 'relationshiptypevocabulary':
      inst = RelationshipTypeVocabulary() 
    elif clsn.lower() == 'biosource':
      inst = BioSource() 
    elif clsn.lower() == 'evidencecodevocabulary':
      inst = EvidenceCodeVocabulary() 
    elif clsn.lower() == 'interactionvocabulary':
      inst = InteractionVocabulary() 
    elif clsn.lower() == 'pathwaystep':
      inst = PathwayStep() 
    elif clsn.lower() == 'catalysis':
      inst = Catalysis() 
    elif clsn.lower() == 'dna':
      inst = Dna() 
    elif clsn.lower() == 'rnaregion':
      inst = RnaRegion() 
    elif clsn.lower() == 'biochemicalreaction':
      inst = BiochemicalReaction() 
    elif clsn.lower() == 'sequencelocation':
      inst = SequenceLocation() 
    elif clsn.lower() == 'cellularlocationvocabulary':
      inst = CellularLocationVocabulary() 
    elif clsn.lower() == 'conversion':
      inst = Conversion() 
    elif clsn.lower() == 'pathway':
      inst = Pathway() 
    elif clsn.lower() == 'deltag':
      inst = DeltaG() 
    elif clsn.lower() == 'entity':
      inst = Entity() 
    elif clsn.lower() == 'utilityclass':
      inst = UtilityClass() 
   
    else:
      inst=None
  

  return inst

#return an dictionary class_name->[children class_name]
def classes_children():

  mchildren=dict()
  mchildren['MolecularInteraction']= []
  mchildren['ComplexAssembly']= []
  mchildren['Modulation']= []
  mchildren['ExperimentalForm']= []
  mchildren['Rna']= []
  mchildren['EntityReferenceTypeVocabulary']= []
  mchildren['ControlledVocabulary']= ['CellVocabulary', 'PhenotypeVocabulary', 'ExperimentalFormVocabulary', 'EntityReferenceTypeVocabulary', 'SequenceModificationVocabulary', 'EvidenceCodeVocabulary', 'CellularLocationVocabulary', 'InteractionVocabulary', 'TissueVocabulary', 'RelationshipTypeVocabulary', 'SequenceRegionVocabulary']
  mchildren['SequenceInterval']= []
  mchildren['ExperimentalFormVocabulary']= []
  mchildren['FragmentFeature']= []
  mchildren['TemplateReactionRegulation']= []
  mchildren['Transport']= ['TransportWithBiochemicalReaction']
  mchildren['Complex']= []
  mchildren['PhysicalEntity']= ['Protein', 'Complex', 'SmallMolecule', 'Rna', 'DnaRegion', 'Dna', 'RnaRegion']
  mchildren['SmallMolecule']= []
  mchildren['BiochemicalPathwayStep']= []
  mchildren['SmallMoleculeReference']= []
  mchildren['BindingFeature']= ['CovalentBindingFeature']
  mchildren['DnaRegionReference']= []
  mchildren['ChemicalStructure']= []
  mchildren['EntityFeature']= ['ModificationFeature', 'FragmentFeature', 'CovalentBindingFeature', 'BindingFeature']
  mchildren['SequenceRegionVocabulary']= []
  mchildren['SequenceSite']= []
  mchildren['Gene']= []
  mchildren['Stoichiometry']= []
  mchildren['TransportWithBiochemicalReaction']= []
  mchildren['PhenotypeVocabulary']= []
  mchildren['PublicationXref']= []
  mchildren['Score']= []
  mchildren['UnificationXref']= []
  mchildren['DnaReference']= []
  mchildren['DnaRegion']= []
  mchildren['Degradation']= []
  mchildren['Evidence']= []
  mchildren['Interaction']= ['BiochemicalReaction', 'ComplexAssembly', 'Catalysis', 'TemplateReactionRegulation', 'Degradation', 'TemplateReaction', 'MolecularInteraction', 'Modulation', 'GeneticInteraction', 'TransportWithBiochemicalReaction', 'Conversion', 'Control', 'Transport']
  mchildren['CellVocabulary']= []
  mchildren['ProteinReference']= []
  mchildren['TissueVocabulary']= []
  mchildren['ModificationFeature']= ['CovalentBindingFeature']
  mchildren['KPrime']= []
  mchildren['SequenceModificationVocabulary']= []
  mchildren['Control']= ['Modulation', 'Catalysis', 'TemplateReactionRegulation']
  mchildren['Provenance']= []
  mchildren['Protein']= []
  mchildren['RnaRegionReference']= []
  mchildren['Xref']= ['RelationshipXref', 'UnificationXref', 'PublicationXref']
  mchildren['RelationshipXref']= []
  mchildren['CovalentBindingFeature']= []
  mchildren['EntityReference']= ['RnaReference', 'RnaRegionReference', 'DnaReference', 'ProteinReference', 'SmallMoleculeReference', 'DnaRegionReference']
  mchildren['RnaReference']= []
  mchildren['GeneticInteraction']= []
  mchildren['TemplateReaction']= []
  mchildren['RelationshipTypeVocabulary']= []
  mchildren['BioSource']= []
  mchildren['EvidenceCodeVocabulary']= []
  mchildren['InteractionVocabulary']= []
  mchildren['PathwayStep']= ['BiochemicalPathwayStep']
  mchildren['Catalysis']= []
  mchildren['Dna']= []
  mchildren['RnaRegion']= []
  mchildren['BiochemicalReaction']= ['TransportWithBiochemicalReaction']
  mchildren['SequenceLocation']= ['SequenceInterval', 'SequenceSite']
  mchildren['CellularLocationVocabulary']= []
  mchildren['Conversion']= ['BiochemicalReaction', 'ComplexAssembly', 'Degradation', 'TransportWithBiochemicalReaction', 'Transport']
  mchildren['Pathway']= []
  mchildren['DeltaG']= []
  mchildren['Entity']= ['Catalysis', 'TemplateReactionRegulation', 'Modulation', 'Conversion', 'Complex', 'Rna', 'Interaction', 'Dna', 'Control', 'Transport', 'Protein', 'SmallMolecule', 'TemplateReaction', 'Pathway', 'BiochemicalReaction', 'ComplexAssembly', 'Degradation', 'PhysicalEntity', 'MolecularInteraction', 'GeneticInteraction', 'TransportWithBiochemicalReaction', 'DnaRegion', 'RnaRegion', 'Gene']
  mchildren['UtilityClass']= ['BioSource', 'DeltaG', 'SequenceModificationVocabulary', 'EvidenceCodeVocabulary', 'Xref', 'ProteinReference', 'TissueVocabulary', 'RelationshipTypeVocabulary', 'Score', 'SequenceInterval', 'ControlledVocabulary', 'EntityFeature', 'CellVocabulary', 'RelationshipXref', 'RnaRegionReference', 'EntityReferenceTypeVocabulary', 'Evidence', 'SmallMoleculeReference', 'BiochemicalPathwayStep', 'RnaReference', 'PathwayStep', 'ChemicalStructure', 'DnaReference', 'BindingFeature', 'CellularLocationVocabulary', 'FragmentFeature', 'SequenceSite', 'DnaRegionReference', 'CovalentBindingFeature', 'UnificationXref', 'ExperimentalForm', 'ExperimentalFormVocabulary', 'PhenotypeVocabulary', 'SequenceLocation', 'Stoichiometry', 'InteractionVocabulary', 'KPrime', 'ModificationFeature', 'SequenceRegionVocabulary', 'Provenance', 'EntityReference', 'PublicationXref']
  
  return mchildren

def class_children(cln):
   mchildren=classes_children()
   if cln in mchildren.keys():
      return mchildren[cln]
   return None 

#list all classes of the model
def classesDict():
   model=dict() 
   model['MolecularInteraction']=MolecularInteraction
   model['ComplexAssembly']=ComplexAssembly
   model['Modulation']=Modulation
   model['ExperimentalForm']=ExperimentalForm
   model['Rna']=Rna
   model['EntityReferenceTypeVocabulary']=EntityReferenceTypeVocabulary
   model['ControlledVocabulary']=ControlledVocabulary
   model['SequenceInterval']=SequenceInterval
   model['ExperimentalFormVocabulary']=ExperimentalFormVocabulary
   model['FragmentFeature']=FragmentFeature
   model['TemplateReactionRegulation']=TemplateReactionRegulation
   model['Transport']=Transport
   model['Complex']=Complex
   model['PhysicalEntity']=PhysicalEntity
   model['SmallMolecule']=SmallMolecule
   model['BiochemicalPathwayStep']=BiochemicalPathwayStep
   model['SmallMoleculeReference']=SmallMoleculeReference
   model['BindingFeature']=BindingFeature
   model['DnaRegionReference']=DnaRegionReference
   model['ChemicalStructure']=ChemicalStructure
   model['EntityFeature']=EntityFeature
   model['SequenceRegionVocabulary']=SequenceRegionVocabulary
   model['SequenceSite']=SequenceSite
   model['Gene']=Gene
   model['Stoichiometry']=Stoichiometry
   model['TransportWithBiochemicalReaction']=TransportWithBiochemicalReaction
   model['PhenotypeVocabulary']=PhenotypeVocabulary
   model['PublicationXref']=PublicationXref
   model['Score']=Score
   model['UnificationXref']=UnificationXref
   model['DnaReference']=DnaReference
   model['DnaRegion']=DnaRegion
   model['Degradation']=Degradation
   model['Evidence']=Evidence
   model['Interaction']=Interaction
   model['CellVocabulary']=CellVocabulary
   model['ProteinReference']=ProteinReference
   model['TissueVocabulary']=TissueVocabulary
   model['ModificationFeature']=ModificationFeature
   model['KPrime']=KPrime
   model['SequenceModificationVocabulary']=SequenceModificationVocabulary
   model['Control']=Control
   model['Provenance']=Provenance
   model['Protein']=Protein
   model['RnaRegionReference']=RnaRegionReference
   model['Xref']=Xref
   model['RelationshipXref']=RelationshipXref
   model['CovalentBindingFeature']=CovalentBindingFeature
   model['EntityReference']=EntityReference
   model['RnaReference']=RnaReference
   model['GeneticInteraction']=GeneticInteraction
   model['TemplateReaction']=TemplateReaction
   model['RelationshipTypeVocabulary']=RelationshipTypeVocabulary
   model['BioSource']=BioSource
   model['EvidenceCodeVocabulary']=EvidenceCodeVocabulary
   model['InteractionVocabulary']=InteractionVocabulary
   model['PathwayStep']=PathwayStep
   model['Catalysis']=Catalysis
   model['Dna']=Dna
   model['RnaRegion']=RnaRegion
   model['BiochemicalReaction']=BiochemicalReaction
   model['SequenceLocation']=SequenceLocation
   model['CellularLocationVocabulary']=CellularLocationVocabulary
   model['Conversion']=Conversion
   model['Pathway']=Pathway
   model['DeltaG']=DeltaG
   model['Entity']=Entity
   model['UtilityClass']=UtilityClass
 
   return model 

#list all classes of the model
def classes():
   model=classesDict()
   return list(model.keys()) 

def createInstance(cln):
    model=classesDict()
    if cln in model.keys():
       cl=model[cln]
       return cl()
    return None 

def parentTree():
 parentdict=dict()
 chl=classes_children()
 for k in chl.keys():
    v=chl[k]
    for el in v:  
      if el in parentdict.keys():
        pad=parentdict[el]
      else:
        pad=dict()
      pad[k]=1
      parentdict[el]=pad
        
 for k in parentdict.keys():
    pad=parentdict[k]
    parentdict[k]=list(pad.keys())
 return parentdict




def modelPopulator():
    mp=PackageModelPopulator().mpop
    return mp


class  PackageModelPopulator():

  def __init__(self):
    self.package_name="biopax"
    self.classDict=None
    self.mpop= None
    self.config()

  def config(self):
    self.classDict=self.classDictConf()
    self.mpop= ModelPopulator(self.classDict,self.package_name)

  def classDictConf(self)  :

     b64conf=b''

     obj = pickle.loads(base64.b64decode(b64conf))
     return obj

def domain():
    return "http://www.biopax.org/release/biopax-level3.owl#"

def prefix():
    return "biopax"    
def shortPrefix():
    return "bi"       


#return parent hierarchy
def get_parent_hierarchy(cls):
    parents = []
    bases = cls.__bases__
    for base in bases:
        if base != object:
            parents.append(base)
            parents.extend(get_parent_hierarchy(base))
    return parents
    
# a generic tostring helper    
def entityToString(entity,help):
    msg=""
    members =classes_children().keys() 
    clsn=entity.__class__.__name__
    msg+= "  uri/pk: %s\n" %( entity.pk)
    msg+= "  class:%s\n" %(clsn )  
    #attributes using getter
    
    hl=get_parent_hierarchy(entity.__class__)
    hl.append(entity.__class__)
    attl_all={} 
    for cn in hl:
      dh=help.select(cn.__name__)  
      if dh is not None:  
        attl=(dh.attributeNames())  
        for attn in attl:
           attl_all[attn]=1 
    
    #attributes using helper 
    for attn in attl_all.keys():
          val=getattr(entity, '_'+attn  )
          
          if val is not None:
            if isinstance(val, object) and  val.__class__.__name__ in members:    
               val="(%s, %s)" %( val.__class__.__name__, val.pk )
            msg+="  %s : %s \n"  %(attn,val  )  
    return msg
