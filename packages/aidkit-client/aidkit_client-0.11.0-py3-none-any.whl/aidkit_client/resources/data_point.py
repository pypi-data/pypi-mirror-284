"""
Dataclasses describing single data points.
"""

import json
from dataclasses import dataclass
from enum import Enum, auto
from io import BytesIO
from typing import List, Union

from numpy import asarray
from PIL import Image, UnidentifiedImageError

from aidkit_client._endpoints.depth_maps import deserialize as deserialize_depth_map
from aidkit_client._endpoints.models import (
    ClassificationModelOutput,
    ImageObjectDetectionModelOutput,
    ImageSegmentationModelOutput,
)
from aidkit_client.configuration import get_api_client
from aidkit_client.exceptions import AidkitClientError


class DataPointType(Enum):
    """
    Possible types of data points.
    """

    TEXT = auto()
    IMAGE = auto()
    SEGMENTATION_MAP_DATA = auto()
    DEPTH_MAP_DATA = auto()
    CLASSIFICATION_MODEL_OUTPUT = auto()
    SEGMENTATION_MODEL_OUTPUT = auto()
    OBJECT_DETECTION_MODEL_OUTPUT = auto()


@dataclass
class RemoteFile:
    """
    Data point stored on an aidkit server, either uploaded by a user or
    generated by aidkit.
    """

    url: str
    type: DataPointType

    @classmethod
    def from_url(cls, url: str) -> "RemoteFile":
        """
        Create a data point from a URL, by guessing the type based on the URL
        suffix.

        :param url: URL where the data point resides.
        :return: Instance of a DataPoint with the given URL.
        :raises AidkitClientError: If the data point type cannot be inferred from
            the URL suffix.
        """
        url_suffix = url.rsplit(".", maxsplit=1)[-1]
        if url_suffix == "txt":
            data_point_type = DataPointType.TEXT
        elif url_suffix == "png":
            data_point_type = DataPointType.IMAGE
        else:
            raise AidkitClientError(f"Cannot infer data point type from URL suffix {url_suffix}.")
        return cls(url=url, type=data_point_type)

    async def fetch_remote_file(
        self,
    ) -> Union[
        str,
        Image.Image,
        List[List[int]],
        List[List[float]],
        ClassificationModelOutput,
        ImageObjectDetectionModelOutput,
        ImageSegmentationModelOutput,
    ]:
        """
        Fetch the remote file from the URL.

        :raises AidkitClientError: If the response of the aidkit server is invalid.
        :return: Fetched remote file from the given URL. Depending on whether the
            referenced remote file is a text or an image data point, the returned object is
            either a string or a pillow image.
        """
        api_service = get_api_client()
        response = await api_service.get_from_cdn(self.url)
        content = response.body_dict_or_error(f"Could not fetch data point at URL {self.url}")[
            "content"
        ]
        if not isinstance(content, bytes):
            raise AidkitClientError(
                f"Response body-content must be bytes but was type {type(content)}"
            )
        if self.type is DataPointType.TEXT:
            return content.decode("utf-8")

        if self.type is DataPointType.IMAGE:
            return Image.open(BytesIO(content))

        if self.type is DataPointType.SEGMENTATION_MAP_DATA:
            try:
                return asarray(Image.open(BytesIO(content))).tolist()

            # Fallback to the JSON decoder for older segmentation maps.
            except UnidentifiedImageError:
                return json.loads(content.decode("utf-8"))

        if self.type is DataPointType.DEPTH_MAP_DATA:
            return deserialize_depth_map(content)

        if self.type is DataPointType.CLASSIFICATION_MODEL_OUTPUT:
            return ClassificationModelOutput.parse_raw(content)

        if self.type is DataPointType.SEGMENTATION_MODEL_OUTPUT:
            return ImageSegmentationModelOutput.parse_raw(content)

        if self.type is DataPointType.OBJECT_DETECTION_MODEL_OUTPUT:
            return ImageObjectDetectionModelOutput.parse_raw(content)
