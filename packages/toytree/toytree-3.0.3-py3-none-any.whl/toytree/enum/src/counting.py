#!/usr/bin/env python

"""Enumeration counting module.

This module implements mathematical operations related to counting
numbers of trees and metrics related to tree space.

Authors
-------
Deren Eaton and Carlos Alonso Maya-Lastra

TODO
----
- update name of this file?
- Yule tree probs
- get n-maximally probable tree


References
----------
- Edwards AWF (1970). Estimation of the branch points of a branching diffusion process. J. R. Stat. Soc. Ser. B 32:155-174
- Harding EF (1971) The probabilities of rooted tree-shapes generated by random bifurcation. Adv Appl Prob 3: 44–77.
Harding provides recursive formula for hte probabilities of labeled and unlabeled topologies. See Brown for full solutions.
- Brown JKM (1994) Probabilities of evolutionary trees. Syst Biol 43: 78–91.
Brown developed probability calculations for all labeled and unlabeled topologies by developing expressions for the number of ways that internal nodes can be arranged relative to one another in time.
- Aldous DJ (2001) Stochastic models and descriptive statistics for phylogenetic trees, from Yule to today. Stat Sci 16: 23–34.
- Steel M, McKenzie A (2001) Properties of phylogenetic trees generated by Yule-type speciation models. Math Biosci 170: 91–112.
- Pamilo and Nei (1988) ...
"""

import math
import numpy as np
from toytree.core import ToyTree
from toytree.core.apis import TreeEnumAPI, add_subpackage_method, add_toytree_method


__all__ = [
    "get_num_quartets",
    "get_num_labeled_trees",
    # "get_n_unlabeled_trees",
    # "iter_labeled_trees",
    # "iter_unlabeled_trees",
]


def _get_num_places_to_insert_tip(ntips: int) -> int:
    """Return num possible places to insert a new tip into an ntip tree.
    """
    ntips_in_new_tree = ntips + 1
    return 2 * ntips_in_new_tree - 3


def _get_num_places_to_insert_tip_from_tree(tree: ToyTree) -> int:
    """Return num possible places to insert a new tip into a tree.

    The number of places that a new tip can be inserted is the number
    of edges in a tree.
    """
    # nnodes = 


# @add_subpackage_method(TreeEnumAPI)
def get_num_quartets(ntips: int, sample: int = 4) -> int:
    """Return number of possible quartets for a tree of N tips.

    This uses the formula for binomial coefficient.

    Parameters
    ----------
    ntips: int
        ...
    sample: int
        ...
    """
    numerator = 1
    denominator = 1
    for i in range(1, sample + 1):
        numerator *= ntips - i + 1
        denominator *= i
    return numerator // denominator


# @add_subpackage_method(TreeEnumAPI)
def get_num_labeled_trees(ntips: int) -> int:
    r"""Return the number of possible labeled trees for ntips.

    At each node, the descendant species are partitioned into two
    subtrees. A node at which the subtrees have identical unlabeled
    topologies is balanced; otherwise, it is unbalanced (Harding, 1971).

    $$ H_n = \frac{n!(n - 1)!}{2^{n - 1}} $$

    ---------------------------
    | ntips | n labeled trees |
    |-------|-----------------|
    |   3   |        3        |
    |   4   |       18        |
    |   5   |      180        |
    |   6   |     2700        |
    | ...   |      ...        |
    |-------|-----------------|

    References
    ----------
    - Edwards (1970)
    - Harding EF (1971) The probabilities of rooted tree-shapes generated by random bifurcation. Adv Appl Prob 3: 44–77.
    - Brown JKM (1994) Probabilities of evolutionary trees. Syst Biol 43: 78–91.
    """
    fac = math.factorial
    return int((fac(ntips) * fac(ntips - 1)) / (2 ** (ntips - 1)))


def get_num_unlabeled_trees(ntips: int) -> int:
    r"""...

    Note
    ----
    In contrast to labeled trees, all unlabeled trees for ntips are 
    *not* equiprobable, 

    """


def get_unlabeled_trees(ntips: int) -> int:
    r"""Return unlabaled tree and its probability.

    Note
    ----
    In contrast to labeled trees, all unlabeled trees for ntips are 
    *not* equiprobable, 

    """


def get_the_n_maximally_probable_tree(ntips: int) -> ToyTree:
    """Return the topology most probable under Yule model for ntips.

    Reference
    ---------
    - ...
    """


def get_yule_tree_probability(tree: ToyTree) -> float:
    """Return the probability of ... under a Yule model.

    The probability that a specific labeled history is generated under
    a Yule model is ... equation 3+> of Brown...

    Utility
    -------
    Under the Yule model two (and only two) lineages are randomly
    joined at a time until all lineages have been merged into a tree.
    For nlineages there is thus a space of possible Yule trees, within
    which not all tree topologies are equally likely. This function
    returns the probabilitiy of the input tree topology under the Yule
    model, given ntips.

    Reference
    ---------
    - Harding EF (1971) The probabilities of rooted tree-shapes generated by random bifurcation. Adv Appl Prob 3: 44–77.
    - Brown JKM (1994) Probabilities of evolutionary trees. Syst Biol 43: 78–91.
    - Aldous DJ (2001) Stochastic models and descriptive statistics for phylogenetic trees, from Yule to today. Stat Sci 16: 23–34.
    - Steel M, McKenzie A (2001) Properties of phylogenetic trees generated by Yule-type speciation models. Math Biosci 170: 91–112.
    """


def get_probability_gene_tree_matches_species_tree(internal_branch: float) -> float:
    """...

    TODO: use in the textbook.

    References
    ----------
    - Pamilo and Nei (1988)
    """

    # a quartet (rooted three taxon) tree has no anomalies b/c
    λ = internal_branch

    # probability the gene tree matches the species tree
    prob_true = 1 - (2 / 3) * np.exp(-λ)

    # probability the gene tree matches other 2 possible trees
    prob_false = (1 / 3) * np.exp(-λ)

    # no matter how small the internal branch, prob_true always > prob_false
    return prob_true > prob_false


if __name__ == "__main__":

    # get_probability_gene_tree_matches_species_tree(0.001)
    print(get_num_labeled_trees(6))
