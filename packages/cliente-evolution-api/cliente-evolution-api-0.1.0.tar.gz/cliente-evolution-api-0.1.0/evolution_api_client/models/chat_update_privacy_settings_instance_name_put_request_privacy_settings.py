# coding: utf-8

"""
    Evolution API

    </br> <hr style=\"height: 5px;background: #007500;margin: 20px 0;box-shadow: 0px 3px 5px 0px rgb(204 204 204);\">  <div align=\"center\">  [![Whatsapp Group](https://img.shields.io/badge/Group-WhatsApp-%2322BC18)](https://evolution-api.com/whatsapp) [![Discord Community](https://img.shields.io/badge/Discord-Community-blue)](https://evolution-api.com/discord) [![Postman Collection](https://img.shields.io/badge/Postman-Collection-orange)](https://evolution-api.com/postman)  [![Documentation](https://img.shields.io/badge/Documentation-Official-green)](https://doc.evolution-api.com) [![License](https://img.shields.io/badge/license-GPL--3.0-orange)](./LICENSE) [![Support](https://img.shields.io/badge/Donation-picpay-green)](https://app.picpay.com/user/davidsongomes1998) [![Support](https://img.shields.io/badge/Buy%20me-coffe-orange)](https://bmc.link/evolutionapi)  </div>    <div align=\"center\"><img src=\"https://raw.githubusercontent.com/EvolutionAPI/evolution-api/main/public/images/cover.png\"></div>  <font size='3'>   This project is based on the [evolution](https://github.com/code-chat-br/whatsapp-api). The original project is an implementation of [Baileys](https://github.com/WhiskeySockets/Baileys), serving as a Restful API service that controls WhatsApp functions.</br>    The code allows the creation of multiservice chats, service bots, or any other system that utilizes WhatsApp. The documentation provides instructions on how to set up and use the project, as well as additional information about its features and configuration options. </font>  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/26869335-5546d063-156b-4529-915f-909dd628c090?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D26869335-5546d063-156b-4529-915f-909dd628c090%26entityType%3Dcollection%26workspaceId%3D339a4ee7-378b-45c9-b5b8-fd2c0a9c2442) 

    The version of the OpenAPI document: 1.8.2
    Contact: contato@agenciadgcode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChatUpdatePrivacySettingsInstanceNamePutRequestPrivacySettings(BaseModel):
    """
    - required - The new privacy settings of the contact.
    """ # noqa: E501
    readreceipts: Optional[StrictStr] = Field(default=None, description="- required - The new read receipts privacy setting of the contact.")
    profile: Optional[StrictStr] = Field(default=None, description="- required - The new profile privacy setting of the contact.")
    status: Optional[StrictStr] = Field(default=None, description="- required - The new status privacy setting of the contact.")
    online: Optional[StrictStr] = Field(default=None, description="- required - The new online privacy setting of the contact.")
    last: Optional[StrictStr] = Field(default=None, description="- required - The new last seen privacy setting of the contact.")
    groupadd: Optional[StrictStr] = Field(default=None, description="- required - The new group add privacy setting of the contact.")
    __properties: ClassVar[List[str]] = ["readreceipts", "profile", "status", "online", "last", "groupadd"]

    @field_validator('readreceipts')
    def readreceipts_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'none']):
            raise ValueError("must be one of enum values ('all', 'none')")
        return value

    @field_validator('profile')
    def profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'contacts', 'contact_blacklist', 'none']):
            raise ValueError("must be one of enum values ('all', 'contacts', 'contact_blacklist', 'none')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'contacts', 'contact_blacklist', 'none']):
            raise ValueError("must be one of enum values ('all', 'contacts', 'contact_blacklist', 'none')")
        return value

    @field_validator('online')
    def online_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'match_last_seen']):
            raise ValueError("must be one of enum values ('all', 'match_last_seen')")
        return value

    @field_validator('last')
    def last_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'contacts', 'contact_blacklist', 'none']):
            raise ValueError("must be one of enum values ('all', 'contacts', 'contact_blacklist', 'none')")
        return value

    @field_validator('groupadd')
    def groupadd_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'contacts', 'contact_blacklist', 'none']):
            raise ValueError("must be one of enum values ('all', 'contacts', 'contact_blacklist', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatUpdatePrivacySettingsInstanceNamePutRequestPrivacySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatUpdatePrivacySettingsInstanceNamePutRequestPrivacySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "readreceipts": obj.get("readreceipts"),
            "profile": obj.get("profile"),
            "status": obj.get("status"),
            "online": obj.get("online"),
            "last": obj.get("last"),
            "groupadd": obj.get("groupadd")
        })
        return _obj


