# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""OpenMEEG bindings for python"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openmeeg
else:
    import _openmeeg

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _openmeeg.SWIG_PyInstanceMethod_New
_swig_new_static_method = _openmeeg.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Error(object):
    r"""Proxy of C++ Error class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t, m):
        r"""__init__(Error self, int const t, char const * m) -> Error"""
        _openmeeg.Error_swiginit(self, _openmeeg.new_Error(t, m))
    type = _swig_new_instance_method(_openmeeg.Error_type)
    message = _swig_new_instance_method(_openmeeg.Error_message)
    __swig_destroy__ = _openmeeg.delete_Error

# Register Error in _openmeeg:
_openmeeg.Error_swigregister(Error)
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmeeg.delete_SwigPyIterator
    value = _swig_new_instance_method(_openmeeg.SwigPyIterator_value)
    incr = _swig_new_instance_method(_openmeeg.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_openmeeg.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_openmeeg.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_openmeeg.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_openmeeg.SwigPyIterator_copy)
    next = _swig_new_instance_method(_openmeeg.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_openmeeg.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_openmeeg.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_openmeeg.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openmeeg:
_openmeeg.SwigPyIterator_swigregister(SwigPyIterator)
class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_int_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_int___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_int___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_int___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_int___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_int___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_int___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_int___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_int___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_int___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_int_pop)
    append = _swig_new_instance_method(_openmeeg.vector_int_append)
    empty = _swig_new_instance_method(_openmeeg.vector_int_empty)
    size = _swig_new_instance_method(_openmeeg.vector_int_size)
    swap = _swig_new_instance_method(_openmeeg.vector_int_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_int_begin)
    end = _swig_new_instance_method(_openmeeg.vector_int_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_int_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_int_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_int_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_int_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_int_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_int_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _openmeeg.vector_int_swiginit(self, _openmeeg.new_vector_int(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_int_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_int_front)
    back = _swig_new_instance_method(_openmeeg.vector_int_back)
    assign = _swig_new_instance_method(_openmeeg.vector_int_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_int_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_int_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_int_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_int_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_int

# Register vector_int in _openmeeg:
_openmeeg.vector_int_swigregister(vector_int)
class vector_unsigned(object):
    r"""Proxy of C++ std::vector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_unsigned_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_unsigned___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_unsigned___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_unsigned___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_unsigned___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_unsigned___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_unsigned___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_unsigned___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_unsigned___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_unsigned___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_unsigned_pop)
    append = _swig_new_instance_method(_openmeeg.vector_unsigned_append)
    empty = _swig_new_instance_method(_openmeeg.vector_unsigned_empty)
    size = _swig_new_instance_method(_openmeeg.vector_unsigned_size)
    swap = _swig_new_instance_method(_openmeeg.vector_unsigned_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_unsigned_begin)
    end = _swig_new_instance_method(_openmeeg.vector_unsigned_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_unsigned_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_unsigned_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_unsigned_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_unsigned_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_unsigned_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_unsigned_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_unsigned self) -> vector_unsigned
        __init__(vector_unsigned self, vector_unsigned other) -> vector_unsigned
        __init__(vector_unsigned self, std::vector< unsigned int >::size_type size) -> vector_unsigned
        __init__(vector_unsigned self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> vector_unsigned
        """
        _openmeeg.vector_unsigned_swiginit(self, _openmeeg.new_vector_unsigned(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_unsigned_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_unsigned_front)
    back = _swig_new_instance_method(_openmeeg.vector_unsigned_back)
    assign = _swig_new_instance_method(_openmeeg.vector_unsigned_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_unsigned_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_unsigned_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_unsigned_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_unsigned_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_unsigned

# Register vector_unsigned in _openmeeg:
_openmeeg.vector_unsigned_swigregister(vector_unsigned)
class vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_double_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_double___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_double___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_double___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_double___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_double___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_double___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_double___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_double___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_double___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_double_pop)
    append = _swig_new_instance_method(_openmeeg.vector_double_append)
    empty = _swig_new_instance_method(_openmeeg.vector_double_empty)
    size = _swig_new_instance_method(_openmeeg.vector_double_size)
    swap = _swig_new_instance_method(_openmeeg.vector_double_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_double_begin)
    end = _swig_new_instance_method(_openmeeg.vector_double_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_double_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_double_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_double_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_double_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_double_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_double_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_double self) -> vector_double
        __init__(vector_double self, vector_double other) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double
        """
        _openmeeg.vector_double_swiginit(self, _openmeeg.new_vector_double(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_double_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_double_front)
    back = _swig_new_instance_method(_openmeeg.vector_double_back)
    assign = _swig_new_instance_method(_openmeeg.vector_double_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_double_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_double_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_double_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_double_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_double

# Register vector_double in _openmeeg:
_openmeeg.vector_double_swigregister(vector_double)
class vector_vertex(object):
    r"""Proxy of C++ std::vector< OpenMEEG::Vertex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_vertex_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_vertex___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_vertex___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_vertex___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_vertex___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_vertex___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_vertex___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_vertex___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_vertex___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_vertex___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_vertex_pop)
    append = _swig_new_instance_method(_openmeeg.vector_vertex_append)
    empty = _swig_new_instance_method(_openmeeg.vector_vertex_empty)
    size = _swig_new_instance_method(_openmeeg.vector_vertex_size)
    swap = _swig_new_instance_method(_openmeeg.vector_vertex_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_vertex_begin)
    end = _swig_new_instance_method(_openmeeg.vector_vertex_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_vertex_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_vertex_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_vertex_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_vertex_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_vertex_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_vertex_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_vertex self) -> vector_vertex
        __init__(vector_vertex self, vector_vertex other) -> vector_vertex
        __init__(vector_vertex self, std::vector< OpenMEEG::Vertex >::size_type size) -> vector_vertex
        __init__(vector_vertex self, std::vector< OpenMEEG::Vertex >::size_type size, Vertex value) -> vector_vertex
        """
        _openmeeg.vector_vertex_swiginit(self, _openmeeg.new_vector_vertex(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_vertex_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_vertex_front)
    back = _swig_new_instance_method(_openmeeg.vector_vertex_back)
    assign = _swig_new_instance_method(_openmeeg.vector_vertex_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_vertex_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_vertex_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_vertex_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_vertex_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_vertex

# Register vector_vertex in _openmeeg:
_openmeeg.vector_vertex_swigregister(vector_vertex)
class vector_pvertex(object):
    r"""Proxy of C++ std::vector< OpenMEEG::Vertex * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_pvertex_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_pvertex___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_pvertex___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_pvertex___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_pvertex___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_pvertex___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_pvertex___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_pvertex___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_pvertex___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_pvertex___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_pvertex_pop)
    append = _swig_new_instance_method(_openmeeg.vector_pvertex_append)
    empty = _swig_new_instance_method(_openmeeg.vector_pvertex_empty)
    size = _swig_new_instance_method(_openmeeg.vector_pvertex_size)
    swap = _swig_new_instance_method(_openmeeg.vector_pvertex_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_pvertex_begin)
    end = _swig_new_instance_method(_openmeeg.vector_pvertex_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_pvertex_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_pvertex_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_pvertex_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_pvertex_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_pvertex_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_pvertex_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_pvertex self) -> vector_pvertex
        __init__(vector_pvertex self, vector_pvertex other) -> vector_pvertex
        __init__(vector_pvertex self, std::vector< OpenMEEG::Vertex * >::size_type size) -> vector_pvertex
        __init__(vector_pvertex self, std::vector< OpenMEEG::Vertex * >::size_type size, Vertex value) -> vector_pvertex
        """
        _openmeeg.vector_pvertex_swiginit(self, _openmeeg.new_vector_pvertex(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_pvertex_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_pvertex_front)
    back = _swig_new_instance_method(_openmeeg.vector_pvertex_back)
    assign = _swig_new_instance_method(_openmeeg.vector_pvertex_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_pvertex_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_pvertex_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_pvertex_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_pvertex_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_pvertex

# Register vector_pvertex in _openmeeg:
_openmeeg.vector_pvertex_swigregister(vector_pvertex)
class vector_triangle(object):
    r"""Proxy of C++ std::vector< OpenMEEG::Triangle > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_triangle_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_triangle___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_triangle___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_triangle___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_triangle___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_triangle___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_triangle___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_triangle___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_triangle___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_triangle___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_triangle_pop)
    append = _swig_new_instance_method(_openmeeg.vector_triangle_append)
    empty = _swig_new_instance_method(_openmeeg.vector_triangle_empty)
    size = _swig_new_instance_method(_openmeeg.vector_triangle_size)
    swap = _swig_new_instance_method(_openmeeg.vector_triangle_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_triangle_begin)
    end = _swig_new_instance_method(_openmeeg.vector_triangle_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_triangle_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_triangle_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_triangle_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_triangle_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_triangle_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_triangle_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_triangle self) -> vector_triangle
        __init__(vector_triangle self, vector_triangle other) -> vector_triangle
        __init__(vector_triangle self, std::vector< OpenMEEG::Triangle >::size_type size) -> vector_triangle
        __init__(vector_triangle self, std::vector< OpenMEEG::Triangle >::size_type size, Triangle value) -> vector_triangle
        """
        _openmeeg.vector_triangle_swiginit(self, _openmeeg.new_vector_triangle(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_triangle_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_triangle_front)
    back = _swig_new_instance_method(_openmeeg.vector_triangle_back)
    assign = _swig_new_instance_method(_openmeeg.vector_triangle_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_triangle_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_triangle_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_triangle_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_triangle_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_triangle

# Register vector_triangle in _openmeeg:
_openmeeg.vector_triangle_swigregister(vector_triangle)
class vector_string(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_string_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_string___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_string___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_string___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_string___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_string___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_string___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_string___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_string___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_string___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_string_pop)
    append = _swig_new_instance_method(_openmeeg.vector_string_append)
    empty = _swig_new_instance_method(_openmeeg.vector_string_empty)
    size = _swig_new_instance_method(_openmeeg.vector_string_size)
    swap = _swig_new_instance_method(_openmeeg.vector_string_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_string_begin)
    end = _swig_new_instance_method(_openmeeg.vector_string_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_string_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_string_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_string_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_string_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_string_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_string_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_string self) -> vector_string
        __init__(vector_string self, vector_string other) -> vector_string
        __init__(vector_string self, std::vector< std::string >::size_type size) -> vector_string
        __init__(vector_string self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string
        """
        _openmeeg.vector_string_swiginit(self, _openmeeg.new_vector_string(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_string_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_string_front)
    back = _swig_new_instance_method(_openmeeg.vector_string_back)
    assign = _swig_new_instance_method(_openmeeg.vector_string_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_string_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_string_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_string_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_string_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_string

# Register vector_string in _openmeeg:
_openmeeg.vector_string_swigregister(vector_string)
class vector_interface(object):
    r"""Proxy of C++ std::vector< OpenMEEG::Interface > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_interface_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_interface___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_interface___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_interface___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_interface___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_interface___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_interface___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_interface___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_interface___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_interface___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_interface_pop)
    append = _swig_new_instance_method(_openmeeg.vector_interface_append)
    empty = _swig_new_instance_method(_openmeeg.vector_interface_empty)
    size = _swig_new_instance_method(_openmeeg.vector_interface_size)
    swap = _swig_new_instance_method(_openmeeg.vector_interface_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_interface_begin)
    end = _swig_new_instance_method(_openmeeg.vector_interface_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_interface_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_interface_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_interface_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_interface_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_interface_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_interface_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_interface self) -> vector_interface
        __init__(vector_interface self, vector_interface other) -> vector_interface
        __init__(vector_interface self, std::vector< OpenMEEG::Interface >::size_type size) -> vector_interface
        __init__(vector_interface self, std::vector< OpenMEEG::Interface >::size_type size, Interface value) -> vector_interface
        """
        _openmeeg.vector_interface_swiginit(self, _openmeeg.new_vector_interface(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_interface_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_interface_front)
    back = _swig_new_instance_method(_openmeeg.vector_interface_back)
    assign = _swig_new_instance_method(_openmeeg.vector_interface_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_interface_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_interface_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_interface_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_interface_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_interface

# Register vector_interface in _openmeeg:
_openmeeg.vector_interface_swigregister(vector_interface)
class vector_simple_dom(object):
    r"""Proxy of C++ std::vector< OpenMEEG::SimpleDomain > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_simple_dom_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_simple_dom___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_simple_dom_pop)
    append = _swig_new_instance_method(_openmeeg.vector_simple_dom_append)
    empty = _swig_new_instance_method(_openmeeg.vector_simple_dom_empty)
    size = _swig_new_instance_method(_openmeeg.vector_simple_dom_size)
    swap = _swig_new_instance_method(_openmeeg.vector_simple_dom_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_simple_dom_begin)
    end = _swig_new_instance_method(_openmeeg.vector_simple_dom_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_simple_dom_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_simple_dom_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_simple_dom_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_simple_dom_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_simple_dom_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_simple_dom_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_simple_dom self) -> vector_simple_dom
        __init__(vector_simple_dom self, vector_simple_dom other) -> vector_simple_dom
        __init__(vector_simple_dom self, std::vector< OpenMEEG::SimpleDomain >::size_type size) -> vector_simple_dom
        __init__(vector_simple_dom self, std::vector< OpenMEEG::SimpleDomain >::size_type size, SimpleDomain value) -> vector_simple_dom
        """
        _openmeeg.vector_simple_dom_swiginit(self, _openmeeg.new_vector_simple_dom(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_simple_dom_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_simple_dom_front)
    back = _swig_new_instance_method(_openmeeg.vector_simple_dom_back)
    assign = _swig_new_instance_method(_openmeeg.vector_simple_dom_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_simple_dom_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_simple_dom_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_simple_dom_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_simple_dom_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_simple_dom

# Register vector_simple_dom in _openmeeg:
_openmeeg.vector_simple_dom_swigregister(vector_simple_dom)
class vector_domain(object):
    r"""Proxy of C++ std::vector< OpenMEEG::Domain > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_domain_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_domain___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_domain___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_domain___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_domain___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_domain___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_domain___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_domain___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_domain___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_domain___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_domain_pop)
    append = _swig_new_instance_method(_openmeeg.vector_domain_append)
    empty = _swig_new_instance_method(_openmeeg.vector_domain_empty)
    size = _swig_new_instance_method(_openmeeg.vector_domain_size)
    swap = _swig_new_instance_method(_openmeeg.vector_domain_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_domain_begin)
    end = _swig_new_instance_method(_openmeeg.vector_domain_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_domain_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_domain_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_domain_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_domain_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_domain_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_domain_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_domain self) -> vector_domain
        __init__(vector_domain self, vector_domain other) -> vector_domain
        __init__(vector_domain self, std::vector< OpenMEEG::Domain >::size_type size) -> vector_domain
        __init__(vector_domain self, std::vector< OpenMEEG::Domain >::size_type size, Domain value) -> vector_domain
        """
        _openmeeg.vector_domain_swiginit(self, _openmeeg.new_vector_domain(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_domain_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_domain_front)
    back = _swig_new_instance_method(_openmeeg.vector_domain_back)
    assign = _swig_new_instance_method(_openmeeg.vector_domain_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_domain_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_domain_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_domain_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_domain_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_domain

# Register vector_domain in _openmeeg:
_openmeeg.vector_domain_swigregister(vector_domain)
class vector_oriented_mesh(object):
    r"""Proxy of C++ std::vector< OpenMEEG::OrientedMesh > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___nonzero__)
    __bool__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___bool__)
    __len__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___len__)
    __getslice__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___getslice__)
    __setslice__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___setslice__)
    __delslice__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___delslice__)
    __delitem__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___delitem__)
    __getitem__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___getitem__)
    __setitem__ = _swig_new_instance_method(_openmeeg.vector_oriented_mesh___setitem__)
    pop = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_pop)
    append = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_append)
    empty = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_empty)
    size = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_size)
    swap = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_swap)
    begin = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_begin)
    end = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_end)
    rbegin = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_rbegin)
    rend = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_rend)
    clear = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_clear)
    get_allocator = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_get_allocator)
    pop_back = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_pop_back)
    erase = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_oriented_mesh self) -> vector_oriented_mesh
        __init__(vector_oriented_mesh self, vector_oriented_mesh other) -> vector_oriented_mesh
        __init__(vector_oriented_mesh self, std::vector< OpenMEEG::OrientedMesh >::size_type size) -> vector_oriented_mesh
        __init__(vector_oriented_mesh self, std::vector< OpenMEEG::OrientedMesh >::size_type size, OrientedMesh value) -> vector_oriented_mesh
        """
        _openmeeg.vector_oriented_mesh_swiginit(self, _openmeeg.new_vector_oriented_mesh(*args))
    push_back = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_push_back)
    front = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_front)
    back = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_back)
    assign = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_assign)
    resize = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_resize)
    insert = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_insert)
    reserve = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_reserve)
    capacity = _swig_new_instance_method(_openmeeg.vector_oriented_mesh_capacity)
    __swig_destroy__ = _openmeeg.delete_vector_oriented_mesh

# Register vector_oriented_mesh in _openmeeg:
_openmeeg.vector_oriented_mesh_swigregister(vector_oriented_mesh)
new_OpenMEEG_Vector = _openmeeg.new_OpenMEEG_Vector
new_OpenMEEG_Matrix = _openmeeg.new_OpenMEEG_Matrix
new_OpenMEEG_SymMatrix = _openmeeg.new_OpenMEEG_SymMatrix
geom_add_vertices = _openmeeg.geom_add_vertices
mesh_add_triangles = _openmeeg.mesh_add_triangles
DEBUG = _openmeeg.DEBUG

PROGRESS = _openmeeg.PROGRESS

INFORMATION = _openmeeg.INFORMATION

WARNING = _openmeeg.WARNING

ERROR = _openmeeg.ERROR

class Logger(object):
    r"""Proxy of C++ OpenMEEG::Logger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Logger self) -> Logger"""
        _openmeeg.Logger_swiginit(self, _openmeeg.new_Logger())
    set_info_level = _swig_new_instance_method(_openmeeg.Logger_set_info_level)
    get_info_level = _swig_new_instance_method(_openmeeg.Logger_get_info_level)
    is_verbose = _swig_new_instance_method(_openmeeg.Logger_is_verbose)
    logger = _swig_new_static_method(_openmeeg.Logger_logger)
    __swig_destroy__ = _openmeeg.delete_Logger

# Register Logger in _openmeeg:
_openmeeg.Logger_swigregister(Logger)
log_stream = _openmeeg.log_stream
sqr = _openmeeg.sqr
class Vect3(object):
    r"""Proxy of C++ OpenMEEG::Vect3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vect3 self, double const x1, double const x2, double const x3) -> Vect3
        __init__(Vect3 self, double const a=0.0) -> Vect3
        __init__(Vect3 self, Vect3 v) -> Vect3
        """
        _openmeeg.Vect3_swiginit(self, _openmeeg.new_Vect3(*args))
    x = _swig_new_instance_method(_openmeeg.Vect3_x)
    y = _swig_new_instance_method(_openmeeg.Vect3_y)
    z = _swig_new_instance_method(_openmeeg.Vect3_z)
    __lt__ = _swig_new_instance_method(_openmeeg.Vect3___lt__)
    norm = _swig_new_instance_method(_openmeeg.Vect3_norm)
    norm2 = _swig_new_instance_method(_openmeeg.Vect3_norm2)
    __eq__ = _swig_new_instance_method(_openmeeg.Vect3___eq__)
    __ne__ = _swig_new_instance_method(_openmeeg.Vect3___ne__)
    __iadd__ = _swig_new_instance_method(_openmeeg.Vect3___iadd__)
    __isub__ = _swig_new_instance_method(_openmeeg.Vect3___isub__)
    __imul__ = _swig_new_instance_method(_openmeeg.Vect3___imul__)

    def __itruediv__(self, *args):
        return _openmeeg.Vect3___itruediv__(self, *args)
    __idiv__ = __itruediv__


    multadd = _swig_new_instance_method(_openmeeg.Vect3_multadd)
    __add__ = _swig_new_instance_method(_openmeeg.Vect3___add__)
    __sub__ = _swig_new_instance_method(_openmeeg.Vect3___sub__)
    __xor__ = _swig_new_instance_method(_openmeeg.Vect3___xor__)
    __mul__ = _swig_new_instance_method(_openmeeg.Vect3___mul__)

    def __truediv__(self, *args):
        return _openmeeg.Vect3___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_openmeeg.Vect3___call__)
    __neg__ = _swig_new_instance_method(_openmeeg.Vect3___neg__)
    solid_angle = _swig_new_instance_method(_openmeeg.Vect3_solid_angle)
    normalize = _swig_new_instance_method(_openmeeg.Vect3_normalize)
    __swig_destroy__ = _openmeeg.delete_Vect3

# Register Vect3 in _openmeeg:
_openmeeg.Vect3_swigregister(Vect3)
dotprod = _openmeeg.dotprod
crossprod = _openmeeg.crossprod
det = _openmeeg.det
class Vertex(Vect3):
    r"""Proxy of C++ OpenMEEG::Vertex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vertex self) -> Vertex
        __init__(Vertex self, Vect3 V, unsigned int const id=-1) -> Vertex
        __init__(Vertex self, double const [3] V, unsigned int const id=-1) -> Vertex
        __init__(Vertex self, double const & x, double const & y, double const & z, unsigned int const id=-1) -> Vertex
        """
        _openmeeg.Vertex_swiginit(self, _openmeeg.new_Vertex(*args))
    index = _swig_new_instance_method(_openmeeg.Vertex_index)
    x = _swig_new_instance_method(_openmeeg.Vertex_x)
    y = _swig_new_instance_method(_openmeeg.Vertex_y)
    z = _swig_new_instance_method(_openmeeg.Vertex_z)
    array = _swig_new_instance_method(_openmeeg.Vertex_array)
    __swig_destroy__ = _openmeeg.delete_Vertex

# Register Vertex in _openmeeg:
_openmeeg.Vertex_swigregister(Vertex)
class TriangleIndices(object):
    r"""Proxy of C++ OpenMEEG::TriangleIndices class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TriangleIndices self) -> TriangleIndices
        __init__(TriangleIndices self, unsigned int const i, unsigned int const j, unsigned int const k) -> TriangleIndices
        __init__(TriangleIndices self, unsigned int const [3] ind) -> TriangleIndices
        __init__(TriangleIndices self, TriangleIndices ind) -> TriangleIndices
        """
        _openmeeg.TriangleIndices_swiginit(self, _openmeeg.new_TriangleIndices(*args))
    indices = property(_openmeeg.TriangleIndices_indices_get, _openmeeg.TriangleIndices_indices_set, doc=r"""indices : a(3).unsigned int""")
    array = _swig_new_instance_method(_openmeeg.TriangleIndices_array)
    __swig_destroy__ = _openmeeg.delete_TriangleIndices

# Register TriangleIndices in _openmeeg:
_openmeeg.TriangleIndices_swigregister(TriangleIndices)
class Triangle(object):
    r"""Proxy of C++ OpenMEEG::Triangle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Triangle self) -> Triangle
        __init__(Triangle self, OpenMEEG::Vertex *[3] pts, unsigned int const index=-1) -> Triangle
        __init__(Triangle self, Vertex p1, Vertex p2, Vertex p3, unsigned int const index=-1) -> Triangle
        __init__(Triangle self, Vertex p1, Vertex p2, Vertex p3, unsigned int const index=-1) -> Triangle
        """
        _openmeeg.Triangle_swiginit(self, _openmeeg.new_Triangle(*args))
    begin = _swig_new_instance_method(_openmeeg.Triangle_begin)
    end = _swig_new_instance_method(_openmeeg.Triangle_end)
    __eq__ = _swig_new_instance_method(_openmeeg.Triangle___eq__)
    vertex = _swig_new_instance_method(_openmeeg.Triangle_vertex)
    edge = _swig_new_instance_method(_openmeeg.Triangle_edge)
    edges = _swig_new_instance_method(_openmeeg.Triangle_edges)
    normal = _swig_new_instance_method(_openmeeg.Triangle_normal)
    index = _swig_new_instance_method(_openmeeg.Triangle_index)
    center = _swig_new_instance_method(_openmeeg.Triangle_center)
    contains = _swig_new_instance_method(_openmeeg.Triangle_contains)
    change_orientation = _swig_new_instance_method(_openmeeg.Triangle_change_orientation)
    intersects = _swig_new_instance_method(_openmeeg.Triangle_intersects)
    area = _swig_new_instance_method(_openmeeg.Triangle_area)
    __swig_destroy__ = _openmeeg.delete_Triangle

# Register Triangle in _openmeeg:
_openmeeg.Triangle_swigregister(Triangle)
sizet_to_int = _openmeeg.sizet_to_int
class LinOpInfo(object):
    r"""Proxy of C++ OpenMEEG::LinOpInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FULL = _openmeeg.LinOpInfo_FULL
    
    SYMMETRIC = _openmeeg.LinOpInfo_SYMMETRIC
    
    BLOCK = _openmeeg.LinOpInfo_BLOCK
    
    BLOCK_SYMMETRIC = _openmeeg.LinOpInfo_BLOCK_SYMMETRIC
    
    SPARSE = _openmeeg.LinOpInfo_SPARSE
    

    def __init__(self, *args):
        r"""
        __init__(LinOpInfo self) -> LinOpInfo
        __init__(LinOpInfo self, OpenMEEG::Dimension const m, OpenMEEG::Dimension const n, OpenMEEG::LinOpInfo::StorageType const st, unsigned int const d) -> LinOpInfo
        """
        _openmeeg.LinOpInfo_swiginit(self, _openmeeg.new_LinOpInfo(*args))
    __swig_destroy__ = _openmeeg.delete_LinOpInfo
    nlin = _swig_new_instance_method(_openmeeg.LinOpInfo_nlin)
    ncol = _swig_new_instance_method(_openmeeg.LinOpInfo_ncol)
    storageType = _swig_new_instance_method(_openmeeg.LinOpInfo_storageType)
    dimension = _swig_new_instance_method(_openmeeg.LinOpInfo_dimension)
    default_io = _swig_new_instance_method(_openmeeg.LinOpInfo_default_io)

# Register LinOpInfo in _openmeeg:
_openmeeg.LinOpInfo_swigregister(LinOpInfo)
class LinOp(LinOpInfo):
    r"""Proxy of C++ OpenMEEG::LinOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    size = _swig_new_instance_method(_openmeeg.LinOp_size)
    info = _swig_new_instance_method(_openmeeg.LinOp_info)
    __swig_destroy__ = _openmeeg.delete_LinOp

# Register LinOp in _openmeeg:
_openmeeg.LinOp_swigregister(LinOp)
DEEP_COPY = _openmeeg.DEEP_COPY

class LinOpValue(object):
    r"""Proxy of C++ OpenMEEG::LinOpValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LinOpValue self) -> LinOpValue
        __init__(LinOpValue self, size_t const n) -> LinOpValue
        __init__(LinOpValue self, size_t const n, double const * initval) -> LinOpValue
        __init__(LinOpValue self, size_t const n, LinOpValue v) -> LinOpValue
        """
        _openmeeg.LinOpValue_swiginit(self, _openmeeg.new_LinOpValue(*args))
    __swig_destroy__ = _openmeeg.delete_LinOpValue
    empty = _swig_new_instance_method(_openmeeg.LinOpValue_empty)

# Register LinOpValue in _openmeeg:
_openmeeg.LinOpValue_swigregister(LinOpValue)
class Vector(LinOp):
    r"""Proxy of C++ OpenMEEG::Vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alloc_data = _swig_new_instance_method(_openmeeg.Vector_alloc_data)
    reference_data = _swig_new_instance_method(_openmeeg.Vector_reference_data)
    empty = _swig_new_instance_method(_openmeeg.Vector_empty)
    data = _swig_new_instance_method(_openmeeg.Vector_data)
    __call__ = _swig_new_instance_method(_openmeeg.Vector___call__)
    subvect = _swig_new_instance_method(_openmeeg.Vector_subvect)
    __neg__ = _swig_new_instance_method(_openmeeg.Vector___neg__)
    __iadd__ = _swig_new_instance_method(_openmeeg.Vector___iadd__)
    __isub__ = _swig_new_instance_method(_openmeeg.Vector___isub__)
    __imul__ = _swig_new_instance_method(_openmeeg.Vector___imul__)

    def __itruediv__(self, *args):
        return _openmeeg.Vector___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __add__ = _swig_new_instance_method(_openmeeg.Vector___add__)
    __sub__ = _swig_new_instance_method(_openmeeg.Vector___sub__)

    def __truediv__(self, *args):
        return _openmeeg.Vector___truediv__(self, *args)
    __div__ = __truediv__


    __mul__ = _swig_new_instance_method(_openmeeg.Vector___mul__)
    kmult = _swig_new_instance_method(_openmeeg.Vector_kmult)
    outer_product = _swig_new_instance_method(_openmeeg.Vector_outer_product)
    norm = _swig_new_instance_method(_openmeeg.Vector_norm)
    sum = _swig_new_instance_method(_openmeeg.Vector_sum)
    mean = _swig_new_instance_method(_openmeeg.Vector_mean)
    set = _swig_new_instance_method(_openmeeg.Vector_set)
    save = _swig_new_instance_method(_openmeeg.Vector_save)
    load = _swig_new_instance_method(_openmeeg.Vector_load)

    def __init__(self, *args):
        r"""
        __init__(Vector self) -> Vector
        __init__(Vector self, OpenMEEG::Dimension const N) -> Vector
        __init__(Vector self, Vector A, OpenMEEG::DeepCopy const arg3) -> Vector
        __init__(Vector self, Matrix A) -> Vector
        __init__(Vector self, SymMatrix A) -> Vector
        __init__(Vector self, PyObject * pyobj) -> Vector
        """
        _openmeeg.Vector_swiginit(self, _openmeeg.new_Vector(*args))
    array = _swig_new_instance_method(_openmeeg.Vector_array)
    setvalue = _swig_new_instance_method(_openmeeg.Vector_setvalue)
    value = _swig_new_instance_method(_openmeeg.Vector_value)
    __swig_destroy__ = _openmeeg.delete_Vector

# Register Vector in _openmeeg:
_openmeeg.Vector_swigregister(Vector)
__mul__ = _openmeeg.__mul__
__rshift__ = _openmeeg.__rshift__
class Matrix(LinOp):
    r"""Proxy of C++ OpenMEEG::Matrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alloc_data = _swig_new_instance_method(_openmeeg.Matrix_alloc_data)
    reference_data = _swig_new_instance_method(_openmeeg.Matrix_reference_data)
    empty = _swig_new_instance_method(_openmeeg.Matrix_empty)
    data = _swig_new_instance_method(_openmeeg.Matrix_data)
    get_shared_data_ptr = _swig_new_instance_method(_openmeeg.Matrix_get_shared_data_ptr)
    __call__ = _swig_new_instance_method(_openmeeg.Matrix___call__)
    submat = _swig_new_instance_method(_openmeeg.Matrix_submat)
    insertmat = _swig_new_instance_method(_openmeeg.Matrix_insertmat)
    getcol = _swig_new_instance_method(_openmeeg.Matrix_getcol)
    setcol = _swig_new_instance_method(_openmeeg.Matrix_setcol)
    getlin = _swig_new_instance_method(_openmeeg.Matrix_getlin)
    setlin = _swig_new_instance_method(_openmeeg.Matrix_setlin)
    set = _swig_new_instance_method(_openmeeg.Matrix_set)
    __add__ = _swig_new_instance_method(_openmeeg.Matrix___add__)
    __sub__ = _swig_new_instance_method(_openmeeg.Matrix___sub__)

    def __truediv__(self, *args):
        return _openmeeg.Matrix___truediv__(self, *args)
    __div__ = __truediv__


    __iadd__ = _swig_new_instance_method(_openmeeg.Matrix___iadd__)
    __isub__ = _swig_new_instance_method(_openmeeg.Matrix___isub__)
    __imul__ = _swig_new_instance_method(_openmeeg.Matrix___imul__)

    def __itruediv__(self, *args):
        return _openmeeg.Matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_openmeeg.Matrix___mul__)
    tmult = _swig_new_instance_method(_openmeeg.Matrix_tmult)
    multt = _swig_new_instance_method(_openmeeg.Matrix_multt)
    tmultt = _swig_new_instance_method(_openmeeg.Matrix_tmultt)
    transpose = _swig_new_instance_method(_openmeeg.Matrix_transpose)
    inverse = _swig_new_instance_method(_openmeeg.Matrix_inverse)
    pinverse = _swig_new_instance_method(_openmeeg.Matrix_pinverse)
    svd = _swig_new_instance_method(_openmeeg.Matrix_svd)
    frobenius_norm = _swig_new_instance_method(_openmeeg.Matrix_frobenius_norm)
    dot = _swig_new_instance_method(_openmeeg.Matrix_dot)
    save = _swig_new_instance_method(_openmeeg.Matrix_save)
    load = _swig_new_instance_method(_openmeeg.Matrix_load)

    def __init__(self, *args):
        r"""
        __init__(Matrix self) -> Matrix
        __init__(Matrix self, char const * fname) -> Matrix
        __init__(Matrix self, std::string const & fname) -> Matrix
        __init__(Matrix self, OpenMEEG::Dimension const M, OpenMEEG::Dimension const N) -> Matrix
        __init__(Matrix self, Matrix A, OpenMEEG::DeepCopy const arg3) -> Matrix
        __init__(Matrix self, SymMatrix A) -> Matrix
        __init__(Matrix self, SparseMatrix A) -> Matrix
        __init__(Matrix self, Vector v, OpenMEEG::Dimension const M, OpenMEEG::Dimension const N) -> Matrix
        __init__(Matrix self, PyObject * pyobj) -> Matrix
        """
        _openmeeg.Matrix_swiginit(self, _openmeeg.new_Matrix(*args))
    Free = _swig_new_static_method(_openmeeg.Matrix_Free)
    array = _swig_new_instance_method(_openmeeg.Matrix_array)
    setvalue = _swig_new_instance_method(_openmeeg.Matrix_setvalue)
    value = _swig_new_instance_method(_openmeeg.Matrix_value)
    __swig_destroy__ = _openmeeg.delete_Matrix

# Register Matrix in _openmeeg:
_openmeeg.Matrix_swigregister(Matrix)
class SymMatrix(LinOp):
    r"""Proxy of C++ OpenMEEG::SymMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncol = _swig_new_instance_method(_openmeeg.SymMatrix_ncol)
    alloc_data = _swig_new_instance_method(_openmeeg.SymMatrix_alloc_data)
    reference_data = _swig_new_instance_method(_openmeeg.SymMatrix_reference_data)
    empty = _swig_new_instance_method(_openmeeg.SymMatrix_empty)
    set = _swig_new_instance_method(_openmeeg.SymMatrix_set)
    data = _swig_new_instance_method(_openmeeg.SymMatrix_data)
    __call__ = _swig_new_instance_method(_openmeeg.SymMatrix___call__)
    submat = _swig_new_instance_method(_openmeeg.SymMatrix_submat)
    getlin = _swig_new_instance_method(_openmeeg.SymMatrix_getlin)
    setlin = _swig_new_instance_method(_openmeeg.SymMatrix_setlin)
    solveLin = _swig_new_instance_method(_openmeeg.SymMatrix_solveLin)
    __add__ = _swig_new_instance_method(_openmeeg.SymMatrix___add__)
    __sub__ = _swig_new_instance_method(_openmeeg.SymMatrix___sub__)
    __mul__ = _swig_new_instance_method(_openmeeg.SymMatrix___mul__)

    def __truediv__(self, *args):
        return _openmeeg.SymMatrix___truediv__(self, *args)
    __div__ = __truediv__


    __iadd__ = _swig_new_instance_method(_openmeeg.SymMatrix___iadd__)
    __isub__ = _swig_new_instance_method(_openmeeg.SymMatrix___isub__)
    __imul__ = _swig_new_instance_method(_openmeeg.SymMatrix___imul__)

    def __itruediv__(self, *args):
        return _openmeeg.SymMatrix___itruediv__(self, *args)
    __idiv__ = __itruediv__


    inverse = _swig_new_instance_method(_openmeeg.SymMatrix_inverse)
    invert = _swig_new_instance_method(_openmeeg.SymMatrix_invert)
    posdefinverse = _swig_new_instance_method(_openmeeg.SymMatrix_posdefinverse)
    det = _swig_new_instance_method(_openmeeg.SymMatrix_det)
    save = _swig_new_instance_method(_openmeeg.SymMatrix_save)
    load = _swig_new_instance_method(_openmeeg.SymMatrix_load)

    def __init__(self, *args):
        r"""
        __init__(SymMatrix self) -> SymMatrix
        __init__(SymMatrix self, char const * fname) -> SymMatrix
        __init__(SymMatrix self, OpenMEEG::Dimension N) -> SymMatrix
        __init__(SymMatrix self, OpenMEEG::Dimension M, OpenMEEG::Dimension N) -> SymMatrix
        __init__(SymMatrix self, SymMatrix S, OpenMEEG::DeepCopy const arg3) -> SymMatrix
        __init__(SymMatrix self, Vector v) -> SymMatrix
        __init__(SymMatrix self, Matrix A) -> SymMatrix
        __init__(SymMatrix self, PyObject * pyobj) -> SymMatrix
        """
        _openmeeg.SymMatrix_swiginit(self, _openmeeg.new_SymMatrix(*args))
    array_flat = _swig_new_instance_method(_openmeeg.SymMatrix_array_flat)
    setvalue = _swig_new_instance_method(_openmeeg.SymMatrix_setvalue)
    value = _swig_new_instance_method(_openmeeg.SymMatrix_value)
    __swig_destroy__ = _openmeeg.delete_SymMatrix

# Register SymMatrix in _openmeeg:
_openmeeg.SymMatrix_swigregister(SymMatrix)
class SparseMatrix(LinOp):
    r"""Proxy of C++ OpenMEEG::SparseMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SparseMatrix self) -> SparseMatrix
        __init__(SparseMatrix self, char const * fname) -> SparseMatrix
        __init__(SparseMatrix self, size_t const N, size_t const M) -> SparseMatrix
        """
        _openmeeg.SparseMatrix_swiginit(self, _openmeeg.new_SparseMatrix(*args))
    __swig_destroy__ = _openmeeg.delete_SparseMatrix
    __call__ = _swig_new_instance_method(_openmeeg.SparseMatrix___call__)
    begin = _swig_new_instance_method(_openmeeg.SparseMatrix_begin)
    end = _swig_new_instance_method(_openmeeg.SparseMatrix_end)
    transpose = _swig_new_instance_method(_openmeeg.SparseMatrix_transpose)
    tank = _swig_new_instance_method(_openmeeg.SparseMatrix_tank)
    set = _swig_new_instance_method(_openmeeg.SparseMatrix_set)
    getlin = _swig_new_instance_method(_openmeeg.SparseMatrix_getlin)
    setlin = _swig_new_instance_method(_openmeeg.SparseMatrix_setlin)
    save = _swig_new_instance_method(_openmeeg.SparseMatrix_save)
    load = _swig_new_instance_method(_openmeeg.SparseMatrix_load)
    frobenius_norm = _swig_new_instance_method(_openmeeg.SparseMatrix_frobenius_norm)
    __mul__ = _swig_new_instance_method(_openmeeg.SparseMatrix___mul__)
    __add__ = _swig_new_instance_method(_openmeeg.SparseMatrix___add__)

# Register SparseMatrix in _openmeeg:
_openmeeg.SparseMatrix_swigregister(SparseMatrix)
class FastSparseMatrix(object):
    r"""Proxy of C++ OpenMEEG::FastSparseMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FastSparseMatrix self) -> FastSparseMatrix
        __init__(FastSparseMatrix self, size_t n, size_t p, size_t sp) -> FastSparseMatrix
        __init__(FastSparseMatrix self, SparseMatrix M) -> FastSparseMatrix
        __init__(FastSparseMatrix self, FastSparseMatrix M) -> FastSparseMatrix
        """
        _openmeeg.FastSparseMatrix_swiginit(self, _openmeeg.new_FastSparseMatrix(*args))
    __swig_destroy__ = _openmeeg.delete_FastSparseMatrix
    nlin = _swig_new_instance_method(_openmeeg.FastSparseMatrix_nlin)
    ncol = _swig_new_instance_method(_openmeeg.FastSparseMatrix_ncol)
    write = _swig_new_instance_method(_openmeeg.FastSparseMatrix_write)
    read = _swig_new_instance_method(_openmeeg.FastSparseMatrix_read)
    __call__ = _swig_new_instance_method(_openmeeg.FastSparseMatrix___call__)
    __mul__ = _swig_new_instance_method(_openmeeg.FastSparseMatrix___mul__)
    info = _swig_new_instance_method(_openmeeg.FastSparseMatrix_info)

# Register FastSparseMatrix in _openmeeg:
_openmeeg.FastSparseMatrix_swigregister(FastSparseMatrix)
__lshift__ = _openmeeg.__lshift__
class Geometry(object):
    r"""Proxy of C++ OpenMEEG::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = _swig_new_instance_method(_openmeeg.Geometry_info)
    has_conductivities = _swig_new_instance_method(_openmeeg.Geometry_has_conductivities)
    selfCheck = _swig_new_instance_method(_openmeeg.Geometry_selfCheck)
    check = _swig_new_instance_method(_openmeeg.Geometry_check)
    check_inner = _swig_new_instance_method(_openmeeg.Geometry_check_inner)
    check_geometry_is_nested = _swig_new_instance_method(_openmeeg.Geometry_check_geometry_is_nested)
    is_nested = _swig_new_instance_method(_openmeeg.Geometry_is_nested)
    vertices = _swig_new_instance_method(_openmeeg.Geometry_vertices)
    add_vertex = _swig_new_instance_method(_openmeeg.Geometry_add_vertex)
    add_mesh = _swig_new_instance_method(_openmeeg.Geometry_add_mesh)
    meshes = _swig_new_instance_method(_openmeeg.Geometry_meshes)
    communicating_mesh_pairs = _swig_new_instance_method(_openmeeg.Geometry_communicating_mesh_pairs)
    domain = _swig_new_instance_method(_openmeeg.Geometry_domain)
    domains = _swig_new_instance_method(_openmeeg.Geometry_domains)
    nb_parameters = _swig_new_instance_method(_openmeeg.Geometry_nb_parameters)
    outermost_domain = _swig_new_instance_method(_openmeeg.Geometry_outermost_domain)
    set_outermost_domain = _swig_new_instance_method(_openmeeg.Geometry_set_outermost_domain)
    is_outermost = _swig_new_instance_method(_openmeeg.Geometry_is_outermost)
    outermost_interface = _swig_new_instance_method(_openmeeg.Geometry_outermost_interface)
    innermost_interface = _swig_new_instance_method(_openmeeg.Geometry_innermost_interface)
    interface = _swig_new_instance_method(_openmeeg.Geometry_interface)
    sigma = _swig_new_instance_method(_openmeeg.Geometry_sigma)
    sigma_inv = _swig_new_instance_method(_openmeeg.Geometry_sigma_inv)
    indicator = _swig_new_instance_method(_openmeeg.Geometry_indicator)
    conductivity_jump = _swig_new_instance_method(_openmeeg.Geometry_conductivity_jump)
    relative_orientation = _swig_new_instance_method(_openmeeg.Geometry_relative_orientation)
    load = _swig_new_instance_method(_openmeeg.Geometry_load)
    import_ = _swig_new_instance_method(_openmeeg.Geometry_import_)
    save = _swig_new_instance_method(_openmeeg.Geometry_save)
    finalize = _swig_new_instance_method(_openmeeg.Geometry_finalize)
    nb_current_barrier_triangles = _swig_new_instance_method(_openmeeg.Geometry_nb_current_barrier_triangles)
    nb_invalid_vertices = _swig_new_instance_method(_openmeeg.Geometry_nb_invalid_vertices)
    isolated_parts = _swig_new_instance_method(_openmeeg.Geometry_isolated_parts)
    mark_current_barriers = _swig_new_instance_method(_openmeeg.Geometry_mark_current_barriers)
    mesh = _swig_new_instance_method(_openmeeg.Geometry_mesh)
    add_vertices = _swig_new_instance_method(_openmeeg.Geometry_add_vertices)

    def __init__(self, *args):
        r"""
        __init__(Geometry self) -> Geometry
        __init__(Geometry self, unsigned int const n) -> Geometry
        __init__(Geometry self, std::string const & geomFileName, bool const OLD_ORDERING=False) -> Geometry
        __init__(Geometry self, std::string const & geomFileName, std::string const & condFileName, bool const OLD_ORDERING=False) -> Geometry
        __init__(Geometry self, char const * geomFileName, bool const OLD_ORDERING=False) -> Geometry
        __init__(Geometry self, char const * geomFileName, char const * condFileName, bool const OLD_ORDERING=False) -> Geometry
        __init__(Geometry self, PyObject * pylist) -> Geometry
        """
        _openmeeg.Geometry_swiginit(self, _openmeeg.new_Geometry(*args))
    __swig_destroy__ = _openmeeg.delete_Geometry

# Register Geometry in _openmeeg:
_openmeeg.Geometry_swigregister(Geometry)
class GeometryIO(object):
    r"""Proxy of C++ OpenMEEG::GeometryIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    create = _swig_new_static_method(_openmeeg.GeometryIO_create)
    name = _swig_new_instance_method(_openmeeg.GeometryIO_name)
    load = _swig_new_instance_method(_openmeeg.GeometryIO_load)
    save = _swig_new_instance_method(_openmeeg.GeometryIO_save)
    __swig_destroy__ = _openmeeg.delete_GeometryIO

# Register GeometryIO in _openmeeg:
_openmeeg.GeometryIO_swigregister(GeometryIO)
class Sensors(object):
    r"""Proxy of C++ OpenMEEG::Sensors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Sensors self) -> Sensors
        __init__(Sensors self, Geometry g) -> Sensors
        __init__(Sensors self, char const * filename) -> Sensors
        __init__(Sensors self, char const * filename, Geometry g) -> Sensors
        __init__(Sensors self, Matrix positions, Geometry g) -> Sensors
        __init__(Sensors self, vector_string labels, Matrix positions, Matrix orientations, Vector weights, Vector radii) -> Sensors
        __init__(Sensors self, vector_string labels, Matrix positions, Matrix orientations, Vector weights, Vector radii, Geometry g) -> Sensors
        """
        _openmeeg.Sensors_swiginit(self, _openmeeg.new_Sensors(*args))
    load = _swig_new_instance_method(_openmeeg.Sensors_load)
    save = _swig_new_instance_method(_openmeeg.Sensors_save)
    getNumberOfSensors = _swig_new_instance_method(_openmeeg.Sensors_getNumberOfSensors)
    getNumberOfPositions = _swig_new_instance_method(_openmeeg.Sensors_getNumberOfPositions)
    getPositions = _swig_new_instance_method(_openmeeg.Sensors_getPositions)
    getOrientations = _swig_new_instance_method(_openmeeg.Sensors_getOrientations)
    getNames = _swig_new_instance_method(_openmeeg.Sensors_getNames)
    hasRadii = _swig_new_instance_method(_openmeeg.Sensors_hasRadii)
    hasOrientations = _swig_new_instance_method(_openmeeg.Sensors_hasOrientations)
    hasNames = _swig_new_instance_method(_openmeeg.Sensors_hasNames)
    getPosition = _swig_new_instance_method(_openmeeg.Sensors_getPosition)
    getOrientation = _swig_new_instance_method(_openmeeg.Sensors_getOrientation)
    getName = _swig_new_instance_method(_openmeeg.Sensors_getName)
    setPosition = _swig_new_instance_method(_openmeeg.Sensors_setPosition)
    setOrientation = _swig_new_instance_method(_openmeeg.Sensors_setOrientation)
    hasSensor = _swig_new_instance_method(_openmeeg.Sensors_hasSensor)
    getSensorIdx = _swig_new_instance_method(_openmeeg.Sensors_getSensorIdx)
    getInjectionTriangles = _swig_new_instance_method(_openmeeg.Sensors_getInjectionTriangles)
    getRadii = _swig_new_instance_method(_openmeeg.Sensors_getRadii)
    getWeights = _swig_new_instance_method(_openmeeg.Sensors_getWeights)
    getWeightsMatrix = _swig_new_instance_method(_openmeeg.Sensors_getWeightsMatrix)
    isEmpty = _swig_new_instance_method(_openmeeg.Sensors_isEmpty)
    info = _swig_new_instance_method(_openmeeg.Sensors_info)
    __swig_destroy__ = _openmeeg.delete_Sensors

# Register Sensors in _openmeeg:
_openmeeg.Sensors_swigregister(Sensors)
class Mesh(object):
    r"""Proxy of C++ OpenMEEG::Mesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmeeg.delete_Mesh
    name = _swig_new_instance_method(_openmeeg.Mesh_name)
    vertices = _swig_new_instance_method(_openmeeg.Mesh_vertices)
    geometry = _swig_new_instance_method(_openmeeg.Mesh_geometry)
    triangle = _swig_new_instance_method(_openmeeg.Mesh_triangle)
    current_barrier = _swig_new_instance_method(_openmeeg.Mesh_current_barrier)
    isolated = _swig_new_instance_method(_openmeeg.Mesh_isolated)
    add_triangle = _swig_new_instance_method(_openmeeg.Mesh_add_triangle)
    add = _swig_new_instance_method(_openmeeg.Mesh_add)
    __eq__ = _swig_new_instance_method(_openmeeg.Mesh___eq__)
    __ne__ = _swig_new_instance_method(_openmeeg.Mesh___ne__)
    info = _swig_new_instance_method(_openmeeg.Mesh_info)
    has_self_intersection = _swig_new_instance_method(_openmeeg.Mesh_has_self_intersection)
    intersection = _swig_new_instance_method(_openmeeg.Mesh_intersection)
    has_correct_orientation = _swig_new_instance_method(_openmeeg.Mesh_has_correct_orientation)
    generate_indices = _swig_new_instance_method(_openmeeg.Mesh_generate_indices)
    update = _swig_new_instance_method(_openmeeg.Mesh_update)
    merge = _swig_new_instance_method(_openmeeg.Mesh_merge)
    vertices_ranges = _swig_new_instance_method(_openmeeg.Mesh_vertices_ranges)
    triangles_range = _swig_new_instance_method(_openmeeg.Mesh_triangles_range)
    triangles = _swig_new_instance_method(_openmeeg.Mesh_triangles)
    adjacent_triangles = _swig_new_instance_method(_openmeeg.Mesh_adjacent_triangles)
    change_orientation = _swig_new_instance_method(_openmeeg.Mesh_change_orientation)
    correct_local_orientation = _swig_new_instance_method(_openmeeg.Mesh_correct_local_orientation)
    correct_global_orientation = _swig_new_instance_method(_openmeeg.Mesh_correct_global_orientation)
    solid_angle = _swig_new_instance_method(_openmeeg.Mesh_solid_angle)
    normal = _swig_new_instance_method(_openmeeg.Mesh_normal)
    laplacian = _swig_new_instance_method(_openmeeg.Mesh_laplacian)
    outermost = _swig_new_instance_method(_openmeeg.Mesh_outermost)
    smooth = _swig_new_instance_method(_openmeeg.Mesh_smooth)
    gradient_norm2 = _swig_new_instance_method(_openmeeg.Mesh_gradient_norm2)
    load = _swig_new_instance_method(_openmeeg.Mesh_load)
    save = _swig_new_instance_method(_openmeeg.Mesh_save)
    reference_vertices = _swig_new_instance_method(_openmeeg.Mesh_reference_vertices)
    add_triangles = _swig_new_instance_method(_openmeeg.Mesh_add_triangles)

    def __init__(self, *args):
        r"""
        __init__(Mesh self, Geometry geometry=None) -> Mesh
        __init__(Mesh self, unsigned int const nv, unsigned int const nt, Geometry geometry=None) -> Mesh
        __init__(Mesh self, Mesh arg2) -> Mesh
        __init__(Mesh self, Mesh m) -> Mesh
        __init__(Mesh self, std::string const & filename, bool const verbose, Geometry geometry=None) -> Mesh
        __init__(Mesh self, std::string const & filename, Geometry geometry=None) -> Mesh
        __init__(Mesh self, PyObject * vertices, PyObject * triangles, std::string const name="", Geometry geom=None) -> Mesh
        """
        _openmeeg.Mesh_swiginit(self, _openmeeg.new_Mesh(*args))
    __str__ = _swig_new_instance_method(_openmeeg.Mesh___str__)

# Register Mesh in _openmeeg:
_openmeeg.Mesh_swigregister(Mesh)
class Integrator(object):
    r"""Proxy of C++ OpenMEEG::Integrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Integrator self, unsigned int const ord) -> Integrator
        __init__(Integrator self, unsigned int const ord, double const tol) -> Integrator
        __init__(Integrator self, unsigned int const ord, unsigned int const levels, double const tol=0.0001) -> Integrator
        """
        _openmeeg.Integrator_swiginit(self, _openmeeg.new_Integrator(*args))
    norm = _swig_new_instance_method(_openmeeg.Integrator_norm)
    __swig_destroy__ = _openmeeg.delete_Integrator

# Register Integrator in _openmeeg:
_openmeeg.Integrator_swigregister(Integrator)
class OrientedMesh(object):
    r"""Proxy of C++ OpenMEEG::OrientedMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = _openmeeg.OrientedMesh_Normal
    
    Opposite = _openmeeg.OrientedMesh_Opposite
    

    def __init__(self, *args):
        r"""
        __init__(OrientedMesh self) -> OrientedMesh
        __init__(OrientedMesh self, Mesh m, OpenMEEG::OrientedMesh::Orientation const o) -> OrientedMesh
        """
        _openmeeg.OrientedMesh_swiginit(self, _openmeeg.new_OrientedMesh(*args))
    mesh = _swig_new_instance_method(_openmeeg.OrientedMesh_mesh)
    orientation = _swig_new_instance_method(_openmeeg.OrientedMesh_orientation)
    change_orientation = _swig_new_instance_method(_openmeeg.OrientedMesh_change_orientation)
    __swig_destroy__ = _openmeeg.delete_OrientedMesh

# Register OrientedMesh in _openmeeg:
_openmeeg.OrientedMesh_swigregister(OrientedMesh)
class Interface(object):
    r"""Proxy of C++ OpenMEEG::Interface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Interface self) -> Interface
        __init__(Interface self, std::string const & interfname) -> Interface
        """
        _openmeeg.Interface_swiginit(self, _openmeeg.new_Interface(*args))
    name = _swig_new_instance_method(_openmeeg.Interface_name)
    oriented_meshes = _swig_new_instance_method(_openmeeg.Interface_oriented_meshes)
    outermost = _swig_new_instance_method(_openmeeg.Interface_outermost)
    set_to_outermost = _swig_new_instance_method(_openmeeg.Interface_set_to_outermost)
    contains = _swig_new_instance_method(_openmeeg.Interface_contains)
    is_mesh_orientations_coherent = _swig_new_instance_method(_openmeeg.Interface_is_mesh_orientations_coherent)
    nb_vertices = _swig_new_instance_method(_openmeeg.Interface_nb_vertices)
    nb_triangles = _swig_new_instance_method(_openmeeg.Interface_nb_triangles)
    adjacent_triangles = _swig_new_instance_method(_openmeeg.Interface_adjacent_triangles)
    __swig_destroy__ = _openmeeg.delete_Interface

# Register Interface in _openmeeg:
_openmeeg.Interface_swigregister(Interface)
class SimpleDomain(object):
    r"""Proxy of C++ OpenMEEG::SimpleDomain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Inside = _openmeeg.SimpleDomain_Inside
    
    Outside = _openmeeg.SimpleDomain_Outside
    

    def __init__(self, *args):
        r"""
        __init__(SimpleDomain self) -> SimpleDomain
        __init__(SimpleDomain self, Interface i, OpenMEEG::SimpleDomain::Side const s) -> SimpleDomain
        """
        _openmeeg.SimpleDomain_swiginit(self, _openmeeg.new_SimpleDomain(*args))
    __swig_destroy__ = _openmeeg.delete_SimpleDomain
    interface = _swig_new_instance_method(_openmeeg.SimpleDomain_interface)
    inside = _swig_new_instance_method(_openmeeg.SimpleDomain_inside)
    mesh_orientation = _swig_new_instance_method(_openmeeg.SimpleDomain_mesh_orientation)

# Register SimpleDomain in _openmeeg:
_openmeeg.SimpleDomain_swigregister(SimpleDomain)
class Domain(object):
    r"""Proxy of C++ OpenMEEG::Domain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Domain self, std::string const & dname="") -> Domain"""
        _openmeeg.Domain_swiginit(self, _openmeeg.new_Domain(*args))
    __swig_destroy__ = _openmeeg.delete_Domain
    boundaries = _swig_new_instance_method(_openmeeg.Domain_boundaries)
    name = _swig_new_instance_method(_openmeeg.Domain_name)
    set_conductivity = _swig_new_instance_method(_openmeeg.Domain_set_conductivity)
    has_conductivity = _swig_new_instance_method(_openmeeg.Domain_has_conductivity)
    conductivity = _swig_new_instance_method(_openmeeg.Domain_conductivity)
    info = _swig_new_instance_method(_openmeeg.Domain_info)
    contains = _swig_new_instance_method(_openmeeg.Domain_contains)
    mesh_orientation = _swig_new_instance_method(_openmeeg.Domain_mesh_orientation)

# Register Domain in _openmeeg:
_openmeeg.Domain_swigregister(Domain)
HeadMat = _openmeeg.HeadMat
SurfSourceMat = _openmeeg.SurfSourceMat
DipSourceMat = _openmeeg.DipSourceMat
EITSourceMat = _openmeeg.EITSourceMat
Surf2VolMat = _openmeeg.Surf2VolMat
Head2EEGMat = _openmeeg.Head2EEGMat
Head2ECoGMat = _openmeeg.Head2ECoGMat
Head2MEGMat = _openmeeg.Head2MEGMat
SurfSource2MEGMat = _openmeeg.SurfSource2MEGMat
DipSource2MEGMat = _openmeeg.DipSource2MEGMat
DipSource2InternalPotMat = _openmeeg.DipSource2InternalPotMat
CorticalMat = _openmeeg.CorticalMat
CorticalMat2 = _openmeeg.CorticalMat2
USE_GMRES = _openmeeg.USE_GMRES

class GainMEG(Matrix):
    r"""Proxy of C++ OpenMEEG::GainMEG class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GainMEG self, Matrix GainMat) -> GainMEG
        __init__(GainMEG self, SymMatrix HeadMatInv, Matrix SourceMat, Matrix Head2MEGMat, Matrix Source2MEGMat) -> GainMEG
        """
        _openmeeg.GainMEG_swiginit(self, _openmeeg.new_GainMEG(*args))
    __swig_destroy__ = _openmeeg.delete_GainMEG

# Register GainMEG in _openmeeg:
_openmeeg.GainMEG_swigregister(GainMEG)
class GainEEG(Matrix):
    r"""Proxy of C++ OpenMEEG::GainEEG class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GainEEG self, Matrix GainMat) -> GainEEG
        __init__(GainEEG self, SymMatrix HeadMatInv, Matrix SourceMat, SparseMatrix Head2EEGMat) -> GainEEG
        """
        _openmeeg.GainEEG_swiginit(self, _openmeeg.new_GainEEG(*args))
    __swig_destroy__ = _openmeeg.delete_GainEEG

# Register GainEEG in _openmeeg:
_openmeeg.GainEEG_swigregister(GainEEG)
class GainEEGadjoint(Matrix):
    r"""Proxy of C++ OpenMEEG::GainEEGadjoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, geo, dipoles, HeadMat, Head2EEGMat):
        r"""__init__(GainEEGadjoint self, Geometry geo, Matrix dipoles, SymMatrix HeadMat, SparseMatrix Head2EEGMat) -> GainEEGadjoint"""
        _openmeeg.GainEEGadjoint_swiginit(self, _openmeeg.new_GainEEGadjoint(geo, dipoles, HeadMat, Head2EEGMat))
    __swig_destroy__ = _openmeeg.delete_GainEEGadjoint

# Register GainEEGadjoint in _openmeeg:
_openmeeg.GainEEGadjoint_swigregister(GainEEGadjoint)
class GainMEGadjoint(Matrix):
    r"""Proxy of C++ OpenMEEG::GainMEGadjoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, geo, dipoles, HeadMat, Head2MEGMat, Source2MEGMat):
        r"""__init__(GainMEGadjoint self, Geometry geo, Matrix dipoles, SymMatrix HeadMat, Matrix Head2MEGMat, Matrix Source2MEGMat) -> GainMEGadjoint"""
        _openmeeg.GainMEGadjoint_swiginit(self, _openmeeg.new_GainMEGadjoint(geo, dipoles, HeadMat, Head2MEGMat, Source2MEGMat))
    __swig_destroy__ = _openmeeg.delete_GainMEGadjoint

# Register GainMEGadjoint in _openmeeg:
_openmeeg.GainMEGadjoint_swigregister(GainMEGadjoint)
class GainEEGMEGadjoint(object):
    r"""Proxy of C++ OpenMEEG::GainEEGMEGadjoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, geo, dipoles, HeadMat, Head2EEGMat, Head2MEGMat, Source2MEGMat):
        r"""__init__(GainEEGMEGadjoint self, Geometry geo, Matrix dipoles, SymMatrix HeadMat, SparseMatrix Head2EEGMat, Matrix Head2MEGMat, Matrix Source2MEGMat) -> GainEEGMEGadjoint"""
        _openmeeg.GainEEGMEGadjoint_swiginit(self, _openmeeg.new_GainEEGMEGadjoint(geo, dipoles, HeadMat, Head2EEGMat, Head2MEGMat, Source2MEGMat))
    saveEEG = _swig_new_instance_method(_openmeeg.GainEEGMEGadjoint_saveEEG)
    saveMEG = _swig_new_instance_method(_openmeeg.GainEEGMEGadjoint_saveMEG)
    nlin = _swig_new_instance_method(_openmeeg.GainEEGMEGadjoint_nlin)
    __swig_destroy__ = _openmeeg.delete_GainEEGMEGadjoint

# Register GainEEGMEGadjoint in _openmeeg:
_openmeeg.GainEEGMEGadjoint_swigregister(GainEEGMEGadjoint)
class GainInternalPot(Matrix):
    r"""Proxy of C++ OpenMEEG::GainInternalPot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, HeadMatInv, SourceMat, Head2IPMat, Source2IPMat):
        r"""__init__(GainInternalPot self, SymMatrix HeadMatInv, Matrix SourceMat, Matrix Head2IPMat, Matrix Source2IPMat) -> GainInternalPot"""
        _openmeeg.GainInternalPot_swiginit(self, _openmeeg.new_GainInternalPot(HeadMatInv, SourceMat, Head2IPMat, Source2IPMat))
    __swig_destroy__ = _openmeeg.delete_GainInternalPot

# Register GainInternalPot in _openmeeg:
_openmeeg.GainInternalPot_swigregister(GainInternalPot)
class GainEITInternalPot(Matrix):
    r"""Proxy of C++ OpenMEEG::GainEITInternalPot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, HeadMatInv, SourceMat, Head2IPMat):
        r"""__init__(GainEITInternalPot self, SymMatrix HeadMatInv, Matrix SourceMat, Matrix Head2IPMat) -> GainEITInternalPot"""
        _openmeeg.GainEITInternalPot_swiginit(self, _openmeeg.new_GainEITInternalPot(HeadMatInv, SourceMat, Head2IPMat))
    __swig_destroy__ = _openmeeg.delete_GainEITInternalPot

# Register GainEITInternalPot in _openmeeg:
_openmeeg.GainEITInternalPot_swigregister(GainEITInternalPot)
class Forward(Matrix):
    r"""Proxy of C++ OpenMEEG::Forward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, GainMatrix, RealSourcesData, NoiseLevel):
        r"""__init__(Forward self, Matrix GainMatrix, Matrix RealSourcesData, double const NoiseLevel) -> Forward"""
        _openmeeg.Forward_swiginit(self, _openmeeg.new_Forward(GainMatrix, RealSourcesData, NoiseLevel))
    __swig_destroy__ = _openmeeg.delete_Forward

# Register Forward in _openmeeg:
_openmeeg.Forward_swigregister(Forward)

