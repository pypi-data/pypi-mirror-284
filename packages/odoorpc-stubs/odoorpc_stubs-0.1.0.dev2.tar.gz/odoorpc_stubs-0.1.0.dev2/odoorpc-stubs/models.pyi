from _typeshed import Incomplete

__all__ = ["Model"]

class IncrementalRecords:
    tuples: Incomplete
    def __init__(self, tuples) -> None: ...

class MetaModel(type):
    def __getattr__(cls, method): ...
    @property
    def env(cls): ...

BaseModel: MetaModel

class Model(BaseModel):
    __metaclass__ = MetaModel
    def __init__(self) -> None: ...
    @property
    def env(self): ...
    @property
    def id(self): ...
    @property
    def ids(self): ...
    @classmethod
    def browse(cls, ids): ...
    @classmethod
    def with_context(cls, *args, **kwargs): ...
    @classmethod
    def with_env(cls, env): ...
    def __getattr__(self, method): ...
    def __getitem__(self, key): ...
    def __int__(self) -> int: ...
    def __eq__(self, other): ...
    __hash__: Incomplete
    def __ne__(self, other): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __len__(self) -> int: ...
    def __iadd__(self, records): ...
    def __isub__(self, records): ...
