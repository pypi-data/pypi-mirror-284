[project]
name = "mksolutions"
version = "0.8.5"
description = "The community Python library for the MK Solutions ERP API"
dynamic = ["readme"]
license = "MIT"
authors = [
    { name = "Deivid Carvalho Moura", email = "deividcarvalhomoura@gmail.com" }
]
dependencies = [
    "annotated-types==0.7.0",
    "anyio==4.4.0",
    "beautifulsoup4==4.12.3",
    "bs4==0.0.2",
    "certifi==2024.6.2",
    "h11==0.14.0",
    "httpcore==1.0.5",
    "httpx==0.27.0",
    "idna==3.7",
    "iniconfig==2.0.0",
    "packaging==24.1",
    "pluggy==1.5.0",
    "pydantic==2.7.4",
    "pydantic-core==2.18.4",
    "python-dotenv==1.0.1",
    "sniffio==1.3.1",
    "soupsieve==2.5",
    "typing-extensions==4.12.2",
]
requires-python = ">= 3.8"
classifiers = [
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License"
]

[project.urls]
Homepage = "https://github.com/DevDeividMoura/mksolutions-api-py"
Repository = "https://github.com/DevDeividMoura/mksolutions-api-py"

[tool.rye]
managed = true
dev-dependencies = [
    "ruff",
    "respx",
    "pytest",
    "pytest-asyncio",
    "pytest-mock"
]

[tool.rye.scripts]
format = { chain = [
  "format:ruff",
  "format:docs",
  "fix:ruff",
]}
"format:black" = "black ."
"format:docs" = "python scripts/utils/ruffen-docs.py README.md api.md"
"format:ruff" = "ruff check . --fix"
"format:isort" = "isort ."

"lint" = { chain = [
  "check:ruff",
]}
"check:ruff" = "ruff check ."
"fix:ruff" = "ruff check . --fix"

[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
  "src/*"
]

[tool.hatch.build.targets.wheel]
packages = ["src/mksolutions"]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# replace relative links with absolute links
pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)'
replacement = '[\1](https://github.com/DevDeividMoura/mksolutions-api-py/tree/main/\g<2>)'

[tool.black]
line-length = 120
target-version = ["py37"]

# [tool.hatch.metadata]
# allow-direct-references = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--tb=short"
xfail_strict = true
asyncio_mode = "auto"
filterwarnings = [
  "error"
]

[tool.ruff]
line-length = 120
output-format = "grouped"
target-version = "py37"

[tool.ruff.lint]
select = [
  # isort
  "I",
  # bugbear rules
  "B",
  # remove unused imports
  "F401",
  # bare except statements
  "E722",
  # unused arguments
  "ARG",
  # print statements
  "T201",
  "T203",
  # misuse of typing.TYPE_CHECKING
  "TCH004",
  # import rules
  "TID251",
]
ignore = [
  # mutable defaults
  "B006",
]
unfixable = [
  # disable auto fix for print statements
  "T201",
  "T203",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"functools.lru_cache".msg = "This function does not retain type information for the wrapped function's arguments; The `lru_cache` function from `_utils` should be used instead"

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["mksolutions", "tests"]

[tool.ruff.lint.per-file-ignores]
"bin/**.py" = ["T201", "T203"]
"scripts/**.py" = ["T201", "T203"]
"tests/**.py" = ["T201", "T203"]
"examples/**.py" = ["T201", "T203"]
