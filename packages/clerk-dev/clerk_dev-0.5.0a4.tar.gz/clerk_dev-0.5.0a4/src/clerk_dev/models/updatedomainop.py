"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from clerk_dev.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class UpdateDomainRequestBodyTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""The new domain name. For development instances, can contain the port,
    i.e `myhostname:3000`. For production instances, must be a valid FQDN,
    i.e `mysite.com`. Cannot contain protocol scheme.
    """
    proxy_url: NotRequired[Nullable[str]]
    r"""The full URL of the proxy that will forward requests to Clerk's Frontend API.
    Can only be updated for production instances.
    """
    

class UpdateDomainRequestBody(BaseModel):
    name: Optional[Nullable[str]] = None
    r"""The new domain name. For development instances, can contain the port,
    i.e `myhostname:3000`. For production instances, must be a valid FQDN,
    i.e `mysite.com`. Cannot contain protocol scheme.
    """
    proxy_url: Optional[Nullable[str]] = None
    r"""The full URL of the proxy that will forward requests to Clerk's Frontend API.
    Can only be updated for production instances.
    """
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "proxy_url"]
        nullable_fields = ["name", "proxy_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class UpdateDomainRequestTypedDict(TypedDict):
    domain_id: str
    r"""The ID of the domain that will be updated."""
    request_body: UpdateDomainRequestBodyTypedDict
    

class UpdateDomainRequest(BaseModel):
    domain_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The ID of the domain that will be updated."""
    request_body: Annotated[UpdateDomainRequestBody, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    
