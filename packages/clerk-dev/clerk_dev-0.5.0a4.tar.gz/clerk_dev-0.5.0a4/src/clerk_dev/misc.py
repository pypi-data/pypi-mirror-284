"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
import clerk_dev.utils as utils
from typing import Optional

class Misc(BaseSDK):
    
    
    def get_public_interstitial(
        self, *,
        frontend_api: Optional[str] = None,
        publishable_key: Optional[str] = None,
        server_url: Optional[str] = None,
        timeout_config: Optional[int] = None,
    ):
        r"""Returns the markup for the interstitial page

        The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
        It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.

        :param frontend_api: The Frontend API key of your instance
        :param publishable_key: The publishable key of your instance
        :param server_url: Override the default server URL for this method
        :param timeout_config: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetPublicInterstitialRequest(
            frontend_api=frontend_api,
            publishable_key=publishable_key,
        )
        
        req = self.build_request(
            method="GET",
            path="/public/interstitial",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            timeout_config=timeout_config,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetPublicInterstitial", oauth2_scopes=[], security_source=None),
            request=req,
            error_status_codes=["400","4XX","500","5XX"],
        )
        
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400","4XX","500","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)
    
    
    async def get_public_interstitial_async(
        self, *,
        frontend_api: Optional[str] = None,
        publishable_key: Optional[str] = None,
        server_url: Optional[str] = None,
        timeout_config: Optional[int] = None,
    ):
        r"""Returns the markup for the interstitial page

        The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
        It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.

        :param frontend_api: The Frontend API key of your instance
        :param publishable_key: The publishable key of your instance
        :param server_url: Override the default server URL for this method
        :param timeout_config: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetPublicInterstitialRequest(
            frontend_api=frontend_api,
            publishable_key=publishable_key,
        )
        
        req = self.build_request(
            method="GET",
            path="/public/interstitial",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            timeout_config=timeout_config,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetPublicInterstitial", oauth2_scopes=[], security_source=None),
            request=req,
            error_status_codes=["400","4XX","500","5XX"],
        )
        
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400","4XX","500","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)
    
