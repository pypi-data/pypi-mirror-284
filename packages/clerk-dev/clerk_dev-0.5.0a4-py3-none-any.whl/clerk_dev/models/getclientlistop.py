"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .client import Client, ClientTypedDict
from clerk_dev.types import BaseModel
from clerk_dev.utils import FieldMetadata, QueryParamMetadata
from typing import Callable, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetClientListRequestTypedDict(TypedDict):
    limit: NotRequired[float]
    r"""Applies a limit to the number of results returned.
    Can be used for paginating the results together with `offset`.
    """
    offset: NotRequired[float]
    r"""Skip the first `offset` results when paginating.
    Needs to be an integer greater or equal to zero.
    To be used in conjunction with `limit`.
    """
    

class GetClientListRequest(BaseModel):
    limit: Annotated[Optional[float], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 10
    r"""Applies a limit to the number of results returned.
    Can be used for paginating the results together with `offset`.
    """
    offset: Annotated[Optional[float], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 0
    r"""Skip the first `offset` results when paginating.
    Needs to be an integer greater or equal to zero.
    To be used in conjunction with `limit`.
    """
    

class GetClientListResponseTypedDict(TypedDict):
    result: List[ClientTypedDict]
    

class GetClientListResponse(BaseModel):
    next: Callable[[], Optional[GetClientListResponse]]
    
    result: List[Client]
    
