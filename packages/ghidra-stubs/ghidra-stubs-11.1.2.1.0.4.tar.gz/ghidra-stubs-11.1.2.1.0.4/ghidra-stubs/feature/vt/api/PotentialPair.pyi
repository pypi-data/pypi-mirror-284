from typing import overload
import ghidra.feature.vt.api
import java.lang


class PotentialPair(object, java.lang.Comparable):
    EMPTY_PAIR: ghidra.feature.vt.api.PotentialPair



    def __init__(self, __a0: ghidra.feature.vt.api.FunctionNode, __a1: ghidra.feature.vt.api.FunctionNode, __a2: float): ...



    @overload
    def compareTo(self, __a0: ghidra.feature.vt.api.PotentialPair) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestination(self) -> ghidra.feature.vt.api.FunctionNode: ...

    def getOrigin(self) -> ghidra.feature.vt.api.FunctionPair: ...

    def getScore(self) -> float: ...

    def getSource(self) -> ghidra.feature.vt.api.FunctionNode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setOrigin(self, __a0: ghidra.feature.vt.api.FunctionPair) -> None: ...

    def swap(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def destination(self) -> ghidra.feature.vt.api.FunctionNode: ...

    @property
    def origin(self) -> ghidra.feature.vt.api.FunctionPair: ...

    @origin.setter
    def origin(self, value: ghidra.feature.vt.api.FunctionPair) -> None: ...

    @property
    def score(self) -> float: ...

    @property
    def source(self) -> ghidra.feature.vt.api.FunctionNode: ...