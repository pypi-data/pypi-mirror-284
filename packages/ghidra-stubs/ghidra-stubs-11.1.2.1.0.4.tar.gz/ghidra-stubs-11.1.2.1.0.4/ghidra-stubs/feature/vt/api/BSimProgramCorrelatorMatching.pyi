from typing import List
from typing import overload
import ghidra.feature.vt.api.main
import ghidra.util.task
import java.lang


class BSimProgramCorrelatorMatching(object):




    def __init__(self, __a0: ghidra.feature.vt.api.FunctionNodeContainer, __a1: ghidra.feature.vt.api.FunctionNodeContainer, __a2: generic.lsh.vector.LSHVectorFactory, __a3: float, __a4: float, __a5: float, __a6: bool, __a7: generic.lsh.LSHMemoryModel): ...



    def discoverPotentialMatches(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def doMatching(self, __a0: ghidra.util.task.TaskMonitor) -> List[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def generateSeeds(self, __a0: ghidra.feature.vt.api.main.VTMatchSet, __a1: bool, __a2: ghidra.util.task.TaskMonitor) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

