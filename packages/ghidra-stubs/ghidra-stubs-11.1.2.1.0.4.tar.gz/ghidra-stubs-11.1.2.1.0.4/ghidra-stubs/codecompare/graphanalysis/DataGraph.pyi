from typing import overload
import ghidra.program.model.pcode
import java.io
import java.lang


class DataGraph(object):





    class Associate(object):




        def __init__(self, __a0: ghidra.codecompare.graphanalysis.DataVertex, __a1: int): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.codecompare.graphanalysis.Pinning.Side, __a1: ghidra.program.model.pcode.HighFunction, __a2: bool, __a3: bool, __a4: bool, __a5: bool): ...



    def dump(self, __a0: java.io.Writer) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getHighFunction(self) -> ghidra.program.model.pcode.HighFunction: ...

    def hashCode(self) -> int: ...

    def isConstantNonPointer(self, __a0: ghidra.program.model.pcode.Varnode) -> bool: ...

    def makeNGrams(self, __a0: int) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def highFunction(self) -> ghidra.program.model.pcode.HighFunction: ...