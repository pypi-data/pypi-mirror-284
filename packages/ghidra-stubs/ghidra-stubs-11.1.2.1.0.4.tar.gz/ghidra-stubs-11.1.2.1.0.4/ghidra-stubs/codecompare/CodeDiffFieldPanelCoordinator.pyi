from typing import List
from typing import overload
import docking.widgets.fieldpanel
import ghidra.app.decompiler.component
import ghidra.codecompare
import ghidra.program.util
import ghidra.util.task
import java.lang


class CodeDiffFieldPanelCoordinator(ghidra.app.decompiler.component.DualDecompilerFieldPanelCoordinator):




    def __init__(self, __a0: ghidra.codecompare.DecompilerDiffCodeComparisonPanel): ...



    def add(self, __a0: docking.widgets.fieldpanel.FieldPanel) -> None: ...

    def computeLinePairing(self, __a0: ghidra.codecompare.DecompileDataDiff, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def leftLocationChanged(self, __a0: ghidra.program.util.ProgramLocation) -> None: ...

    def lockLines(self, __a0: List[long]) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def remove(self, __a0: docking.widgets.fieldpanel.FieldPanel) -> None: ...

    def replaceDecompileDataDiff(self, __a0: ghidra.codecompare.DecompileDataDiff, __a1: bool, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def resetLockedLines(self) -> None: ...

    def rightLocationChanged(self, __a0: ghidra.program.util.ProgramLocation) -> None: ...

    def toString(self) -> unicode: ...

    def viewChanged(self, __a0: docking.widgets.fieldpanel.FieldPanel, __a1: long, __a2: int, __a3: int) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

