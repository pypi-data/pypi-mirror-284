from typing import List
from typing import overload
import docking.widgets
import docking.widgets.fieldpanel.field
import docking.widgets.fieldpanel.support
import ghidra.app.decompiler
import ghidra.app.decompiler.component
import ghidra.codecompare
import ghidra.codecompare.graphanalysis
import ghidra.program.model.listing
import java.awt
import java.lang
import java.util
import java.util.function


class DiffClangHighlightController(ghidra.app.decompiler.component.LocationClangHighlightController, ghidra.codecompare.DiffClangHighlightListener):




    def __init__(self, __a0: ghidra.codecompare.DecompilerCodeComparisonOptions): ...



    def addBraceHighlight(self, __a0: ghidra.app.decompiler.ClangSyntaxToken, __a1: java.awt.Color) -> None: ...

    def addHighlighter(self, __a0: ghidra.app.decompiler.component.ClangDecompilerHighlighter) -> None: ...

    def addHighlighterHighlights(self, __a0: ghidra.app.decompiler.component.ClangDecompilerHighlighter, __a1: java.util.function.Supplier, __a2: ghidra.app.decompiler.component.ColorProvider) -> None: ...

    @overload
    def addListener(self, __a0: ghidra.app.decompiler.component.ClangHighlightListener) -> None: ...

    @overload
    def addListener(self, __a0: ghidra.codecompare.DiffClangHighlightListener) -> bool: ...

    @overload
    def addPrimaryHighlights(self, __a0: ghidra.app.decompiler.ClangNode, __a1: ghidra.app.decompiler.component.ColorProvider) -> None: ...

    @overload
    def addPrimaryHighlights(self, __a0: ghidra.app.decompiler.ClangNode, __a1: java.util.Set, __a2: java.awt.Color) -> None: ...

    def addSecondaryHighlighter(self, __a0: ghidra.program.model.listing.Function, __a1: ghidra.app.decompiler.component.ClangDecompilerHighlighter) -> None: ...

    def blend(self, __a0: List[object]) -> java.awt.Color: ...

    def clearDiffHighlights(self) -> None: ...

    def clearPrimaryHighlights(self) -> None: ...

    def dispose(self) -> None: ...

    @staticmethod
    def dummyIfNull(__a0: ghidra.app.decompiler.component.ClangHighlightController) -> ghidra.app.decompiler.component.ClangHighlightController: ...

    def equals(self, __a0: object) -> bool: ...

    def fieldLocationChanged(self, __a0: docking.widgets.fieldpanel.support.FieldLocation, __a1: docking.widgets.fieldpanel.field.Field, __a2: docking.widgets.EventTrigger) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getCombinedColor(self, __a0: ghidra.app.decompiler.ClangToken) -> java.awt.Color: ...

    def getGlobalHighlighters(self) -> java.util.Set: ...

    def getHighlightedToken(self) -> ghidra.app.decompiler.ClangToken: ...

    def getHighlighterHighlights(self, __a0: ghidra.app.decompiler.DecompilerHighlighter) -> ghidra.app.decompiler.component.TokenHighlights: ...

    def getPrimaryHighlightedText(self) -> unicode: ...

    def getPrimaryHighlights(self) -> ghidra.app.decompiler.component.TokenHighlights: ...

    def getRandomColorProvider(self) -> ghidra.app.decompiler.component.ColorProvider: ...

    def getSecondaryHighlight(self, __a0: ghidra.app.decompiler.ClangToken) -> java.awt.Color: ...

    def getSecondaryHighlightColors(self) -> ghidra.app.decompiler.component.TokenHighlightColors: ...

    def getSecondaryHighlighters(self, __a0: ghidra.program.model.listing.Function) -> java.util.Set: ...

    def getUpdateId(self) -> long: ...

    def hasPrimaryHighlight(self, __a0: ghidra.app.decompiler.ClangToken) -> bool: ...

    def hasSecondaryHighlight(self, __a0: ghidra.app.decompiler.ClangToken) -> bool: ...

    def hasSecondaryHighlights(self, __a0: ghidra.program.model.listing.Function) -> bool: ...

    def hashCode(self) -> int: ...

    def locationTokenChanged(self, __a0: ghidra.app.decompiler.ClangToken, __a1: ghidra.codecompare.graphanalysis.TokenBin) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeHighlighter(self, __a0: ghidra.app.decompiler.DecompilerHighlighter) -> None: ...

    def removeHighlighterHighlights(self, __a0: ghidra.app.decompiler.DecompilerHighlighter) -> None: ...

    @overload
    def removeListener(self, __a0: ghidra.app.decompiler.component.ClangHighlightListener) -> None: ...

    @overload
    def removeListener(self, __a0: ghidra.codecompare.DiffClangHighlightListener) -> bool: ...

    @overload
    def removeSecondaryHighlights(self, __a0: ghidra.app.decompiler.ClangToken) -> None: ...

    @overload
    def removeSecondaryHighlights(self, __a0: ghidra.program.model.listing.Function) -> None: ...

    def setDiffHighlights(self, __a0: List[object], __a1: java.util.Set) -> None: ...

    def toString(self) -> unicode: ...

    def togglePrimaryHighlights(self, __a0: java.awt.Color, __a1: java.util.function.Supplier) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

