from typing import List
from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import ghidra.app.util.bin.format.pdb2.pdbreader.type
import ghidra.app.util.pdb.pdbapplicator
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.util.task
import java.lang


class DefaultPdbApplicator(object, ghidra.app.util.pdb.pdbapplicator.PdbApplicator):




    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.data.DataTypeManager, __a3: ghidra.program.model.address.Address, __a4: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorOptions, __a5: ghidra.app.util.importer.MessageLog): ...



    def addToPlateUnique(self, __a0: ghidra.program.model.address.Address, __a1: unicode) -> bool: ...

    @staticmethod
    def applyAnalysisReporting(__a0: ghidra.program.model.listing.Program) -> None: ...

    def applyDataTypesAndMainSymbolsAnalysis(self) -> None: ...

    def applyFunctionInternalsAnalysis(self) -> None: ...

    def applyNoAnalysisState(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLinkerModuleCompileSymbol(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol: ...

    def getLinkerPeCoffSectionSymbols(self) -> List[object]: ...

    @overload
    def getMappedTypeRecord(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.RecordNumber) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.AbstractMsType: ...

    @overload
    def getMappedTypeRecord(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.RecordNumber, __a1: java.lang.Class) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.AbstractMsType: ...

    def getMonitor(self) -> ghidra.util.task.TaskMonitor: ...

    def getOriginalImageBase(self) -> long: ...

    def getPdb(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb: ...

    @staticmethod
    def getPdbAnalysisLookupState(__a0: ghidra.program.model.listing.Program, __a1: bool) -> ghidra.app.util.pdb.pdbapplicator.DefaultPdbApplicator.PdbUniversalAnalysisState: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    @overload
    def getTypeRecord(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.RecordNumber) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.AbstractMsType: ...

    @overload
    def getTypeRecord(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.RecordNumber, __a1: java.lang.Class) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.AbstractMsType: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def linkerModuleCompileSymbol(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol: ...

    @property
    def linkerPeCoffSectionSymbols(self) -> List[object]: ...

    @property
    def monitor(self) -> ghidra.util.task.TaskMonitor: ...

    @property
    def originalImageBase(self) -> long: ...

    @property
    def pdb(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...