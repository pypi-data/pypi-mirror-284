from typing import overload
import ghidra.app.util.pdb.pdbapplicator
import ghidra.framework.options
import java.lang
import java.util.regex


class PdbApplicatorOptions(object):




    def __init__(self): ...



    def allowDemotePrimaryMangledSymbols(self) -> bool: ...

    def applyCodeScopeBlockComments(self) -> bool: ...

    def applyFunctionVariables(self) -> bool: ...

    def applyInstructionLabels(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def excludeInstructionLabels(self) -> unicode: ...

    def excludeInstructionLabelsPattern(self) -> java.util.regex.Pattern: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompositeLayout(self) -> ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout: ...

    def getProcessingControl(self) -> ghidra.app.util.pdb.pdbapplicator.PdbApplicatorControl: ...

    def hashCode(self) -> int: ...

    def loadAnalyzerOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def loadLoaderOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def registerAnalyzerOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def registerLoaderOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def remapAddressUsingExistingPublicSymbols(self) -> bool: ...

    def setAllowDemotePrimaryMangledSymbols(self, __a0: bool) -> None: ...

    def setApplyCodeScopeBlockComments(self, __a0: bool) -> None: ...

    def setApplyFunctionVariables(self, __a0: bool) -> None: ...

    @overload
    def setApplyInstructionLabels(self, __a0: bool) -> None: ...

    @overload
    def setApplyInstructionLabels(self, __a0: unicode) -> None: ...

    def setCompositeLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout) -> None: ...

    def setDefaults(self) -> None: ...

    def setProcessingControl(self, __a0: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorControl) -> None: ...

    def setRemapAddressUsingExistingPublicSymbols(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def compositeLayout(self) -> ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout: ...

    @compositeLayout.setter
    def compositeLayout(self, value: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout) -> None: ...

    @property
    def processingControl(self) -> ghidra.app.util.pdb.pdbapplicator.PdbApplicatorControl: ...

    @processingControl.setter
    def processingControl(self, value: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorControl) -> None: ...