from typing import Iterator
from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import java.lang
import java.util
import java.util.function


class MsSymbolIterator(object, java.util.Iterator):




    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: int, __a2: int, __a3: int): ...

    def __iter__(self) -> Iterator[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentOffset(self) -> long: ...

    def getStreamNumber(self) -> int: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def initGet(self) -> None: ...

    def initGetByOffset(self, __a0: long) -> None: ...

    def next(self) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def peek(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol: ...

    def remove(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def currentOffset(self) -> long: ...

    @property
    def streamNumber(self) -> int: ...