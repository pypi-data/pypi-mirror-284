from typing import List
from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.msf
import ghidra.util.task
import java.lang


class Msf200(ghidra.app.util.bin.format.pdb2.pdbreader.msf.AbstractMsf):




    def __init__(self, __a0: ghidra.app.util.bin.ByteProvider, __a1: ghidra.util.task.TaskMonitor, __a2: ghidra.app.util.bin.format.pdb2.pdbreader.PdbReaderOptions): ...



    def checkCancelled(self) -> None: ...

    def close(self) -> None: ...

    def configureParameters(self) -> None: ...

    def create(self) -> None: ...

    def deserialize(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def floorDivisionWithLog2Divisor(__a0: int, __a1: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentFreePageMapFirstPageNumber(self) -> int: ...

    def getDirectoryStreamNumber(self) -> int: ...

    def getFileReader(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.msf.MsfFileReader: ...

    def getFilename(self) -> unicode: ...

    def getHeaderPageNumber(self) -> int: ...

    def getIdentification(self) -> List[int]: ...

    def getLog2PageSize(self) -> int: ...

    def getMonitor(self) -> ghidra.util.task.TaskMonitor: ...

    def getNumPages(self) -> int: ...

    def getNumSequentialFreePageMapPages(self) -> int: ...

    def getNumStreams(self) -> int: ...

    def getPageNumberSize(self) -> int: ...

    def getPageSize(self) -> int: ...

    def getPageSizeModMask(self) -> int: ...

    def getPageSizeOffset(self) -> int: ...

    def getStream(self, __a0: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.msf.MsfStream: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parseCurrentNumPages(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> None: ...

    def parseFreePageMapPageNumber(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def identification(self) -> List[int]: ...

    @property
    def pageNumberSize(self) -> int: ...

    @property
    def pageSizeOffset(self) -> int: ...