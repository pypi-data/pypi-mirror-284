from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import java.lang
import java.util


class SymbolRecords(object):





    class SymLen(java.lang.Record):




        def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol, __a1: int): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def length(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def symbol(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb): ...



    @staticmethod
    def deserializeSymbolRecords(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> java.util.Map: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCvSigLength(self, __a0: int) -> int: ...

    def getRandomAccessRecord(self, __a0: int, __a1: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.SymbolRecords.SymLen: ...

    def getRandomAccessRecordUsingModuleNumber(self, __a0: int, __a1: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.SymbolRecords.SymLen: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

