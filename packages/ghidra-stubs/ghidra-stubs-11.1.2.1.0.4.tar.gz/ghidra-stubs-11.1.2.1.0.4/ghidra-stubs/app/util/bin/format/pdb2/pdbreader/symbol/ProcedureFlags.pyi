from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader
import java.lang


class ProcedureFlags(ghidra.app.util.bin.format.pdb2.pdbreader.AbstractParsableItem):




    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader): ...



    def doesNotReturn(self) -> bool: ...

    def emit(self, __a0: java.lang.StringBuilder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hasCustomCallingConvention(self) -> bool: ...

    def hasDebugInformationForOptimizedCode(self) -> bool: ...

    def hasFarReturn(self) -> bool: ...

    def hasFramePointerPresent(self) -> bool: ...

    def hasFunctionIndication(self) -> bool: ...

    def hasInterruptReturn(self) -> bool: ...

    def hashCode(self) -> int: ...

    def labelNotReached(self) -> bool: ...

    def markedAsNoInline(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

