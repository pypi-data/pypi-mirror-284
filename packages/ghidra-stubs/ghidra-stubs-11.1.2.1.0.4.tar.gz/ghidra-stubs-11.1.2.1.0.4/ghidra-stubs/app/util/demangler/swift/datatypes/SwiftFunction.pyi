from typing import List
from typing import overload
import ghidra.app.util.demangler
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import ghidra.util.task
import java.lang


class SwiftFunction(ghidra.app.util.demangler.DemangledFunction):




    def __init__(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: ghidra.app.util.demangler.Demangled, __a4: unicode): ...



    def addParameter(self, __a0: ghidra.app.util.demangler.DemangledParameter) -> None: ...

    def addParameters(self, __a0: List[object]) -> None: ...

    def applyPlateCommentOnly(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address) -> bool: ...

    def applyTo(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.app.util.demangler.DemanglerOptions, __a3: ghidra.util.task.TaskMonitor) -> bool: ...

    @staticmethod
    def createNamespace(__a0: ghidra.program.model.listing.Program, __a1: ghidra.app.util.demangler.Demangled, __a2: ghidra.program.model.symbol.Namespace, __a3: bool) -> ghidra.program.model.symbol.Namespace: ...

    def demangledNameSuccessfully(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getBasedName(self) -> unicode: ...

    def getCallingConvention(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDemangledName(self) -> unicode: ...

    def getErrorMessage(self) -> unicode: ...

    def getMangledString(self) -> unicode: ...

    def getMemberScope(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNamespace(self) -> ghidra.app.util.demangler.Demangled: ...

    def getNamespaceName(self) -> unicode: ...

    def getNamespaceString(self) -> unicode: ...

    def getOriginalDemangled(self) -> unicode: ...

    def getParameterString(self) -> unicode: ...

    def getParameters(self) -> List[object]: ...

    def getReturnType(self) -> ghidra.app.util.demangler.DemangledDataType: ...

    @overload
    def getSignature(self) -> unicode: ...

    @overload
    def getSignature(self, __a0: bool) -> unicode: ...

    def getSignatureSourceType(self) -> ghidra.program.model.symbol.SourceType: ...

    def getSpecialPrefix(self) -> unicode: ...

    def getStorageClass(self) -> unicode: ...

    def getTemplate(self) -> ghidra.app.util.demangler.DemangledTemplate: ...

    def getVisibility(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isConst(self) -> bool: ...

    def isPointer64(self) -> bool: ...

    def isRestrict(self) -> bool: ...

    def isStatic(self) -> bool: ...

    def isThunk(self) -> bool: ...

    def isTrailingConst(self) -> bool: ...

    def isTrailingPointer64(self) -> bool: ...

    def isTrailingRestrict(self) -> bool: ...

    def isTrailingUnaligned(self) -> bool: ...

    def isTrailingVolatile(self) -> bool: ...

    def isTypeCast(self) -> bool: ...

    def isUnaligned(self) -> bool: ...

    def isVirtual(self) -> bool: ...

    def isVolatile(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBackupPlateComment(self, __a0: unicode) -> None: ...

    def setBasedName(self, __a0: unicode) -> None: ...

    def setCallingConvention(self, __a0: unicode) -> None: ...

    def setConst(self, __a0: bool) -> None: ...

    def setMemberScope(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setNamespace(self, __a0: ghidra.app.util.demangler.Demangled) -> None: ...

    def setOverloadedOperator(self, __a0: bool) -> None: ...

    def setPointer64(self, __a0: bool) -> None: ...

    def setRestrict(self) -> None: ...

    def setReturnType(self, __a0: ghidra.app.util.demangler.DemangledDataType) -> None: ...

    def setSignatureSourceType(self, __a0: ghidra.program.model.symbol.SourceType) -> None: ...

    def setSpecialPrefix(self, __a0: unicode) -> None: ...

    def setStatic(self, __a0: bool) -> None: ...

    def setStorageClass(self, __a0: unicode) -> None: ...

    def setTemplate(self, __a0: ghidra.app.util.demangler.DemangledTemplate) -> None: ...

    def setTemplatedConstructorType(self, __a0: unicode) -> None: ...

    def setThrowAttribute(self, __a0: unicode) -> None: ...

    def setThunk(self, __a0: bool) -> None: ...

    def setTrailingConst(self) -> None: ...

    def setTrailingPointer64(self) -> None: ...

    def setTrailingRestrict(self) -> None: ...

    def setTrailingUnaligned(self) -> None: ...

    def setTrailingVolatile(self) -> None: ...

    def setType(self, __a0: ghidra.app.util.demangler.DemangledFunction, __a1: ghidra.app.util.demangler.Demangled) -> None: ...

    def setTypeCast(self) -> None: ...

    def setUnaligned(self) -> None: ...

    def setVirtual(self, __a0: bool) -> None: ...

    def setVisibilty(self, __a0: unicode) -> None: ...

    def setVolatile(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

