from typing import overload
import ghidra.debug.api.tracermi
import java.lang
import java.net
import java.util


class TraceRmiService(object):








    def acceptOne(self, __a0: java.net.SocketAddress) -> ghidra.debug.api.tracermi.TraceRmiAcceptor: ...

    def addTraceServiceListener(self, __a0: ghidra.debug.api.tracermi.TraceRmiServiceListener) -> None: ...

    def connect(self, __a0: java.net.SocketAddress) -> ghidra.debug.api.tracermi.TraceRmiConnection: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllAcceptors(self) -> java.util.Collection: ...

    def getAllConnections(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getServerAddress(self) -> java.net.SocketAddress: ...

    def hashCode(self) -> int: ...

    def isServerStarted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeTraceServiceListener(self, __a0: ghidra.debug.api.tracermi.TraceRmiServiceListener) -> None: ...

    def setServerAddress(self, __a0: java.net.SocketAddress) -> None: ...

    def startServer(self) -> None: ...

    def stopServer(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allAcceptors(self) -> java.util.Collection: ...

    @property
    def allConnections(self) -> java.util.Collection: ...

    @property
    def serverAddress(self) -> java.net.SocketAddress: ...

    @serverAddress.setter
    def serverAddress(self, value: java.net.SocketAddress) -> None: ...

    @property
    def serverStarted(self) -> bool: ...