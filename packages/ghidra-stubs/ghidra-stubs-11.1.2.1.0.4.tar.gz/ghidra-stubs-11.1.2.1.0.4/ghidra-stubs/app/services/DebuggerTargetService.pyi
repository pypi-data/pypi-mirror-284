from typing import List
from typing import overload
import ghidra.debug.api.target
import ghidra.trace.model
import java.lang


class DebuggerTargetService(object):








    def addTargetPublicationListener(self, __a0: ghidra.debug.api.target.TargetPublicationListener) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getPublishedTargets(self) -> List[object]: ...

    def getTarget(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.target.Target: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def publishTarget(self, __a0: ghidra.debug.api.target.Target) -> None: ...

    def removeTargetPublicationListener(self, __a0: ghidra.debug.api.target.TargetPublicationListener) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def withdrawTarget(self, __a0: ghidra.debug.api.target.Target) -> None: ...

    @property
    def publishedTargets(self) -> List[object]: ...