from typing import List
from typing import overload
import ghidra.app.services
import ghidra.debug.api.target
import ghidra.debug.api.tracemgr
import ghidra.framework.model
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.program
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import ghidra.util
import java.lang
import java.util
import java.util.concurrent


class DebuggerTraceManagerService(object):





    class BooleanChangeAdapter(ghidra.util.TriConsumer, object):








        @overload
        def accept(self, __a0: bool, __a1: bool, __a2: java.lang.Void) -> None: ...

        @overload
        def accept(self, __a0: object, __a1: object, __a2: object) -> None: ...

        def changed(self, __a0: bool) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ActivationCause(java.lang.Enum):
        ACTIVATE_DEFAULT: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        EMU_STATE_EDIT: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        FOLLOW_PRESENT: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        MAPPER_CHANGED: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        RESTORE_STATE: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        START_RECORDING: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        SYNC_MODEL: ghidra.app.services.DebuggerTraceManagerService.ActivationCause
        USER: ghidra.app.services.DebuggerTraceManagerService.ActivationCause







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.services.DebuggerTraceManagerService.ActivationCause: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.services.DebuggerTraceManagerService.ActivationCause]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def activate(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    @overload
    def activate(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a1: ghidra.app.services.DebuggerTraceManagerService.ActivationCause) -> None: ...

    def activateAndNotify(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a1: ghidra.app.services.DebuggerTraceManagerService.ActivationCause) -> java.util.concurrent.CompletableFuture: ...

    def activateFrame(self, __a0: int) -> None: ...

    def activateObject(self, __a0: ghidra.trace.model.target.TraceObject) -> None: ...

    def activatePath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> None: ...

    def activatePlatform(self, __a0: ghidra.trace.model.guest.TracePlatform) -> None: ...

    def activateSnap(self, __a0: long) -> None: ...

    def activateTarget(self, __a0: ghidra.debug.api.target.Target) -> None: ...

    def activateThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> None: ...

    def activateTime(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> None: ...

    def activateTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def addAutoCloseOnTerminateChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def addSaveTracesByDefaultChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def closeAllTraces(self) -> None: ...

    def closeDeadTraces(self) -> None: ...

    def closeOtherTraces(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def closeTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def closeTraceNoConfirm(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findSnapshot(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrent(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def getCurrentFor(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def getCurrentFrame(self) -> int: ...

    def getCurrentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getCurrentPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    def getCurrentSnap(self) -> long: ...

    def getCurrentThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getCurrentTrace(self) -> ghidra.trace.model.Trace: ...

    def getCurrentView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    def getOpenTraces(self) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def isAutoCloseOnTerminate(self) -> bool: ...

    def isSaveTracesByDefault(self) -> bool: ...

    def materialize(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> java.util.concurrent.CompletableFuture: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def openTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @overload
    def openTrace(self, __a0: ghidra.framework.model.DomainFile, __a1: int) -> ghidra.trace.model.Trace: ...

    def openTraces(self, __a0: java.util.Collection) -> java.util.Collection: ...

    def removeAutoCloseOnTerminateChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def removeSaveTracesByDefaultChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def resolveFrame(self, __a0: int) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveObject(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolvePath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolvePlatform(self, __a0: ghidra.trace.model.guest.TracePlatform) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveSnap(self, __a0: long) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTarget(self, __a0: ghidra.debug.api.target.Target) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTime(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTrace(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveView(self, __a0: ghidra.trace.model.program.TraceProgramView) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def saveTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def setAutoCloseOnTerminate(self, __a0: bool) -> None: ...

    def setSaveTracesByDefault(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def autoCloseOnTerminate(self) -> bool: ...

    @autoCloseOnTerminate.setter
    def autoCloseOnTerminate(self, value: bool) -> None: ...

    @property
    def current(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    @property
    def currentFrame(self) -> int: ...

    @property
    def currentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def currentPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    @property
    def currentSnap(self) -> long: ...

    @property
    def currentThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def currentTrace(self) -> ghidra.trace.model.Trace: ...

    @property
    def currentView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    @property
    def saveTracesByDefault(self) -> bool: ...

    @saveTracesByDefault.setter
    def saveTracesByDefault(self, value: bool) -> None: ...