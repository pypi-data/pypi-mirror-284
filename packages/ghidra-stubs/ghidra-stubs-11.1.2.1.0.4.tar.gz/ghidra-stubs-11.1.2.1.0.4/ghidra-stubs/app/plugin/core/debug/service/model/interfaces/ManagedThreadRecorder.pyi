from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang
import java.util
import java.util.concurrent


class ManagedThreadRecorder(ghidra.app.plugin.core.debug.service.model.interfaces.AbstractTraceRecorder, object):








    def doFetchAndInitRegMapper(self, __a0: ghidra.dbg.target.TargetRegisterBank) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def getBreakpointRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedBreakpointRecorder: ...

    def getClass(self) -> java.lang.Class: ...

    def getMemoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    def getSnap(self) -> long: ...

    def getStackRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedStackRecorder: ...

    def getTargetThread(self) -> ghidra.dbg.target.TargetThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getTraceThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hashCode(self) -> int: ...

    def invalidateRegisterValues(self, __a0: ghidra.dbg.target.TargetRegisterBank) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def objectRemoved(self, __a0: ghidra.dbg.target.TargetObject) -> bool: ...

    def offerRegisters(self, __a0: ghidra.dbg.target.TargetRegisterBank) -> None: ...

    def offerThreadRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> None: ...

    def recordRegisterValue(self, __a0: ghidra.dbg.target.TargetRegister, __a1: List[int]) -> None: ...

    def recordRegisterValues(self, __a0: ghidra.dbg.target.TargetRegisterBank, __a1: java.util.Map) -> None: ...

    def regMapperAmended(self, __a0: ghidra.debug.api.model.DebuggerRegisterMapper, __a1: ghidra.dbg.target.TargetRegister, __a2: bool) -> None: ...

    def removeRegisters(self, __a0: ghidra.dbg.target.TargetRegisterBank) -> None: ...

    def stateChanged(self, __a0: ghidra.dbg.target.TargetExecutionStateful.TargetExecutionState) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def breakpointRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedBreakpointRecorder: ...

    @property
    def memoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    @property
    def snap(self) -> long: ...

    @property
    def stackRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedStackRecorder: ...

    @property
    def targetThread(self) -> ghidra.dbg.target.TargetThread: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def traceThread(self) -> ghidra.trace.model.thread.TraceThread: ...