from typing import overload
import ghidra.debug.api.breakpoint
import ghidra.program.model.address
import ghidra.program.util
import ghidra.trace.model.breakpoint
import java.lang


class BreakpointLocationRow(object):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.breakpoint.DebuggerBreakpointsProvider, __a1: ghidra.trace.model.breakpoint.TraceBreakpoint): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getState(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def getThreads(self) -> unicode: ...

    def getTraceBreakpoint(self) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def getTraceName(self) -> unicode: ...

    def hasSleigh(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isEnabled(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setState(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.State) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def enabled(self) -> bool: ...

    @enabled.setter
    def enabled(self, value: bool) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def programLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def state(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @state.setter
    def state(self, value: ghidra.debug.api.breakpoint.LogicalBreakpoint.State) -> None: ...

    @property
    def threads(self) -> unicode: ...

    @property
    def traceBreakpoint(self) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    @property
    def traceName(self) -> unicode: ...