from typing import List
from typing import overload
import ghidra.app.plugin.core.terminal.vt
import java.io
import java.lang
import java.nio
import java.util


class VtHandler(object):
    PAT_OSC_COLOR_QUERY: java.util.regex.Pattern
    PAT_OSC_WINDOW_TITLE: java.util.regex.Pattern
    Q1: List[int]
    Q1000: List[int]
    Q1004: List[int]
    Q1034: List[int]
    Q1047: List[int]
    Q1048: List[int]
    Q1049: List[int]
    Q12: List[int]
    Q2004: List[int]
    Q25: List[int]
    Q47: List[int]
    Q7: List[int]
    _4: List[int]




    class AnsiFont(java.lang.Enum):
        BLACK_LETTER: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont
        ITALIC: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont
        NORMAL: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AnsiIntenseColor(java.lang.Enum, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):
        ALL: List[object]
        BLACK: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        BLUE: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        CYAN: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        GREEN: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        MAGENTA: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        RED: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        WHITE: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor
        YELLOW: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def get(__a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiIntenseColor]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class KeyMode(java.lang.Enum):
        APPLICATION: ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode
        NORMAL: ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode







        def choose(self, __a0: object, __a1: object) -> object: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Intensity(java.lang.Enum):
        BOLD: ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity
        DIM: ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity
        NORMAL: ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class UnknownCsiException(java.lang.RuntimeException):




        def __init__(self): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Direction(java.lang.Enum):
        BACK: ghidra.app.plugin.core.terminal.vt.VtHandler.Direction
        DOWN: ghidra.app.plugin.core.terminal.vt.VtHandler.Direction
        FORWARD: ghidra.app.plugin.core.terminal.vt.VtHandler.Direction
        UP: ghidra.app.plugin.core.terminal.vt.VtHandler.Direction







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def forCsiFinal(__a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Direction: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Direction: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.Direction]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AnsiColor(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Erasure(java.lang.Enum):
        FULL_DISPLAY: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        FULL_DISPLAY_AND_SCROLLBACK: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        FULL_LINE: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        TO_DISPLAY_END: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        TO_DISPLAY_START: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        TO_LINE_END: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure
        TO_LINE_START: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromED(__a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure: ...

        @staticmethod
        def fromEL(__a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class UnknownOscException(java.lang.RuntimeException):




        def __init__(self): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AnsiDefaultColor(java.lang.Enum, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):
        INSTANCE: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiDefaultColor







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiDefaultColor: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiDefaultColor]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Ansi24BitColor(java.lang.Record, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):




        def __init__(self, __a0: int, __a1: int, __a2: int): ...



        def b(self) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def g(self) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def r(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Underline(java.lang.Enum):
        DOUBLE: ghidra.app.plugin.core.terminal.vt.VtHandler.Underline
        NONE: ghidra.app.plugin.core.terminal.vt.VtHandler.Underline
        SINGLE: ghidra.app.plugin.core.terminal.vt.VtHandler.Underline







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Underline: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.Underline]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AnsiStandardColor(java.lang.Enum, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):
        ALL: List[object]
        BLACK: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        BLUE: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        CYAN: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        GREEN: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        MAGENTA: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        RED: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        WHITE: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor
        YELLOW: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def get(__a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiStandardColor]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Ansi216Color(java.lang.Record, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):




        def __init__(self, __a0: int, __a1: int, __a2: int): ...



        def b(self) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def g(self) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def r(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Blink(java.lang.Enum):
        FAST: ghidra.app.plugin.core.terminal.vt.VtHandler.Blink
        NONE: ghidra.app.plugin.core.terminal.vt.VtHandler.Blink
        SLOW: ghidra.app.plugin.core.terminal.vt.VtHandler.Blink







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.terminal.vt.VtHandler.Blink: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.terminal.vt.VtHandler.Blink]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AnsiGrayscaleColor(java.lang.Record, ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor):




        def __init__(self, __a0: int): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def v(self) -> int: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @staticmethod
    def ascii(__a0: unicode) -> List[int]: ...

    @staticmethod
    def bufEq(__a0: java.nio.ByteBuffer, __a1: List[int]) -> bool: ...

    @staticmethod
    def charInfo(__a0: int) -> unicode: ...

    def decode8BitColor(self, __a0: int) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor: ...

    def decodeColor(self, __a0: int, __a1: java.util.PrimitiveIterator.OfInt, __a2: ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor: ...

    def decodeExtendedColor(self, __a0: java.util.PrimitiveIterator.OfInt) -> ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def handleAltCharset(self, __a0: bool) -> None: ...

    def handleAltScreenBuffer(self, __a0: bool, __a1: bool) -> None: ...

    def handleAutoWrapMode(self, __a0: bool) -> None: ...

    def handleBackSpace(self) -> None: ...

    def handleBackgroundColor(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor) -> None: ...

    def handleBackwardTab(self, __a0: int) -> None: ...

    def handleBell(self) -> None: ...

    def handleBlink(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.Blink) -> None: ...

    def handleBlinkCursor(self, __a0: bool) -> None: ...

    def handleBracketedPasteMode(self, __a0: bool) -> None: ...

    def handleCarriageReturn(self) -> None: ...

    def handleChar(self, __a0: int) -> None: ...

    def handleCharExc(self, __a0: int) -> None: ...

    def handleCsi(self, __a0: java.nio.ByteBuffer, __a1: java.nio.ByteBuffer, __a2: int) -> None: ...

    def handleCsiExc(self, __a0: java.nio.ByteBuffer, __a1: java.nio.ByteBuffer, __a2: int) -> None: ...

    def handleCursorKeyMode(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode) -> None: ...

    def handleDeleteCharacters(self, __a0: int) -> None: ...

    def handleDeleteLines(self, __a0: int) -> None: ...

    def handleErase(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.Erasure) -> None: ...

    def handleEraseCharacters(self, __a0: int) -> None: ...

    def handleFont(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiFont) -> None: ...

    def handleForegroundColor(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.AnsiColor) -> None: ...

    def handleFullReset(self) -> None: ...

    def handleHOrLStuff(self, __a0: java.nio.ByteBuffer, __a1: bool) -> None: ...

    def handleHidden(self, __a0: bool) -> None: ...

    def handleInsertCharacters(self, __a0: int) -> None: ...

    def handleInsertLines(self, __a0: int) -> None: ...

    def handleInsertMode(self, __a0: bool) -> None: ...

    def handleIntensity(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.Intensity) -> None: ...

    def handleKeypadMode(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.KeyMode) -> None: ...

    def handleLineFeed(self) -> None: ...

    def handleMetaKey(self, __a0: bool) -> None: ...

    @overload
    def handleMoveCursor(self, __a0: int, __a1: int) -> None: ...

    @overload
    def handleMoveCursor(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.Direction, __a1: int) -> None: ...

    def handleMoveCursorCol(self, __a0: int) -> None: ...

    def handleMoveCursorRow(self, __a0: int) -> None: ...

    def handleOsc(self, __a0: java.nio.ByteBuffer) -> None: ...

    def handleOscExc(self, __a0: java.nio.ByteBuffer) -> None: ...

    def handleProportionalSpacing(self, __a0: bool) -> None: ...

    def handleReportCursorPos(self) -> None: ...

    def handleReportFocus(self, __a0: bool) -> None: ...

    def handleReportMouseEvents(self, __a0: bool, __a1: bool) -> None: ...

    def handleResetAttributes(self) -> None: ...

    def handleRestoreCursorPos(self) -> None: ...

    def handleRestoreIconTitle(self) -> None: ...

    def handleRestoreWindowTitle(self) -> None: ...

    def handleReverseVideo(self, __a0: bool) -> None: ...

    def handleSaveCursorPos(self) -> None: ...

    def handleSaveIconTitle(self) -> None: ...

    def handleSaveWindowTitle(self) -> None: ...

    def handleScrollLinesDown(self, __a0: int) -> None: ...

    def handleScrollLinesUp(self, __a0: int, __a1: bool) -> None: ...

    def handleScrollViewportDown(self, __a0: int, __a1: bool) -> None: ...

    def handleScrollViewportUp(self, __a0: int) -> None: ...

    def handleSetCharset(self, __a0: ghidra.app.plugin.core.terminal.vt.VtCharset.G, __a1: ghidra.app.plugin.core.terminal.vt.VtCharset) -> None: ...

    def handleSetScrollRange(self, __a0: int, __a1: int) -> None: ...

    def handleSgrAttribute(self, __a0: java.util.PrimitiveIterator.OfInt) -> None: ...

    def handleShowCursor(self, __a0: bool) -> None: ...

    def handleStrikeThrough(self, __a0: bool) -> None: ...

    def handleTab(self) -> None: ...

    def handleUnderline(self, __a0: ghidra.app.plugin.core.terminal.vt.VtHandler.Underline) -> None: ...

    def handleWindowManipulation(self, __a0: java.nio.ByteBuffer) -> None: ...

    def handleWindowTitle(self, __a0: unicode) -> None: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def parseCsiInts(__a0: java.nio.ByteBuffer) -> java.util.PrimitiveIterator.OfInt: ...

    @staticmethod
    def strBuf(__a0: java.nio.ByteBuffer) -> unicode: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def truncateAtNull(__a0: unicode) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

