from typing import List
from typing import overload
import ghidra.app.plugin.core.decompile.actions
import ghidra.util.task
import java.lang
import java.util


class PCodeCfgGraphTask(ghidra.util.task.Task):





    class PcodeGraphSubType(java.lang.Enum):
        CONTROL_FLOW_GRAPH: ghidra.app.plugin.core.decompile.actions.PCodeCfgGraphTask.PcodeGraphSubType
        DATA_FLOW_GRAPH: ghidra.app.plugin.core.decompile.actions.PCodeCfgGraphTask.PcodeGraphSubType







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getName(self) -> unicode: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.decompile.actions.PCodeCfgGraphTask.PcodeGraphSubType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.decompile.actions.PCodeCfgGraphTask.PcodeGraphSubType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.app.services.GraphDisplayBroker, __a2: bool, __a3: int, __a4: ghidra.program.model.address.Address, __a5: ghidra.program.model.pcode.HighFunction, __a6: ghidra.app.plugin.core.decompile.actions.PCodeCfgGraphTask.PcodeGraphSubType): ...



    def addTaskListener(self, __a0: ghidra.util.task.TaskListener) -> None: ...

    def canCancel(self) -> bool: ...

    def cancel(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getStatusTextAlignment(self) -> int: ...

    def getTaskTitle(self) -> unicode: ...

    def getWaitForTaskCompleted(self) -> bool: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isCancelled(self) -> bool: ...

    def isModal(self) -> bool: ...

    def monitoredRun(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def run(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def setHasProgress(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

