from typing import List
from typing import overload
import docking
import docking.action
import ghidra.app.plugin.core.debug.gui.console
import ghidra.app.services
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import java.lang
import java.net
import javax.swing


class DebuggerConsolePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DebuggerConsoleService):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addResolutionAction(self, __a0: docking.action.DockingActionIf) -> None: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getActionContexts(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getLogRow(self, __a0: docking.ActionContext) -> ghidra.app.plugin.core.debug.gui.console.DebuggerConsoleProvider.LogRow: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getRowCount(self, __a0: java.lang.Class) -> long: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    @overload
    def log(self, __a0: javax.swing.Icon, __a1: unicode) -> None: ...

    @overload
    def log(self, __a0: javax.swing.Icon, __a1: unicode, __a2: docking.ActionContext) -> None: ...

    @overload
    def log(self, __a0: javax.swing.Icon, __a1: unicode, __a2: java.lang.Throwable) -> None: ...

    @overload
    def log(self, __a0: javax.swing.Icon, __a1: unicode, __a2: java.lang.Throwable, __a3: docking.ActionContext) -> None: ...

    def logContains(self, __a0: docking.ActionContext) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeFromLog(self, __a0: docking.ActionContext) -> None: ...

    def removeResolutionAction(self, __a0: docking.action.DockingActionIf) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def actionContexts(self) -> List[object]: ...