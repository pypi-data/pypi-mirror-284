from typing import List
from typing import overload
import docking.action.builder
import ghidra.app.services
import ghidra.debug.api.emulation
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.time.schedule
import ghidra.util.task
import java.lang
import java.net
import java.util
import java.util.concurrent


class DebuggerEmulationServicePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DebuggerEmulationService):





    class EmulateProgramAction(object):
        DESCRIPTION: unicode = u'Emulate the current program in a new trace starting at the cursor'
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'emulate_program'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Program in new Trace'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addStateListener(self, __a0: ghidra.app.services.DebuggerEmulationService.EmulatorStateListener) -> None: ...

    def backgroundEmulate(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule) -> java.util.concurrent.CompletableFuture: ...

    def backgroundRun(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.trace.model.time.schedule.Scheduler) -> java.util.concurrent.CompletableFuture: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    @overload
    def emulate(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor) -> long: ...

    @overload
    def emulate(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor) -> long: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getBusyEmulators(self) -> java.util.Collection: ...

    def getCachedEmulator(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.debug.api.emulation.DebuggerPcodeMachine: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getEmulatorFactories(self) -> java.util.Collection: ...

    def getEmulatorFactory(self) -> ghidra.debug.api.emulation.DebuggerPcodeEmulatorFactory: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def launchProgram(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address) -> ghidra.trace.model.Trace: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeStateListener(self, __a0: ghidra.app.services.DebuggerEmulationService.EmulatorStateListener) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def run(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.trace.model.time.schedule.Scheduler) -> ghidra.app.services.DebuggerEmulationService.EmulationResult: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setEmulatorFactory(self, __a0: ghidra.debug.api.emulation.DebuggerPcodeEmulatorFactory) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def busyEmulators(self) -> java.util.Collection: ...

    @property
    def emulatorFactories(self) -> java.util.Collection: ...

    @property
    def emulatorFactory(self) -> ghidra.debug.api.emulation.DebuggerPcodeEmulatorFactory: ...

    @emulatorFactory.setter
    def emulatorFactory(self, value: ghidra.debug.api.emulation.DebuggerPcodeEmulatorFactory) -> None: ...