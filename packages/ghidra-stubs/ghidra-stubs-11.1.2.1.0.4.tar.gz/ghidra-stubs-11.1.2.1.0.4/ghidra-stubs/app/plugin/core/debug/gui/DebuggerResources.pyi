from typing import List
from typing import overload
import docking
import docking.action
import docking.action.builder
import docking.widgets.table
import docking.widgets.tree
import docking.widgets.tree.support
import ghidra.app.plugin.core.debug.gui
import ghidra.app.services
import ghidra.debug.api.model
import ghidra.framework.plugintool
import ghidra.util
import ghidra.util.task
import java.awt
import java.beans
import java.lang
import java.util
import java.util.function
import java.util.stream
import javax.swing
import javax.swing.tree


class DebuggerResources(object):
    BOOKMARK_CATEGORY_MEMORY_READ_ERROR: unicode = u'Debugger Memory Read Error'
    COLOR_BACKGROUND_ERROR: java.awt.Color
    COLOR_BACKGROUND_STALE: generic.theme.GColor
    COLOR_REGISTER_MARKERS: java.awt.Color
    COLOR_VALUE_CHANGED: java.awt.Color
    COLOR_VALUE_CHANGED_SEL: java.awt.Color
    DEFAULT_COLOR_DISABLED_BREAKPOINT_COLORING_BACKGROUND: bool = False
    DEFAULT_COLOR_ENABLED_BREAKPOINT_COLORING_BACKGROUND: bool = True
    DEFAULT_COLOR_INEFF_DIS_BREAKPOINT_COLORING_BACKGROUND: bool = False
    DEFAULT_COLOR_INEFF_EN_BREAKPOINT_COLORING_BACKGROUND: bool = True
    DEFAULT_LOG_BUFFER_LIMIT: int = 20
    DESCRIPTION_CHOOSE_MORE_PLATFORMS: unicode = u'Choose from more platforms to use with the current trace'
    DESCRIPTION_CHOOSE_PLATFORM: unicode = u'Choose a platform to use with the current trace'
    DESCRIPTION_CLEAR_REGISTER_TYPE: unicode = u"Clear the register's data type"
    DESCRIPTION_MAP_IDENTICALLY: unicode = u'Map the current trace to the current program using identical addresses'
    DESCRIPTION_MAP_MANUALLY: unicode = u'Map the current trace to various programs manually'
    DESCRIPTION_MAP_MODULES: unicode = u'Map selected modules to program images'
    DESCRIPTION_MAP_MODULE_TO: unicode = u'Map the selected module to the current program'
    DESCRIPTION_MAP_REGIONS: unicode = u'Map selected regions to program memory blocks'
    DESCRIPTION_MAP_REGIONS_TO: unicode = u'Map the selected (module) regions to the current program'
    DESCRIPTION_MAP_REGION_TO: unicode = u'Map the selected region to the current program'
    DESCRIPTION_MAP_SECTIONS: unicode = u'Map selected sections to program memory blocks'
    DESCRIPTION_MAP_SECTIONS_TO: unicode = u'Map the selected module sections to the current program'
    DESCRIPTION_MAP_SECTION_TO: unicode = u'Map the selected section to the current program'
    DESCRIPTION_REGISTER_TYPE_SETTINGS: unicode = u"Set the register's data type settings"
    DESCRIPTION_WATCH_TYPE_SETTINGS: unicode = u"Set the watch's data type settings"
    GROUP_BREAKPOINTS: unicode = u'Dbg6. Breakpoints'
    GROUP_CONNECTION: unicode = u'Dbg2. Connection'
    GROUP_CONTROL: unicode = u'Dbg4. Control'
    GROUP_DIFF_NAV: unicode = u'DiffNavigate'
    GROUP_GENERAL: unicode = u'Dbg1. General'
    GROUP_MAINTENANCE: unicode = u'Dbg8. Maintenance'
    GROUP_MAPPING: unicode = u'Dbg9. Map Modules/Sections'
    GROUP_TARGET: unicode = u'Dbg5. Target'
    GROUP_TRACE: unicode = u'Dbg7. Trace'
    GROUP_TRACE_CLOSE: unicode = u'Dbg7.b. Trace Close'
    GROUP_TRACE_TOGGLES: unicode = u'Dbg7.a. Trace Toggles'
    GROUP_TRANSIENT_VIEWS: unicode = u'Dbg3a. Transient Views'
    GROUP_VIEWS: unicode = u'Dbg3. Views'
    GROUP_WATCHES: unicode = u'DbgA. Watches'
    HELP_ANCHOR_PLUGIN: unicode = u'plugin'
    HELP_PACKAGE: ghidra.util.HelpLocation
    HELP_PROVIDER_BREAKPOINTS: ghidra.util.HelpLocation
    HELP_PROVIDER_CONSOLE: ghidra.util.HelpLocation
    HELP_PROVIDER_LISTING: ghidra.util.HelpLocation
    HELP_PROVIDER_MAPPINGS: ghidra.util.HelpLocation
    HELP_PROVIDER_MEMORY_BYTES: ghidra.util.HelpLocation
    HELP_PROVIDER_MODEL: ghidra.util.HelpLocation
    HELP_PROVIDER_MODULES: ghidra.util.HelpLocation
    HELP_PROVIDER_OBJECTS: ghidra.util.HelpLocation
    HELP_PROVIDER_PCODE: ghidra.util.HelpLocation
    HELP_PROVIDER_REGIONS: ghidra.util.HelpLocation
    HELP_PROVIDER_REGISTERS: ghidra.util.HelpLocation
    HELP_PROVIDER_STACK: ghidra.util.HelpLocation
    HELP_PROVIDER_TARGETS: ghidra.util.HelpLocation
    HELP_PROVIDER_THREADS: ghidra.util.HelpLocation
    HELP_PROVIDER_TIME: ghidra.util.HelpLocation
    HELP_PROVIDER_WATCHES: ghidra.util.HelpLocation
    ICON_ADD: javax.swing.Icon
    ICON_ATTACH: javax.swing.Icon
    ICON_AUTOREAD: javax.swing.Icon
    ICON_BLANK: javax.swing.Icon
    ICON_BLOCK: javax.swing.Icon
    ICON_BREAKPOINTS: javax.swing.Icon
    ICON_CAPTURE_SYMBOLS: javax.swing.Icon
    ICON_CLEAR: javax.swing.Icon
    ICON_CLEAR_ALL_BREAKPOINTS: javax.swing.Icon
    ICON_CLEAR_BREAKPOINT: javax.swing.Icon
    ICON_CLOSE: javax.swing.Icon
    ICON_CONFIG: javax.swing.Icon
    ICON_CONNECTION: javax.swing.Icon
    ICON_CONNECT_ACCEPT: javax.swing.Icon
    ICON_CONNECT_OUTBOUND: javax.swing.Icon
    ICON_CONSOLE: javax.swing.Icon
    ICON_DATA_TYPES: javax.swing.Icon
    ICON_DEBUGGER: javax.swing.Icon
    ICON_DELETE: javax.swing.Icon
    ICON_DETACH: javax.swing.Icon
    ICON_DIFF: javax.swing.Icon
    ICON_DIFF_NEXT: javax.swing.Icon
    ICON_DIFF_PREV: javax.swing.Icon
    ICON_DISABLE_ALL_BREAKPOINTS: javax.swing.Icon
    ICON_DISABLE_BREAKPOINT: javax.swing.Icon
    ICON_DISCONNECT: javax.swing.Icon
    ICON_EMULATE: javax.swing.Icon
    ICON_ENABLE_ALL_BREAKPOINTS: javax.swing.Icon
    ICON_ENABLE_BREAKPOINT: javax.swing.Icon
    ICON_EVENT_MARKER: javax.swing.Icon
    ICON_FILTER: javax.swing.Icon
    ICON_IMPORT: javax.swing.Icon
    ICON_INTERRUPT: javax.swing.Icon
    ICON_KILL: javax.swing.Icon
    ICON_LAUNCH: javax.swing.Icon
    ICON_LISTING: javax.swing.Icon
    ICON_LOG_ERROR: javax.swing.Icon
    ICON_LOG_FATAL: javax.swing.Icon
    ICON_LOG_WARN: javax.swing.Icon
    ICON_MAKE_BREAKPOINTS_EFFECTIVE: javax.swing.Icon
    ICON_MAPPINGS: javax.swing.Icon
    ICON_MAP_AUTO: javax.swing.Icon
    ICON_MAP_IDENTICALLY: javax.swing.Icon
    ICON_MAP_MANUALLY: javax.swing.Icon
    ICON_MAP_MODULES: javax.swing.Icon
    ICON_MAP_REGIONS: javax.swing.Icon
    ICON_MAP_SECTIONS: javax.swing.Icon
    ICON_MEMORY_BYTES: javax.swing.Icon
    ICON_MODULES: javax.swing.Icon
    ICON_OBJECTS: javax.swing.Icon
    ICON_OBJECT_POPULATED: javax.swing.Icon
    ICON_OBJECT_UNPOPULATED: javax.swing.Icon
    ICON_PACKAGE: javax.swing.Icon
    ICON_PCODE: javax.swing.Icon
    ICON_PIN: javax.swing.Icon
    ICON_PROCESS: javax.swing.Icon
    ICON_PROCESSOR: javax.swing.Icon
    ICON_PROGRAM: javax.swing.Icon
    ICON_PROVIDER_BREAKPOINTS: javax.swing.Icon
    ICON_PROVIDER_CONSOLE: javax.swing.Icon
    ICON_PROVIDER_LISTING: javax.swing.Icon
    ICON_PROVIDER_MAPPINGS: javax.swing.Icon
    ICON_PROVIDER_MEMORY_BYTES: javax.swing.Icon
    ICON_PROVIDER_MODEL: javax.swing.Icon
    ICON_PROVIDER_MODULES: javax.swing.Icon
    ICON_PROVIDER_OBJECTS: javax.swing.Icon
    ICON_PROVIDER_PCODE: javax.swing.Icon
    ICON_PROVIDER_REGIONS: javax.swing.Icon
    ICON_PROVIDER_REGISTERS: javax.swing.Icon
    ICON_PROVIDER_STACK: javax.swing.Icon
    ICON_PROVIDER_TARGETS: javax.swing.Icon
    ICON_PROVIDER_THREADS: javax.swing.Icon
    ICON_PROVIDER_TIME: javax.swing.Icon
    ICON_PROVIDER_WATCHES: javax.swing.Icon
    ICON_RECORD: javax.swing.Icon
    ICON_REFRESH: javax.swing.Icon
    ICON_REFRESH_MEMORY: javax.swing.Icon
    ICON_REGIONS: javax.swing.Icon
    ICON_REGISTERS: javax.swing.Icon
    ICON_REGISTER_MARKER: javax.swing.Icon
    ICON_RENAME_SNAPSHOT: javax.swing.Icon
    ICON_RESUME: javax.swing.Icon
    ICON_SAVE: javax.swing.Icon
    ICON_SEEK_PRESENT: javax.swing.Icon
    ICON_SELECT_ADDRESSES: javax.swing.Icon
    ICON_SELECT_ROWS: javax.swing.Icon
    ICON_SET_BREAKPOINT: javax.swing.Icon
    ICON_SKIP_OVER: javax.swing.Icon
    ICON_SNAP_BACKWARD: javax.swing.Icon
    ICON_SNAP_FORWARD: javax.swing.Icon
    ICON_STACK: javax.swing.Icon
    ICON_STEP_BACK: javax.swing.Icon
    ICON_STEP_FINISH: javax.swing.Icon
    ICON_STEP_INTO: javax.swing.Icon
    ICON_STEP_LAST: javax.swing.Icon
    ICON_STEP_OVER: javax.swing.Icon
    ICON_SYNC: javax.swing.Icon
    ICON_THREAD: javax.swing.Icon
    ICON_TIME: javax.swing.Icon
    ICON_TOGGLE: javax.swing.Icon
    ICON_TRACE: javax.swing.Icon
    ICON_UNIQUE_REF_READ: javax.swing.Icon
    ICON_UNIQUE_REF_RW: javax.swing.Icon
    ICON_UNIQUE_REF_WRITE: javax.swing.Icon
    ICON_VISIBILITY: javax.swing.Icon
    NAME_CHOOSE_MORE_PLATFORMS: unicode = u'Choose More Platforms'
    NAME_CHOOSE_PLATFORM: unicode = u'Choose Platform'
    NAME_CLEAR_REGISTER_TYPE: unicode = u'Clear Register Type'
    NAME_MAP_IDENTICALLY: unicode = u'Map Identically'
    NAME_MAP_MANUALLY: unicode = u'Map Manually'
    NAME_MAP_MODULES: unicode = u'Map Modules'
    NAME_MAP_REGIONS: unicode = u'Map Regions'
    NAME_MAP_SECTIONS: unicode = u'Map Sections'
    NAME_PREFIX_MAP_MODULE_TO: unicode = u'Map Module to '
    NAME_PREFIX_MAP_REGIONS_TO: unicode = u'Map Regions to '
    NAME_PREFIX_MAP_REGION_TO: unicode = u'Map Region to '
    NAME_PREFIX_MAP_SECTIONS_TO: unicode = u'Map Sections to '
    NAME_PREFIX_MAP_SECTION_TO: unicode = u'Map Section to '
    NAME_REGISTER_TYPE_SETTINGS: unicode = u'Register Type Settings'
    NAME_WATCH_TYPE_SETTINGS: unicode = u'Watch Type Settings'
    OPTIONS_CATEGORY_DEBUGGER: unicode = u'Debugger'
    OPTIONS_CATEGORY_WORKFLOW: unicode = u'Workflow'
    OPTION_NAME_COLORS_DISABLED_BREAKPOINT_COLORING_BACKGROUND: unicode = u'Colors.Disabled Breakpoint Markers Have Background'
    OPTION_NAME_COLORS_ENABLED_BREAKPOINT_COLORING_BACKGROUND: unicode = u'Colors.Enabled Breakpoint Markers Have Background'
    OPTION_NAME_COLORS_INEFF_DIS_BREAKPOINT_COLORING_BACKGROUND: unicode = u'Colors.Ineffective Disabled Breakpoint Markers Have Background'
    OPTION_NAME_COLORS_INEFF_EN_BREAKPOINT_COLORING_BACKGROUND: unicode = u'Colors.Ineffective Enabled Breakpoint Markers Have Background'
    OPTION_NAME_LOG_BUFFER_LIMIT: unicode = u'Log Buffer Size'
    PRIORITY_REGISTER_MARKER: int = 10
    TITLE_CHOOSE_MORE_PLATFORMS: unicode = u'More...'
    TITLE_PROVIDER_BREAKPOINTS: unicode = u'Breakpoints'
    TITLE_PROVIDER_CONSOLE: unicode = u'Debug Console'
    TITLE_PROVIDER_INTERPRETER: unicode = u'Interpreter'
    TITLE_PROVIDER_LISTING: unicode = u'Dynamic'
    TITLE_PROVIDER_MAPPINGS: unicode = u'Static Mappings'
    TITLE_PROVIDER_MEMORY_BYTES: unicode = u'Memory'
    TITLE_PROVIDER_MODEL: unicode = u'Model'
    TITLE_PROVIDER_MODULES: unicode = u'Modules'
    TITLE_PROVIDER_OBJECTS: unicode = u'Objects'
    TITLE_PROVIDER_PCODE: unicode = u'Pcode Stepper'
    TITLE_PROVIDER_REGIONS: unicode = u'Regions'
    TITLE_PROVIDER_REGISTERS: unicode = u'Registers'
    TITLE_PROVIDER_STACK: unicode = u'Stack'
    TITLE_PROVIDER_TARGETS: unicode = u'Debugger Targets'
    TITLE_PROVIDER_THREADS: unicode = u'Threads'
    TITLE_PROVIDER_TIME: unicode = u'Time'
    TITLE_PROVIDER_WATCHES: unicode = u'Watches'




    class AbstractAttachAction(docking.action.DockingAction):
        DESCRIPTION: unicode = u'Attach to an existing target accessible to the agent'
        HELP_ANCHOR: unicode = u'attach'
        ICON: javax.swing.Icon
        NAME: unicode = u'Attach'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        @staticmethod
        def styleButton(__a0: javax.swing.JButton) -> None: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractClearBreakpointAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'clear_breakpoint'
        ICON: javax.swing.Icon
        NAME: unicode = u'Clear Breakpoint'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulateSkipTickForwardAction(object):
        DESCRIPTION: unicode = u'Emulate the recording forward by skipping one instruction'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_skip_tick_forward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace Skip Tick Forward'
        ORDER: unicode = u'4'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractEnableSelectedBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'enable_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Enable'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SaveTraceAction(object):
        DESCRIPTION: unicode = u'Save the selected trace'
        GROUP: unicode = u'Dbg7. Trace'
        HELP_ANCHOR: unicode = u'save_trace'
        ICON: javax.swing.Icon
        NAME_PREFIX: unicode = u'Save '







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloseOnTerminateAction(object):
        DESCRIPTION: unicode = u'Close any live trace whose recording terminates'
        GROUP: unicode = u'Dbg7.a. Trace Toggles'
        HELP_ANCHOR: unicode = u'auto_close_terminated'
        ICON: javax.swing.Icon
        NAME: unicode = u'Close Traces Upon Termination'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractRecordAction(docking.action.DockingAction):
        ICON: javax.swing.Icon
        NAME: unicode = u'Record'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractStepIntoAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'step_into'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Into'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractConnectAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'connect'
        ICON: javax.swing.Icon
        NAME: unicode = u'Connect'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        @staticmethod
        def styleButton(__a0: javax.swing.JButton) -> None: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StepSnapForwardAction(object):
        DESCRIPTION: unicode = u'Navigate the recording forward one snap'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'step_trace_snap_forward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Trace Snap Forward'
        ORDER: unicode = u'5'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SyncSelectionFromStaticListingAction(object):
        DESCRIPTION: unicode = u"Change this component's selection to synchronize with the static listing's selection"
        HELP_ANCHOR: unicode = u'sync_selection_from_static'
        NAME: unicode = u'Sync Selection from Static Listing'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class PinInterpreterAction(object):
        DESCRIPTION: unicode = u'Prevent this Interpreter from closing automatically'
        HELP_ANCHOR: unicode = u'pin'
        ICON: javax.swing.Icon
        NAME: unicode = u'Pin Interpreter'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractStepFinishAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'step_finish'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Finish'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DisassembleAsAction(object):
        DESCRIPTION: unicode = u'Disassemble using an alternative language'
        HELP_ANCHOR: unicode = u'disassemble_as'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disassemble as'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractInterruptAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'interrupt'
        ICON: javax.swing.Icon
        NAME: unicode = u'Interrupt'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulatePcodeBackwardAction(object):
        DESCRIPTION: unicode = u'Navigate the recording backward one p-code tick'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_pcode_backward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace p-code Backward'
        ORDER: unicode = u'2'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ToToggleSelectionListener(object, ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter):




        def __init__(self, __a0: docking.action.ToggleDockingAction): ...



        @overload
        def accept(self, __a0: bool, __a1: bool, __a2: java.lang.Void) -> None: ...

        @overload
        def accept(self, __a0: object, __a1: object, __a2: object) -> None: ...

        def changed(self, __a0: bool) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class HideScratchSnapshotsAction(object):
        DESCRIPTION: unicode = u'Hide negative snaps, typically used as emulation scratch space'
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'hide_scratch'
        NAME: unicode = u'Hide Scratch'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractEnableAllBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'enable_all_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Enable All Breakpoints'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractSelectAddressesAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'select_addresses'
        ICON: javax.swing.Icon
        NAME: unicode = u'Select Addresses'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractResumeAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'resume'
        ICON: javax.swing.Icon
        NAME: unicode = u'Resume'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CompareTimesAction(object):
        DESCRIPTION: unicode = u'Compare this point in time to another'
        GROUP: unicode = u'zzz'
        HELP_ANCHOR: unicode = u'compare'
        ICON: javax.swing.Icon
        NAME: unicode = u'Compare'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulatePcodeForwardAction(object):
        DESCRIPTION: unicode = u'Emulate the recording forward one p-code tick'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_pcode_forward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace p-code Forward'
        ORDER: unicode = u'3'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloseDeadTracesAction(ghidra.app.plugin.core.debug.gui.DebuggerResources.CloseTraceAction, object):
        DESCRIPTION: unicode = u'Close all traces not being recorded'
        GROUP: unicode = u'Dbg7.b. Trace Close'
        HELP_ANCHOR: unicode = u'close_dead_traces'
        ICON: javax.swing.Icon
        NAME: unicode = u'Close Dead Traces'
        NAME_PREFIX: unicode = u'Close '
        SUB_GROUP: unicode = u'a'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderCommon(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderPopup(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DisconnectAllAction(object):
        DESCRIPTION: unicode = u'Close and Debugger Model Connections'
        HELP_ANCHOR: unicode = u'disconnect_all'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disconnect All'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin, __a1: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDisableSelectedBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'disable_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disable'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractLaunchAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'launch'
        ICON: javax.swing.Icon
        NAME: unicode = u'Launch'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        @staticmethod
        def styleButton(__a0: javax.swing.JButton) -> None: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RemoveAction(object):
        GROUP: unicode = u'yyyy'
        HELP_ANCHOR: unicode = u'remove'
        ICON: javax.swing.Icon
        NAME: unicode = u'Remove'







        @overload
        @staticmethod
        def builder(__a0: unicode) -> docking.action.builder.ActionBuilder: ...

        @overload
        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class FilterAction(object):
        GROUP: unicode = u'yyyy'
        ICON: javax.swing.Icon
        NAME: unicode = u'Filter'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulateTickForwardAction(object):
        DESCRIPTION: unicode = u'Emulate the recording forward one instruction'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_tick_forward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace Tick Forward'
        ORDER: unicode = u'3'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractNewListingAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'new_listing'
        ICON: javax.swing.Icon
        NAME: unicode = u'New Dynamic Listing'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ExportTraceViewAction(object):
        DESCRIPTION: unicode = u'Export the current view as if a Ghidra program'
        GROUP: unicode = u'Dbg8. Maintenance'
        HELP_ANCHOR: unicode = u'export_view'
        NAME: unicode = u'Export Trace View'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CopyIntoNewProgramAction(ghidra.app.plugin.core.debug.gui.DebuggerResources.CopyIntoProgramAction, object):
        DESCRIPTION: unicode = u'Copy the current selection into a new program'
        DESC_PAT: unicode = u'Copy the current selection into %s program'
        GROUP: unicode = u'Dbg8. Maintenance'
        HELP_ANCHOR: unicode = u'copy_into_new'
        NAME: unicode = u'Copy Into New Program'
        NAME_PAT: unicode = u'Copy Into %s Program'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CopyIntoProgramAction(object):
        DESC_PAT: unicode = u'Copy the current selection into %s program'
        GROUP: unicode = u'Dbg8. Maintenance'
        NAME_PAT: unicode = u'Copy Into %s Program'







        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class OpenProgramAction(object):
        DESCRIPTION: unicode = u'Open the program'
        HELP_ANCHOR: unicode = u'open_program'
        ICON: javax.swing.Icon
        NAME: unicode = u'Open Program'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDetachAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'detach'
        ICON: javax.swing.Icon
        NAME: unicode = u'Detach'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractClearSelectedBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'clear_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Clear'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractStepOverAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'step_over'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Over'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SelectWatchReadsAction(object):
        DESCRIPTION: unicode = u'Select every memory range read evaluating this watch'
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'select_reads'
        ICON: javax.swing.Icon
        NAME: unicode = u'Select Reads'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloseTraceAction(object):
        DESCRIPTION: unicode = u'Close the current or selected trace'
        GROUP: unicode = u'Dbg7.b. Trace Close'
        HELP_ANCHOR: unicode = u'close_trace'
        ICON: javax.swing.Icon
        NAME_PREFIX: unicode = u'Close '
        SUB_GROUP: unicode = u'a'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderCommon(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderPopup(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloneWindowAction(object):
        DESCRIPTION: unicode = u'Create a disconnected copy of this window'
        GROUP: unicode = u'zzzz'
        HELP_ANCHOR: unicode = u'clone_window'
        ICON: javax.swing.Icon
        NAME: unicode = u'Clone Window'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractStepLastAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'step_last'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Last'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ApplyDataTypeAction(object):
        DESCRIPTION: unicode = u'Apply the selected data type at the address of this value in the listing'
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'apply_data_type'
        ICON: javax.swing.Icon
        NAME: unicode = u'Apply Data to Listing '







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDisconnectAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'disconnect'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disconnect'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SelectRowsAction(object):
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'select_rows'
        ICON: javax.swing.Icon
        NAME: unicode = u'Select Rows'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class NextDifferenceAction(object):
        DESCRIPTION: unicode = u'Go to the next highlighted difference'
        GROUP: unicode = u'DiffNavigate'
        HELP_ANCHOR: unicode = u'next_diff'
        ICON: javax.swing.Icon
        NAME: unicode = u'Next Difference'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractConsoleAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'console'
        ICON: javax.swing.Icon
        NAME: unicode = u'Console'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractRefreshAction(docking.action.DockingAction):
        ICON: javax.swing.Icon
        NAME: unicode = u'Refresh'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractMakeBreakpointsEffectiveAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'make_breakpoints_effective'
        ICON: javax.swing.Icon
        NAME: unicode = u'Make Breakpoints Effective'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractKillAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'kill'
        ICON: javax.swing.Icon
        NAME: unicode = u'Kill'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class PrevDifferenceAction(object):
        DESCRIPTION: unicode = u'Go to the previous highlighted difference'
        GROUP: unicode = u'DiffNavigate'
        HELP_ANCHOR: unicode = u'prev_diff'
        ICON: javax.swing.Icon
        NAME: unicode = u'Previous Difference'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DebugProgramAction(object):
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'debug_program'
        ICON: javax.swing.Icon
        NAME: unicode = u'Debug Program'







        @staticmethod
        def buttonBuilder(__a0: ghidra.framework.plugintool.Plugin, __a1: ghidra.framework.plugintool.Plugin) -> docking.action.builder.MultiStateActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def menuBuilder(__a0: ghidra.debug.api.model.DebuggerProgramLaunchOffer, __a1: ghidra.framework.plugintool.Plugin, __a2: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDisableBreakpointAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'disable_breakpoint'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disable Breakpoint'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class FollowsCurrentThreadAction(object):
        DESCRIPTION: unicode = u'Register tracking follows selected thread (and contents follow selected trace)'
        HELP_ANCHOR: unicode = u'follows_thread'
        NAME: unicode = u'Follows Selected Thread'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDisableAllBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'disable_all_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Disable All Breakpoints'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ChoosePlatformAction(object):
        DESCRIPTION: unicode = u'Manually select the target platform'
        GROUP: unicode = u'Dbg9. Map Modules/Sections'
        HELP_ANCHOR: unicode = u'choose_platform'
        ICON: javax.swing.Icon
        NAME: unicode = u'Choose Platform'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloseOtherTracesAction(ghidra.app.plugin.core.debug.gui.DebuggerResources.CloseTraceAction, object):
        DESCRIPTION: unicode = u'Close all traces except the current one'
        GROUP: unicode = u'Dbg7.b. Trace Close'
        HELP_ANCHOR: unicode = u'close_other_traces'
        ICON: javax.swing.Icon
        NAME: unicode = u'Close Other Traces'
        NAME_PREFIX: unicode = u'Close '
        SUB_GROUP: unicode = u'a'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderCommon(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderPopup(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SelectNoneAction(object):
        GROUP: unicode = u'Select'
        HELP_ANCHOR: unicode = u'select_none'
        NAME: unicode = u'Select None'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDebuggerModelNode(docking.widgets.tree.GTreeNode):




        def __init__(self): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def toolTip(self) -> unicode: ...




    class AbstractEnableBreakpointAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'enable_breakpoint'
        ICON: javax.swing.Icon
        NAME: unicode = u'Enable Breakpoint'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class WatchAction(object):
        DESCRIPTION: unicode = u'Watch the selected item'
        GROUP: unicode = u'DbgA. Watches'
        HELP_ANCHOR: unicode = u'watch'
        ICON: javax.swing.Icon
        NAME: unicode = u'Watch'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDebuggerConnectionsNode(docking.widgets.tree.GTreeNode):




        def __init__(self): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def name(self) -> unicode: ...

        @property
        def toolTip(self) -> unicode: ...




    class ClearAction(object):
        GROUP: unicode = u'yyyy'
        HELP_ANCHOR: unicode = u'clear'
        ICON: javax.swing.Icon
        NAME: unicode = u'Clear'







        @overload
        @staticmethod
        def builder(__a0: unicode) -> docking.action.builder.ActionBuilder: ...

        @overload
        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractRefreshSelectedMemoryAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'read_memory'
        ICON: javax.swing.Icon
        NAME: unicode = u'Read Selected Memory'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TrackLocationAction(object):
        DESCRIPTION: unicode = u'Follow a location in this view'
        HELP_ANCHOR: unicode = u'track_location'
        ICON_NONE: javax.swing.Icon
        ICON_PC: javax.swing.Icon
        ICON_PC_BY_REGISTER: javax.swing.Icon
        ICON_PC_BY_STACK: javax.swing.Icon
        ICON_SP: javax.swing.Icon
        NAME: unicode = u'Track Location'
        NAME_NONE: unicode = u'Do Not Track'
        NAME_PC: unicode = u'Track Program Counter'
        NAME_PC_BY_REGISTER: unicode = u'Track Program Counter (by Register)'
        NAME_PC_BY_STACK: unicode = u'Track Program Counter (by Stack)'
        NAME_PREFIX_WATCH: unicode = u'Track address of watch: '
        NAME_SP: unicode = u'Track Stack Pointer'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.MultiStateActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SelectRegistersAction(object):
        DESCRIPTION: unicode = u'Select registers to display/modify'
        GROUP: unicode = u'aa'
        HELP_ANCHOR: unicode = u'select_registers'
        ICON: javax.swing.Icon
        NAME: unicode = u'Select Registers'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SyncSelectionIntoStaticListingAction(object):
        DESCRIPTION: unicode = u"Change the static listing's selection to synchronize with this component's selection"
        HELP_ANCHOR: unicode = u'sync_selection_into_static'
        NAME: unicode = u'Sync Selection into Static Listing'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractQuickLaunchAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'quick_launch'
        ICON: javax.swing.Icon
        NAME: unicode = u'Quick Launch'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SaveByDefaultAction(object):
        DESCRIPTION: unicode = u'Automatically save traces to the project'
        GROUP: unicode = u'Dbg7.a. Trace Toggles'
        HELP_ANCHOR: unicode = u'save_by_default'
        ICON: javax.swing.Icon
        NAME: unicode = u'Save Traces By Default'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractFlushCachesAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'flush_caches'
        NAME: unicode = u'Flush Caches'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RenameSnapshotAction(object):
        DESCRIPTION: unicode = u'Modify the description of the snapshot (event) in the current view'
        GROUP: unicode = u'Dbg7. Trace'
        HELP_ANCHOR: unicode = u'rename_snapshot'
        ICON: javax.swing.Icon
        NAME: unicode = u'Rename Current Snapshot'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AutoSyncCursorWithStaticListingAction(object):
        DESCRIPTION: unicode = u"Automatically synchronize the static and dynamic listings' cursors"
        HELP_ANCHOR: unicode = u'auto_sync_cursor_static'
        NAME: unicode = u'Auto-Sync Cursor with Static Listing'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AutoReadMemoryAction(object):
        DESCRIPTION: unicode = u'Automatically read and record visible memory from the live target'
        HELP_ANCHOR: unicode = u'auto_memory'
        ICON_LOAD_EMU: javax.swing.Icon
        ICON_NONE: javax.swing.Icon
        ICON_VISIBLE: javax.swing.Icon
        ICON_VIS_RO_ONCE: javax.swing.Icon
        NAME: unicode = u'Auto-Read Target Memory'
        NAME_LOAD_EMU: unicode = u'Load Emulator from Programs'
        NAME_NONE: unicode = u'Do Not Read Memory'
        NAME_VISIBLE: unicode = u'Read Visible Memory'
        NAME_VIS_RO_ONCE: unicode = u'Read Visible Memory, RO Once'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.MultiStateActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class NewMemoryAction(object):
        DESCRIPTION: unicode = u'Open a new memory bytes view'
        GROUP: unicode = u'Dbg3a. Transient Views'
        HELP_ANCHOR: unicode = u'new_memory'
        ICON: javax.swing.Icon
        NAME: unicode = u'New Memory View'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractClearAllBreakpointsAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'clear_all_breakpoints'
        ICON: javax.swing.Icon
        NAME: unicode = u'Clear All Breakpoints'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CloseAllTracesAction(ghidra.app.plugin.core.debug.gui.DebuggerResources.CloseTraceAction, object):
        DESCRIPTION: unicode = u'Close all traces'
        GROUP: unicode = u'Dbg7.b. Trace Close'
        HELP_ANCHOR: unicode = u'close_all_traces'
        ICON: javax.swing.Icon
        NAME: unicode = u'Close All Traces'
        NAME_PREFIX: unicode = u'Close '
        SUB_GROUP: unicode = u'a'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderCommon(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        @staticmethod
        def builderPopup(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulateSkipPcodeForwardAction(object):
        DESCRIPTION: unicode = u'Emulate the recording forward by skipping one p-code op'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_skip_pcode_forward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace Skip P-code Forward'
        ORDER: unicode = u'4'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractImportFromFileSystemAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'import_from_fs'
        NAME: unicode = u'Import From File System'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AddAction(object):
        GROUP: unicode = u'yyyy'
        HELP_ANCHOR: unicode = u'add'
        ICON: javax.swing.Icon
        NAME: unicode = u'Add'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulateTickBackwardAction(object):
        DESCRIPTION: unicode = u'Emulate the recording backward one tick'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'emu_trace_tick_backward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Emulate Trace Tick Backward'
        ORDER: unicode = u'2'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EnableEditsAction(object):
        DESCRIPTION: unicode = u'Enable editing of recorded or live values'
        GROUP: unicode = u'yyyy2'
        HELP_ANCHOR: unicode = u'enable_edits'
        ICON: javax.swing.Icon
        NAME: unicode = u'Enable Edits'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CopyIntoCurrentProgramAction(ghidra.app.plugin.core.debug.gui.DebuggerResources.CopyIntoProgramAction, object):
        DESCRIPTION: unicode = u'Copy the current selection into the current program'
        DESC_PAT: unicode = u'Copy the current selection into %s program'
        GROUP: unicode = u'Dbg8. Maintenance'
        HELP_ANCHOR: unicode = u'copy_into_current'
        NAME: unicode = u'Copy Into Current Program'
        NAME_PAT: unicode = u'Copy Into %s Program'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class InterpreterInterruptAction(object):
        DESCRIPTION: unicode = u'Send an interrupt through this Interpreter'
        HELP_ANCHOR: unicode = u'interrupt'
        ICON: javax.swing.Icon
        NAME: unicode = u'Interpreter Interrupt'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractSetBreakpointAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'set_breakpoint'
        ICON: javax.swing.Icon
        NAME: unicode = u'Set Breakpoint'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        @staticmethod
        def styleButton(__a0: javax.swing.JButton) -> None: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SelectWatchRangeAction(object):
        DESCRIPTION: unicode = u'For memory watches, select the range comprising the value'
        GROUP: unicode = u'Dbg1. General'
        HELP_ANCHOR: unicode = u'select_addresses'
        ICON: javax.swing.Icon
        NAME: unicode = u'Select Range'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class GoToAction(object):
        DESCRIPTION: unicode = u'Seek this listing to an arbitrary expression'
        HELP_ANCHOR: unicode = u'go_to'
        NAME: unicode = u'Go To'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractToggleAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'toggle_option'
        ICON: javax.swing.Icon
        NAME: unicode = u'Toggle'



        def __init__(self, __a0: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def help(__a0: ghidra.framework.plugintool.Plugin) -> ghidra.util.HelpLocation: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AutoSyncSelectionWithStaticListingAction(object):
        DESCRIPTION: unicode = u"Automatically synchronize the static and dynamic listings' selections"
        HELP_ANCHOR: unicode = u'auto_sync_selection_static'
        NAME: unicode = u'Auto-Sync Selection with Static Listing'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ToggleActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StepSnapBackwardAction(object):
        DESCRIPTION: unicode = u'Navigate the recording backward one snap'
        GROUP: unicode = u'Dbg4. Control'
        HELP_ANCHOR: unicode = u'step_trace_snap_backward'
        ICON: javax.swing.Icon
        NAME: unicode = u'Step Trace Snap Backward'
        ORDER: unicode = u'1'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class OpenTraceAction(object):
        DESCRIPTION: unicode = u'Open a trace from the project'
        GROUP: unicode = u'Dbg7. Trace'
        HELP_ANCHOR: unicode = u'open_trace'
        ICON: javax.swing.Icon
        NAME: unicode = u'Open Trace'







        @staticmethod
        def builder(__a0: ghidra.framework.plugintool.Plugin) -> docking.action.builder.ActionBuilder: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def setSelectedRows(__a0: java.util.Set, __a1: java.util.function.Function, __a2: docking.widgets.table.GTable, __a3: docking.widgets.table.GTableFilterPanel) -> None: ...

    @overload
    @staticmethod
    def setSelectedRows(__a0: java.util.Set, __a1: java.util.function.Function, __a2: docking.widgets.table.GTable, __a3: docking.widgets.table.RowObjectTableModel, __a4: docking.widgets.table.GTableFilterPanel) -> None: ...

    @staticmethod
    def showError(__a0: java.awt.Component, __a1: unicode) -> java.util.function.Function: ...

    @staticmethod
    def tableRowActivationAction(__a0: docking.widgets.table.GTable, __a1: java.lang.Runnable) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

