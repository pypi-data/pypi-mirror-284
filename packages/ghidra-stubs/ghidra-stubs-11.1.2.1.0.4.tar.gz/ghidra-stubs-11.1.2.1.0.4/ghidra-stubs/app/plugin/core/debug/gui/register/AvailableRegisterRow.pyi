from typing import overload
import ghidra.program.model.lang
import java.lang


class AvailableRegisterRow(object):




    def __init__(self, __a0: int, __a1: ghidra.program.model.lang.Register): ...



    def equals(self, __a0: object) -> bool: ...

    def getBits(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getContains(self) -> unicode: ...

    def getGroup(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNumber(self) -> int: ...

    def getParentName(self) -> unicode: ...

    def getRegister(self) -> ghidra.program.model.lang.Register: ...

    def hashCode(self) -> int: ...

    def isKnown(self) -> bool: ...

    def isSelected(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setKnown(self, __a0: bool) -> None: ...

    def setSelected(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bits(self) -> int: ...

    @property
    def contains(self) -> unicode: ...

    @property
    def group(self) -> unicode: ...

    @property
    def known(self) -> bool: ...

    @known.setter
    def known(self, value: bool) -> None: ...

    @property
    def name(self) -> unicode: ...

    @property
    def number(self) -> int: ...

    @property
    def parentName(self) -> unicode: ...

    @property
    def register(self) -> ghidra.program.model.lang.Register: ...

    @property
    def selected(self) -> bool: ...

    @selected.setter
    def selected(self, value: bool) -> None: ...