from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.dbg.target
import ghidra.program.model.address
import ghidra.trace.model.modules
import java.lang


class DefaultModuleRecorder(object, ghidra.app.plugin.core.debug.service.model.interfaces.ManagedModuleRecorder):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getTraceModule(self, __a0: ghidra.dbg.target.TargetModule) -> ghidra.trace.model.modules.TraceModule: ...

    def getTraceSection(self, __a0: ghidra.dbg.target.TargetSection) -> ghidra.trace.model.modules.TraceSection: ...

    def hashCode(self) -> int: ...

    def moduleChanged(self, __a0: ghidra.dbg.target.TargetModule, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def offerProcessModule(self, __a0: ghidra.dbg.target.TargetModule) -> None: ...

    def offerProcessModuleSection(self, __a0: ghidra.dbg.target.TargetSection) -> None: ...

    def removeProcessModule(self, __a0: ghidra.dbg.target.TargetModule) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

