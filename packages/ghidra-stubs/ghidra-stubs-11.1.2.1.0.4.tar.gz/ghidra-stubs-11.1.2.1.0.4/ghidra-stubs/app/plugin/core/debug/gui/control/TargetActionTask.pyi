from typing import overload
import ghidra.debug.api.target
import ghidra.framework.plugintool
import ghidra.util.task
import java.lang
import java.util.concurrent
import java.util.function


class TargetActionTask(ghidra.util.task.Task):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: ghidra.debug.api.target.Target.ActionEntry): ...



    def addTaskListener(self, __a0: ghidra.util.task.TaskListener) -> None: ...

    def canCancel(self) -> bool: ...

    def cancel(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    @staticmethod
    def executeTask(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.util.task.Task) -> java.util.concurrent.CompletableFuture: ...

    @overload
    @staticmethod
    def executeTask(__a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: bool, __a3: bool, __a4: bool, __a5: java.util.function.Function) -> java.util.concurrent.CompletableFuture: ...

    def getClass(self) -> java.lang.Class: ...

    def getStatusTextAlignment(self) -> int: ...

    def getTaskTitle(self) -> unicode: ...

    def getWaitForTaskCompleted(self) -> bool: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isCancelled(self) -> bool: ...

    def isModal(self) -> bool: ...

    def monitoredRun(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def run(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    @staticmethod
    def runAction(__a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: ghidra.debug.api.target.Target.ActionEntry) -> java.util.concurrent.CompletableFuture: ...

    def setHasProgress(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

