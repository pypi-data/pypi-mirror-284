from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.utils
import ghidra.framework.cmd
import ghidra.framework.model
import ghidra.framework.plugintool
import ghidra.util.task
import java.lang
import java.util
import java.util.concurrent
import java.util.function


class BackgroundUtils(java.lang.Enum):





    class PluginToolExecutorService(java.util.concurrent.AbstractExecutorService):




        def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: ghidra.framework.model.DomainObject, __a3: int, __a4: List[ghidra.app.plugin.core.debug.utils.BackgroundUtils.PluginToolExecutorService.TaskOpt]): ...



        def awaitTermination(self, __a0: long, __a1: java.util.concurrent.TimeUnit) -> bool: ...

        def close(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def execute(self, __a0: java.lang.Runnable) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getLastMonitor(self) -> ghidra.util.task.TaskMonitor: ...

        def hashCode(self) -> int: ...

        @overload
        def invokeAll(self, __a0: java.util.Collection) -> List[object]: ...

        @overload
        def invokeAll(self, __a0: java.util.Collection, __a1: long, __a2: java.util.concurrent.TimeUnit) -> List[object]: ...

        @overload
        def invokeAny(self, __a0: java.util.Collection) -> object: ...

        @overload
        def invokeAny(self, __a0: java.util.Collection, __a1: long, __a2: java.util.concurrent.TimeUnit) -> object: ...

        def isShutdown(self) -> bool: ...

        def isTerminated(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def shutdown(self) -> None: ...

        def shutdownNow(self) -> List[object]: ...

        @overload
        def submit(self, __a0: java.lang.Runnable) -> java.util.concurrent.Future: ...

        @overload
        def submit(self, __a0: java.util.concurrent.Callable) -> java.util.concurrent.Future: ...

        @overload
        def submit(self, __a0: java.lang.Runnable, __a1: object) -> java.util.concurrent.Future: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def lastMonitor(self) -> ghidra.util.task.TaskMonitor: ...

        @property
        def terminated(self) -> bool: ...




    class AsyncBackgroundCommand(ghidra.framework.cmd.BackgroundCommand):








        @overload
        def applyTo(self, __a0: ghidra.framework.model.DomainObject) -> bool: ...

        @overload
        def applyTo(self, __a0: ghidra.framework.model.DomainObject, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

        def canCancel(self) -> bool: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getName(self) -> unicode: ...

        def getStatusMsg(self) -> unicode: ...

        def hasProgress(self) -> bool: ...

        def hashCode(self) -> int: ...

        def isModal(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def run(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.model.DomainObject) -> None: ...

        def taskCompleted(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @staticmethod
    def async(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.model.DomainObject, __a2: unicode, __a3: bool, __a4: bool, __a5: bool, __a6: java.util.function.BiFunction) -> ghidra.app.plugin.core.debug.utils.BackgroundUtils.AsyncBackgroundCommand: ...

    @staticmethod
    def asyncModal(__a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: bool, __a3: bool, __a4: java.util.function.Function) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.app.plugin.core.debug.utils.BackgroundUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.app.plugin.core.debug.utils.BackgroundUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

