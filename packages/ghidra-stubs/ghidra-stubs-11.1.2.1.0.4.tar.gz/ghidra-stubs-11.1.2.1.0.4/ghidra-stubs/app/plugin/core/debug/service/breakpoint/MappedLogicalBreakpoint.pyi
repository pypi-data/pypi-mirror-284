from typing import overload
import ghidra.app.plugin.core.debug.service.breakpoint
import ghidra.debug.api.breakpoint
import ghidra.debug.api.target
import ghidra.framework.model
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import java.lang
import java.util
import java.util.concurrent


class MappedLogicalBreakpoint(object, ghidra.app.plugin.core.debug.service.breakpoint.LogicalBreakpointInternal):
    DISABLED_BOOKMARK_TYPE: unicode = u'BreakpointDisabled'
    ENABLED_BOOKMARK_TYPE: unicode = u'BreakpointEnabled'
    ICON_MARKER_DISABLED: javax.swing.Icon
    ICON_MARKER_ENABLED: javax.swing.Icon
    ICON_MARKER_INCON_DIS: javax.swing.Icon
    ICON_MARKER_INCON_EN: javax.swing.Icon
    ICON_MARKER_INCON_MIX: javax.swing.Icon
    ICON_MARKER_INEFF_DIS: javax.swing.Icon
    ICON_MARKER_INEFF_EN: javax.swing.Icon
    ICON_MARKER_INEFF_MIX: javax.swing.Icon
    ICON_MARKER_MIXED: javax.swing.Icon
    ICON_OVERLAY_INCONSISTENT: javax.swing.Icon
    NAME_MARKER_DISABLED: unicode = u'Disabled Breakpoint'
    NAME_MARKER_ENABLED: unicode = u'Enabled Breakpoint'
    NAME_MARKER_INCON_DIS: unicode = u'Inconsistent Disabled Breakpoint'
    NAME_MARKER_INCON_EN: unicode = u'Inconsistent Enabled Breakpoint'
    NAME_MARKER_INCON_MIX: unicode = u'Inconsistent Mixed Breakpoint'
    NAME_MARKER_INEFF_DIS: unicode = u'Ineffective Disabled Breakpoint'
    NAME_MARKER_INEFF_EN: unicode = u'Ineffective Enabled Breakpoint'
    NAME_MARKER_INEFF_MIX: unicode = u'Ineffective Mixed Breakpoint'
    NAME_MARKER_MIXED: unicode = u'Mixed Breakpoint'







    @overload
    def appliesTo(self, __a0: ghidra.program.model.listing.Program) -> bool: ...

    @overload
    def appliesTo(self, __a0: ghidra.trace.model.Trace) -> bool: ...

    @overload
    def canMerge(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> bool: ...

    @overload
    def canMerge(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.listing.Bookmark) -> bool: ...

    def computeState(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForLocation(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForProgram(self, __a0: ghidra.program.model.listing.Program) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForTrace(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def delete(self) -> java.util.concurrent.CompletableFuture: ...

    def deleteForProgram(self) -> None: ...

    def deleteForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def disable(self) -> java.util.concurrent.CompletableFuture: ...

    def disableForProgram(self) -> None: ...

    def disableForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def enable(self) -> java.util.concurrent.CompletableFuture: ...

    def enableForProgram(self) -> None: ...

    def enableForProgramWithName(self, __a0: unicode) -> None: ...

    def enableForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def enableForTraces(self) -> java.util.concurrent.CompletableFuture: ...

    def enableWithName(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def generateStatusEnable(self, __a0: ghidra.trace.model.Trace) -> unicode: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDomainObject(self) -> ghidra.framework.model.DomainObject: ...

    def getEmuSleigh(self) -> unicode: ...

    def getKinds(self) -> java.util.Set: ...

    def getLength(self) -> long: ...

    def getMappedTraces(self) -> java.util.Set: ...

    def getName(self) -> unicode: ...

    def getParticipatingTraces(self) -> java.util.Set: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramBookmark(self) -> ghidra.program.model.listing.Bookmark: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getTraceAddress(self, __a0: ghidra.trace.model.Trace) -> ghidra.program.model.address.Address: ...

    @overload
    def getTraceBreakpoints(self) -> java.util.Set: ...

    @overload
    def getTraceBreakpoints(self, __a0: ghidra.trace.model.Trace) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def planDelete(self, __a0: ghidra.app.plugin.core.debug.service.breakpoint.BreakpointActionSet, __a1: ghidra.trace.model.Trace) -> None: ...

    def planDisable(self, __a0: ghidra.app.plugin.core.debug.service.breakpoint.BreakpointActionSet, __a1: ghidra.trace.model.Trace) -> None: ...

    def planEnable(self, __a0: ghidra.app.plugin.core.debug.service.breakpoint.BreakpointActionSet, __a1: ghidra.trace.model.Trace) -> None: ...

    def removeTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def setEmuSleigh(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTarget(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.debug.api.target.Target) -> None: ...

    def setTraceAddress(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.address.Address) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def trackBreakpoint(self, __a0: ghidra.program.model.listing.Bookmark) -> bool: ...

    @overload
    def trackBreakpoint(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> bool: ...

    @overload
    def untrackBreakpoint(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> bool: ...

    @overload
    def untrackBreakpoint(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.listing.Bookmark) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def domainObject(self) -> ghidra.framework.model.DomainObject: ...

    @property
    def empty(self) -> bool: ...

    @property
    def emuSleigh(self) -> unicode: ...

    @emuSleigh.setter
    def emuSleigh(self, value: unicode) -> None: ...

    @property
    def kinds(self) -> java.util.Set: ...

    @property
    def length(self) -> long: ...

    @property
    def mappedTraces(self) -> java.util.Set: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def participatingTraces(self) -> java.util.Set: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def programBookmark(self) -> ghidra.program.model.listing.Bookmark: ...

    @property
    def programLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def traceBreakpoints(self) -> java.util.Set: ...