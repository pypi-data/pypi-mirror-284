from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.modules
import java.lang
import java.net


class StaticMappingRow(object):




    def __init__(self, __a0: ghidra.trace.model.modules.TraceStaticMapping): ...



    def equals(self, __a0: object) -> bool: ...

    def getBigLength(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getMapping(self) -> ghidra.trace.model.modules.TraceStaticMapping: ...

    def getShift(self) -> long: ...

    def getStaticAddress(self) -> unicode: ...

    def getStaticProgramURL(self) -> java.net.URL: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getTraceAddress(self) -> ghidra.program.model.address.Address: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bigLength(self) -> long: ...

    @property
    def length(self) -> long: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def mapping(self) -> ghidra.trace.model.modules.TraceStaticMapping: ...

    @property
    def shift(self) -> long: ...

    @property
    def staticAddress(self) -> unicode: ...

    @property
    def staticProgramURL(self) -> java.net.URL: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def traceAddress(self) -> ghidra.program.model.address.Address: ...