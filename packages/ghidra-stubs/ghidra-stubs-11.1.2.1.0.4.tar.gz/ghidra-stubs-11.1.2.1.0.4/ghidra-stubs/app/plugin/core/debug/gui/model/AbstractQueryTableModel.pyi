from typing import List
from typing import overload
import docking.widgets.table
import docking.widgets.table.threaded
import ghidra.app.plugin.core.debug.gui.model
import ghidra.docking.settings
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.util.task
import java.awt
import java.lang
import java.util
import javax.swing.event
import javax.swing.table


class AbstractQueryTableModel(docking.widgets.table.threaded.ThreadedTableModel, ghidra.app.plugin.core.debug.gui.model.DisplaysModified):








    def addInitialLoadListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def addObject(self, __a0: object) -> None: ...

    def addSeekListener(self, __a0: docking.widgets.table.RangeCursorTableHeaderRenderer.SeekListener) -> None: ...

    def addSortListener(self, __a0: docking.widgets.table.SortListener) -> None: ...

    def addTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    def addThreadedTableModelListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def cancelAllUpdates(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findColumn(self, __a0: unicode) -> int: ...

    def findTraceObject(self, __a0: ghidra.trace.model.target.TraceObject) -> object: ...

    def fireTableCellUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableChanged(self, __a0: javax.swing.event.TableModelEvent) -> None: ...

    def fireTableDataChanged(self) -> None: ...

    def fireTableRowsDeleted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsInserted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableStructureChanged(self) -> None: ...

    @staticmethod
    def from(__a0: javax.swing.table.TableModel) -> docking.widgets.table.VariableColumnTableModel: ...

    def getClass(self) -> java.lang.Class: ...

    def getColumn(self, __a0: int) -> docking.widgets.table.DynamicTableColumn: ...

    def getColumnClass(self, __a0: int) -> java.lang.Class: ...

    def getColumnCount(self) -> int: ...

    def getColumnDescription(self, __a0: int) -> unicode: ...

    def getColumnDisplayName(self, __a0: int) -> unicode: ...

    @overload
    def getColumnIndex(self, __a0: docking.widgets.table.DynamicTableColumn) -> int: ...

    @overload
    def getColumnIndex(self, __a0: java.lang.Class) -> int: ...

    def getColumnName(self, __a0: int) -> unicode: ...

    def getColumnSettings(self, __a0: int) -> ghidra.docking.settings.Settings: ...

    def getColumnSettingsDefinitions(self, __a0: int) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getColumnValueForRow(self, __a0: object, __a1: int) -> object: ...

    def getCurrentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getDataSource(self) -> object: ...

    def getDefaultColumnCount(self) -> int: ...

    def getDiffSnap(self) -> long: ...

    def getDiffTrace(self) -> ghidra.trace.model.Trace: ...

    def getHeaderRenderer(self, __a0: int) -> javax.swing.table.TableCellRenderer: ...

    def getLastSelectedObjects(self) -> List[object]: ...

    def getListeners(self, __a0: java.lang.Class) -> List[java.util.EventListener]: ...

    def getMaxLines(self, __a0: int) -> int: ...

    def getModelData(self) -> List[object]: ...

    def getModelIndex(self, __a0: object) -> int: ...

    def getModelRow(self, __a0: int) -> int: ...

    def getName(self) -> unicode: ...

    def getPendingSortState(self) -> docking.widgets.table.TableSortState: ...

    def getPreferredColumnWidth(self, __a0: int) -> int: ...

    def getPrimarySortColumnIndex(self) -> int: ...

    def getQuery(self) -> ghidra.app.plugin.core.debug.gui.model.ModelQuery: ...

    def getRenderer(self, __a0: int) -> javax.swing.table.TableCellRenderer: ...

    def getRowCount(self) -> int: ...

    def getRowIndex(self, __a0: object) -> int: ...

    def getRowObject(self, __a0: int) -> object: ...

    def getRowObjects(self, __a0: List[int]) -> List[object]: ...

    def getSnap(self) -> long: ...

    def getSpan(self) -> ghidra.trace.model.Lifespan: ...

    def getTableFilter(self) -> docking.widgets.table.TableFilter: ...

    def getTableModelListeners(self) -> List[javax.swing.event.TableModelListener]: ...

    def getTableSortState(self) -> docking.widgets.table.TableSortState: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getUnfilteredData(self) -> List[object]: ...

    def getUnfilteredRowCount(self) -> int: ...

    def getUniqueIdentifier(self, __a0: int) -> unicode: ...

    def getValueAt(self, __a0: int, __a1: int) -> object: ...

    def getViewIndex(self, __a0: object) -> int: ...

    def getViewRow(self, __a0: int) -> int: ...

    def hasFilter(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBusy(self) -> bool: ...

    def isCellEditable(self, __a0: int, __a1: int) -> bool: ...

    def isDefaultColumn(self, __a0: int) -> bool: ...

    def isDisposed(self) -> bool: ...

    def isEdgesDiffer(self, __a0: ghidra.trace.model.target.TraceObjectValue, __a1: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def isFiltered(self) -> bool: ...

    def isLoadIncrementally(self) -> bool: ...

    def isObjectsDiffer(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.trace.model.target.TraceObject) -> bool: ...

    def isShowHidden(self) -> bool: ...

    def isSortPending(self) -> bool: ...

    def isSortable(self, __a0: int) -> bool: ...

    def isSorted(self) -> bool: ...

    def isValueModified(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def isValuesDiffer(self, __a0: object, __a1: object) -> bool: ...

    def isVisibleByDefault(self, __a0: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def reFilter(self) -> None: ...

    def reSort(self) -> None: ...

    def refresh(self) -> None: ...

    def reload(self) -> None: ...

    def removeObject(self, __a0: object) -> None: ...

    def removeTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    def removeThreadedTableModelListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def setAllColumnSettings(self, __a0: List[ghidra.docking.settings.Settings]) -> None: ...

    def setCurrentObject(self, __a0: ghidra.trace.model.target.TraceObject) -> None: ...

    def setDiffColor(self, __a0: java.awt.Color) -> None: ...

    def setDiffColorSel(self, __a0: java.awt.Color) -> None: ...

    def setDiffSnap(self, __a0: long) -> None: ...

    def setDiffTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def setIncrementalTaskMonitor(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def setLastSelectedObjects(self, __a0: List[object]) -> None: ...

    def setQuery(self, __a0: ghidra.app.plugin.core.debug.gui.model.ModelQuery) -> None: ...

    def setShowHidden(self, __a0: bool) -> None: ...

    def setSnap(self, __a0: long) -> None: ...

    def setSpan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def setTableFilter(self, __a0: docking.widgets.table.TableFilter) -> None: ...

    def setTableSortState(self, __a0: docking.widgets.table.TableSortState) -> None: ...

    def setTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def setValueAt(self, __a0: object, __a1: int, __a2: int) -> None: ...

    def stateChanged(self, __a0: javax.swing.event.ChangeEvent) -> None: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def unwrap(__a0: javax.swing.table.TableModel) -> javax.swing.table.TableModel: ...

    def updateObject(self, __a0: object) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def currentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    @currentObject.setter
    def currentObject(self, value: ghidra.trace.model.target.TraceObject) -> None: ...

    @property
    def dataSource(self) -> ghidra.trace.model.Trace: ...

    @property
    def diffColor(self) -> None: ...  # No getter available.

    @diffColor.setter
    def diffColor(self, value: java.awt.Color) -> None: ...

    @property
    def diffColorSel(self) -> None: ...  # No getter available.

    @diffColorSel.setter
    def diffColorSel(self, value: java.awt.Color) -> None: ...

    @property
    def diffSnap(self) -> long: ...

    @diffSnap.setter
    def diffSnap(self, value: long) -> None: ...

    @property
    def diffTrace(self) -> ghidra.trace.model.Trace: ...

    @diffTrace.setter
    def diffTrace(self, value: ghidra.trace.model.Trace) -> None: ...

    @property
    def query(self) -> ghidra.app.plugin.core.debug.gui.model.ModelQuery: ...

    @query.setter
    def query(self, value: ghidra.app.plugin.core.debug.gui.model.ModelQuery) -> None: ...

    @property
    def showHidden(self) -> bool: ...

    @showHidden.setter
    def showHidden(self, value: bool) -> None: ...

    @property
    def snap(self) -> long: ...

    @snap.setter
    def snap(self, value: long) -> None: ...

    @property
    def span(self) -> ghidra.trace.model.Lifespan: ...

    @span.setter
    def span(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @trace.setter
    def trace(self, value: ghidra.trace.model.Trace) -> None: ...