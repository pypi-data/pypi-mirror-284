from typing import overload
import ghidra.debug.api.modules
import ghidra.program.model.listing
import ghidra.trace.model
import java.lang
import java.util


class AbstractMapProposal(object, ghidra.debug.api.modules.MapProposal):




    def __init__(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.listing.Program): ...



    def computeMap(self) -> java.util.Map: ...

    def computeScore(self) -> float: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def flatten(__a0: java.util.Collection) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getToObject(self, __a0: object) -> object: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def removeOverlapping(__a0: java.util.Collection) -> java.util.Set: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...