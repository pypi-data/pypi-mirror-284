from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.dbg.target
import ghidra.program.model.address
import ghidra.trace.model.memory
import ghidra.util.task
import java.lang
import java.util
import java.util.concurrent


class DefaultMemoryRecorder(object, ghidra.app.plugin.core.debug.service.model.interfaces.ManagedMemoryRecorder):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder): ...



    def captureProcessMemory(self, __a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getTraceFlags(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> java.util.Collection: ...

    def getTraceMemoryRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def offerProcessMemory(self, __a0: ghidra.dbg.target.TargetMemory) -> None: ...

    def offerProcessRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> None: ...

    def regionChanged(self, __a0: ghidra.dbg.target.TargetMemoryRegion, __a1: unicode) -> None: ...

    def removeProcessMemory(self, __a0: ghidra.dbg.target.TargetMemory) -> None: ...

    def removeProcessRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

