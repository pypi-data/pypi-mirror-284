from typing import overload
import ghidra.framework.plugintool
import ghidra.program.util
import ghidra.trace.model.program
import java.lang


class TraceLocationPluginEvent(ghidra.framework.plugintool.PluginEvent):
    NAME: unicode = u'TraceLocation'



    def __init__(self, __a0: unicode, __a1: ghidra.program.util.ProgramLocation): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventName(self) -> unicode: ...

    def getLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getSourceName(self) -> unicode: ...

    def getToolEventName(self) -> unicode: ...

    def getTraceProgramView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    def getTriggerEvent(self) -> ghidra.framework.plugintool.PluginEvent: ...

    def hashCode(self) -> int: ...

    def isToolEvent(self) -> bool: ...

    @staticmethod
    def lookupToolEventName(__a0: java.lang.Class) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSourceName(self, __a0: unicode) -> None: ...

    def setTriggerEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def location(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def traceProgramView(self) -> ghidra.trace.model.program.TraceProgramView: ...