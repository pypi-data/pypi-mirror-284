from typing import List
from typing import overload
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.program.model.address
import java.lang
import java.util.concurrent
import java.util.function


class AbstractRecorderMemory(object):








    def addMemory(self, __a0: ghidra.dbg.target.TargetMemory) -> None: ...

    def addRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion, __a1: ghidra.dbg.target.TargetMemory) -> None: ...

    def alignAndLimitToFloor(self, __a0: ghidra.program.model.address.Address, __a1: int) -> ghidra.program.model.address.AddressRange: ...

    def equals(self, __a0: object) -> bool: ...

    def getAccessibleMemory(self, __a0: java.util.function.Predicate, __a1: ghidra.debug.api.model.DebuggerMemoryMapper) -> ghidra.program.model.address.AddressSet: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readMemory(self, __a0: ghidra.program.model.address.Address, __a1: int) -> java.util.concurrent.CompletableFuture: ...

    def removeMemory(self, __a0: ghidra.dbg.target.TargetMemory) -> None: ...

    def removeRegion(self, __a0: ghidra.dbg.target.TargetObject) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeMemory(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

