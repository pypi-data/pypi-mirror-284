from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.modules
import java.lang


class ModuleRow(object):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.modules.DebuggerModulesProvider, __a1: ghidra.trace.model.modules.TraceModule): ...



    def equals(self, __a0: object) -> bool: ...

    def getBase(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getLoadedSnap(self) -> long: ...

    def getMapping(self) -> unicode: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getModule(self) -> ghidra.trace.model.modules.TraceModule: ...

    def getName(self) -> unicode: ...

    def getShortName(self) -> unicode: ...

    def getUnloadedSnap(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def base(self) -> ghidra.program.model.address.Address: ...

    @property
    def length(self) -> long: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def loadedSnap(self) -> long: ...

    @property
    def mapping(self) -> unicode: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def module(self) -> ghidra.trace.model.modules.TraceModule: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def shortName(self) -> unicode: ...

    @property
    def unloadedSnap(self) -> long: ...