from typing import overload
import docking
import docking.action
import ghidra.app.services
import ghidra.debug.api.breakpoint
import ghidra.debug.api.control
import ghidra.framework.plugintool
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import ghidra.util
import java.awt.event
import java.lang
import java.util
import javax.swing


class DebuggerBreakpointsProvider(ghidra.framework.plugintool.ComponentProviderAdapter, ghidra.debug.api.breakpoint.LogicalBreakpointsChangeListener, ghidra.app.services.DebuggerControlService.ControlModeChangeListener):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.breakpoint.DebuggerBreakpointsPlugin): ...



    def addLocalAction(self, __a0: docking.action.DockingActionIf) -> None: ...

    def addToTool(self) -> None: ...

    def adjustFontSize(self, __a0: bool) -> None: ...

    def breakpointAdded(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointRemoved(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointUpdated(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointsAdded(self, __a0: java.util.Collection) -> None: ...

    def breakpointsRemoved(self, __a0: java.util.Collection) -> None: ...

    def breakpointsUpdated(self, __a0: java.util.Collection) -> None: ...

    def canBeParent(self) -> bool: ...

    def closeComponent(self) -> None: ...

    def componentActivated(self) -> None: ...

    def componentDeactived(self) -> None: ...

    def componentHidden(self) -> None: ...

    def componentShown(self) -> None: ...

    def contextChanged(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getActionContext(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getContextType(self) -> java.lang.Class: ...

    def getDefaultWindowPosition(self) -> docking.WindowPosition: ...

    def getHelpInfo(self) -> unicode: ...

    def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

    def getHelpObject(self) -> object: ...

    def getIcon(self) -> javax.swing.Icon: ...

    def getInstanceID(self) -> long: ...

    def getIntraGroupPosition(self) -> docking.WindowPosition: ...

    def getLocalActions(self) -> java.util.Set: ...

    @staticmethod
    def getMappedName(__a0: unicode, __a1: unicode) -> unicode: ...

    @staticmethod
    def getMappedOwner(__a0: unicode, __a1: unicode) -> unicode: ...

    def getName(self) -> unicode: ...

    def getOwner(self) -> unicode: ...

    def getSubTitle(self) -> unicode: ...

    def getTabText(self) -> unicode: ...

    def getTitle(self) -> unicode: ...

    def getTool(self) -> docking.Tool: ...

    def getWindowGroup(self) -> unicode: ...

    def getWindowSubMenuName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isActive(self) -> bool: ...

    def isFilterByCurrentTrace(self) -> bool: ...

    def isFilterLocationsByBreakpoints(self) -> bool: ...

    def isFocusedProvider(self) -> bool: ...

    def isInTool(self) -> bool: ...

    def isSnapshot(self) -> bool: ...

    def isTransient(self) -> bool: ...

    def isVisible(self) -> bool: ...

    def locationAdded(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def locationRemoved(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def locationUpdated(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def modeChanged(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.debug.api.control.ControlMode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def registerProviderNameOwnerChange(__a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def removeFromTool(self) -> None: ...

    def requestFocus(self) -> None: ...

    def resetFontSize(self) -> None: ...

    def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

    def setIntraGroupPosition(self, __a0: docking.WindowPosition) -> None: ...

    def setSelectedBreakpoints(self, __a0: java.util.Set) -> None: ...

    def setSelectedLocations(self, __a0: java.util.Set) -> None: ...

    def setSubTitle(self, __a0: unicode) -> None: ...

    def setTabText(self, __a0: unicode) -> None: ...

    def setTitle(self, __a0: unicode) -> None: ...

    def setTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def setVisible(self, __a0: bool) -> None: ...

    def toFront(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def component(self) -> javax.swing.JComponent: ...

    @property
    def filterByCurrentTrace(self) -> bool: ...

    @property
    def filterLocationsByBreakpoints(self) -> bool: ...

    @property
    def selectedBreakpoints(self) -> None: ...  # No getter available.

    @selectedBreakpoints.setter
    def selectedBreakpoints(self, value: java.util.Set) -> None: ...

    @property
    def selectedLocations(self) -> None: ...  # No getter available.

    @selectedLocations.setter
    def selectedLocations(self, value: java.util.Set) -> None: ...

    @property
    def trace(self) -> None: ...  # No getter available.

    @trace.setter
    def trace(self, value: ghidra.trace.model.Trace) -> None: ...