from typing import List
from typing import overload
import docking.widgets.fieldpanel.support
import ghidra.app.plugin.core.compositeeditor
import ghidra.program.model.data
import ghidra.util.task
import java.lang
import java.util
import javax.swing.event


class CompEditorModel(ghidra.app.plugin.core.compositeeditor.CompositeEditorModel):








    @overload
    def add(self, __a0: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def add(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def add(self, __a0: int, __a1: ghidra.program.model.data.DataType, __a2: int) -> ghidra.program.model.data.DataTypeComponent: ...

    def addCompositeEditorModelListener(self, __a0: ghidra.app.plugin.core.compositeeditor.CompositeEditorModelListener) -> None: ...

    def addCompositeViewerModelListener(self, __a0: ghidra.app.plugin.core.compositeeditor.CompositeViewerModelListener) -> None: ...

    def addTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    def apply(self) -> bool: ...

    def beginEditingField(self, __a0: int, __a1: int) -> bool: ...

    def categoryAdded(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryMoved(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.CategoryPath, __a2: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryRemoved(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryRenamed(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.CategoryPath, __a2: ghidra.program.model.data.CategoryPath) -> None: ...

    def clearComponent(self, __a0: int) -> None: ...

    def clearComponents(self, __a0: List[int]) -> None: ...

    def clearSelectedComponents(self) -> None: ...

    def clearStatus(self) -> None: ...

    def createArray(self) -> None: ...

    def cycleDataType(self, __a0: ghidra.program.model.data.CycleGroup) -> None: ...

    def dataTypeAdded(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeChanged(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeMoved(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath, __a2: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeRemoved(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeRenamed(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath, __a2: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeReplaced(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath, __a2: ghidra.program.model.data.DataTypePath, __a3: ghidra.program.model.data.DataType) -> None: ...

    def deleteSelectedComponents(self) -> None: ...

    def displayNumbersInHex(self, __a0: bool) -> None: ...

    def dispose(self) -> None: ...

    def duplicateMultiple(self, __a0: int, __a1: int, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def endEditingField(self) -> bool: ...

    def endFieldEditing(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def favoritesChanged(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.DataTypePath, __a2: bool) -> None: ...

    def findColumn(self, __a0: unicode) -> int: ...

    def fireTableCellUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableChanged(self, __a0: javax.swing.event.TableModelEvent) -> None: ...

    def fireTableDataChanged(self) -> None: ...

    def fireTableRowsDeleted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsInserted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableStructureChanged(self) -> None: ...

    def getActualAlignment(self) -> int: ...

    def getAlignmentType(self) -> ghidra.program.model.data.AlignmentType: ...

    def getClass(self) -> java.lang.Class: ...

    def getColumn(self) -> int: ...

    def getColumnClass(self, __a0: int) -> java.lang.Class: ...

    def getColumnCount(self) -> int: ...

    def getColumnName(self, __a0: int) -> unicode: ...

    def getCommentColumn(self) -> int: ...

    def getComponent(self, __a0: int) -> ghidra.program.model.data.DataTypeComponent: ...

    def getCompositeName(self) -> unicode: ...

    def getDataTypeColumn(self) -> int: ...

    def getDescription(self) -> unicode: ...

    def getExplicitMinimumAlignment(self) -> int: ...

    def getExplicitPackingValue(self) -> int: ...

    def getFieldName(self, __a0: int) -> unicode: ...

    def getFieldWidth(self, __a0: int) -> int: ...

    @staticmethod
    def getHexString(__a0: int, __a1: bool) -> unicode: ...

    def getLastNumBytes(self) -> int: ...

    def getLastNumDuplicates(self) -> int: ...

    def getLastNumElements(self) -> int: ...

    def getLeftMargin(self) -> int: ...

    def getLength(self) -> int: ...

    def getLengthAsString(self) -> unicode: ...

    def getLengthColumn(self) -> int: ...

    def getListeners(self, __a0: java.lang.Class) -> List[java.util.EventListener]: ...

    def getMaxAddLength(self, __a0: int) -> int: ...

    def getMaxDuplicates(self, __a0: int) -> int: ...

    def getMaxElements(self) -> int: ...

    def getMaxReplaceLength(self, __a0: int) -> int: ...

    def getMinIndexSelected(self) -> int: ...

    def getMnemonicColumn(self) -> int: ...

    def getNameColumn(self) -> int: ...

    def getNumComponents(self) -> int: ...

    def getNumFields(self) -> int: ...

    def getNumSelectedComponentRows(self) -> int: ...

    def getNumSelectedRows(self) -> int: ...

    def getOffsetColumn(self) -> int: ...

    def getOriginalCategory(self) -> ghidra.program.model.data.Category: ...

    def getOriginalCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getOriginalDataTypeName(self) -> unicode: ...

    def getOriginalDataTypePath(self) -> ghidra.program.model.data.DataTypePath: ...

    def getPackingType(self) -> ghidra.program.model.data.PackingType: ...

    def getProvider(self) -> ghidra.app.plugin.core.compositeeditor.CompositeEditorProvider: ...

    def getRow(self) -> int: ...

    def getRowCount(self) -> int: ...

    def getSelectedComponentRows(self) -> List[int]: ...

    def getSelectedRangeContaining(self, __a0: int) -> docking.widgets.fieldpanel.support.FieldRange: ...

    def getSelectedRows(self) -> List[int]: ...

    def getSelection(self) -> docking.widgets.fieldpanel.support.FieldSelection: ...

    def getStatus(self) -> unicode: ...

    def getTableModelListeners(self) -> List[javax.swing.event.TableModelListener]: ...

    def getValueAt(self, __a0: int, __a1: int) -> object: ...

    def getWidth(self) -> int: ...

    def hasChanges(self) -> bool: ...

    def hasComponentSelection(self) -> bool: ...

    def hasSelection(self) -> bool: ...

    def hashCode(self) -> int: ...

    @overload
    def insert(self, __a0: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def insert(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def insert(self, __a0: int, __a1: ghidra.program.model.data.DataType, __a2: int) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def isAddAllowed(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    @overload
    def isAddAllowed(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> bool: ...

    def isArrayAllowed(self) -> bool: ...

    def isBitFieldAllowed(self) -> bool: ...

    def isCellEditable(self, __a0: int, __a1: int) -> bool: ...

    def isClearAllowed(self) -> bool: ...

    def isContiguousComponentSelection(self) -> bool: ...

    def isContiguousSelection(self) -> bool: ...

    def isCycleAllowed(self, __a0: ghidra.program.model.data.CycleGroup) -> bool: ...

    def isDeleteAllowed(self) -> bool: ...

    def isDuplicateAllowed(self) -> bool: ...

    def isEditComponentAllowed(self) -> bool: ...

    def isEditFieldAllowed(self) -> bool: ...

    def isEditingField(self) -> bool: ...

    @overload
    def isInsertAllowed(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    @overload
    def isInsertAllowed(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> bool: ...

    def isLoaded(self) -> bool: ...

    def isMoveDownAllowed(self) -> bool: ...

    def isMoveUpAllowed(self) -> bool: ...

    def isPackingEnabled(self) -> bool: ...

    @overload
    def isReplaceAllowed(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    @overload
    def isReplaceAllowed(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> bool: ...

    def isShowingNumbersInHex(self) -> bool: ...

    def isShowingUndefinedBytes(self) -> bool: ...

    def isSingleComponentRowSelection(self) -> bool: ...

    def isSingleRowSelection(self) -> bool: ...

    def isUnpackageAllowed(self) -> bool: ...

    def isValidName(self) -> bool: ...

    def load(self, __a0: ghidra.program.model.data.Composite) -> None: ...

    def moveDown(self) -> bool: ...

    def moveUp(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def programArchitectureChanged(self, __a0: ghidra.program.model.data.DataTypeManager) -> None: ...

    def removeCompositeEditorModelListener(self, __a0: ghidra.app.plugin.core.compositeeditor.CompositeEditorModelListener) -> None: ...

    def removeCompositeViewerModelListener(self, __a0: ghidra.app.plugin.core.compositeeditor.CompositeViewerModelListener) -> None: ...

    def removeTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    @overload
    def replace(self, __a0: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def replace(self, __a0: int, __a1: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def replace(self, __a0: int, __a1: ghidra.program.model.data.DataType, __a2: int) -> ghidra.program.model.data.DataTypeComponent: ...

    def resolve(self, __a0: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataType: ...

    def resolveDataType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataTypeManager, __a2: ghidra.program.model.data.DataTypeConflictHandler) -> ghidra.program.model.data.DataType: ...

    def setAlignmentType(self, __a0: ghidra.program.model.data.AlignmentType, __a1: int) -> None: ...

    def setColumn(self, __a0: int) -> None: ...

    def setComponentComment(self, __a0: int, __a1: unicode) -> bool: ...

    def setComponentDataType(self, __a0: int, __a1: object) -> bool: ...

    def setComponentDataTypeInstance(self, __a0: int, __a1: ghidra.program.model.data.DataType, __a2: int) -> None: ...

    def setComponentName(self, __a0: int, __a1: unicode) -> bool: ...

    def setDescription(self, __a0: unicode) -> None: ...

    def setLastNumBytes(self, __a0: int) -> None: ...

    def setLastNumDuplicates(self, __a0: int) -> None: ...

    def setLastNumElements(self, __a0: int) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setPackingType(self, __a0: ghidra.program.model.data.PackingType, __a1: int) -> None: ...

    def setRow(self, __a0: int) -> None: ...

    @overload
    def setSelection(self, __a0: List[int]) -> None: ...

    @overload
    def setSelection(self, __a0: docking.widgets.fieldpanel.support.FieldSelection) -> None: ...

    @overload
    def setStatus(self, __a0: unicode) -> None: ...

    @overload
    def setStatus(self, __a0: unicode, __a1: bool) -> None: ...

    def setValueAt(self, __a0: object, __a1: int, __a2: int) -> None: ...

    def sourceArchiveAdded(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.SourceArchive) -> None: ...

    def sourceArchiveChanged(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: ghidra.program.model.data.SourceArchive) -> None: ...

    def toString(self) -> unicode: ...

    def updateAndCheckChangeState(self) -> bool: ...

    def validateComponentDataType(self, __a0: int, __a1: unicode) -> ghidra.program.model.data.DataTypeInstance: ...

    def validateComponentName(self, __a0: int, __a1: unicode) -> None: ...

    def validateComponentOffset(self, __a0: int, __a1: unicode) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def actualAlignment(self) -> int: ...

    @property
    def alignmentType(self) -> ghidra.program.model.data.AlignmentType: ...

    @property
    def clearAllowed(self) -> bool: ...

    @property
    def explicitMinimumAlignment(self) -> int: ...

    @property
    def explicitPackingValue(self) -> int: ...

    @property
    def lastNumDuplicates(self) -> int: ...

    @lastNumDuplicates.setter
    def lastNumDuplicates(self, value: int) -> None: ...

    @property
    def maxElements(self) -> int: ...

    @property
    def moveDownAllowed(self) -> bool: ...

    @property
    def moveUpAllowed(self) -> bool: ...

    @property
    def packingEnabled(self) -> bool: ...

    @property
    def packingType(self) -> ghidra.program.model.data.PackingType: ...

    @property
    def rowCount(self) -> int: ...

    @property
    def selection(self) -> None: ...  # No getter available.

    @selection.setter
    def selection(self, value: List[int]) -> None: ...