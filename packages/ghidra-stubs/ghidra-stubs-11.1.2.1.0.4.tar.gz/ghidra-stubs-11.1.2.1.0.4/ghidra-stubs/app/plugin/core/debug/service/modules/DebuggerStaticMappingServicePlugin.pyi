from typing import List
from typing import overload
import ghidra.app.services
import ghidra.debug.api.modules
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.mem
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.util.task
import java.lang
import java.net
import java.util
import java.util.concurrent


class DebuggerStaticMappingServicePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DebuggerStaticMappingService, ghidra.framework.model.DomainFolderChangeListener):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addChangeListener(self, __a0: ghidra.debug.api.modules.DebuggerStaticMappingChangeListener) -> None: ...

    def addIdentityMapping(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.listing.Program, __a2: ghidra.trace.model.Lifespan, __a3: bool) -> None: ...

    @overload
    def addMapping(self, __a0: ghidra.debug.api.modules.MapEntry, __a1: bool) -> None: ...

    @overload
    def addMapping(self, __a0: ghidra.trace.model.TraceLocation, __a1: ghidra.program.util.ProgramLocation, __a2: long, __a3: bool) -> None: ...

    def addMappings(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: bool, __a3: unicode) -> None: ...

    def addModuleMappings(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: bool) -> None: ...

    def addRegionMappings(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: bool) -> None: ...

    def addSectionMappings(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: bool) -> None: ...

    def changesSettled(self) -> java.util.concurrent.CompletableFuture: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def domainFileAdded(self, __a0: ghidra.framework.model.DomainFile) -> None: ...

    def domainFileMoved(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainFolder, __a2: unicode) -> None: ...

    def domainFileObjectClosed(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileObjectOpenedForUpdate(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode, __a2: unicode) -> None: ...

    def domainFileRenamed(self, __a0: ghidra.framework.model.DomainFile, __a1: unicode) -> None: ...

    def domainFileStatusChanged(self, __a0: ghidra.framework.model.DomainFile, __a1: bool) -> None: ...

    def domainFolderAdded(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderMoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderRenamed(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderSetActive(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def findBestModuleProgram(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.modules.TraceModule) -> ghidra.framework.model.DomainFile: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getDynamicLocationFromStatic(self, __a0: ghidra.trace.model.program.TraceProgramView, __a1: ghidra.program.util.ProgramLocation) -> ghidra.program.util.ProgramLocation: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    @overload
    def getOpenMappedLocation(self, __a0: ghidra.trace.model.TraceLocation) -> ghidra.program.util.ProgramLocation: ...

    @overload
    def getOpenMappedLocation(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.util.ProgramLocation, __a2: long) -> ghidra.trace.model.TraceLocation: ...

    def getOpenMappedLocations(self, __a0: ghidra.program.util.ProgramLocation) -> java.util.Set: ...

    def getOpenMappedProgramsAtSnap(self, __a0: ghidra.trace.model.Trace, __a1: long) -> java.util.Set: ...

    @overload
    def getOpenMappedViews(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.AddressSetView) -> java.util.Map: ...

    @overload
    def getOpenMappedViews(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.address.AddressSetView, __a2: long) -> java.util.Map: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getStaticLocationFromDynamic(self, __a0: ghidra.program.util.ProgramLocation) -> ghidra.program.util.ProgramLocation: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openMappedProgramsInView(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.address.AddressSetView, __a2: long, __a3: java.util.Set) -> java.util.Set: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    @overload
    def proposeModuleMap(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: ghidra.program.model.listing.Program) -> ghidra.debug.api.modules.ModuleMapProposal: ...

    @overload
    def proposeModuleMap(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: java.util.Collection) -> ghidra.debug.api.modules.ModuleMapProposal: ...

    def proposeModuleMaps(self, __a0: java.util.Collection, __a1: java.util.Collection) -> java.util.Map: ...

    @overload
    def proposeRegionMap(self, __a0: java.util.Collection, __a1: ghidra.program.model.listing.Program) -> ghidra.debug.api.modules.RegionMapProposal: ...

    @overload
    def proposeRegionMap(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.mem.MemoryBlock) -> ghidra.debug.api.modules.RegionMapProposal: ...

    def proposeRegionMaps(self, __a0: java.util.Collection, __a1: java.util.Collection) -> java.util.Map: ...

    @overload
    def proposeSectionMap(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: ghidra.program.model.listing.Program) -> ghidra.debug.api.modules.SectionMapProposal: ...

    @overload
    def proposeSectionMap(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: java.util.Collection) -> ghidra.debug.api.modules.SectionMapProposal: ...

    @overload
    def proposeSectionMap(self, __a0: ghidra.trace.model.modules.TraceSection, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.mem.MemoryBlock) -> ghidra.debug.api.modules.SectionMapProposal: ...

    def proposeSectionMaps(self, __a0: java.util.Collection, __a1: java.util.Collection) -> java.util.Map: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeChangeListener(self, __a0: ghidra.debug.api.modules.DebuggerStaticMappingChangeListener) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

