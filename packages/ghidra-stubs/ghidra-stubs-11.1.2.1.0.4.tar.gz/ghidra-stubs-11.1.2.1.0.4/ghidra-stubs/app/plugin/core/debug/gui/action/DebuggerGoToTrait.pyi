from typing import overload
import docking.action
import ghidra.debug.api.tracemgr
import ghidra.program.model.address
import java.lang
import java.util.concurrent


class DebuggerGoToTrait(object):





    class GoToResult(java.lang.Record):




        def __init__(self, __a0: ghidra.program.model.address.Address, __a1: bool): ...



        def address(self) -> ghidra.program.model.address.Address: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def success(self) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.plugintool.Plugin, __a2: docking.ComponentProvider): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def goTo(self, __a0: unicode, __a1: unicode) -> java.util.concurrent.CompletableFuture: ...

    def goToCoordinates(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    def hashCode(self) -> int: ...

    def installAction(self) -> docking.action.DockingAction: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

