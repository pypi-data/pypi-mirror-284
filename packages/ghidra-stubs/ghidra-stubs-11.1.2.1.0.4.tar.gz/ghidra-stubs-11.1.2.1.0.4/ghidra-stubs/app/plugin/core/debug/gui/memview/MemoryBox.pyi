from typing import overload
import ghidra.app.plugin.core.debug.gui.memview
import ghidra.program.model.address
import ghidra.trace.model
import java.awt
import java.lang
import java.util


class MemoryBox(object):




    @overload
    def __init__(self, __a0: unicode, __a1: ghidra.app.plugin.core.debug.gui.memview.MemviewBoxType, __a2: ghidra.program.model.address.AddressRange, __a3: long): ...

    @overload
    def __init__(self, __a0: unicode, __a1: ghidra.app.plugin.core.debug.gui.memview.MemviewBoxType, __a2: ghidra.program.model.address.AddressRange, __a3: ghidra.trace.model.Lifespan): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddressPixelStart(self) -> int: ...

    def getAddressPixelWidth(self) -> int: ...

    def getAttributeMap(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self) -> java.awt.Color: ...

    def getEnd(self) -> long: ...

    def getId(self) -> unicode: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getSpan(self) -> ghidra.trace.model.Lifespan: ...

    def getStart(self) -> long: ...

    def getStartAddress(self) -> long: ...

    def getStartTime(self) -> long: ...

    def getStopAddress(self) -> long: ...

    def getStopTime(self) -> long: ...

    def getTimePixelStart(self) -> int: ...

    def getTimePixelWidth(self) -> int: ...

    def getType(self) -> ghidra.app.plugin.core.debug.gui.memview.MemviewBoxType: ...

    def getX(self, __a0: bool) -> int: ...

    def getY(self, __a0: bool) -> int: ...

    def hashCode(self) -> int: ...

    def inPixelRange(self, __a0: long) -> bool: ...

    def isCurrent(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def render(self, __a0: java.awt.Graphics, __a1: bool) -> None: ...

    def renderBA(self, __a0: java.awt.Graphics, __a1: bool, __a2: int) -> None: ...

    def renderBT(self, __a0: java.awt.Graphics, __a1: bool, __a2: int, __a3: int) -> None: ...

    def setAddressBounds(self, __a0: ghidra.app.plugin.core.debug.gui.memview.MemviewMap, __a1: int) -> None: ...

    def setCurrent(self, __a0: bool) -> None: ...

    def setEnd(self, __a0: long) -> None: ...

    def setStartAddress(self, __a0: long) -> None: ...

    def setStartTime(self, __a0: long) -> None: ...

    def setStopAddress(self, __a0: long) -> None: ...

    def setStopTime(self, __a0: long) -> None: ...

    def setTimeBounds(self, __a0: ghidra.app.plugin.core.debug.gui.memview.MemviewMap, __a1: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressPixelStart(self) -> int: ...

    @property
    def addressPixelWidth(self) -> int: ...

    @property
    def attributeMap(self) -> java.util.Map: ...

    @property
    def color(self) -> java.awt.Color: ...

    @property
    def current(self) -> bool: ...

    @current.setter
    def current(self, value: bool) -> None: ...

    @property
    def end(self) -> long: ...

    @end.setter
    def end(self, value: long) -> None: ...

    @property
    def id(self) -> unicode: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def span(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def start(self) -> long: ...

    @property
    def startAddress(self) -> long: ...

    @startAddress.setter
    def startAddress(self, value: long) -> None: ...

    @property
    def startTime(self) -> long: ...

    @startTime.setter
    def startTime(self, value: long) -> None: ...

    @property
    def stopAddress(self) -> long: ...

    @stopAddress.setter
    def stopAddress(self, value: long) -> None: ...

    @property
    def stopTime(self) -> long: ...

    @stopTime.setter
    def stopTime(self, value: long) -> None: ...

    @property
    def timePixelStart(self) -> int: ...

    @property
    def timePixelWidth(self) -> int: ...

    @property
    def type(self) -> ghidra.app.plugin.core.debug.gui.memview.MemviewBoxType: ...