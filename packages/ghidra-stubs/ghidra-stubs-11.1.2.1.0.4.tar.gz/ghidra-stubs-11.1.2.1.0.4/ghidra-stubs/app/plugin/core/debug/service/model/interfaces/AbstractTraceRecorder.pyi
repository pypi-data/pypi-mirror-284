from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.debug.api.model
import ghidra.trace.model
import java.lang


class AbstractTraceRecorder(object):








    def equals(self, __a0: object) -> bool: ...

    def getBreakpointRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedBreakpointRecorder: ...

    def getClass(self) -> java.lang.Class: ...

    def getMemoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    def getSnap(self) -> long: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def breakpointRecorder(self) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedBreakpointRecorder: ...

    @property
    def memoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    @property
    def snap(self) -> long: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...