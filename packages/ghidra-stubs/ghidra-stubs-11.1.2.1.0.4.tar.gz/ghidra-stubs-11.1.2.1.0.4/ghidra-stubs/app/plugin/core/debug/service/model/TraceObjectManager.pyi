from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.mapping
import ghidra.app.plugin.core.debug.service.model
import ghidra.async
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.trace.model.breakpoint
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.util.datastruct
import java.lang
import java.util
import java.util.concurrent
import java.util.function


class TraceObjectManager(object):




    def __init__(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.app.plugin.core.debug.mapping.DefaultDebuggerTargetTraceMapper, __a2: ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder): ...



    def addBreakpointContainer(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addBreakpointLocation(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addBreakpointSpec(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addMemoryRegion(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addModule(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addObject(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addProcess(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addRegisterBank(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addRegisterContainer(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addSection(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addStack(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def addStackFrame(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def attributesChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedBreakpointLocation(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedBreakpointSpec(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedMemoryRegion(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedModule(self, __a0: ghidra.dbg.target.TargetModule, __a1: java.util.Map) -> None: ...

    def attributesChangedRegister(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedStackFrame(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def attributesChangedThread(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def collectBreakpoints(self, __a0: ghidra.dbg.target.TargetThread) -> List[object]: ...

    def createMemory(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def createObject(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def createRegister(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def createThread(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def disposeModelListeners(self) -> None: ...

    def elementsChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def elementsChangedBreakpointLocationContainer(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def elementsChangedMemory(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def elementsChangedSectionContainer(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def elementsChangedStack(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> java.util.concurrent.CompletableFuture: ...

    def getBreakpoints(self) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventListener(self) -> ghidra.app.plugin.core.debug.service.model.TraceEventListener: ...

    def getListeners(self) -> ghidra.util.datastruct.ListenerSet: ...

    def getMapper(self) -> ghidra.app.plugin.core.debug.mapping.DefaultDebuggerTargetTraceMapper: ...

    def getMemoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    def getRecorder(self) -> ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder: ...

    def getRegMappers(self) -> ghidra.async.AsyncLazyMap: ...

    def getTarget(self) -> ghidra.dbg.target.TargetObject: ...

    def getTargetBreakpoint(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.dbg.target.TargetBreakpointLocation: ...

    def getTargetMemoryRegion(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> ghidra.dbg.target.TargetMemoryRegion: ...

    def getTargetModule(self, __a0: ghidra.trace.model.modules.TraceModule) -> ghidra.dbg.target.TargetModule: ...

    def getTargetSection(self, __a0: ghidra.trace.model.modules.TraceSection) -> ghidra.dbg.target.TargetSection: ...

    def hasObject(self, __a0: ghidra.dbg.target.TargetObject) -> bool: ...

    def hashCode(self) -> int: ...

    def init(self) -> java.util.concurrent.CompletableFuture: ...

    def initObject(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def isRequired(self, __a0: ghidra.dbg.target.TargetObject) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def onBreakpointContainers(self, __a0: ghidra.dbg.target.TargetThread, __a1: java.util.function.Consumer) -> None: ...

    def onProcessBreakpointContainers(self, __a0: java.util.function.Consumer) -> None: ...

    def onThreadBreakpointContainers(self, __a0: ghidra.dbg.target.TargetThread, __a1: java.util.function.Consumer) -> None: ...

    def putAttributesHandler(self, __a0: java.lang.Class, __a1: java.util.function.BiConsumer) -> java.util.function.BiFunction: ...

    def putCreateHandler(self, __a0: java.lang.Class, __a1: java.util.function.Consumer) -> java.util.function.Function: ...

    def putElementsHandler(self, __a0: java.lang.Class, __a1: java.util.function.BiConsumer) -> java.util.function.BiFunction: ...

    def putInitHandler(self, __a0: java.lang.Class, __a1: java.util.function.Consumer) -> java.util.function.Function: ...

    def putRemHandler(self, __a0: java.lang.Class, __a1: java.util.function.Consumer) -> java.util.function.Function: ...

    def removeBreakpointContainer(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeBreakpointLocation(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeBreakpointSpec(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeMemory(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeMemoryRegion(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeModule(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    @overload
    def removeObject(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    @overload
    def removeObject(self, __a0: List[object]) -> None: ...

    def removeProcess(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeRegister(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeRegisterBank(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeRegisterContainer(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeSection(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeStack(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeStackFrame(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def removeThread(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def breakpoints(self) -> java.util.Set: ...

    @property
    def eventListener(self) -> ghidra.app.plugin.core.debug.service.model.TraceEventListener: ...

    @property
    def listeners(self) -> ghidra.util.datastruct.ListenerSet: ...

    @property
    def mapper(self) -> ghidra.app.plugin.core.debug.mapping.DefaultDebuggerTargetTraceMapper: ...

    @property
    def memoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    @property
    def recorder(self) -> ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder: ...

    @property
    def regMappers(self) -> ghidra.async.AsyncLazyMap: ...

    @property
    def target(self) -> ghidra.dbg.target.TargetObject: ...