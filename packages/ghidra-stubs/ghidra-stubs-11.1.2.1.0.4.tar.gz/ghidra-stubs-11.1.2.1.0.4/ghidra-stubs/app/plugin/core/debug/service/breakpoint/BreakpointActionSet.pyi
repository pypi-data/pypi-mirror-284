from typing import Iterator
from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.service.breakpoint
import ghidra.debug.api.target
import ghidra.trace.model.breakpoint
import java.lang
import java.util
import java.util.concurrent
import java.util.function
import java.util.stream


class BreakpointActionSet(java.util.LinkedHashSet):




    def __init__(self): ...

    def __iter__(self): ...

    def add(self, __a0: object) -> bool: ...

    def addAll(self, __a0: java.util.Collection) -> bool: ...

    def addFirst(self, __a0: object) -> None: ...

    def addLast(self, __a0: object) -> None: ...

    def clear(self) -> None: ...

    def clone(self) -> object: ...

    def contains(self, __a0: object) -> bool: ...

    def containsAll(self, __a0: java.util.Collection) -> bool: ...

    @staticmethod
    def copyOf(__a0: java.util.Collection) -> java.util.Set: ...

    def equals(self, __a0: object) -> bool: ...

    def execute(self) -> java.util.concurrent.CompletableFuture: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getFirst(self) -> object: ...

    def getLast(self) -> object: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def iterator(self) -> java.util.Iterator: ...

    @staticmethod
    def newHashSet(__a0: int) -> java.util.HashSet: ...

    @staticmethod
    def newLinkedHashSet(__a0: int) -> java.util.LinkedHashSet: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of() -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: List[object]) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> java.util.Set: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Set: ...

    def parallelStream(self) -> java.util.stream.Stream: ...

    def planDeleteEmu(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.DeleteEmuBreakpointActionItem: ...

    def planDeleteTarget(self, __a0: ghidra.debug.api.target.Target, __a1: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.DeleteTargetBreakpointActionItem: ...

    def planDisableEmu(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.DisableEmuBreakpointActionItem: ...

    def planDisableTarget(self, __a0: ghidra.debug.api.target.Target, __a1: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.DisableTargetBreakpointActionItem: ...

    def planEnableEmu(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.EnableEmuBreakpointActionItem: ...

    def planEnableTarget(self, __a0: ghidra.debug.api.target.Target, __a1: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.app.plugin.core.debug.service.breakpoint.EnableTargetBreakpointActionItem: ...

    def removeAll(self, __a0: java.util.Collection) -> bool: ...

    def removeFirst(self) -> object: ...

    def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

    def removeLast(self) -> object: ...

    def retainAll(self, __a0: java.util.Collection) -> bool: ...

    def reversed(self) -> java.util.SequencedCollection: ...

    def size(self) -> int: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def stream(self) -> java.util.stream.Stream: ...

    @overload
    def toArray(self) -> List[object]: ...

    @overload
    def toArray(self, __a0: List[object]) -> List[object]: ...

    @overload
    def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

