from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.gui.tracermi.launcher
import ghidra.debug.api.tracermi
import ghidra.program.model.listing
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util
import javax.swing


class BatchScriptTraceRmiLaunchOffer(ghidra.app.plugin.core.debug.gui.tracermi.launcher.AbstractScriptTraceRmiLaunchOffer):
    REM: unicode = u'::'
    REM_LEN: int = 2







    @staticmethod
    def create(__a0: ghidra.app.plugin.core.debug.gui.tracermi.launcher.TraceRmiLauncherServicePlugin, __a1: ghidra.program.model.listing.Program, __a2: java.io.File) -> ghidra.app.plugin.core.debug.gui.tracermi.launcher.BatchScriptTraceRmiLaunchOffer: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getConfigName(self) -> unicode: ...

    def getDescription(self) -> unicode: ...

    def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

    def getIcon(self) -> javax.swing.Icon: ...

    @overload
    def getLauncherArgs(self, __a0: bool) -> java.util.Map: ...

    @overload
    def getLauncherArgs(self, __a0: bool, __a1: ghidra.debug.api.tracermi.TraceRmiLaunchOffer.LaunchConfigurator, __a2: java.lang.Throwable) -> java.util.Map: ...

    def getMenuGroup(self) -> unicode: ...

    def getMenuOrder(self) -> unicode: ...

    def getMenuPath(self) -> List[object]: ...

    def getParameters(self) -> java.util.Map: ...

    def getTitle(self) -> unicode: ...

    def hashCode(self) -> int: ...

    @overload
    def launchProgram(self, __a0: ghidra.util.task.TaskMonitor) -> ghidra.debug.api.tracermi.TraceRmiLaunchOffer.LaunchResult: ...

    @overload
    def launchProgram(self, __a0: ghidra.util.task.TaskMonitor, __a1: ghidra.debug.api.tracermi.TraceRmiLaunchOffer.LaunchConfigurator) -> ghidra.debug.api.tracermi.TraceRmiLaunchOffer.LaunchResult: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def requiresImage(self) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

