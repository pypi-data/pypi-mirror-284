from typing import List
from typing import overload
import ghidra.app.services
import ghidra.debug.api.breakpoint
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import java.lang
import java.net
import java.util
import java.util.concurrent
import java.util.function


class DebuggerLogicalBreakpointServicePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DebuggerLogicalBreakpointService):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addChangeListener(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpointsChangeListener) -> None: ...

    @staticmethod
    def addressFromLocation(__a0: ghidra.program.util.ProgramLocation) -> ghidra.program.model.address.Address: ...

    @overload
    def anyMapped(self, __a0: java.util.Collection) -> bool: ...

    @overload
    def anyMapped(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> bool: ...

    def changesSettled(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def computeState(self, __a0: ghidra.program.util.ProgramLocation) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @overload
    def computeState(self, __a0: java.util.Collection) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @overload
    def computeState(self, __a0: java.util.Collection, __a1: ghidra.program.model.listing.Program) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @overload
    def computeState(self, __a0: java.util.Collection, __a1: ghidra.program.util.ProgramLocation) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @overload
    def computeState(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def deleteAll(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def deleteLocs(self, __a0: java.util.Collection) -> java.util.concurrent.CompletableFuture: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def disableAll(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def disableLocs(self, __a0: java.util.Collection) -> java.util.concurrent.CompletableFuture: ...

    def enableAll(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def enableLocs(self, __a0: java.util.Collection) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def generateStatusEnable(self, __a0: java.util.Collection, __a1: ghidra.trace.model.Trace) -> unicode: ...

    @overload
    def generateStatusToggleAt(self, __a0: ghidra.program.util.ProgramLocation) -> unicode: ...

    @overload
    def generateStatusToggleAt(self, __a0: java.util.Set, __a1: ghidra.program.util.ProgramLocation) -> unicode: ...

    def getAllBreakpoints(self) -> java.util.Set: ...

    def getBreakpoint(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.debug.api.breakpoint.LogicalBreakpoint: ...

    @overload
    def getBreakpoints(self, __a0: ghidra.program.model.listing.Program) -> java.util.NavigableMap: ...

    @overload
    def getBreakpoints(self, __a0: ghidra.trace.model.Trace) -> java.util.NavigableMap: ...

    @overload
    def getBreakpointsAt(self, __a0: ghidra.program.util.ProgramLocation) -> java.util.Set: ...

    @overload
    def getBreakpointsAt(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address) -> java.util.Set: ...

    @overload
    def getBreakpointsAt(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.address.Address) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def placeBreakpointAt(self, __a0: ghidra.program.util.ProgramLocation, __a1: long, __a2: java.util.Collection, __a3: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def placeBreakpointAt(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: long, __a3: java.util.Collection, __a4: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def placeBreakpointAt(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.program.model.address.Address, __a2: long, __a3: java.util.Collection, __a4: unicode) -> java.util.concurrent.CompletableFuture: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    @staticmethod
    def programOrTrace(__a0: ghidra.program.util.ProgramLocation, __a1: java.util.function.BiFunction, __a2: java.util.function.BiFunction) -> object: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeChangeListener(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpointsChangeListener) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def toggleBreakpointsAt(self, __a0: ghidra.program.util.ProgramLocation, __a1: java.util.function.Supplier) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def toggleBreakpointsAt(self, __a0: java.util.Set, __a1: ghidra.program.util.ProgramLocation, __a2: java.util.function.Supplier) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def allBreakpoints(self) -> java.util.Set: ...