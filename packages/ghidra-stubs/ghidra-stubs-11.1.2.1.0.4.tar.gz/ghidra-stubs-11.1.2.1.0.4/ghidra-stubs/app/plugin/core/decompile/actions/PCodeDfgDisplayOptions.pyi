from typing import overload
import docking
import ghidra.framework.options
import ghidra.service.graph
import ghidra.util
import java.awt
import java.lang
import javax.swing.event


class PCodeDfgDisplayOptions(ghidra.service.graph.GraphDisplayOptions):
    SHAPE_ATTRIBUTE: unicode = u'Shape'



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def addChangeListener(self, __a0: javax.swing.event.ChangeListener) -> None: ...

    def displayEditor(self, __a0: docking.Tool, __a1: ghidra.util.HelpLocation) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getArrowLength(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultEdgeColor(self) -> java.awt.Color: ...

    def getDefaultLayoutAlgorithmNameLayout(self) -> unicode: ...

    def getDefaultVertexColor(self) -> java.awt.Color: ...

    def getDefaultVertexShape(self) -> ghidra.service.graph.VertexShape: ...

    @overload
    def getEdgeColor(self, __a0: unicode) -> java.awt.Color: ...

    @overload
    def getEdgeColor(self, __a0: ghidra.service.graph.AttributedEdge) -> java.awt.Color: ...

    def getEdgeColorOverrideAttributeKey(self) -> unicode: ...

    def getEdgePriority(self, __a0: unicode) -> int: ...

    def getEdgeSelectionColor(self) -> java.awt.Color: ...

    def getFavoredEdgeType(self) -> unicode: ...

    def getFont(self) -> java.awt.Font: ...

    def getGraphType(self) -> ghidra.service.graph.GraphType: ...

    def getLabelPosition(self) -> ghidra.service.graph.GraphLabelPosition: ...

    def getMaxNodeCount(self) -> int: ...

    def getRootOptionsName(self) -> unicode: ...

    @overload
    def getVertexColor(self, __a0: unicode) -> java.awt.Color: ...

    @overload
    def getVertexColor(self, __a0: ghidra.service.graph.AttributedVertex) -> java.awt.Color: ...

    def getVertexColorOverrideAttributeKey(self) -> unicode: ...

    def getVertexLabel(self, __a0: ghidra.service.graph.AttributedVertex) -> unicode: ...

    def getVertexLabelOverride(self) -> unicode: ...

    def getVertexSelectionColor(self) -> java.awt.Color: ...

    @overload
    def getVertexShape(self, __a0: unicode) -> ghidra.service.graph.VertexShape: ...

    @overload
    def getVertexShape(self, __a0: ghidra.service.graph.AttributedVertex) -> ghidra.service.graph.VertexShape: ...

    def getVertexShapeOverrideAttributeKey(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def initializeFromOptions(self, __a0: docking.Tool) -> None: ...

    def isRegisteredWithTool(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.ToolOptions, __a1: unicode, __a2: object, __a3: object) -> None: ...

    def removeChangeListener(self, __a0: javax.swing.event.ChangeListener) -> None: ...

    def setArrowLength(self, __a0: int) -> None: ...

    @overload
    def setDefaultEdgeColor(self, __a0: unicode) -> None: ...

    @overload
    def setDefaultEdgeColor(self, __a0: java.awt.Color) -> None: ...

    def setDefaultLayoutAlgorithmName(self, __a0: unicode) -> None: ...

    @overload
    def setDefaultVertexColor(self, __a0: unicode) -> None: ...

    @overload
    def setDefaultVertexColor(self, __a0: java.awt.Color) -> None: ...

    def setDefaultVertexShape(self, __a0: ghidra.service.graph.VertexShape) -> None: ...

    @overload
    def setEdgeColor(self, __a0: unicode, __a1: unicode) -> None: ...

    @overload
    def setEdgeColor(self, __a0: unicode, __a1: java.awt.Color) -> None: ...

    def setEdgeColorOverrideAttributeKey(self, __a0: unicode) -> None: ...

    @overload
    def setEdgeSelectionColor(self, __a0: unicode) -> None: ...

    @overload
    def setEdgeSelectionColor(self, __a0: java.awt.Color) -> None: ...

    def setFavoredEdgeType(self, __a0: unicode) -> None: ...

    @overload
    def setFont(self, __a0: unicode) -> None: ...

    @overload
    def setFont(self, __a0: java.awt.Font) -> None: ...

    def setLabelPosition(self, __a0: ghidra.service.graph.GraphLabelPosition) -> None: ...

    def setMaxNodeCount(self, __a0: int) -> None: ...

    def setUsesIcons(self, __a0: bool) -> None: ...

    @overload
    def setVertexColor(self, __a0: unicode, __a1: unicode) -> None: ...

    @overload
    def setVertexColor(self, __a0: unicode, __a1: java.awt.Color) -> None: ...

    def setVertexColorOverrideAttributeKey(self, __a0: unicode) -> None: ...

    def setVertexLabelOverrideAttributeKey(self, __a0: unicode) -> None: ...

    @overload
    def setVertexSelectionColor(self, __a0: unicode) -> None: ...

    @overload
    def setVertexSelectionColor(self, __a0: java.awt.Color) -> None: ...

    def setVertexShape(self, __a0: unicode, __a1: ghidra.service.graph.VertexShape) -> None: ...

    def setVertexShapeOverrideAttributeKey(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    def usesIcons(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

