from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.gui.pcode
import ghidra.program.model.data
import ghidra.program.model.pcode
import java.lang
import java.util


class UniqueRow(object):





    class RefType(java.lang.Enum):
        NONE: ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType
        READ: ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType
        READ_WRITE: ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType
        WRITE: ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ConcretizedState(object):




        def __init__(self, __a0: ghidra.pcode.exec.PcodeExecutorState, __a1: ghidra.pcode.exec.PcodeArithmetic): ...



        def equals(self, __a0: object) -> bool: ...

        def getBytes(self, __a0: ghidra.program.model.pcode.Varnode) -> List[int]: ...

        def getClass(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.program.model.pcode.Varnode) -> long: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.pcode.DebuggerPcodeStepperProvider, __a1: ghidra.program.model.lang.Language, __a2: ghidra.pcode.exec.PcodeExecutorState, __a3: ghidra.pcode.exec.PcodeArithmetic, __a4: ghidra.program.model.pcode.Varnode): ...



    def equals(self, __a0: object) -> bool: ...

    def getBytes(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getName(self) -> unicode: ...

    def getRefType(self) -> ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType: ...

    def getValue(self) -> long: ...

    def getValueRepresentation(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDataType(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bytes(self) -> unicode: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @dataType.setter
    def dataType(self, value: ghidra.program.model.data.DataType) -> None: ...

    @property
    def name(self) -> unicode: ...

    @property
    def refType(self) -> ghidra.app.plugin.core.debug.gui.pcode.UniqueRow.RefType: ...

    @property
    def value(self) -> long: ...

    @property
    def valueRepresentation(self) -> unicode: ...