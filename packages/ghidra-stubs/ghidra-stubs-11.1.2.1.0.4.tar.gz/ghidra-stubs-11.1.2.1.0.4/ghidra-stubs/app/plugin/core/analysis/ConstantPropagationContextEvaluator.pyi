from typing import overload
import ghidra.app.plugin.core.analysis
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.program.model.pcode
import ghidra.program.model.symbol
import ghidra.program.util
import java.lang


class ConstantPropagationContextEvaluator(ghidra.program.util.ContextEvaluatorAdapter):




    @overload
    def __init__(self, __a0: ghidra.util.task.TaskMonitor): ...

    @overload
    def __init__(self, __a0: ghidra.util.task.TaskMonitor, __a1: bool): ...

    @overload
    def __init__(self, __a0: ghidra.util.task.TaskMonitor, __a1: bool, __a2: long, __a3: long, __a4: long): ...



    def allowAccess(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.address.Address) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def evaluateConstant(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: int, __a3: ghidra.program.model.address.Address, __a4: int, __a5: ghidra.program.model.data.DataType, __a6: ghidra.program.model.symbol.RefType) -> ghidra.program.model.address.Address: ...

    def evaluateContext(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateContextBefore(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateDestination(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateReference(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: int, __a3: ghidra.program.model.address.Address, __a4: int, __a5: ghidra.program.model.data.DataType, __a6: ghidra.program.model.symbol.RefType) -> bool: ...

    def evaluateReturn(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.program.util.VarnodeContext, __a2: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateSymbolicReference(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: ghidra.program.model.address.Address) -> bool: ...

    def followFalseConditionalBranches(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestinationSet(self) -> ghidra.program.model.address.AddressSet: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setCreateComplexDataFromPointers(self, __a0: bool) -> ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator: ...

    def setMaxSpeculativeOffset(self, __a0: long) -> ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator: ...

    def setMinSpeculativeOffset(self, __a0: long) -> ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator: ...

    def setMinStoreLoadOffset(self, __a0: long) -> ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator: ...

    def setTrustWritableMemory(self, __a0: bool) -> ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator: ...

    def toString(self) -> unicode: ...

    def unknownValue(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: ghidra.program.model.pcode.Varnode) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def createComplexDataFromPointers(self) -> None: ...  # No getter available.

    @createComplexDataFromPointers.setter
    def createComplexDataFromPointers(self, value: bool) -> None: ...

    @property
    def destinationSet(self) -> ghidra.program.model.address.AddressSet: ...

    @property
    def maxSpeculativeOffset(self) -> None: ...  # No getter available.

    @maxSpeculativeOffset.setter
    def maxSpeculativeOffset(self, value: long) -> None: ...

    @property
    def minSpeculativeOffset(self) -> None: ...  # No getter available.

    @minSpeculativeOffset.setter
    def minSpeculativeOffset(self, value: long) -> None: ...

    @property
    def minStoreLoadOffset(self) -> None: ...  # No getter available.

    @minStoreLoadOffset.setter
    def minStoreLoadOffset(self, value: long) -> None: ...

    @property
    def trustWritableMemory(self) -> None: ...  # No getter available.

    @trustWritableMemory.setter
    def trustWritableMemory(self, value: bool) -> None: ...