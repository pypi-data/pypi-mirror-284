from typing import List
from typing import overload
import ghidra.app.plugin.core.navigation
import ghidra.framework.options
import java.lang
import java.util


class NavigationOptions(object, ghidra.framework.options.OptionsChangeListener):





    class ExternalNavigationEnum(java.lang.Enum):
        NavigateToExternalProgram: ghidra.app.plugin.core.navigation.NavigationOptions.ExternalNavigationEnum
        NavigateToLinkage: ghidra.app.plugin.core.navigation.NavigationOptions.ExternalNavigationEnum







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.navigation.NavigationOptions.ExternalNavigationEnum: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.navigation.NavigationOptions.ExternalNavigationEnum]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RangeNavigationEnum(java.lang.Enum):
        TopAndBottomOfRange: ghidra.app.plugin.core.navigation.NavigationOptions.RangeNavigationEnum
        TopOfRangeOnly: ghidra.app.plugin.core.navigation.NavigationOptions.RangeNavigationEnum







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.navigation.NavigationOptions.RangeNavigationEnum: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.navigation.NavigationOptions.RangeNavigationEnum]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, __a0: docking.options.OptionsService): ...

    @overload
    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isFollowIndirectionEnabled(self) -> bool: ...

    def isGoToRestrictedToCurrentProgram(self) -> bool: ...

    def isGotoExternalProgramEnabled(self) -> bool: ...

    def isGotoTopAndBottomOfRangeEnabled(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.ToolOptions, __a1: unicode, __a2: object, __a3: object) -> None: ...

    def preferCurrentAddressSpace(self) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def followIndirectionEnabled(self) -> bool: ...

    @property
    def goToRestrictedToCurrentProgram(self) -> bool: ...

    @property
    def gotoExternalProgramEnabled(self) -> bool: ...

    @property
    def gotoTopAndBottomOfRangeEnabled(self) -> bool: ...