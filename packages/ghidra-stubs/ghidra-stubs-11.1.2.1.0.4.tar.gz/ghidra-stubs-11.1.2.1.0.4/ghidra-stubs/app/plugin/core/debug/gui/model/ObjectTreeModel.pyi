from typing import List
from typing import overload
import docking.widgets.tree
import docking.widgets.tree.support
import ghidra.app.plugin.core.debug.gui.model
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.util.task
import java.lang
import java.util
import java.util.function
import java.util.stream
import javax.swing
import javax.swing.tree


class ObjectTreeModel(object, ghidra.app.plugin.core.debug.gui.model.DisplaysModified):
    ICON_PENDING: generic.theme.GIcon




    class LinkNode(ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractObjectNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel, __a1: ghidra.trace.model.target.TraceObjectValue): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def leaf(self) -> bool: ...

        @property
        def toolTip(self) -> unicode: ...




    class RootNode(ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def leaf(self) -> bool: ...

        @property
        def name(self) -> unicode: ...

        @property
        def toolTip(self) -> unicode: ...

        @property
        def value(self) -> ghidra.trace.model.target.TraceObjectValue: ...




    class AbstractNode(docking.widgets.tree.GTreeLazyNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def name(self) -> unicode: ...

        @property
        def value(self) -> ghidra.trace.model.target.TraceObjectValue: ...




    class PrimitiveNode(ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel, __a1: ghidra.trace.model.target.TraceObjectValue): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def leaf(self) -> bool: ...

        @property
        def toolTip(self) -> unicode: ...

        @property
        def value(self) -> ghidra.trace.model.target.TraceObjectValue: ...




    class CanonicalNode(ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractObjectNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel, __a1: ghidra.trace.model.target.TraceObjectValue): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def leaf(self) -> bool: ...

        @property
        def toolTip(self) -> unicode: ...




    class PendingNode(docking.widgets.tree.GTreeLazyNode):




        def __init__(self): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def displayText(self) -> unicode: ...

        @property
        def leaf(self) -> bool: ...

        @property
        def name(self) -> unicode: ...

        @property
        def toolTip(self) -> unicode: ...




    class AbstractObjectNode(ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel, __a1: ghidra.trace.model.target.TraceObjectValue): ...



        @overload
        def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        @overload
        def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

        def addNodeSorted(self, __a0: ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode) -> None: ...

        def addNodes(self, __a0: List[object]) -> None: ...

        def clone(self) -> object: ...

        def collapse(self) -> None: ...

        @overload
        def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def expand(self) -> None: ...

        def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

        def fireNodeChanged(self) -> None: ...

        def fireNodeStructureChanged(self) -> None: ...

        @overload
        def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

        @overload
        def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

        def getChildCount(self) -> int: ...

        def getChildren(self) -> List[object]: ...

        def getClass(self) -> java.lang.Class: ...

        def getDisplayText(self) -> unicode: ...

        def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

        def getIndexInParent(self) -> int: ...

        def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

        def getLeafCount(self) -> int: ...

        def getName(self) -> unicode: ...

        def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

        def getNodeCount(self) -> int: ...

        def getParent(self) -> docking.widgets.tree.GTreeNode: ...

        def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

        def getToolTip(self) -> unicode: ...

        def getTree(self) -> docking.widgets.tree.GTree: ...

        def getTreePath(self) -> javax.swing.tree.TreePath: ...

        def getValue(self) -> ghidra.trace.model.target.TraceObjectValue: ...

        def hashCode(self) -> int: ...

        def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

        def isAutoExpandPermitted(self) -> bool: ...

        def isEditable(self) -> bool: ...

        def isExpanded(self) -> bool: ...

        def isInProgress(self) -> bool: ...

        def isLeaf(self) -> bool: ...

        def isLoaded(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def iterator(self, __a0: bool) -> java.util.Iterator: ...

        def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeAll(self) -> None: ...

        def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

        def setChildren(self, __a0: List[object]) -> None: ...

        def stream(self, __a0: bool) -> java.util.stream.Stream: ...

        def toString(self) -> unicode: ...

        def unloadChildren(self) -> None: ...

        def valueChanged(self, __a0: object) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def value(self) -> ghidra.trace.model.target.TraceObjectValue: ...

    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDiffSnap(self) -> long: ...

    def getDiffTrace(self) -> ghidra.trace.model.Trace: ...

    def getNode(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ObjectTreeModel.AbstractNode: ...

    def getRoot(self) -> docking.widgets.tree.GTreeLazyNode: ...

    def getSnap(self) -> long: ...

    def getSpan(self) -> ghidra.trace.model.Lifespan: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isEdgesDiffer(self, __a0: ghidra.trace.model.target.TraceObjectValue, __a1: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def isObjectsDiffer(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.trace.model.target.TraceObject) -> bool: ...

    def isShowHidden(self) -> bool: ...

    def isShowMethods(self) -> bool: ...

    def isShowPrimitives(self) -> bool: ...

    def isValueModified(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def isValuesDiffer(self, __a0: object, __a1: object) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDiffSnap(self, __a0: long) -> None: ...

    def setDiffTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def setShowHidden(self, __a0: bool) -> None: ...

    def setShowMethods(self, __a0: bool) -> None: ...

    def setShowPrimitives(self, __a0: bool) -> None: ...

    def setSnap(self, __a0: long) -> None: ...

    def setSpan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def setTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def diffSnap(self) -> long: ...

    @diffSnap.setter
    def diffSnap(self, value: long) -> None: ...

    @property
    def diffTrace(self) -> ghidra.trace.model.Trace: ...

    @diffTrace.setter
    def diffTrace(self, value: ghidra.trace.model.Trace) -> None: ...

    @property
    def root(self) -> docking.widgets.tree.GTreeLazyNode: ...

    @property
    def showHidden(self) -> bool: ...

    @showHidden.setter
    def showHidden(self, value: bool) -> None: ...

    @property
    def showMethods(self) -> bool: ...

    @showMethods.setter
    def showMethods(self, value: bool) -> None: ...

    @property
    def showPrimitives(self) -> bool: ...

    @showPrimitives.setter
    def showPrimitives(self, value: bool) -> None: ...

    @property
    def snap(self) -> long: ...

    @snap.setter
    def snap(self, value: long) -> None: ...

    @property
    def span(self) -> ghidra.trace.model.Lifespan: ...

    @span.setter
    def span(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @trace.setter
    def trace(self, value: ghidra.trace.model.Trace) -> None: ...