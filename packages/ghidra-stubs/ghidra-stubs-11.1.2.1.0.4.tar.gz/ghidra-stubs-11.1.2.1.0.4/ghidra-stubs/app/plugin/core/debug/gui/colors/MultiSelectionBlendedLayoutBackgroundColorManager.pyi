from typing import List
from typing import overload
import docking.widgets.fieldpanel.internal
import docking.widgets.fieldpanel.support
import ghidra.app.plugin.core.debug.gui.colors
import java.awt
import java.lang
import java.util


class MultiSelectionBlendedLayoutBackgroundColorManager(object, docking.widgets.fieldpanel.internal.LayoutBackgroundColorManager):





    class MultiSelectionBlendedFieldBackgroundColorManager(object, docking.widgets.fieldpanel.internal.FieldBackgroundColorManager):




        def __init__(self, __a0: long, __a1: int, __a2: ghidra.app.plugin.core.debug.gui.colors.MultiSelectionBlendedLayoutBackgroundColorManager, __a3: List[object], __a4: java.awt.Color): ...



        def equals(self, __a0: object) -> bool: ...

        def getBackgroundColor(self) -> java.awt.Color: ...

        def getClass(self) -> java.lang.Class: ...

        def getPaddingColor(self, __a0: int) -> java.awt.Color: ...

        def getSelectionHighlights(self, __a0: int) -> List[object]: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def backgroundColor(self) -> java.awt.Color: ...




    class ColoredFieldSelection(object):




        def __init__(self, __a0: docking.widgets.fieldpanel.support.FieldSelection, __a1: java.awt.Color): ...



        def contains(self, __a0: docking.widgets.fieldpanel.support.FieldLocation) -> bool: ...

        def containsEntirely(self, __a0: docking.widgets.fieldpanel.support.FieldRange) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def excludesEntirely(self, __a0: docking.widgets.fieldpanel.support.FieldRange) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def intersect(self, __a0: long) -> ghidra.app.plugin.core.debug.gui.colors.MultiSelectionBlendedLayoutBackgroundColorManager.ColoredFieldSelection: ...

        def isEmpty(self) -> bool: ...

        def isTotal(self, __a0: long) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...

    def __init__(self, __a0: long, __a1: List[object], __a2: java.awt.Color, __a3: java.awt.Color, __a4: java.awt.Color): ...



    def equals(self, __a0: object) -> bool: ...

    @overload
    def getBackgroundColor(self) -> java.awt.Color: ...

    @overload
    def getBackgroundColor(self, __a0: docking.widgets.fieldpanel.support.FieldLocation) -> java.awt.Color: ...

    def getClass(self) -> java.lang.Class: ...

    def getFieldBackgroundColorManager(self, __a0: int) -> docking.widgets.fieldpanel.internal.FieldBackgroundColorManager: ...

    @staticmethod
    def getLayoutColorMap(__a0: long, __a1: java.util.Collection, __a2: java.awt.Color, __a3: bool) -> docking.widgets.fieldpanel.internal.LayoutBackgroundColorManager: ...

    def getPaddingColor(self, __a0: int) -> java.awt.Color: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def backgroundColor(self) -> java.awt.Color: ...