from typing import List
from typing import overload
import ghidra.app.services
import ghidra.debug.api.target
import ghidra.debug.api.tracemgr
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.program
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import java.lang
import java.net
import java.util
import java.util.concurrent


class DebuggerTraceManagerServicePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DebuggerTraceManagerService):
    NEW_TRACES_FOLDER_NAME: unicode = u'New Traces'



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    @overload
    def activate(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    @overload
    def activate(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a1: ghidra.app.services.DebuggerTraceManagerService.ActivationCause) -> None: ...

    def activateAndNotify(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a1: ghidra.app.services.DebuggerTraceManagerService.ActivationCause) -> java.util.concurrent.CompletableFuture: ...

    def activateFrame(self, __a0: int) -> None: ...

    def activateObject(self, __a0: ghidra.trace.model.target.TraceObject) -> None: ...

    def activatePath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> None: ...

    def activatePlatform(self, __a0: ghidra.trace.model.guest.TracePlatform) -> None: ...

    def activateSnap(self, __a0: long) -> None: ...

    def activateTarget(self, __a0: ghidra.debug.api.target.Target) -> None: ...

    def activateThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> None: ...

    def activateTime(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> None: ...

    def activateTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def addAutoCloseOnTerminateChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def addSaveTracesByDefaultChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def askTrace(self, __a0: ghidra.trace.model.Trace) -> ghidra.framework.model.DomainFile: ...

    def canClose(self) -> bool: ...

    def closeAllTraces(self) -> None: ...

    def closeDeadTraces(self) -> None: ...

    def closeOtherTraces(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def closeTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def closeTraceNoConfirm(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @staticmethod
    def createOrGetFolder(__a0: ghidra.framework.plugintool.PluginTool, __a1: unicode, __a2: ghidra.framework.model.DomainFolder, __a3: unicode) -> ghidra.framework.model.DomainFolder: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def findSnapshot(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> long: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrent(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def getCurrentFor(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def getCurrentFrame(self) -> int: ...

    def getCurrentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getCurrentPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    def getCurrentSnap(self) -> long: ...

    def getCurrentThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getCurrentTrace(self) -> ghidra.trace.model.Trace: ...

    def getCurrentView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getOpenTraces(self) -> java.util.Collection: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isAutoCloseOnTerminate(self) -> bool: ...

    def isDisposed(self) -> bool: ...

    def isSaveTracesByDefault(self) -> bool: ...

    def materialize(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> java.util.concurrent.CompletableFuture: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def openTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @overload
    def openTrace(self, __a0: ghidra.framework.model.DomainFile, __a1: int) -> ghidra.trace.model.Trace: ...

    def openTraces(self, __a0: java.util.Collection) -> java.util.Collection: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeAutoCloseOnTerminateChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def removeSaveTracesByDefaultChangeListener(self, __a0: ghidra.app.services.DebuggerTraceManagerService.BooleanChangeAdapter) -> None: ...

    def resolveFrame(self, __a0: int) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveObject(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolvePath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolvePlatform(self, __a0: ghidra.trace.model.guest.TracePlatform) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveSnap(self, __a0: long) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTarget(self, __a0: ghidra.debug.api.target.Target) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTime(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveTrace(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def resolveView(self, __a0: ghidra.trace.model.program.TraceProgramView) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    @overload
    def saveTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def saveTrace(self, __a0: ghidra.trace.model.Trace, __a1: bool) -> java.util.concurrent.CompletableFuture: ...

    @overload
    @staticmethod
    def saveTrace(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.trace.model.Trace, __a2: bool) -> java.util.concurrent.CompletableFuture: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setAutoCloseOnTerminate(self, __a0: bool) -> None: ...

    def setSaveTracesByDefault(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def autoCloseOnTerminate(self) -> bool: ...

    @autoCloseOnTerminate.setter
    def autoCloseOnTerminate(self, value: bool) -> None: ...

    @property
    def current(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    @property
    def currentFrame(self) -> int: ...

    @property
    def currentObject(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def currentPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    @property
    def currentSnap(self) -> long: ...

    @property
    def currentThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def currentTrace(self) -> ghidra.trace.model.Trace: ...

    @property
    def currentView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    @property
    def saveTracesByDefault(self) -> bool: ...

    @saveTracesByDefault.setter
    def saveTracesByDefault(self, value: bool) -> None: ...

    @property
    def supportedDataTypes(self) -> List[java.lang.Class]: ...