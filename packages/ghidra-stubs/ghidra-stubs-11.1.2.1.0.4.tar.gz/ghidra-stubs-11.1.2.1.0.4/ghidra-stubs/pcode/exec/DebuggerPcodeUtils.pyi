from typing import List
from typing import overload
import generic.stl
import ghidra.app.plugin.processors.sleigh.template
import ghidra.debug.api.tracemgr
import ghidra.framework.plugintool
import ghidra.pcode.exec
import ghidra.pcodeCPort.opcodes
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slgh_compile
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.program.model.pcode
import ghidra.sleigh.grammar
import ghidra.trace.model.memory
import java.lang
import java.util


class DebuggerPcodeUtils(java.lang.Enum):





    class WatchValuePcodeExecutorStatePiece(object, ghidra.pcode.exec.PcodeExecutorStatePiece):




        def __init__(self, __a0: ghidra.pcode.exec.PcodeExecutorStatePiece, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece, __a2: ghidra.pcode.exec.PcodeExecutorStatePiece, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece): ...



        def checkRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> None: ...

        def clear(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fork(self) -> ghidra.pcode.exec.PcodeExecutorStatePiece: ...

        def getAddressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getClass(self) -> java.lang.Class: ...

        def getConcreteBuffer(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> ghidra.program.model.mem.MemBuffer: ...

        def getLanguage(self) -> ghidra.program.model.lang.Language: ...

        def getRegisterValues(self) -> java.util.Map: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.lang.Register, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: List[int], __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def quantizeOffset(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long) -> long: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.lang.Register, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: List[int], __a2: int, __a3: bool, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def language(self) -> ghidra.program.model.lang.Language: ...

        @property
        def registerValues(self) -> java.util.Map: ...




    class PrettyBytes(java.lang.Record):




        def __init__(self, __a0: bool, __a1: List[int]): ...



        def bigEndian(self) -> bool: ...

        def bytes(self) -> List[int]: ...

        def collectDisplays(self) -> unicode: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def length(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toBigInteger(self, __a0: bool) -> long: ...

        def toBytesString(self) -> unicode: ...

        def toIntegerString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class LabelBoundPcodeParser(ghidra.pcode.exec.SleighProgramCompiler.ErrorCollectingPcodeParser):
        noplist: generic.stl.VectorSTL



        def __init__(self, __a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates): ...



        def addOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int) -> None: ...

        def addSymbol(self, __a0: ghidra.pcodeCPort.slghsymbol.SleighSymbol) -> None: ...

        def addressOf(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def allocateTemp(self) -> long: ...

        def appendOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: long, __a4: int) -> None: ...

        def assignBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def buildTemporary(self, __a0: ghidra.sleigh.grammar.Location) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def buildTruncatedVarnode(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def clearSymbols(self) -> None: ...

        def compilePcode(self, __a0: unicode, __a1: unicode, __a2: int) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

        def createBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.SpecificSymbol, __a2: int, __a3: int) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createCrossBuild(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> generic.stl.VectorSTL: ...

        def createLoad(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createMacroUse(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.MacroSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

        @overload
        def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        @overload
        def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createOpConst(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: long) -> generic.stl.VectorSTL: ...

        @overload
        def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        @overload
        def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def createOpOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createOpOutUnary(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createStore(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def createUserOp(self, __a0: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a1: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createUserOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

        def createVariadic(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def defineLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.LabelSymbol: ...

        @staticmethod
        def entry(__a0: unicode, __a1: List[object]) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillinZero(self, __a0: ghidra.pcodeCPort.semantics.OpTpl, __a1: generic.stl.VectorSTL) -> None: ...

        def finalNamedSection(self, __a0: ghidra.pcodeCPort.slgh_compile.SectionVector, __a1: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def findInternalFunction(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: generic.stl.VectorSTL) -> object: ...

        def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

        def firstNamedSection(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def getClass(self) -> java.lang.Class: ...

        def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getErrors(self) -> int: ...

        def getNextTempOffset(self) -> long: ...

        def getSleigh(self) -> ghidra.pcodeCPort.sleighbase.SleighBase: ...

        def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getWarnings(self) -> int: ...

        def hashCode(self) -> int: ...

        def isInternalFunction(self, __a0: unicode) -> bool: ...

        def matchSize(self, __a0: int, __a1: ghidra.pcodeCPort.semantics.OpTpl, __a2: bool, __a3: generic.stl.VectorSTL) -> None: ...

        @overload
        def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        @overload
        def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int) -> None: ...

        @overload
        def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode) -> generic.stl.VectorSTL: ...

        @overload
        def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode, __a4: int) -> generic.stl.VectorSTL: ...

        def newSectionSymbol(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.SectionSymbol: ...

        def nextNamedSection(self, __a0: ghidra.pcodeCPort.slgh_compile.SectionVector, __a1: ghidra.pcodeCPort.semantics.ConstructTpl, __a2: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def placeLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.LabelSymbol) -> generic.stl.VectorSTL: ...

        def propagateSize(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> bool: ...

        def recordNop(self, __a0: ghidra.sleigh.grammar.Location) -> None: ...

        def reportError(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        def reportWarning(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        def resetLabelCount(self) -> None: ...

        def setEnforceLocalKey(self, __a0: bool) -> None: ...

        def setResultStarVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

        def setResultVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

        def standaloneSection(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def toString(self) -> unicode: ...

        def translateConstTpl(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

        def translateConstructTpl(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

        def translateHandleTpl(self, __a0: ghidra.pcodeCPort.semantics.HandleTpl) -> ghidra.app.plugin.processors.sleigh.template.HandleTpl: ...

        def translateOpTpl(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> ghidra.app.plugin.processors.sleigh.template.OpTpl: ...

        def translateVarnodeTpl(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.app.plugin.processors.sleigh.template.VarnodeTpl: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class WatchValuePcodeArithmetic(java.lang.Enum, ghidra.pcode.exec.PcodeArithmetic):
        BIG_ENDIAN: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic
        LITTLE_ENDIAN: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic







        @overload
        def binaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object, __a2: object) -> object: ...

        @overload
        def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a4: int, __a5: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object, __a4: int, __a5: object) -> object: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def forEndian(__a0: bool) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @staticmethod
        def forLanguage(__a0: ghidra.program.model.lang.Language) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @overload
        def fromConst(self, __a0: List[int]) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def fromConst(self, __a0: long, __a1: int) -> object: ...

        @overload
        def fromConst(self, __a0: long, __a1: int) -> object: ...

        @overload
        def fromConst(self, __a0: long, __a1: int, __a2: bool) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getEndian(self) -> ghidra.program.model.lang.Endian: ...

        def hashCode(self) -> int: ...

        def isTrue(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> bool: ...

        @overload
        def modAfterLoad(self, __a0: int, __a1: int, __a2: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a3: int, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def modAfterLoad(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

        @overload
        def modBeforeStore(self, __a0: int, __a1: int, __a2: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a3: int, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def modBeforeStore(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def ptrAdd(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object, __a5: int) -> object: ...

        def ptrSub(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

        @overload
        def sizeOf(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> long: ...

        @overload
        def sizeOf(self, __a0: object) -> long: ...

        def sizeOfAbstract(self, __a0: object) -> object: ...

        def toBigInteger(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

        @overload
        def toConcrete(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

        @overload
        def toConcrete(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

        def toLong(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

        def toString(self) -> unicode: ...

        @overload
        def unaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object) -> object: ...

        @overload
        def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object) -> object: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def endian(self) -> ghidra.program.model.lang.Endian: ...




    class WatchValuePcodeExecutorState(object, ghidra.pcode.exec.PcodeExecutorState):




        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeExecutorStatePiece): ...



        def checkRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> None: ...

        def clear(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fork(self) -> ghidra.pcode.exec.PcodeExecutorStatePiece: ...

        def getAddressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getClass(self) -> java.lang.Class: ...

        def getConcreteBuffer(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> ghidra.program.model.mem.MemBuffer: ...

        def getLanguage(self) -> ghidra.program.model.lang.Language: ...

        def getRegisterValues(self) -> java.util.Map: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.lang.Register, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def paired(self, __a0: ghidra.pcode.exec.PcodeExecutorStatePiece) -> ghidra.pcode.exec.PcodeExecutorState: ...

        def quantizeOffset(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long) -> long: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.lang.Register, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def language(self) -> ghidra.program.model.lang.Language: ...

        @property
        def registerValues(self) -> java.util.Map: ...




    class WatchValue(java.lang.Record):




        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes, __a1: ghidra.trace.model.memory.TraceMemoryState, __a2: ghidra.pcode.exec.ValueLocation, __a3: ghidra.program.model.address.AddressSetView): ...



        def address(self) -> ghidra.program.model.address.Address: ...

        def bytes(self) -> ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def length(self) -> int: ...

        def location(self) -> ghidra.pcode.exec.ValueLocation: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reads(self) -> ghidra.program.model.address.AddressSetView: ...

        def state(self) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def toBigInteger(self, __a0: bool) -> long: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @staticmethod
    def buildWatchExecutor(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutor: ...

    @staticmethod
    def buildWatchState(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeExecutorState: ...

    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    @staticmethod
    def compileExpression(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a2: unicode) -> ghidra.pcode.exec.PcodeExpression: ...

    @staticmethod
    def compileProgram(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a2: unicode, __a3: unicode, __a4: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeProgram: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def executorForCoordinates(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutor: ...

    @staticmethod
    def executorStateForCoordinates(__a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.pcode.exec.DebuggerPcodeUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.pcode.exec.DebuggerPcodeUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

