from typing import overload
import ghidra.app.plugin.processors.sleigh
import ghidra.pcode.exec
import java.lang
import java.lang.reflect
import java.util
import org.apache.commons.lang3.tuple


class TaintPcodeUseropLibrary(ghidra.pcode.exec.AnnotatedPcodeUseropLibrary):




    def __init__(self): ...



    def compose(self, __a0: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getOperandType(__a0: java.lang.Class) -> java.lang.reflect.Type: ...

    def getSymbols(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage) -> java.util.Map: ...

    def getUserops(self) -> java.util.Map: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def nil() -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def taint_arr(self, __a0: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    def taint_var(self, __a0: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

