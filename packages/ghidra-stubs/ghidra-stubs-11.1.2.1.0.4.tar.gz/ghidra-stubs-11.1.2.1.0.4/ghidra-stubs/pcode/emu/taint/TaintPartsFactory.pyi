from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.service.emulation
import ghidra.pcode.emu
import ghidra.pcode.emu.auxiliary
import ghidra.pcode.emu.taint
import ghidra.pcode.exec
import ghidra.pcode.exec.debug.auxiliary
import ghidra.pcode.exec.trace
import ghidra.pcode.exec.trace.auxiliary
import ghidra.program.model.lang
import java.lang
import java.util


class TaintPartsFactory(java.lang.Enum, ghidra.pcode.exec.debug.auxiliary.AuxDebuggerEmulatorPartsFactory):
    INSTANCE: ghidra.pcode.emu.taint.TaintPartsFactory







    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def createDebuggerLocalState(self, __a0: ghidra.pcode.exec.debug.auxiliary.AuxDebuggerPcodeEmulator, __a1: ghidra.pcode.emu.PcodeThread, __a2: ghidra.app.plugin.core.debug.service.emulation.RWTargetRegistersPcodeExecutorStatePiece) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def createDebuggerSharedState(self, __a0: ghidra.pcode.exec.debug.auxiliary.AuxDebuggerPcodeEmulator, __a1: ghidra.app.plugin.core.debug.service.emulation.RWTargetMemoryPcodeExecutorStatePiece) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def createExecutor(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator, __a1: ghidra.pcode.emu.DefaultPcodeThread) -> ghidra.pcode.emu.DefaultPcodeThread.PcodeThreadExecutor: ...

    def createLocalState(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator, __a1: ghidra.pcode.emu.PcodeThread, __a2: ghidra.pcode.exec.BytesPcodeExecutorStatePiece) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def createLocalUseropLibrary(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator, __a1: ghidra.pcode.emu.PcodeThread) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def createLocalUseropStub(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def createSharedState(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator, __a1: ghidra.pcode.exec.BytesPcodeExecutorStatePiece) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def createSharedUseropLibrary(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def createThread(self, __a0: ghidra.pcode.emu.auxiliary.AuxPcodeEmulator, __a1: unicode) -> ghidra.pcode.emu.PcodeThread: ...

    def createTraceLocalState(self, __a0: ghidra.pcode.exec.trace.auxiliary.AuxTracePcodeEmulator, __a1: ghidra.pcode.emu.PcodeThread, __a2: ghidra.pcode.exec.trace.BytesTracePcodeExecutorStatePiece) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def createTraceSharedState(self, __a0: ghidra.pcode.exec.trace.auxiliary.AuxTracePcodeEmulator, __a1: ghidra.pcode.exec.trace.BytesTracePcodeExecutorStatePiece) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    def getArithmetic(self, __a0: ghidra.program.model.lang.Language) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.pcode.emu.taint.TaintPartsFactory: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.pcode.emu.taint.TaintPartsFactory]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

