from typing import List
from typing import overload
import ghidra.taint.model
import java.lang
import java.util


class TaintSpace(object):




    def __init__(self): ...



    def clear(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: long, __a1: int) -> ghidra.taint.model.TaintVec: ...

    def getClass(self) -> java.lang.Class: ...

    def getInto(self, __a0: long, __a1: ghidra.taint.model.TaintVec) -> None: ...

    def getRegisterValues(self, __a0: List[object]) -> java.util.Map: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def set(self, __a0: long, __a1: ghidra.taint.model.TaintVec) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

