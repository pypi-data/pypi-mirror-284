from typing import List
from typing import overload
import ghidra.features.bsim.gui.search.results
import ghidra.features.bsim.query.description
import java.lang
import java.util


class ExecutableResult(object, java.lang.Comparable):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord): ...



    def addFunction(self, __a0: float) -> None: ...

    @overload
    def compareTo(self, __a0: ghidra.features.bsim.gui.search.results.ExecutableResult) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def generateFromMatchRows(__a0: List[object]) -> java.util.TreeSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getExecutableRecord(self) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def getFunctionCount(self) -> int: ...

    def getSignificanceSum(self) -> float: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def executableRecord(self) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    @property
    def functionCount(self) -> int: ...

    @property
    def significanceSum(self) -> float: ...