from typing import overload
import ghidra.features.bsim.query.protocol
import ghidra.program.model.listing
import java.lang
import java.util


class SFOverviewInfo(object):
    DEFAULT_QUERIES_PER_STAGE: int = 10



    def __init__(self, __a0: java.util.Set): ...



    def buildQueryNearestVector(self) -> ghidra.features.bsim.query.protocol.QueryNearestVector: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFunctions(self) -> java.util.Set: ...

    def getNumberOfStages(self, __a0: int) -> int: ...

    def getPreFilter(self) -> ghidra.features.bsim.query.protocol.PreFilter: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getSignificanceThreshold(self) -> float: ...

    def getSimilarityThreshold(self) -> float: ...

    def getVectorMax(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSignificanceThreshold(self, __a0: float) -> None: ...

    def setSimilarityThreshold(self, __a0: float) -> None: ...

    def setVectorMax(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def functions(self) -> java.util.Set: ...

    @property
    def preFilter(self) -> ghidra.features.bsim.query.protocol.PreFilter: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def significanceThreshold(self) -> float: ...

    @significanceThreshold.setter
    def significanceThreshold(self, value: float) -> None: ...

    @property
    def similarityThreshold(self) -> float: ...

    @similarityThreshold.setter
    def similarityThreshold(self, value: float) -> None: ...

    @property
    def vectorMax(self) -> int: ...

    @vectorMax.setter
    def vectorMax(self, value: int) -> None: ...