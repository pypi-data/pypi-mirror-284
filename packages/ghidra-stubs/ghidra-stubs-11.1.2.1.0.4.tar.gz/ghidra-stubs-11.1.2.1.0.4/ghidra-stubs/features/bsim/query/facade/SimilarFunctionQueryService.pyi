from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.facade
import ghidra.features.bsim.query.protocol
import ghidra.program.model.listing
import ghidra.util.task
import java.lang


class SimilarFunctionQueryService(object, java.lang.AutoCloseable):




    def __init__(self, __a0: ghidra.program.model.listing.Program): ...



    def changePassword(self, __a0: unicode, __a1: List[int]) -> unicode: ...

    def close(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def generateQueryNearest(self, __a0: ghidra.features.bsim.query.facade.SFQueryInfo, __a1: ghidra.util.task.TaskMonitor) -> ghidra.features.bsim.query.protocol.QueryNearest: ...

    def generateQueryNearestVector(self, __a0: ghidra.features.bsim.query.facade.SFOverviewInfo, __a1: ghidra.util.task.TaskMonitor) -> ghidra.features.bsim.query.protocol.QueryNearestVector: ...

    def getClass(self) -> java.lang.Class: ...

    def getDatabaseCompatibility(self) -> unicode: ...

    def getDatabaseConnectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    def getDatabaseInformation(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    def getDatabaseStatus(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    def getLSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    def getLastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    def getServerInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    def getUserName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def initializeDatabase(self, __a0: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def overviewSimilarFunctions(self, __a0: ghidra.features.bsim.query.facade.SFOverviewInfo, __a1: ghidra.features.bsim.query.facade.SFResultsUpdateListener, __a2: ghidra.util.task.TaskMonitor) -> ghidra.features.bsim.query.protocol.ResponseNearestVector: ...

    def queryRaw(self, __a0: ghidra.features.bsim.query.protocol.BSimQuery, __a1: ghidra.features.bsim.query.protocol.StagingManager, __a2: ghidra.features.bsim.query.facade.SFResultsUpdateListener, __a3: ghidra.util.task.TaskMonitor) -> ghidra.features.bsim.query.protocol.QueryResponseRecord: ...

    def querySimilarFunctions(self, __a0: ghidra.features.bsim.query.facade.SFQueryInfo, __a1: ghidra.features.bsim.query.facade.SFResultsUpdateListener, __a2: ghidra.util.task.TaskMonitor) -> ghidra.features.bsim.query.facade.SFQueryResult: ...

    def setNumberOfStages(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    def updateProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def LSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    @property
    def databaseCompatibility(self) -> unicode: ...

    @property
    def databaseConnectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    @property
    def databaseInformation(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    @property
    def databaseStatus(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    @property
    def lastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    @property
    def numberOfStages(self) -> None: ...  # No getter available.

    @numberOfStages.setter
    def numberOfStages(self, value: int) -> None: ...

    @property
    def serverInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    @property
    def userName(self) -> unicode: ...