from typing import overload
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.elastic
import java.lang


class RowKeyElastic(ghidra.features.bsim.query.description.RowKey):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: long): ...

    @overload
    def __init__(self, __a0: unicode): ...

    @overload
    def __init__(self, __a0: int, __a1: int, __a2: int): ...



    @overload
    def compareTo(self, __a0: ghidra.features.bsim.query.description.RowKey) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def generateExeIdString(self) -> unicode: ...

    def generateFunctionId(self, __a0: java.lang.StringBuilder, __a1: ghidra.features.bsim.query.description.FunctionDescription) -> None: ...

    def generateLibraryFunctionId(self, __a0: java.lang.StringBuilder, __a1: unicode) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getLong(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def parseExeIdString(__a0: unicode) -> ghidra.features.bsim.query.elastic.RowKeyElastic: ...

    @staticmethod
    def parseFunctionId(__a0: unicode) -> ghidra.features.bsim.query.elastic.RowKeyElastic: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def long(self) -> long: ...