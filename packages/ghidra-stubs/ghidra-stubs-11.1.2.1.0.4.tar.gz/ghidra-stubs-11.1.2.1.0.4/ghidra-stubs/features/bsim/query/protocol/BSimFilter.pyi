from typing import List
from typing import overload
import ghidra.features.bsim.gui.filters
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.protocol
import ghidra.xml
import java.io
import java.lang


class BSimFilter(object):





    class FilterEntry(java.lang.Record):




        def __init__(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType, __a1: List[object]): ...



        def equals(self, __a0: object) -> bool: ...

        def filterType(self) -> ghidra.features.bsim.gui.filters.BSimFilterType: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def values(self) -> List[object]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def addAtom(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType, __a1: unicode) -> None: ...

    def clear(self) -> None: ...

    def clone(self) -> object: ...

    def equals(self, __a0: object) -> bool: ...

    def evaluate(self, __a0: ghidra.features.bsim.query.description.FunctionDescription) -> bool: ...

    def getAtom(self, __a0: int) -> ghidra.features.bsim.query.protocol.FilterAtom: ...

    def getClass(self) -> java.lang.Class: ...

    def getFilterEntries(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numAtoms(self) -> int: ...

    def replaceWith(self, __a0: ghidra.features.bsim.query.protocol.BSimFilter) -> None: ...

    def restoreXml(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def filterEntries(self) -> List[object]: ...