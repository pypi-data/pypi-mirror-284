from typing import List
from typing import overload
import ghidra.features.bsim.query
import java.lang
import java.net
import java.sql


class BSimPostgresDBConnectionManager(object):





    class BSimPostgresDataSource(object, ghidra.features.bsim.query.BSimJDBCDataSource):








        def dispose(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getActiveConnections(self) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def getConnection(self) -> java.sql.Connection: ...

        def getConnectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

        def getServerInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

        def getStatus(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

        def getUserName(self) -> unicode: ...

        def hashCode(self) -> int: ...

        def initializeFrom(self, __a0: ghidra.features.bsim.query.BSimPostgresDBConnectionManager.BSimPostgresDataSource) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setPassword(self, __a0: unicode, __a1: List[int]) -> None: ...

        def setPreferredUserName(self, __a0: unicode) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def activeConnections(self) -> int: ...

        @property
        def connection(self) -> java.sql.Connection: ...

        @property
        def connectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

        @property
        def preferredUserName(self) -> None: ...  # No getter available.

        @preferredUserName.setter
        def preferredUserName(self, value: unicode) -> None: ...

        @property
        def serverInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

        @property
        def status(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

        @property
        def userName(self) -> unicode: ...

    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    @staticmethod
    def getDataSource(__a0: ghidra.features.bsim.query.BSimServerInfo) -> ghidra.features.bsim.query.BSimPostgresDBConnectionManager.BSimPostgresDataSource: ...

    @overload
    @staticmethod
    def getDataSource(__a0: java.net.URL) -> ghidra.features.bsim.query.BSimPostgresDBConnectionManager.BSimPostgresDataSource: ...

    @staticmethod
    def getDataSourceIfExists(__a0: ghidra.features.bsim.query.BSimServerInfo) -> ghidra.features.bsim.query.BSimPostgresDBConnectionManager.BSimPostgresDataSource: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

