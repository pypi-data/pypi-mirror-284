from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query.description
import ghidra.xml
import java.lang


class FunctionDescriptionMapper(object):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def handleExecutable(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> None: ...

    def handleFunction(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: int) -> None: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processFile(self, __a0: ghidra.xml.XmlPullParser, __a1: generic.lsh.vector.LSHVectorFactory) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

