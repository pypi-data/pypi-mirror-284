from typing import List
from typing import overload
import ghidra.features.bsim.gui.filters
import ghidra.features.bsim.query.elastic
import ghidra.features.bsim.query.protocol
import java.lang
import java.util


class ElasticEffects(object):




    def __init__(self): ...



    def addChildId(self, __a0: unicode) -> None: ...

    def addDateParam(self, __a0: unicode, __a1: java.util.Date) -> None: ...

    def addDocValue(self, __a0: unicode) -> None: ...

    def addFuncParam(self, __a0: unicode, __a1: unicode) -> None: ...

    def addFunctionFilter(self, __a0: int, __a1: bool) -> None: ...

    def addParam(self, __a0: unicode, __a1: unicode) -> None: ...

    def addScriptElement(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType, __a1: unicode) -> None: ...

    def addStandalone(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType, __a1: unicode) -> None: ...

    def assignArgument(self) -> unicode: ...

    def buildFunctionFilter(self) -> unicode: ...

    @staticmethod
    def createFilter(__a0: ghidra.features.bsim.query.protocol.BSimFilter, __a1: List[ghidra.features.bsim.query.elastic.IDElasticResolution]) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

