from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query
import ghidra.features.bsim.query.client
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.protocol
import java.io
import java.lang
import java.util


class FunctionDatabase(java.lang.AutoCloseable, object):





    class Status(java.lang.Enum):
        Busy: ghidra.features.bsim.query.FunctionDatabase.Status
        Error: ghidra.features.bsim.query.FunctionDatabase.Status
        Ready: ghidra.features.bsim.query.FunctionDatabase.Status
        Unconnected: ghidra.features.bsim.query.FunctionDatabase.Status







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.features.bsim.query.FunctionDatabase.Status]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ConnectionType(java.lang.Enum):
        SSL_No_Authentication: ghidra.features.bsim.query.FunctionDatabase.ConnectionType
        SSL_Password_Authentication: ghidra.features.bsim.query.FunctionDatabase.ConnectionType
        Unencrypted_No_Authentication: ghidra.features.bsim.query.FunctionDatabase.ConnectionType







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.features.bsim.query.FunctionDatabase.ConnectionType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Error(object):
        category: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        message: unicode



        def __init__(self, __a0: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory, __a1: unicode): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ErrorCategory(java.lang.Enum):
        Authentication: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        AuthenticationCancelled: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Connection: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Fatal: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Format: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Initialization: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Nodatabase: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Nonfatal: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory
        Unused: ghidra.features.bsim.query.FunctionDatabase.ErrorCategory







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getInteger(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.features.bsim.query.FunctionDatabase.ErrorCategory: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.features.bsim.query.FunctionDatabase.ErrorCategory]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def integer(self) -> int: ...




    class DatabaseNonFatalException(java.lang.Exception):




        def __init__(self, __a0: unicode): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def changePassword(self, __a0: unicode, __a1: List[int]) -> unicode: ...

    @staticmethod
    def checkSettingsForInsert(__a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: ghidra.features.bsim.query.description.DatabaseInformation) -> bool: ...

    @staticmethod
    def checkSettingsForQuery(__a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: ghidra.features.bsim.query.description.DatabaseInformation) -> None: ...

    def close(self) -> None: ...

    def compareLayout(self) -> int: ...

    @staticmethod
    def constructFatalError(__a0: int, __a1: ghidra.features.bsim.query.description.ExecutableRecord, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> unicode: ...

    @staticmethod
    def constructNonfatalError(__a0: int, __a1: ghidra.features.bsim.query.description.ExecutableRecord, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def generateLSHVectorFactory() -> generic.lsh.vector.WeightedLSHCosineVectorFactory: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getConfigurationTemplates() -> List[object]: ...

    def getConnectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    def getInfo(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    def getLSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    def getLastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    def getOverviewFunctionsPerStage(self) -> int: ...

    def getQueriedFunctionsPerStage(self) -> int: ...

    def getServerInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    def getStatus(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    def getURLString(self) -> unicode: ...

    def getUserName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def initialize(self) -> bool: ...

    @staticmethod
    def isConfigTemplate(__a0: java.io.File) -> bool: ...

    def isPasswordChangeAllowed(self) -> bool: ...

    @staticmethod
    def loadConfigurationTemplate(__a0: unicode) -> ghidra.features.bsim.query.client.Configuration: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def query(self, __a0: ghidra.features.bsim.query.protocol.BSimQuery) -> ghidra.features.bsim.query.protocol.QueryResponseRecord: ...

    def setUserName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def LSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    @property
    def URLString(self) -> unicode: ...

    @property
    def connectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    @property
    def info(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    @property
    def lastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    @property
    def overviewFunctionsPerStage(self) -> int: ...

    @property
    def passwordChangeAllowed(self) -> bool: ...

    @property
    def queriedFunctionsPerStage(self) -> int: ...

    @property
    def serverInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    @property
    def status(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    @property
    def userName(self) -> unicode: ...

    @userName.setter
    def userName(self, value: unicode) -> None: ...