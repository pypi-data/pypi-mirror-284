from typing import overload
import java.lang
import org.json.simple


class ElasticConnection(object):
    DELETE: unicode = u'DELETE'
    GET: unicode = u'GET'
    POST: unicode = u'POST'
    PUT: unicode = u'PUT'



    def __init__(self, __a0: unicode, __a1: unicode): ...



    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def executeBulk(self, __a0: unicode, __a1: unicode) -> org.json.simple.JSONObject: ...

    def executeRawStatement(self, __a0: unicode, __a1: unicode, __a2: unicode) -> org.json.simple.JSONObject: ...

    def executeStatement(self, __a0: unicode, __a1: unicode, __a2: unicode) -> org.json.simple.JSONObject: ...

    def executeStatementExpectFailure(self, __a0: unicode, __a1: unicode, __a2: unicode) -> org.json.simple.JSONObject: ...

    def executeStatementNoResponse(self, __a0: unicode, __a1: unicode, __a2: unicode) -> None: ...

    def executeURIOnly(self, __a0: unicode, __a1: unicode) -> org.json.simple.JSONObject: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def lastRequestSuccessful(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def startHttpBulkRequest(self, __a0: unicode) -> None: ...

    def startHttpRawRequest(self, __a0: unicode, __a1: unicode) -> None: ...

    def startHttpRequest(self, __a0: unicode, __a1: unicode) -> None: ...

    def startHttpURICommand(self, __a0: unicode, __a1: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

