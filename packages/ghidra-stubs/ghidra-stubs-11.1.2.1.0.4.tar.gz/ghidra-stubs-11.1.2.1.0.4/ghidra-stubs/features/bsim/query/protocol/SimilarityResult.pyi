from typing import Iterator
from typing import overload
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.protocol
import ghidra.xml
import java.io
import java.lang
import java.util
import java.util.function


class SimilarityResult(object, java.lang.Iterable):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.features.bsim.query.description.FunctionDescription): ...

    def __iter__(self): ...

    def addNote(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: float, __a2: float) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def getBase(self) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def getClass(self) -> java.lang.Class: ...

    def getTotalCount(self) -> int: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> java.util.Iterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def restoreXml(self, __a0: ghidra.xml.XmlPullParser, __a1: ghidra.features.bsim.query.description.DescriptionManager, __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: java.util.Map, __a4: java.util.Map) -> None: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def setTotalCount(self, __a0: int) -> None: ...

    def setTransfer(self, __a0: ghidra.features.bsim.query.protocol.SimilarityResult, __a1: ghidra.features.bsim.query.description.DescriptionManager, __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: bool) -> None: ...

    def size(self) -> int: ...

    def sortNotes(self) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def toString(self) -> unicode: ...

    def transfer(self, __a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: bool) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def base(self) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    @property
    def totalCount(self) -> int: ...

    @totalCount.setter
    def totalCount(self, value: int) -> None: ...