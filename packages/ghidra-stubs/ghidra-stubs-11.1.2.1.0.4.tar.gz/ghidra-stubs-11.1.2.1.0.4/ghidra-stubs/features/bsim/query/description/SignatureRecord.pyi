from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query.description
import ghidra.xml
import java.io
import java.lang


class SignatureRecord(object):




    def __init__(self, __a0: generic.lsh.vector.LSHVector): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCount(self) -> int: ...

    def getLSHVector(self) -> generic.lsh.vector.LSHVector: ...

    def getVectorId(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def restoreXml(__a0: ghidra.xml.XmlPullParser, __a1: generic.lsh.vector.LSHVectorFactory, __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: ghidra.features.bsim.query.description.FunctionDescription, __a4: int) -> None: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def LSHVector(self) -> generic.lsh.vector.LSHVector: ...

    @property
    def count(self) -> int: ...

    @property
    def vectorId(self) -> long: ...