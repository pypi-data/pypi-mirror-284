from typing import List
from typing import overload
import ghidra.features.bsim.query.description
import ghidra.xml
import java.io
import java.lang
import java.util


class ExecutableRecord(object, java.lang.Comparable):
    ALREADY_STORED: int = 1
    CATEGORIES_SET: int = 4
    EMPTY_DATE: java.util.Date
    LIBRARY: int = 2
    METADATA_ARCH: int = 2
    METADATA_COMP: int = 4
    METADATA_DATE: int = 8
    METADATA_LIBR: int = 64
    METADATA_NAME: int = 1
    METADATA_PATH: int = 32
    METADATA_REPO: int = 16




    class Update(object):
        architecture: bool
        categories: bool
        catinsert: List[object]
        date: bool
        name_compiler: bool
        name_exec: bool
        path: bool
        repository: bool
        update: ghidra.features.bsim.query.description.ExecutableRecord



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, __a0: unicode, __a1: unicode, __a2: ghidra.features.bsim.query.description.RowKey): ...

    @overload
    def __init__(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: java.util.Date, __a5: ghidra.features.bsim.query.description.RowKey, __a6: unicode, __a7: unicode): ...

    @overload
    def __init__(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: java.util.Date, __a5: List[object], __a6: ghidra.features.bsim.query.description.RowKey, __a7: unicode, __a8: unicode): ...



    @staticmethod
    def calcLibraryMd5Placeholder(__a0: unicode, __a1: unicode) -> unicode: ...

    def categoriesAreSet(self) -> bool: ...

    def compareCategory(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> bool: ...

    def compareMetadata(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> int: ...

    @overload
    def compareTo(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def diffForUpdate(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord.Update, __a1: ghidra.features.bsim.query.description.ExecutableRecord) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllCategories(self) -> List[object]: ...

    def getArchitecture(self) -> unicode: ...

    def getCategory(self, __a0: unicode) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDate(self) -> java.util.Date: ...

    def getExeCategoryAlphabetic(self, __a0: unicode) -> unicode: ...

    def getMd5(self) -> unicode: ...

    def getNameCompiler(self) -> unicode: ...

    def getNameExec(self) -> unicode: ...

    def getPath(self) -> unicode: ...

    def getRepository(self) -> unicode: ...

    def getRowId(self) -> ghidra.features.bsim.query.description.RowKey: ...

    def getURLString(self) -> unicode: ...

    def getXrefIndex(self) -> int: ...

    def hasCategory(self, __a0: unicode, __a1: unicode) -> bool: ...

    def hashCode(self) -> int: ...

    def isAlreadyStored(self) -> bool: ...

    def isLibrary(self) -> bool: ...

    @staticmethod
    def isLibraryHash(__a0: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def printRaw(self) -> unicode: ...

    @staticmethod
    def restoreXml(__a0: ghidra.xml.XmlPullParser, __a1: ghidra.features.bsim.query.description.DescriptionManager) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def URLString(self) -> unicode: ...

    @property
    def allCategories(self) -> List[object]: ...

    @property
    def alreadyStored(self) -> bool: ...

    @property
    def architecture(self) -> unicode: ...

    @property
    def date(self) -> java.util.Date: ...

    @property
    def library(self) -> bool: ...

    @property
    def md5(self) -> unicode: ...

    @property
    def nameCompiler(self) -> unicode: ...

    @property
    def nameExec(self) -> unicode: ...

    @property
    def path(self) -> unicode: ...

    @property
    def repository(self) -> unicode: ...

    @property
    def rowId(self) -> ghidra.features.bsim.query.description.RowKey: ...

    @property
    def xrefIndex(self) -> int: ...