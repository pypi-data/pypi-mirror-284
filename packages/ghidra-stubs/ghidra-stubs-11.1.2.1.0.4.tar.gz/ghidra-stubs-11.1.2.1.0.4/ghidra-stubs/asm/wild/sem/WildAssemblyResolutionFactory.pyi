from typing import List
from typing import overload
import ghidra.app.plugin.assembler.sleigh.expr
import ghidra.app.plugin.assembler.sleigh.sem
import ghidra.app.plugin.processors.sleigh
import ghidra.app.plugin.processors.sleigh.expression
import ghidra.app.plugin.processors.sleigh.pattern
import java.lang


class WildAssemblyResolutionFactory(ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory):




    def __init__(self): ...



    def backfill(self, __a0: ghidra.app.plugin.processors.sleigh.expression.PatternExpression, __a1: ghidra.app.plugin.assembler.sleigh.expr.MaskedLong, __a2: int, __a3: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def backfillBuilder(self, __a0: ghidra.app.plugin.processors.sleigh.expression.PatternExpression, __a1: ghidra.app.plugin.assembler.sleigh.expr.MaskedLong, __a2: int, __a3: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory.AbstractAssemblyResolvedBackfillBuilder: ...

    def contextOnly(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock, __a1: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def equals(self, __a0: object) -> bool: ...

    def error(self, __a0: unicode, __a1: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def errorBuilder(self, __a0: unicode, __a1: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory.AssemblyResolvedErrorBuilder: ...

    def fromPattern(self, __a0: ghidra.app.plugin.processors.sleigh.pattern.DisjointPattern, __a1: int, __a2: unicode, __a3: ghidra.app.plugin.processors.sleigh.Constructor) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def fromString(self, __a0: unicode, __a1: unicode, __a2: List[object]) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def instrOnly(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock, __a1: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def newAssemblyResolutionResults(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolutionResults: ...

    def newBackfillBuilder(self) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory.AbstractAssemblyResolvedBackfillBuilder: ...

    def newErrorBuilder(self) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory.AssemblyResolvedErrorBuilder: ...

    def newPatternsBuilder(self) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyResolutionFactory.AbstractAssemblyResolvedPatternsBuilder: ...

    @overload
    def nop(self, __a0: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @overload
    def nop(self, __a0: unicode, __a1: List[object], __a2: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def resolved(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock, __a1: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock, __a2: unicode, __a3: ghidra.app.plugin.processors.sleigh.Constructor, __a4: List[object], __a5: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

