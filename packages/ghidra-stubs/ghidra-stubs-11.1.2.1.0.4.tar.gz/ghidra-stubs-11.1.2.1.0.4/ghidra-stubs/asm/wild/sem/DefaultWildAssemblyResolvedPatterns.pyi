from typing import List
from typing import overload
import ghidra.app.plugin.assembler.sleigh.expr
import ghidra.app.plugin.assembler.sleigh.sem
import ghidra.app.plugin.processors.sleigh
import ghidra.app.plugin.processors.sleigh.expression
import ghidra.asm.wild.sem
import java.lang
import java.util


class DefaultWildAssemblyResolvedPatterns(ghidra.app.plugin.assembler.sleigh.sem.DefaultAssemblyResolvedPatterns, ghidra.asm.wild.sem.WildAssemblyResolvedPatterns):








    def backfill(self, __a0: ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver, __a1: java.util.Map) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def bitsEqual(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns) -> bool: ...

    def checkNotForbidden(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def collectAllRight(self, __a0: java.util.Collection) -> None: ...

    @overload
    def combine(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @overload
    def combine(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def combineLessBackfill(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns, __a1: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @overload
    def compareTo(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def copyAppendDescription(self, __a0: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def dumpConstructorTree(self) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def equivalentConstructState(self, __a0: ghidra.app.plugin.processors.sleigh.ConstructState) -> bool: ...

    def getBackfills(self) -> java.util.Collection: ...

    def getChildren(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstructor(self) -> ghidra.app.plugin.processors.sleigh.Constructor: ...

    def getContext(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock: ...

    def getDefinedInstructionLength(self) -> int: ...

    def getDescription(self) -> unicode: ...

    def getForbids(self) -> java.util.Collection: ...

    def getInstruction(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock: ...

    def getInstructionLength(self) -> int: ...

    def getOperandInfo(self) -> java.util.Set: ...

    def getRight(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def getSpecificity(self) -> int: ...

    def hasBackfills(self) -> bool: ...

    def hasChildren(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBackfill(self) -> bool: ...

    def isError(self) -> bool: ...

    def lineToString(self) -> unicode: ...

    def maskOut(self, __a0: ghidra.app.plugin.processors.sleigh.ContextOp) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def nopLeftSibling(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parent(self, __a0: unicode, __a1: int) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def possibleInsVals(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock) -> java.lang.Iterable: ...

    def readContext(self, __a0: int, __a1: int) -> ghidra.app.plugin.assembler.sleigh.expr.MaskedLong: ...

    def readContextOp(self, __a0: ghidra.app.plugin.processors.sleigh.ContextOp) -> ghidra.app.plugin.assembler.sleigh.expr.MaskedLong: ...

    def readInstruction(self, __a0: int, __a1: int) -> ghidra.app.plugin.assembler.sleigh.expr.MaskedLong: ...

    def shift(self, __a0: int) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def solveContextChangesForForbids(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyConstructorSemantic, __a1: java.util.Map) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, __a0: unicode) -> unicode: ...

    def truncate(self, __a0: int) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def withConstructor(self, __a0: ghidra.app.plugin.processors.sleigh.Constructor) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def withDescription(self, __a0: unicode) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def withForbids(self, __a0: java.util.Set) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    def withRight(self, __a0: ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def withWildInfo(self, __a0: unicode, __a1: List[object], __a2: ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock, __a3: ghidra.app.plugin.processors.sleigh.expression.PatternExpression, __a4: object) -> ghidra.asm.wild.sem.WildAssemblyResolvedPatterns: ...

    def withoutRight(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def writeContextOp(self, __a0: ghidra.app.plugin.processors.sleigh.ContextOp, __a1: ghidra.app.plugin.assembler.sleigh.expr.MaskedLong) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedPatterns: ...

    @property
    def operandInfo(self) -> java.util.Set: ...