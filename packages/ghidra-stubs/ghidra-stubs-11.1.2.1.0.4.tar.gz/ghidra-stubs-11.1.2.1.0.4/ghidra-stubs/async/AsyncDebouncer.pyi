from typing import overload
import ghidra.async
import java.lang
import java.util.concurrent
import java.util.function


class AsyncDebouncer(object):





    class Bypass(ghidra.async.AsyncDebouncer):




        def __init__(self): ...



        def addListener(self, __a0: java.util.function.Consumer) -> None: ...

        def contact(self, __a0: object) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def removeListener(self, __a0: java.util.function.Consumer) -> None: ...

        def settled(self) -> java.util.concurrent.CompletableFuture: ...

        def stable(self) -> java.util.concurrent.CompletableFuture: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.async.AsyncTimer, __a1: long): ...



    def addListener(self, __a0: java.util.function.Consumer) -> None: ...

    def contact(self, __a0: object) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeListener(self, __a0: java.util.function.Consumer) -> None: ...

    def settled(self) -> java.util.concurrent.CompletableFuture: ...

    def stable(self) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

