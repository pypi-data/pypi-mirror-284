from typing import List
from typing import overload
import java.lang
import java.util
import java.util.concurrent


class SwingExecutorService(java.util.concurrent.AbstractExecutorService):
    LATER: ghidra.async.SwingExecutorService
    MAYBE_NOW: ghidra.async.SwingExecutorService







    def awaitTermination(self, __a0: long, __a1: java.util.concurrent.TimeUnit) -> bool: ...

    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def execute(self, __a0: java.lang.Runnable) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    @overload
    def invokeAll(self, __a0: java.util.Collection) -> List[object]: ...

    @overload
    def invokeAll(self, __a0: java.util.Collection, __a1: long, __a2: java.util.concurrent.TimeUnit) -> List[object]: ...

    @overload
    def invokeAny(self, __a0: java.util.Collection) -> object: ...

    @overload
    def invokeAny(self, __a0: java.util.Collection, __a1: long, __a2: java.util.concurrent.TimeUnit) -> object: ...

    def isShutdown(self) -> bool: ...

    def isTerminated(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def shutdown(self) -> None: ...

    def shutdownNow(self) -> List[object]: ...

    @overload
    def submit(self, __a0: java.lang.Runnable) -> java.util.concurrent.Future: ...

    @overload
    def submit(self, __a0: java.util.concurrent.Callable) -> java.util.concurrent.Future: ...

    @overload
    def submit(self, __a0: java.lang.Runnable, __a1: object) -> java.util.concurrent.Future: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def terminated(self) -> bool: ...