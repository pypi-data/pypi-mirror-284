from typing import overload
import ghidra.async
import ghidra.util
import java.lang
import java.util.concurrent
import java.util.function


class AsyncReference(object):





    class FilterFunction(object):








        def equals(self, __a0: object) -> bool: ...

        def filter(self, __a0: object, __a1: object, __a2: object) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: object): ...



    def addChangeListener(self, __a0: ghidra.util.TriConsumer) -> None: ...

    def compute(self, __a0: java.util.function.Function, __a1: object) -> object: ...

    def debounced(self, __a0: ghidra.async.AsyncTimer, __a1: long) -> ghidra.async.AsyncReference: ...

    def dispose(self, __a0: java.lang.Throwable) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def filter(self, __a0: ghidra.async.AsyncReference.FilterFunction) -> None: ...

    def get(self) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeChangeListener(self, __a0: ghidra.util.TriConsumer) -> None: ...

    def set(self, __a0: object, __a1: object) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def waitChanged(self) -> java.util.concurrent.CompletableFuture: ...

    def waitUntil(self, __a0: java.util.function.Predicate) -> java.util.concurrent.CompletableFuture: ...

    def waitValue(self, __a0: object) -> java.util.concurrent.CompletableFuture: ...

