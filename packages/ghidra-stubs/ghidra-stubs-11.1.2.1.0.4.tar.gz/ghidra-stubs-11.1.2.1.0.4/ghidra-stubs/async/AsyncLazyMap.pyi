from typing import List
from typing import overload
import ghidra.async
import java.lang
import java.util
import java.util.concurrent
import java.util.function


class AsyncLazyMap(object):





    class KeyedFuture(java.util.concurrent.CompletableFuture):




        @overload
        def __init__(self, __a0: object): ...

        @overload
        def __init__(self, __a0: object, __a1: object): ...



        def acceptEither(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Consumer) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def acceptEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Consumer) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def acceptEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Consumer, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        @staticmethod
        def allOf(__a0: List[java.util.concurrent.CompletableFuture]) -> java.util.concurrent.CompletableFuture: ...

        @staticmethod
        def anyOf(__a0: List[java.util.concurrent.CompletableFuture]) -> java.util.concurrent.CompletableFuture: ...

        def applyToEither(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def applyToEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def applyToEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.Function, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def cancel(self, __a0: bool) -> bool: ...

        def complete(self, __a0: object) -> bool: ...

        @overload
        def completeAsync(self, __a0: java.util.function.Supplier) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def completeAsync(self, __a0: java.util.function.Supplier, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def completeExceptionally(self, __a0: java.lang.Throwable) -> bool: ...

        def completeOnTimeout(self, __a0: object, __a1: long, __a2: java.util.concurrent.TimeUnit) -> java.util.concurrent.CompletableFuture: ...

        @staticmethod
        def completedFuture(__a0: object) -> java.util.concurrent.CompletableFuture: ...

        @staticmethod
        def completedStage(__a0: object) -> java.util.concurrent.CompletionStage: ...

        def copy(self) -> java.util.concurrent.CompletableFuture: ...

        def defaultExecutor(self) -> java.util.concurrent.Executor: ...

        @overload
        @staticmethod
        def delayedExecutor(__a0: long, __a1: java.util.concurrent.TimeUnit) -> java.util.concurrent.Executor: ...

        @overload
        @staticmethod
        def delayedExecutor(__a0: long, __a1: java.util.concurrent.TimeUnit, __a2: java.util.concurrent.Executor) -> java.util.concurrent.Executor: ...

        def equals(self, __a0: object) -> bool: ...

        def exceptionNow(self) -> java.lang.Throwable: ...

        def exceptionally(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def exceptionallyAsync(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def exceptionallyAsync(self, __a0: java.util.function.Function, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def exceptionallyCompose(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def exceptionallyComposeAsync(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def exceptionallyComposeAsync(self, __a0: java.util.function.Function, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        @staticmethod
        def failedFuture(__a0: java.lang.Throwable) -> java.util.concurrent.CompletableFuture: ...

        @staticmethod
        def failedStage(__a0: java.lang.Throwable) -> java.util.concurrent.CompletionStage: ...

        @overload
        def get(self) -> object: ...

        @overload
        def get(self, __a0: long, __a1: java.util.concurrent.TimeUnit) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFuture(self) -> java.util.concurrent.CompletableFuture: ...

        def getKey(self) -> object: ...

        def getNow(self, __a0: object) -> object: ...

        def getNumberOfDependents(self) -> int: ...

        def handle(self, __a0: java.util.function.BiFunction) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def handleAsync(self, __a0: java.util.function.BiFunction) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def handleAsync(self, __a0: java.util.function.BiFunction, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def hashCode(self) -> int: ...

        def isCancelled(self) -> bool: ...

        def isCompletedExceptionally(self) -> bool: ...

        def isDone(self) -> bool: ...

        def join(self) -> object: ...

        def minimalCompletionStage(self) -> java.util.concurrent.CompletionStage: ...

        def newIncompleteFuture(self) -> java.util.concurrent.CompletableFuture: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def obtrudeException(self, __a0: java.lang.Throwable) -> None: ...

        def obtrudeValue(self, __a0: object) -> None: ...

        def orTimeout(self, __a0: long, __a1: java.util.concurrent.TimeUnit) -> java.util.concurrent.CompletableFuture: ...

        def resultNow(self) -> object: ...

        def runAfterBoth(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable) -> java.util.concurrent.CompletionStage: ...

        @overload
        def runAfterBothAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable) -> java.util.concurrent.CompletionStage: ...

        @overload
        def runAfterBothAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def runAfterEither(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def runAfterEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def runAfterEitherAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.lang.Runnable, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        @overload
        @staticmethod
        def runAsync(__a0: java.lang.Runnable) -> java.util.concurrent.CompletableFuture: ...

        @overload
        @staticmethod
        def runAsync(__a0: java.lang.Runnable, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def state(self) -> java.util.concurrent.Future.State: ...

        @overload
        @staticmethod
        def supplyAsync(__a0: java.util.function.Supplier) -> java.util.concurrent.CompletableFuture: ...

        @overload
        @staticmethod
        def supplyAsync(__a0: java.util.function.Supplier, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def thenAccept(self, __a0: java.util.function.Consumer) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenAcceptAsync(self, __a0: java.util.function.Consumer) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenAcceptAsync(self, __a0: java.util.function.Consumer, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def thenAcceptBoth(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiConsumer) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def thenAcceptBothAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiConsumer) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenAcceptBothAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiConsumer, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def thenApply(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenApplyAsync(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenApplyAsync(self, __a0: java.util.function.Function, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def thenCombine(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiFunction) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def thenCombineAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiFunction) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenCombineAsync(self, __a0: java.util.concurrent.CompletionStage, __a1: java.util.function.BiFunction, __a2: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def thenCompose(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def thenComposeAsync(self, __a0: java.util.function.Function) -> java.util.concurrent.CompletionStage: ...

        @overload
        def thenComposeAsync(self, __a0: java.util.function.Function, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletionStage: ...

        def thenRun(self, __a0: java.lang.Runnable) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def thenRunAsync(self, __a0: java.lang.Runnable) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def thenRunAsync(self, __a0: java.lang.Runnable, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        def toCompletableFuture(self) -> java.util.concurrent.CompletableFuture: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        def whenComplete(self, __a0: java.util.function.BiConsumer) -> java.util.concurrent.CompletionStage: ...

        @overload
        def whenCompleteAsync(self, __a0: java.util.function.BiConsumer) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def whenCompleteAsync(self, __a0: java.util.function.BiConsumer, __a1: java.util.concurrent.Executor) -> java.util.concurrent.CompletableFuture: ...

        @property
        def future(self) -> java.util.concurrent.CompletableFuture: ...

        @property
        def key(self) -> object: ...

    def __init__(self, __a0: java.util.Map, __a1: java.util.function.Function): ...



    def clear(self) -> None: ...

    def containsKey(self, __a0: object) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def forget(self, __a0: object) -> java.util.concurrent.CompletableFuture: ...

    def forgetErrors(self, __a0: java.util.function.BiPredicate) -> ghidra.async.AsyncLazyMap: ...

    def forgetValues(self, __a0: java.util.function.BiPredicate) -> ghidra.async.AsyncLazyMap: ...

    @overload
    def get(self, __a0: object) -> ghidra.async.AsyncLazyMap.KeyedFuture: ...

    @overload
    def get(self, __a0: object, __a1: java.util.function.Function) -> ghidra.async.AsyncLazyMap.KeyedFuture: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompletedMap(self) -> java.util.Map: ...

    def getPendingKeySet(self) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def put(self, __a0: object) -> ghidra.async.AsyncLazyMap.KeyedFuture: ...

    @overload
    def put(self, __a0: object, __a1: object) -> bool: ...

    def rememberErrors(self, __a0: java.util.function.BiPredicate) -> ghidra.async.AsyncLazyMap: ...

    def rememberValues(self, __a0: java.util.function.BiPredicate) -> ghidra.async.AsyncLazyMap: ...

    def remove(self, __a0: object) -> object: ...

    def retainKeys(self, __a0: java.util.Collection) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def completedMap(self) -> java.util.Map: ...

    @property
    def pendingKeySet(self) -> java.util.Set: ...