from typing import List
from typing import overload
import ghidra.graph.program
import ghidra.program.model.address
import ghidra.service.graph
import ghidra.util.task
import java.lang
import java.util
import java.util.function
import org.jgrapht


class DataReferenceGraph(ghidra.service.graph.AttributedGraph):
    ADDRESS_ATTRIBUTE: unicode = u'Address'
    DATA_ATTRIBUTE: unicode = u'DataType'
    LABEL_ATTRIBUTE: unicode = u'Label'
    REF_SOURCE_ATTRIBUTE: unicode = u'Source'
    REF_SYMBOL_ATTRIBUTE: unicode = u'Symbol'
    REF_TYPE_ATTRIBUTE: unicode = u'Type'




    class Directions(java.lang.Enum):
        BOTH_WAYS: ghidra.graph.program.DataReferenceGraph.Directions
        FROM_ONLY: ghidra.graph.program.DataReferenceGraph.Directions
        TO_ONLY: ghidra.graph.program.DataReferenceGraph.Directions







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.graph.program.DataReferenceGraph.Directions: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.graph.program.DataReferenceGraph.Directions]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.program.model.listing.Program, __a1: int): ...



    @overload
    def addEdge(self, __a0: ghidra.service.graph.AttributedVertex, __a1: ghidra.service.graph.AttributedVertex) -> ghidra.service.graph.AttributedEdge: ...

    @overload
    def addEdge(self, __a0: object, __a1: object) -> object: ...

    @overload
    def addEdge(self, __a0: ghidra.service.graph.AttributedVertex, __a1: ghidra.service.graph.AttributedVertex, __a2: unicode) -> ghidra.service.graph.AttributedEdge: ...

    @overload
    def addEdge(self, __a0: ghidra.service.graph.AttributedVertex, __a1: ghidra.service.graph.AttributedVertex, __a2: ghidra.service.graph.AttributedEdge) -> bool: ...

    @overload
    def addEdge(self, __a0: object, __a1: object, __a2: object) -> bool: ...

    @overload
    def addVertex(self) -> object: ...

    @overload
    def addVertex(self, __a0: unicode) -> ghidra.service.graph.AttributedVertex: ...

    @overload
    def addVertex(self, __a0: ghidra.service.graph.AttributedVertex) -> bool: ...

    @overload
    def addVertex(self, __a0: object) -> bool: ...

    @overload
    def addVertex(self, __a0: unicode, __a1: unicode) -> ghidra.service.graph.AttributedVertex: ...

    def clone(self) -> object: ...

    @overload
    def containsEdge(self, __a0: object) -> bool: ...

    @overload
    def containsEdge(self, __a0: object, __a1: object) -> bool: ...

    def containsVertex(self, __a0: object) -> bool: ...

    def degreeOf(self, __a0: object) -> int: ...

    def edgeSet(self) -> java.util.Set: ...

    def edgesOf(self, __a0: object) -> java.util.Set: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllEdges(self, __a0: object, __a1: object) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getEdge(self, __a0: object, __a1: object) -> object: ...

    def getEdgeCount(self) -> int: ...

    def getEdgeSource(self, __a0: object) -> object: ...

    def getEdgeSupplier(self) -> java.util.function.Supplier: ...

    def getEdgeTarget(self, __a0: object) -> object: ...

    def getEdgeWeight(self, __a0: object) -> float: ...

    def getGraphType(self) -> ghidra.service.graph.GraphType: ...

    def getName(self) -> unicode: ...

    def getType(self) -> org.jgrapht.GraphType: ...

    def getVertex(self, __a0: unicode) -> ghidra.service.graph.AttributedVertex: ...

    def getVertexCount(self) -> int: ...

    def getVertexSupplier(self) -> java.util.function.Supplier: ...

    def graphFrom(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.graph.program.DataReferenceGraph.Directions, __a2: ghidra.util.task.TaskMonitor) -> ghidra.service.graph.AttributedVertex: ...

    def hashCode(self) -> int: ...

    def inDegreeOf(self, __a0: object) -> int: ...

    def incomingEdgesOf(self, __a0: object) -> java.util.Set: ...

    def iterables(self) -> org.jgrapht.GraphIterables: ...

    def makeName(self, __a0: ghidra.program.model.address.Address) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def outDegreeOf(self, __a0: object) -> int: ...

    def outgoingEdgesOf(self, __a0: object) -> java.util.Set: ...

    @overload
    def removeAllEdges(self, __a0: java.util.Collection) -> bool: ...

    @overload
    def removeAllEdges(self, __a0: object, __a1: object) -> java.util.Set: ...

    def removeAllVertices(self, __a0: java.util.Collection) -> bool: ...

    @overload
    def removeEdge(self, __a0: object) -> bool: ...

    @overload
    def removeEdge(self, __a0: object, __a1: object) -> object: ...

    def removeVertex(self, __a0: object) -> bool: ...

    def setEdgeSupplier(self, __a0: java.util.function.Supplier) -> None: ...

    @overload
    def setEdgeWeight(self, __a0: object, __a1: float) -> None: ...

    @overload
    def setEdgeWeight(self, __a0: object, __a1: object, __a2: float) -> None: ...

    def setVertexSupplier(self, __a0: java.util.function.Supplier) -> None: ...

    def toString(self) -> unicode: ...

    def vertexSet(self) -> java.util.Set: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

