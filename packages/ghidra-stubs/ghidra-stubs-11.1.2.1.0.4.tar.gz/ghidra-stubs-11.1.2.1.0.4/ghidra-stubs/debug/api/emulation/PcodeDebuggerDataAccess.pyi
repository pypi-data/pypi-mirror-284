from typing import overload
import ghidra.pcode.exec.trace.data
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.model.memory
import java.lang
import java.nio


class PcodeDebuggerDataAccess(ghidra.pcode.exec.trace.data.PcodeTraceDataAccess, object):








    def equals(self, __a0: object) -> bool: ...

    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: java.nio.ByteBuffer) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getPropertyAccess(self, __a0: unicode, __a1: java.lang.Class) -> ghidra.pcode.exec.trace.data.PcodeTracePropertyAccess: ...

    def getViewportState(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.trace.model.memory.TraceMemoryState: ...

    def hashCode(self) -> int: ...

    def intersectUnknown(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSetView: ...

    def intersectViewKnown(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.address.AddressSetView: ...

    def isLive(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: java.nio.ByteBuffer) -> int: ...

    def setState(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    def toString(self) -> unicode: ...

    def translate(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def live(self) -> bool: ...