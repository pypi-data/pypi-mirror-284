from typing import List
from typing import overload
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import ghidra.trace.model.guest
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.stack
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.util.task
import java.lang
import java.util
import java.util.concurrent


class TraceRecorder(object):








    def addListener(self, __a0: ghidra.debug.api.model.TraceRecorderListener) -> None: ...

    @overload
    def captureDataTypes(self, __a0: ghidra.dbg.target.TargetDataTypeNamespace, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def captureDataTypes(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def captureSymbols(self, __a0: ghidra.dbg.target.TargetSymbolNamespace, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def captureSymbols(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    def captureThreadRegisters(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: java.util.Set) -> java.util.concurrent.CompletableFuture: ...

    def collectBreakpointContainers(self, __a0: ghidra.dbg.target.TargetThread) -> List[object]: ...

    def collectBreakpoints(self, __a0: ghidra.dbg.target.TargetThread) -> List[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def flushTransactions(self) -> java.util.concurrent.CompletableFuture: ...

    def forceSnapshot(self) -> ghidra.trace.model.time.TraceSnapshot: ...

    def getAccessibleMemory(self) -> ghidra.program.model.address.AddressSetView: ...

    def getClass(self) -> java.lang.Class: ...

    def getFocus(self) -> ghidra.dbg.target.TargetObject: ...

    def getLiveTargetThreads(self) -> java.util.Set: ...

    def getMemoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    def getRegisterMapper(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.debug.api.model.DebuggerRegisterMapper: ...

    def getSnap(self) -> long: ...

    def getSupportedBreakpointKinds(self) -> java.util.Set: ...

    def getTarget(self) -> ghidra.dbg.target.TargetObject: ...

    def getTargetBreakpoint(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.dbg.target.TargetBreakpointLocation: ...

    def getTargetMemoryRegion(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> ghidra.dbg.target.TargetMemoryRegion: ...

    def getTargetModule(self, __a0: ghidra.trace.model.modules.TraceModule) -> ghidra.dbg.target.TargetModule: ...

    @overload
    def getTargetObject(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def getTargetObject(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.dbg.target.TargetObject: ...

    def getTargetRegisterBanks(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int) -> java.util.Set: ...

    def getTargetSection(self, __a0: ghidra.trace.model.modules.TraceSection) -> ghidra.dbg.target.TargetSection: ...

    def getTargetStackFrame(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int) -> ghidra.dbg.target.TargetStackFrame: ...

    def getTargetThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.dbg.target.TargetThread: ...

    @overload
    def getTargetThreadState(self, __a0: ghidra.dbg.target.TargetThread) -> ghidra.dbg.target.TargetExecutionStateful.TargetExecutionState: ...

    @overload
    def getTargetThreadState(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.dbg.target.TargetExecutionStateful.TargetExecutionState: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getTraceBreakpoint(self, __a0: ghidra.dbg.target.TargetBreakpointLocation) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def getTraceMemoryRegion(self, __a0: ghidra.dbg.target.TargetMemoryRegion) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def getTraceModule(self, __a0: ghidra.dbg.target.TargetModule) -> ghidra.trace.model.modules.TraceModule: ...

    def getTraceObject(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.trace.model.target.TraceObject: ...

    def getTraceSection(self, __a0: ghidra.dbg.target.TargetSection) -> ghidra.trace.model.modules.TraceSection: ...

    def getTraceStackFrame(self, __a0: ghidra.dbg.target.TargetStackFrame) -> ghidra.trace.model.stack.TraceStackFrame: ...

    def getTraceStackFrameForSuccessor(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.trace.model.stack.TraceStackFrame: ...

    def getTraceThread(self, __a0: ghidra.dbg.target.TargetThread) -> ghidra.trace.model.thread.TraceThread: ...

    def getTraceThreadForSuccessor(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.trace.model.thread.TraceThread: ...

    def hashCode(self) -> int: ...

    def init(self) -> java.util.concurrent.CompletableFuture: ...

    def isMemoryOnTarget(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def isRecording(self) -> bool: ...

    @overload
    def isRegisterBankAccessible(self, __a0: ghidra.dbg.target.TargetRegisterBank) -> bool: ...

    @overload
    def isRegisterBankAccessible(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int) -> bool: ...

    def isRegisterOnTarget(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.Register: ...

    def isSupportsActivation(self) -> bool: ...

    def isSupportsFocus(self) -> bool: ...

    def isVariableOnTarget(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: ghidra.program.model.address.Address, __a4: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readMemory(self, __a0: ghidra.program.model.address.Address, __a1: int) -> java.util.concurrent.CompletableFuture: ...

    def readMemoryBlocks(self, __a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.util.task.TaskMonitor) -> java.util.concurrent.CompletableFuture: ...

    def removeListener(self, __a0: ghidra.debug.api.model.TraceRecorderListener) -> None: ...

    def requestActivation(self, __a0: ghidra.dbg.target.TargetObject) -> java.util.concurrent.CompletableFuture: ...

    def requestFocus(self, __a0: ghidra.dbg.target.TargetObject) -> java.util.concurrent.CompletableFuture: ...

    def stopRecording(self) -> None: ...

    @staticmethod
    def targetToTraceBreakpointKind(__a0: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind) -> ghidra.trace.model.breakpoint.TraceBreakpointKind: ...

    @staticmethod
    def targetToTraceBreakpointKinds(__a0: java.util.Collection) -> java.util.Set: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def traceToTargetBreakpointKind(__a0: ghidra.trace.model.breakpoint.TraceBreakpointKind) -> ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind: ...

    @staticmethod
    def traceToTargetBreakpointKinds(__a0: java.util.Collection) -> java.util.Set: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeMemory(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

    def writeRegister(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: ghidra.program.model.address.Address, __a4: List[int]) -> java.util.concurrent.CompletableFuture: ...

    def writeThreadRegisters(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

    def writeVariable(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.thread.TraceThread, __a2: int, __a3: ghidra.program.model.address.Address, __a4: List[int]) -> java.util.concurrent.CompletableFuture: ...

    @property
    def accessibleMemory(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def focus(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def liveTargetThreads(self) -> java.util.Set: ...

    @property
    def memoryMapper(self) -> ghidra.debug.api.model.DebuggerMemoryMapper: ...

    @property
    def recording(self) -> bool: ...

    @property
    def snap(self) -> long: ...

    @property
    def supportedBreakpointKinds(self) -> java.util.Set: ...

    @property
    def supportsActivation(self) -> bool: ...

    @property
    def supportsFocus(self) -> bool: ...

    @property
    def target(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...