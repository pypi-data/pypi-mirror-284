from typing import overload
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.util
import ghidra.trace.model
import java.lang


class MapEntry(object):








    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFromLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getFromObject(self) -> object: ...

    def getFromRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getFromTrace(self) -> ghidra.trace.model.Trace: ...

    def getFromTraceLocation(self) -> ghidra.trace.model.TraceLocation: ...

    def getMappingLength(self) -> long: ...

    def getToObject(self) -> object: ...

    def getToProgram(self) -> ghidra.program.model.listing.Program: ...

    def getToProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getToRange(self) -> ghidra.program.model.address.AddressRange: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def fromLifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def fromObject(self) -> object: ...

    @property
    def fromRange(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def fromTrace(self) -> ghidra.trace.model.Trace: ...

    @property
    def fromTraceLocation(self) -> ghidra.trace.model.TraceLocation: ...

    @property
    def mappingLength(self) -> long: ...

    @property
    def toObject(self) -> object: ...

    @property
    def toProgram(self) -> ghidra.program.model.listing.Program: ...

    @property
    def toProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def toRange(self) -> ghidra.program.model.address.AddressRange: ...