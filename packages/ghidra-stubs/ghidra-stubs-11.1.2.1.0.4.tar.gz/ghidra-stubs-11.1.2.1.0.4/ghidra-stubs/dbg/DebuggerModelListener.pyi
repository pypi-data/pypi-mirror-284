from typing import List
from typing import overload
import ghidra.dbg
import ghidra.dbg.error
import ghidra.dbg.target
import ghidra.program.model.address
import java.lang
import java.util


class DebuggerModelListener(object):








    def attributesChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Collection, __a2: java.util.Map) -> None: ...

    def breakpointHit(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject, __a2: ghidra.dbg.target.TargetStackFrame, __a3: ghidra.dbg.target.TargetBreakpointSpec, __a4: ghidra.dbg.target.TargetBreakpointLocation) -> None: ...

    def catastrophic(self, __a0: java.lang.Throwable) -> None: ...

    @overload
    def consoleOutput(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetConsole.Channel, __a2: unicode) -> None: ...

    @overload
    def consoleOutput(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetConsole.Channel, __a2: List[int]) -> None: ...

    def created(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def elementsChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Collection, __a2: java.util.Map) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def event(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetThread, __a2: ghidra.dbg.target.TargetEventScope.TargetEventType, __a3: unicode, __a4: List[object]) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def invalidateCacheRequested(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def invalidated(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject, __a2: unicode) -> None: ...

    def memoryReadError(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.dbg.error.DebuggerMemoryAccessException) -> None: ...

    def memoryUpdated(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.address.Address, __a2: List[int]) -> None: ...

    def modelClosed(self, __a0: ghidra.dbg.DebuggerModelClosedReason) -> None: ...

    def modelOpened(self) -> None: ...

    def modelStateChanged(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def registersUpdated(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def rootAdded(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

