from typing import Iterator
from typing import List
from typing import overload
import ghidra.dbg.attributes
import ghidra.dbg.util
import java.lang
import java.util
import java.util.function
import java.util.stream
import org.apache.commons.collections4.list


class TargetStringList(List[object], object):
    EMPTY: ghidra.dbg.attributes.TargetStringList




    class ImmutableTargetStringList(org.apache.commons.collections4.list.AbstractListDecorator, ghidra.dbg.attributes.TargetStringList):




        @overload
        def __init__(self, __a0: List[unicode]): ...

        @overload
        def __init__(self, __a0: java.util.Collection): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> ghidra.dbg.attributes.TargetStringList: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> ghidra.dbg.attributes.TargetStringList: ...

        @overload
        @staticmethod
        def of(__a0: List[unicode]) -> ghidra.dbg.attributes.TargetStringList: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmptyTargetStringList(ghidra.dbg.util.CollectionUtils.AbstractEmptyList, ghidra.dbg.attributes.TargetStringList):




        def __init__(self): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> ghidra.dbg.attributes.TargetStringList: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> ghidra.dbg.attributes.TargetStringList: ...

        @overload
        @staticmethod
        def of(__a0: List[unicode]) -> ghidra.dbg.attributes.TargetStringList: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class MutableTargetStringList(java.util.ArrayList, ghidra.dbg.attributes.TargetStringList):




        def __init__(self): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def clone(self) -> object: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> ghidra.dbg.attributes.TargetStringList: ...

        def ensureCapacity(self, __a0: int) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> ghidra.dbg.attributes.TargetStringList: ...

        @overload
        @staticmethod
        def of(__a0: List[unicode]) -> ghidra.dbg.attributes.TargetStringList: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        def trimToSize(self) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...





    def __iter__(self): ...

    @overload
    def add(self, __a0: object) -> bool: ...

    @overload
    def add(self, __a0: int, __a1: object) -> None: ...

    @overload
    def addAll(self, __a0: java.util.Collection) -> bool: ...

    @overload
    def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

    def addFirst(self, __a0: object) -> None: ...

    def addLast(self, __a0: object) -> None: ...

    def clear(self) -> None: ...

    def contains(self, __a0: object) -> bool: ...

    def containsAll(self, __a0: java.util.Collection) -> bool: ...

    @staticmethod
    def copyOf(__a0: java.util.Collection) -> ghidra.dbg.attributes.TargetStringList: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def get(self, __a0: int) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getFirst(self) -> object: ...

    def getLast(self) -> object: ...

    def hashCode(self) -> int: ...

    def indexOf(self, __a0: object) -> int: ...

    def isEmpty(self) -> bool: ...

    def iterator(self) -> java.util.Iterator: ...

    def lastIndexOf(self, __a0: object) -> int: ...

    @overload
    def listIterator(self) -> java.util.ListIterator: ...

    @overload
    def listIterator(self, __a0: int) -> java.util.ListIterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of() -> ghidra.dbg.attributes.TargetStringList: ...

    @overload
    @staticmethod
    def of(__a0: List[unicode]) -> ghidra.dbg.attributes.TargetStringList: ...

    def parallelStream(self) -> java.util.stream.Stream: ...

    def removeAll(self, __a0: java.util.Collection) -> bool: ...

    def removeFirst(self) -> object: ...

    def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

    def removeLast(self) -> object: ...

    def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

    def retainAll(self, __a0: java.util.Collection) -> bool: ...

    def reversed(self) -> java.util.SequencedCollection: ...

    def set(self, __a0: int, __a1: object) -> object: ...

    def size(self) -> int: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def stream(self) -> java.util.stream.Stream: ...

    def subList(self, __a0: int, __a1: int) -> List[object]: ...

    @overload
    def toArray(self) -> List[object]: ...

    @overload
    def toArray(self, __a0: List[object]) -> List[object]: ...

    @overload
    def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def first(self) -> object: ...

    @property
    def last(self) -> object: ...