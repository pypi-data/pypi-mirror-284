from typing import List
from typing import overload
import com.sun.jdi
import com.sun.jdi.connect
import ghidra.dbg.jdi.manager
import java.lang
import java.util
import java.util.concurrent


class JdiManager(java.lang.AutoCloseable, object):





    class Channel(java.lang.Enum):
        STDERR: ghidra.dbg.jdi.manager.JdiManager.Channel
        STDOUT: ghidra.dbg.jdi.manager.JdiManager.Channel







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.dbg.jdi.manager.JdiManager.Channel: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.dbg.jdi.manager.JdiManager.Channel]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addConsoleOutputListener(self, __a0: ghidra.dbg.jdi.manager.JdiConsoleOutputListener) -> None: ...

    def addEventsListener(self, __a0: com.sun.jdi.VirtualMachine, __a1: ghidra.dbg.jdi.manager.JdiEventsListener) -> None: ...

    def addStateListener(self, __a0: com.sun.jdi.VirtualMachine, __a1: ghidra.dbg.jdi.manager.JdiStateListener) -> None: ...

    def addTargetOutputListener(self, __a0: ghidra.dbg.jdi.manager.JdiTargetOutputListener) -> None: ...

    @overload
    def addVM(self, __a0: com.sun.jdi.connect.Connector, __a1: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def addVM(self, __a0: com.sun.jdi.connect.Connector, __a1: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

    def close(self) -> None: ...

    def console(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    def consoleCapture(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventHandler(self, __a0: com.sun.jdi.VirtualMachine) -> ghidra.dbg.jdi.manager.JdiEventHandler: ...

    def getKnownVMs(self) -> java.util.Map: ...

    def getVM(self, __a0: unicode) -> com.sun.jdi.VirtualMachine: ...

    def getVirtualMachineManager(self) -> com.sun.jdi.VirtualMachineManager: ...

    def hashCode(self) -> int: ...

    def listAvailableProcesses(self) -> java.util.concurrent.CompletableFuture: ...

    def listVMs(self) -> java.util.concurrent.CompletableFuture: ...

    @staticmethod
    def newInstance() -> ghidra.dbg.jdi.manager.JdiManager: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeConsoleOutputListener(self, __a0: ghidra.dbg.jdi.manager.JdiConsoleOutputListener) -> None: ...

    def removeEventsListener(self, __a0: com.sun.jdi.VirtualMachine, __a1: ghidra.dbg.jdi.manager.JdiEventsListener) -> None: ...

    def removeStateListener(self, __a0: com.sun.jdi.VirtualMachine, __a1: ghidra.dbg.jdi.manager.JdiStateListener) -> None: ...

    def removeTargetOutputListener(self, __a0: ghidra.dbg.jdi.manager.JdiTargetOutputListener) -> None: ...

    def removeVM(self, __a0: com.sun.jdi.VirtualMachine) -> java.util.concurrent.CompletableFuture: ...

    def sendInterruptNow(self) -> None: ...

    def terminate(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def knownVMs(self) -> java.util.Map: ...

    @property
    def virtualMachineManager(self) -> com.sun.jdi.VirtualMachineManager: ...