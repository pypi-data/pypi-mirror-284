from typing import List
from typing import overload
import ghidra.dbg.target
import ghidra.dbg.target.schema
import ghidra.dbg.util
import java.lang
import java.util


class DefaultTargetObjectSchema(object, ghidra.dbg.target.schema.TargetObjectSchema, java.lang.Comparable):
    DEFAULT_ATTRIBUTE_RESYNC: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode
    DEFAULT_ELEMENT_RESYNC: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode




    class DefaultAttributeSchema(object, ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema, java.lang.Comparable):
        DEFAULT_ANY: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema
        DEFAULT_OBJECT: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema
        DEFAULT_VOID: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema



        def __init__(self, __a0: unicode, __a1: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName, __a2: bool, __a3: bool, __a4: bool): ...



        @overload
        def compareTo(self, __a0: ghidra.dbg.target.schema.DefaultTargetObjectSchema.DefaultAttributeSchema) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getName(self) -> unicode: ...

        def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

        def hashCode(self) -> int: ...

        def isFixed(self) -> bool: ...

        def isHidden(self) -> bool: ...

        def isRequired(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def fixed(self) -> bool: ...

        @property
        def hidden(self) -> bool: ...

        @property
        def name(self) -> unicode: ...

        @property
        def required(self) -> bool: ...

        @property
        def schema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...





    def checkAliasedAttribute(self, __a0: unicode) -> unicode: ...

    @overload
    def compareTo(self, __a0: ghidra.dbg.target.schema.DefaultTargetObjectSchema) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeFrameLevel(self, __a0: List[object]) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getAttributeAliases(self) -> java.util.Map: ...

    def getAttributeResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    def getAttributeSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    def getAttributeSchemas(self) -> java.util.Map: ...

    def getChildSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getChildSchemaName(self, __a0: unicode) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def getClass(self) -> java.lang.Class: ...

    def getContext(self) -> ghidra.dbg.target.schema.SchemaContext: ...

    def getDefaultAttributeSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    def getDefaultElementSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def getElementResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    def getElementSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def getElementSchemas(self) -> java.util.Map: ...

    def getInterfaces(self) -> java.util.Set: ...

    def getName(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def getSuccessorSchema(self, __a0: List[object]) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getSuccessorSchemas(self, __a0: List[object]) -> List[object]: ...

    def getType(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isAssignableFrom(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema) -> bool: ...

    def isCanonicalContainer(self) -> bool: ...

    def isHidden(self, __a0: unicode) -> bool: ...

    def matcherForSuitable(self, __a0: java.lang.Class, __a1: List[object]) -> ghidra.dbg.util.PathPredicates: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def searchFor(self, __a0: java.lang.Class, __a1: bool) -> ghidra.dbg.util.PathMatcher: ...

    @overload
    def searchFor(self, __a0: java.lang.Class, __a1: List[object], __a2: bool) -> ghidra.dbg.util.PathMatcher: ...

    def searchForAncestor(self, __a0: java.lang.Class, __a1: List[object]) -> List[object]: ...

    def searchForAncestorContainer(self, __a0: java.lang.Class, __a1: List[object]) -> List[object]: ...

    def searchForCanonicalContainer(self, __a0: java.lang.Class) -> List[object]: ...

    def searchForRegisterContainer(self, __a0: int, __a1: List[object]) -> ghidra.dbg.util.PathPredicates: ...

    @overload
    def searchForSuitable(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema, __a1: List[object]) -> List[object]: ...

    @overload
    def searchForSuitable(self, __a0: java.lang.Class, __a1: List[object]) -> List[object]: ...

    def searchForSuitableContainer(self, __a0: java.lang.Class, __a1: List[object]) -> List[object]: ...

    def toString(self) -> unicode: ...

    def validateAttributeDelta(self, __a0: List[object], __a1: ghidra.dbg.util.CollectionUtils.Delta, __a2: bool) -> None: ...

    def validateElementDelta(self, __a0: List[object], __a1: ghidra.dbg.util.CollectionUtils.Delta, __a2: bool) -> None: ...

    def validateRequiredAttributes(self, __a0: ghidra.dbg.target.TargetObject, __a1: bool) -> None: ...

    def validateTypeAndInterfaces(self, __a0: object, __a1: List[object], __a2: unicode, __a3: bool) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def attributeAliases(self) -> java.util.Map: ...

    @property
    def attributeResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    @property
    def attributeSchemas(self) -> java.util.Map: ...

    @property
    def canonicalContainer(self) -> bool: ...

    @property
    def context(self) -> ghidra.dbg.target.schema.SchemaContext: ...

    @property
    def defaultAttributeSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    @property
    def defaultElementSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    @property
    def elementResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    @property
    def elementSchemas(self) -> java.util.Map: ...

    @property
    def interfaces(self) -> java.util.Set: ...

    @property
    def name(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    @property
    def type(self) -> java.lang.Class: ...