from typing import List
from typing import overload
import ghidra.dbg
import ghidra.dbg.target
import ghidra.dbg.target.schema
import java.lang
import java.util
import java.util.concurrent


class TargetBreakpointSpec(ghidra.dbg.target.TargetObject, ghidra.dbg.target.TargetTogglable, object):
    ALL_INTERFACES: java.util.Set
    AS_BPT_ATTRIBUTE_NAME: unicode = u'_bpt'
    CONTAINER_ATTRIBUTE_NAME: unicode = u'_container'
    DISPLAY_ATTRIBUTE_NAME: unicode = u'_display'
    ENABLED_ATTRIBUTE_NAME: unicode = u'_enabled'
    EXPRESSION_ATTRIBUTE_NAME: unicode = u'_expression'
    INTERFACES_BY_NAME: java.util.Map
    KINDS_ATTRIBUTE_NAME: unicode = u'_kinds'
    KIND_ATTRIBUTE_NAME: unicode = u'_kind'
    MODIFIED_ATTRIBUTE_NAME: unicode = u'_modified'
    ORDER_ATTRIBUTE_NAME: unicode = u'_order'
    PREFIX_INVISIBLE: unicode = u'_'
    SHORT_DISPLAY_ATTRIBUTE_NAME: unicode = u'_short_display'
    TYPE_ATTRIBUTE_NAME: unicode = u'_type'
    VALUE_ATTRIBUTE_NAME: unicode = u'_value'




    class TargetBreakpointAction(object):








        def breakpointHit(self, __a0: ghidra.dbg.target.TargetBreakpointSpec, __a1: ghidra.dbg.target.TargetObject, __a2: ghidra.dbg.target.TargetStackFrame, __a3: ghidra.dbg.target.TargetBreakpointLocation) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TargetBreakpointKind(java.lang.Enum):
        HW_EXECUTE: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind
        READ: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind
        SW_EXECUTE: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind
        WRITE: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointKind]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addAction(self, __a0: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointAction) -> None: ...

    def as(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def compareTo(self, __a0: ghidra.dbg.target.TargetObject) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeHashCode(self) -> int: ...

    def disable(self) -> java.util.concurrent.CompletableFuture: ...

    def doEquals(self, __a0: object) -> bool: ...

    def enable(self) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def fetchAttribute(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChild(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChildrenSupporting(self, __a0: java.lang.Class) -> java.util.concurrent.CompletableFuture: ...

    def fetchElement(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    def getCachedAttribute(self, __a0: unicode) -> object: ...

    def getCachedAttributes(self) -> java.util.Map: ...

    def getCachedElements(self) -> java.util.Map: ...

    def getCachedSuitable(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def getCallbackAttributes(self) -> java.util.Map: ...

    def getCallbackElements(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getContainer(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer: ...

    def getDisplay(self) -> unicode: ...

    def getExpression(self) -> unicode: ...

    def getIndex(self) -> unicode: ...

    def getInterfaceNames(self) -> java.util.Collection: ...

    def getInterfaces(self) -> java.util.Collection: ...

    @staticmethod
    def getInterfacesByName(__a0: java.util.Collection) -> List[object]: ...

    def getJoinedPath(self, __a0: unicode) -> unicode: ...

    def getKind(self) -> unicode: ...

    def getKinds(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer.TargetBreakpointKindSet: ...

    def getLocations(self) -> java.util.concurrent.CompletableFuture: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getName(self) -> unicode: ...

    def getOrder(self) -> int: ...

    def getParent(self) -> ghidra.dbg.target.TargetObject: ...

    def getPath(self) -> List[object]: ...

    def getProtocolID(self) -> object: ...

    def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getShortDisplay(self) -> unicode: ...

    @overload
    def getSuccessor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def getSuccessor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObject: ...

    def getType(self) -> unicode: ...

    def getTypeHint(self) -> unicode: ...

    def getTypedAttributeNowByName(self, __a0: unicode, __a1: java.lang.Class, __a2: object) -> object: ...

    def getValue(self) -> object: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def initInterfacesByName() -> java.util.Map: ...

    def invalidateCaches(self) -> java.util.concurrent.CompletableFuture: ...

    def isEnabled(self) -> bool: ...

    def isModified(self) -> bool: ...

    def isRoot(self) -> bool: ...

    def isValid(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeAction(self, __a0: ghidra.dbg.target.TargetBreakpointSpec.TargetBreakpointAction) -> None: ...

    @overload
    def resync(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def resync(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior, __a1: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    def toggle(self, __a0: bool) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def cachedAttributes(self) -> java.util.Map: ...

    @property
    def cachedElements(self) -> java.util.Map: ...

    @property
    def callbackAttributes(self) -> java.util.Map: ...

    @property
    def callbackElements(self) -> java.util.Map: ...

    @property
    def container(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer: ...

    @property
    def display(self) -> unicode: ...

    @property
    def enabled(self) -> bool: ...

    @property
    def expression(self) -> unicode: ...

    @property
    def index(self) -> unicode: ...

    @property
    def interfaceNames(self) -> java.util.Collection: ...

    @property
    def interfaces(self) -> java.util.Collection: ...

    @property
    def kind(self) -> unicode: ...

    @property
    def kinds(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer.TargetBreakpointKindSet: ...

    @property
    def locations(self) -> java.util.concurrent.CompletableFuture: ...

    @property
    def model(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def name(self) -> unicode: ...

    @property
    def order(self) -> int: ...

    @property
    def parent(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def path(self) -> List[object]: ...

    @property
    def protocolID(self) -> object: ...

    @property
    def root(self) -> bool: ...

    @property
    def schema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def shortDisplay(self) -> unicode: ...

    @property
    def type(self) -> unicode: ...

    @property
    def typeHint(self) -> unicode: ...

    @property
    def valid(self) -> bool: ...

    @property
    def value(self) -> object: ...