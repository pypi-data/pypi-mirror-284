from typing import overload
import ghidra.pcodeCPort.slghpattern
import ghidra.program.model.pcode
import java.lang


class Pattern(object):




    def __init__(self): ...



    def alwaysFalse(self) -> bool: ...

    def alwaysInstructionTrue(self) -> bool: ...

    def alwaysTrue(self) -> bool: ...

    def commonSubPattern(self, __a0: ghidra.pcodeCPort.slghpattern.Pattern, __a1: int) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    def dispose(self) -> None: ...

    def doAnd(self, __a0: ghidra.pcodeCPort.slghpattern.Pattern, __a1: int) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    def doOr(self, __a0: ghidra.pcodeCPort.slghpattern.Pattern, __a1: int) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    def encode(self, __a0: ghidra.program.model.pcode.Encoder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisjoint(self, __a0: int) -> ghidra.pcodeCPort.slghpattern.DisjointPattern: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numDisjoint(self) -> int: ...

    def shiftInstruction(self, __a0: int) -> None: ...

    def simplifyClone(self) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

