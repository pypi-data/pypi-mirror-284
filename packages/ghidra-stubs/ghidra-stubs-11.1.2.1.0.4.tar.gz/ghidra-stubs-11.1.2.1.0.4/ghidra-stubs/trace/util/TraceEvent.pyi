from typing import List
from typing import overload
import ghidra.framework.model
import ghidra.trace.util
import java.lang
import java.util


class TraceEvent(ghidra.framework.model.EventType, object):





    class TraceTypeCategoryStringEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        TYPE_CATEGORY_RENAMED: ghidra.trace.util.TraceEvent.TraceTypeCategoryStringEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceTypeCategoryStringEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceTypeCategoryStringEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBookmarkTypeEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BOOKMARK_TYPE_ADDED: ghidra.trace.util.TraceEvent.TraceBookmarkTypeEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBookmarkTypeEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBookmarkTypeEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceInstructionBoolEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        INSTRUCTION_FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.util.TraceEvent.TraceInstructionBoolEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceInstructionBoolEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceInstructionBoolEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceModuleEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        MODULE_ADDED: ghidra.trace.util.TraceEvent.TraceModuleEvent
        MODULE_CHANGED: ghidra.trace.util.TraceEvent.TraceModuleEvent
        MODULE_DELETED: ghidra.trace.util.TraceEvent.TraceModuleEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceModuleEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceModuleEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceObjectEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        OBJECT_CREATED: ghidra.trace.util.TraceEvent.TraceObjectEvent
        OBJECT_DELETED: ghidra.trace.util.TraceEvent.TraceObjectEvent
        OBJECT_LIFE_CHANGED: ghidra.trace.util.TraceEvent.TraceObjectEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceObjectEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceObjectEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolAddressEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_ADDRESS_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolAddressEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolAddressEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolAddressEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSectionEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SECTION_ADDED: ghidra.trace.util.TraceEvent.TraceSectionEvent
        SECTION_CHANGED: ghidra.trace.util.TraceEvent.TraceSectionEvent
        SECTION_DELETED: ghidra.trace.util.TraceEvent.TraceSectionEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSectionEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSectionEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceOverlaySpaceEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        OVERLAY_ADDED: ghidra.trace.util.TraceEvent.TraceOverlaySpaceEvent
        OVERLAY_DELETED: ghidra.trace.util.TraceEvent.TraceOverlaySpaceEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceOverlaySpaceEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceOverlaySpaceEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolSymEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_PRIMARY_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolSymEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolSymEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolSymEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceTypeArchiveEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SOURCE_TYPE_ARCHIVE_ADDED: ghidra.trace.util.TraceEvent.TraceTypeArchiveEvent
        SOURCE_TYPE_ARCHIVE_CHANGED: ghidra.trace.util.TraceEvent.TraceTypeArchiveEvent
        SOURCE_TYPE_ARCHIVE_DELETED: ghidra.trace.util.TraceEvent.TraceTypeArchiveEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceTypeArchiveEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceTypeArchiveEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TracePlatformEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        PLATFORM_ADDED: ghidra.trace.util.TraceEvent.TracePlatformEvent
        PLATFORM_DELETED: ghidra.trace.util.TraceEvent.TracePlatformEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TracePlatformEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TracePlatformEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCodeDataSettingsEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        CODE_DATA_SETTINGS_CHANGED: ghidra.trace.util.TraceEvent.TraceCodeDataSettingsEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCodeDataSettingsEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCodeDataSettingsEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceTypeCategoryEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        TYPE_CATEGORY_ADDED: ghidra.trace.util.TraceEvent.TraceTypeCategoryEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceTypeCategoryEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceTypeCategoryEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSnapshotEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SNAPSHOT_ADDED: ghidra.trace.util.TraceEvent.TraceSnapshotEvent
        SNAPSHOT_CHANGED: ghidra.trace.util.TraceEvent.TraceSnapshotEvent
        SNAPSHOT_DELETED: ghidra.trace.util.TraceEvent.TraceSnapshotEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSnapshotEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSnapshotEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBreakpointLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BREAKPOINT_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceBreakpointLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBreakpointLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBreakpointLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCompositeDataEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        COMPOSITE_DATA_ADDED: ghidra.trace.util.TraceEvent.TraceCompositeDataEvent
        COMPOSITE_DATA_REMOVED: ghidra.trace.util.TraceEvent.TraceCompositeDataEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCompositeDataEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCompositeDataEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolSourceEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_SOURCE_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolSourceEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolSourceEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolSourceEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceDataTypePathEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        DATA_TYPE_DELETED: ghidra.trace.util.TraceEvent.TraceDataTypePathEvent
        DATA_TYPE_MOVED: ghidra.trace.util.TraceEvent.TraceDataTypePathEvent
        DATA_TYPE_REPLACED: ghidra.trace.util.TraceEvent.TraceDataTypePathEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceDataTypePathEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceDataTypePathEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceMappingEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        MAPPING_ADDED: ghidra.trace.util.TraceEvent.TraceMappingEvent
        MAPPING_DELETED: ghidra.trace.util.TraceEvent.TraceMappingEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceMappingEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceMappingEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBreakpointEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BREAKPOINT_ADDED: ghidra.trace.util.TraceEvent.TraceBreakpointEvent
        BREAKPOINT_CHANGED: ghidra.trace.util.TraceEvent.TraceBreakpointEvent
        BREAKPOINT_DELETED: ghidra.trace.util.TraceEvent.TraceBreakpointEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBreakpointEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBreakpointEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCodeFragmentEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        CODE_FRAGMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCodeFragmentEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCodeFragmentEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCodeFragmentEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceInstructionFlowEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        INSTRUCTION_FLOW_OVERRIDE_CHANGED: ghidra.trace.util.TraceEvent.TraceInstructionFlowEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceInstructionFlowEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceInstructionFlowEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCodeEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        CODE_ADDED: ghidra.trace.util.TraceEvent.TraceCodeEvent
        CODE_REMOVED: ghidra.trace.util.TraceEvent.TraceCodeEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCodeEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCodeEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceThreadEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        THREAD_ADDED: ghidra.trace.util.TraceEvent.TraceThreadEvent
        THREAD_CHANGED: ghidra.trace.util.TraceEvent.TraceThreadEvent
        THREAD_DELETED: ghidra.trace.util.TraceEvent.TraceThreadEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceThreadEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceThreadEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBookmarkEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BOOKMARK_ADDED: ghidra.trace.util.TraceEvent.TraceBookmarkEvent
        BOOKMARK_CHANGED: ghidra.trace.util.TraceEvent.TraceBookmarkEvent
        BOOKMARK_DELETED: ghidra.trace.util.TraceEvent.TraceBookmarkEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBookmarkEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBookmarkEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceObjectValueLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        VALUE_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceObjectValueLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceObjectValueLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceObjectValueLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceDataTypeStringEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        DATA_TYPE_RENAMED: ghidra.trace.util.TraceEvent.TraceDataTypeStringEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceDataTypeStringEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceDataTypeStringEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceReferenceLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        REFERENCE_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceReferenceLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceReferenceLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceReferenceLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceObjectValueEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        VALUE_CREATED: ghidra.trace.util.TraceEvent.TraceObjectValueEvent
        VALUE_DELETED: ghidra.trace.util.TraceEvent.TraceObjectValueEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceObjectValueEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceObjectValueEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceMemoryRegionLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        REGION_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceMemoryRegionLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceMemoryRegionLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceMemoryRegionLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceStackLongEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        STACK_CHANGED: ghidra.trace.util.TraceEvent.TraceStackLongEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceStackLongEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceStackLongEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBytesEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BYTES_CHANGED: ghidra.trace.util.TraceEvent.TraceBytesEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBytesEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBytesEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_ADDED: ghidra.trace.util.TraceEvent.TraceSymbolEvent
        SYMBOL_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolEvent
        SYMBOL_DELETED: ghidra.trace.util.TraceEvent.TraceSymbolEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceTypeCategoryPathEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        TYPE_CATEGORY_DELETED: ghidra.trace.util.TraceEvent.TraceTypeCategoryPathEvent
        TYPE_CATEGORY_MOVED: ghidra.trace.util.TraceEvent.TraceTypeCategoryPathEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceTypeCategoryPathEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceTypeCategoryPathEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCommentEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        EOL_COMMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCommentEvent
        PLATE_COMMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCommentEvent
        POST_COMMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCommentEvent
        PRE_COMMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCommentEvent
        REPEATABLE_COMMENT_CHANGED: ghidra.trace.util.TraceEvent.TraceCommentEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCommentEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCommentEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceMemoryStateEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BYTES_STATE_CHANGED: ghidra.trace.util.TraceEvent.TraceMemoryStateEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceMemoryStateEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceMemoryStateEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceMemoryRegionEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        REGION_ADDED: ghidra.trace.util.TraceEvent.TraceMemoryRegionEvent
        REGION_CHANGED: ghidra.trace.util.TraceEvent.TraceMemoryRegionEvent
        REGION_DELETED: ghidra.trace.util.TraceEvent.TraceMemoryRegionEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceMemoryRegionEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceMemoryRegionEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceBookmarkLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        BOOKMARK_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceBookmarkLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceBookmarkLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceBookmarkLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceReferenceEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        REFERENCE_ADDED: ghidra.trace.util.TraceEvent.TraceReferenceEvent
        REFERENCE_DELETED: ghidra.trace.util.TraceEvent.TraceReferenceEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceReferenceEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceReferenceEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCodeDataTypeEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        CODE_DATA_TYPE_REPLACED: ghidra.trace.util.TraceEvent.TraceCodeDataTypeEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCodeDataTypeEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCodeDataTypeEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCodeLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        CODE_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceCodeLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCodeLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCodeLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceThreadLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        THREAD_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceThreadLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceThreadLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceThreadLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceInstructionIntEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        INSTRUCTION_LENGTH_OVERRIDE_CHANGED: ghidra.trace.util.TraceEvent.TraceInstructionIntEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceInstructionIntEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceInstructionIntEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TracePlatformMappingEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        PLATFORM_MAPPING_ADDED: ghidra.trace.util.TraceEvent.TracePlatformMappingEvent
        PLATFORM_MAPPING_DELETED: ghidra.trace.util.TraceEvent.TracePlatformMappingEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TracePlatformMappingEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TracePlatformMappingEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolNamespaceEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_PARENT_CHANGED: ghidra.trace.util.TraceEvent.TraceSymbolNamespaceEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolNamespaceEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolNamespaceEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceCompositeDataLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        COMPOSITE_DATA_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceCompositeDataLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceCompositeDataLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceCompositeDataLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceStackEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        STACK_ADDED: ghidra.trace.util.TraceEvent.TraceStackEvent
        STACK_DELETED: ghidra.trace.util.TraceEvent.TraceStackEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceStackEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceStackEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceModuleLifespanEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        MODULE_LIFESPAN_CHANGED: ghidra.trace.util.TraceEvent.TraceModuleLifespanEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceModuleLifespanEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceModuleLifespanEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceReferenceBoolEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        REFERENCE_PRIMARY_CHANGED: ghidra.trace.util.TraceEvent.TraceReferenceBoolEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceReferenceBoolEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceReferenceBoolEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolRefEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_ASSOCIATION_ADDED: ghidra.trace.util.TraceEvent.TraceSymbolRefEvent
        SYMBOL_ASSOCIATION_REMOVED: ghidra.trace.util.TraceEvent.TraceSymbolRefEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolRefEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolRefEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceSymbolStringEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        SYMBOL_RENAMED: ghidra.trace.util.TraceEvent.TraceSymbolStringEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceSymbolStringEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceSymbolStringEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...




    class TraceDataTypeEvent(java.lang.Enum, ghidra.trace.util.TraceEvent):
        DATA_TYPE_ADDED: ghidra.trace.util.TraceEvent.TraceDataTypeEvent
        DATA_TYPE_CHANGED: ghidra.trace.util.TraceEvent.TraceDataTypeEvent







        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getId(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.util.TraceEvent.TraceDataTypeEvent: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.util.TraceEvent.TraceDataTypeEvent]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def id(self) -> int: ...





    def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getId(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def id(self) -> int: ...