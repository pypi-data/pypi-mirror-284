from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.thread
import ghidra.util
import ghidra.util.database
import java.lang
import java.util


class DBTraceRegisterContextSpace(object, ghidra.trace.model.context.TraceRegisterContextSpace, ghidra.trace.database.space.DBTraceSpaceBased):





    class DBTraceRegisterEntry(ghidra.util.database.DBAnnotatedObject):




        def __init__(self, __a0: ghidra.util.database.DBCachedObjectStore, __a1: db.DBRecord): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getTableName(self) -> unicode: ...

        def hashCode(self) -> int: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.trace.database.context.DBTraceRegisterContextManager, __a1: db.DBHandle, __a2: ghidra.program.model.address.AddressSpace, __a3: ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager.DBTraceSpaceEntry, __a4: ghidra.trace.model.thread.TraceThread): ...



    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.Address) -> long: ...

    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def clear(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    @staticmethod
    def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

    def equals(self, __a0: object) -> bool: ...

    def explainLanguages(self, __a0: ghidra.program.model.address.AddressSpace) -> unicode: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getEntry(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    def getFrameLevel(self) -> int: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressSetView: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getValueWithDefault(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def hasRegisterValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> bool: ...

    def hasRegisterValueInAddressRange(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def isMySpace(self, __a0: ghidra.program.model.address.AddressSpace) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def setValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.RegisterValue, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def toAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def toOverlay(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def frameLevel(self) -> int: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...