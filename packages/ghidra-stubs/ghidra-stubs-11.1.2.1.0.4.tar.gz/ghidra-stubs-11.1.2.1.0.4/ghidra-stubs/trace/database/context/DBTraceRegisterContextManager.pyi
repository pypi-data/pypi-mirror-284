from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.trace.database
import ghidra.trace.database.context
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.thread
import ghidra.trace.util
import java.io
import java.lang
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceRegisterContextManager(ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager, ghidra.trace.model.context.TraceRegisterContextManager, ghidra.trace.database.space.DBTraceDelegatingManager):
    NAME: unicode = u'RegisterContext'



    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace, __a6: ghidra.trace.database.thread.DBTraceThreadManager, __a7: ghidra.trace.database.guest.DBTracePlatformManager): ...



    def checkIsInMemory(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def clear(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def delegateAddressSet(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> ghidra.program.model.address.AddressSetView: ...

    def delegateAny(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcPredicate) -> bool: ...

    def delegateCollection(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.Collection: ...

    def delegateDeleteB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    def delegateDeleteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateFirst(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> object: ...

    def delegateHashSet(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.HashSet: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: object) -> object: ...

    def delegateReadB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: int) -> int: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: java.util.function.IntSupplier) -> int: ...

    def delegateReadOr(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: ghidra.trace.database.space.DBTraceDelegatingManager.ExcSupplier) -> object: ...

    def delegateWrite(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    def delegateWriteAll(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateWriteI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction) -> int: ...

    def delegateWriteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getActiveMemorySpaces(self) -> java.util.Collection: ...

    def getActiveRegisterSpaces(self) -> java.util.Collection: ...

    def getActiveSpaces(self) -> java.util.Collection: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultContext(self, __a0: ghidra.program.model.lang.Language) -> ghidra.program.model.listing.ProgramContext: ...

    def getDefaultValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getEntry(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.database.context.DBTraceRegisterContextSpace: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getRegisterContextRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.context.TraceRegisterContextSpace: ...

    def getRegisterContextSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.model.context.TraceRegisterContextSpace: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressSetView: ...

    def getTrace(self) -> ghidra.trace.database.DBTrace: ...

    def getValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getValueWithDefault(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def hasRegisterValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> bool: ...

    def hasRegisterValueInAddressRange(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def removeValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def setValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.RegisterValue, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

