from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.space
import ghidra.trace.model.thread
import ghidra.trace.util
import java.lang


class DBTraceSpaceKey(ghidra.trace.util.TraceAddressSpace, object):





    class DefaultDBTraceSpaceKey(java.lang.Record, ghidra.trace.database.space.DBTraceSpaceKey):




        def __init__(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: ghidra.program.model.address.AddressSpace, __a2: int): ...



        @staticmethod
        def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

        def equals(self, __a0: object) -> bool: ...

        def frameLevel(self) -> int: ...

        def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

        def getClass(self) -> java.lang.Class: ...

        def getFrameLevel(self) -> int: ...

        def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def space(self) -> ghidra.program.model.address.AddressSpace: ...

        def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...





    @staticmethod
    def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getFrameLevel(self) -> int: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def frameLevel(self) -> int: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...