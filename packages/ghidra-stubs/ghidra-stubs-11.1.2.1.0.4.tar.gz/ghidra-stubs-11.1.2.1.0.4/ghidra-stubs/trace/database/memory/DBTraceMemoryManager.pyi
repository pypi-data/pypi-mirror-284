from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.trace.database
import ghidra.trace.database.memory
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.memory
import ghidra.trace.model.stack
import ghidra.trace.model.thread
import ghidra.trace.util
import ghidra.util.task
import java.io
import java.lang
import java.nio
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceMemoryManager(ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager, ghidra.trace.model.memory.TraceMemoryManager, ghidra.trace.database.memory.InternalTraceMemoryOperations, ghidra.trace.database.space.DBTraceDelegatingManager):




    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace, __a6: ghidra.trace.database.thread.DBTraceThreadManager, __a7: ghidra.trace.database.address.DBTraceOverlaySpaceAdapter): ...



    @overload
    def addRegion(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.AddressRange, __a3: List[ghidra.trace.model.memory.TraceMemoryFlag]) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    @overload
    def addRegion(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def checkIsInMemory(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def createOverlayAddressSpace(self, __a0: unicode, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.program.model.address.AddressSpace: ...

    @overload
    def createRegion(self, __a0: unicode, __a1: long, __a2: ghidra.program.model.address.AddressRange, __a3: List[ghidra.trace.model.memory.TraceMemoryFlag]) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    @overload
    def createRegion(self, __a0: unicode, __a1: long, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def delegateAddressSet(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> ghidra.program.model.address.AddressSetView: ...

    def delegateAny(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcPredicate) -> bool: ...

    def delegateCollection(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.Collection: ...

    def delegateDeleteB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    def delegateDeleteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateFirst(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> object: ...

    def delegateHashSet(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.HashSet: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: object) -> object: ...

    def delegateReadB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: int) -> int: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: java.util.function.IntSupplier) -> int: ...

    def delegateReadOr(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: ghidra.trace.database.space.DBTraceDelegatingManager.ExcSupplier) -> object: ...

    def delegateWrite(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    def delegateWriteAll(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateWriteI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction) -> int: ...

    def delegateWriteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def deleteOverlayAddressSpace(self, __a0: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findBytes(self, __a0: long, __a1: ghidra.program.model.address.AddressRange, __a2: java.nio.ByteBuffer, __a3: java.nio.ByteBuffer, __a4: bool, __a5: ghidra.util.task.TaskMonitor) -> ghidra.program.model.address.Address: ...

    def get(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getActiveMemorySpaces(self) -> java.util.Collection: ...

    def getActiveRegisterSpaces(self) -> java.util.Collection: ...

    def getActiveSpaces(self) -> java.util.Collection: ...

    @overload
    def getAddressesWithState(self, __a0: long, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressesWithState(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressesWithState(self, __a0: long, __a1: ghidra.program.model.address.AddressSetView, __a2: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressesWithState(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressSetView, __a2: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    def getAllRegions(self) -> java.util.Collection: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBlockSize(self) -> int: ...

    @overload
    def getBufferAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.mem.MemBuffer: ...

    @overload
    def getBufferAt(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: java.nio.ByteOrder) -> ghidra.program.model.mem.MemBuffer: ...

    @overload
    def getBytes(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: java.nio.ByteBuffer) -> int: ...

    @overload
    def getBytes(self, __a0: long, __a1: ghidra.program.model.lang.Register, __a2: java.nio.ByteBuffer) -> int: ...

    @overload
    def getBytes(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register, __a3: java.nio.ByteBuffer) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.database.memory.DBTraceMemorySpace: ...

    def getLiveRegionByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    @overload
    def getMemoryRegisterSpace(self, __a0: ghidra.trace.model.stack.TraceStackFrame, __a1: bool) -> ghidra.trace.model.memory.TraceMemorySpace: ...

    @overload
    def getMemoryRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.memory.TraceMemorySpace: ...

    @overload
    def getMemoryRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int, __a2: bool) -> ghidra.trace.model.memory.TraceMemorySpace: ...

    def getMemorySpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.database.memory.DBTraceMemorySpace: ...

    def getMostRecentStateEntry(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    @overload
    def getMostRecentStates(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> java.lang.Iterable: ...

    @overload
    def getMostRecentStates(self, __a0: long, __a1: ghidra.program.model.address.AddressRange) -> java.lang.Iterable: ...

    def getOrCreateOverlayAddressSpace(self, __a0: unicode, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.program.model.address.AddressSpace: ...

    def getRegionContaining(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.model.memory.TraceMemoryRegion: ...

    def getRegionsAdded(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getRegionsAddressSet(self, __a0: long) -> ghidra.program.model.address.AddressSetView: ...

    def getRegionsAddressSetWith(self, __a0: long, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    def getRegionsAtSnap(self, __a0: long) -> java.util.Collection: ...

    def getRegionsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getRegionsRemoved(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getRegionsWithPathInLifespan(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> java.util.Collection: ...

    def getSnapOfMostRecentChangeToBlock(self, __a0: long, __a1: ghidra.program.model.address.Address) -> long: ...

    def getSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @overload
    def getState(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.model.memory.TraceMemoryState: ...

    @overload
    def getState(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.memory.TraceMemoryState: ...

    @overload
    def getState(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.trace.model.memory.TraceMemoryState: ...

    def getStateChanges(self, __a0: long, __a1: long) -> java.util.Collection: ...

    @overload
    def getStates(self, __a0: long, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    @overload
    def getStates(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> java.util.Collection: ...

    @overload
    def getStates(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> java.util.Collection: ...

    def getTrace(self) -> ghidra.trace.database.DBTrace: ...

    @overload
    def getValue(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.RegisterValue: ...

    @overload
    def getValue(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.RegisterValue: ...

    def getViewBytes(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: java.nio.ByteBuffer) -> int: ...

    def getViewMostRecentStateEntry(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    def getViewState(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    @overload
    def getViewValue(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.RegisterValue: ...

    @overload
    def getViewValue(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.RegisterValue: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def isKnown(self, __a0: long, __a1: ghidra.program.model.address.AddressRange) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pack(self) -> None: ...

    @overload
    def putBytes(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: java.nio.ByteBuffer) -> int: ...

    @overload
    def putBytes(self, __a0: long, __a1: ghidra.program.model.lang.Register, __a2: java.nio.ByteBuffer) -> int: ...

    @overload
    def putBytes(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register, __a3: java.nio.ByteBuffer) -> int: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def removeBytes(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: int) -> None: ...

    @overload
    def removeValue(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> None: ...

    @overload
    def removeValue(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> None: ...

    @staticmethod
    def requireOne(__a0: java.util.Collection, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.memory.TraceMemoryState: ...

    @overload
    def setState(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setState(self, __a0: long, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setState(self, __a0: long, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setState(self, __a0: long, __a1: ghidra.program.model.lang.Register, __a2: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setState(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register, __a3: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setState(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    @overload
    def setValue(self, __a0: long, __a1: ghidra.program.model.lang.RegisterValue) -> int: ...

    @overload
    def setValue(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.RegisterValue) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

    @property
    def allRegions(self) -> java.util.Collection: ...

    @property
    def blockSize(self) -> int: ...

    @property
    def space(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...