from typing import overload
import ghidra.trace.database.memory
import ghidra.util
import ghidra.util.database
import java.lang
import java.nio


class DBTraceMemoryBufferEntry(ghidra.util.database.DBAnnotatedObject):




    def __init__(self, __a0: db.DBHandle, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



    @overload
    def acquireBlock(self) -> int: ...

    @overload
    def acquireBlock(self, __a0: int) -> None: ...

    def cmpBytes(self, __a0: java.nio.ByteBuffer, __a1: int, __a2: int, __a3: int) -> int: ...

    def compress(self) -> None: ...

    def copyFrom(self, __a0: int, __a1: ghidra.trace.database.memory.DBTraceMemoryBufferEntry, __a2: int) -> None: ...

    def decompress(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBytes(self, __a0: java.nio.ByteBuffer, __a1: int, __a2: int, __a3: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getKey(self) -> long: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getTableName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    @overload
    def isDeleted(self) -> bool: ...

    @overload
    def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

    def isEmpty(self) -> bool: ...

    def isInUse(self, __a0: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def releaseBlock(self, __a0: int) -> None: ...

    def setBytes(self, __a0: java.nio.ByteBuffer, __a1: int, __a2: int, __a3: int) -> int: ...

    def setInvalid(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...