from typing import List
from typing import overload
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.trace.model.memory
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.util
import ghidra.util.database
import java.lang


class DBTraceObjectRegister(object, ghidra.trace.model.memory.TraceObjectRegister, ghidra.trace.database.target.DBTraceObjectInterface):
    KEY_STATE: unicode = u'_state'



    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObject): ...



    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def equals(self, __a0: object) -> bool: ...

    def getBitLength(self) -> int: ...

    def getByteLength(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getState(self, __a0: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceObjectThread: ...

    def getValue(self, __a0: long) -> List[int]: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setState(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    def setValue(self, __a0: ghidra.trace.model.Lifespan, __a1: List[int]) -> None: ...

    def spaceForValue(self, __a0: long, __a1: unicode) -> ghidra.trace.util.TraceAddressSpace: ...

    def toString(self) -> unicode: ...

    def translateEvent(self, __a0: ghidra.trace.util.TraceChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bitLength(self) -> int: ...

    @property
    def byteLength(self) -> int: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def name(self) -> unicode: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceObjectThread: ...