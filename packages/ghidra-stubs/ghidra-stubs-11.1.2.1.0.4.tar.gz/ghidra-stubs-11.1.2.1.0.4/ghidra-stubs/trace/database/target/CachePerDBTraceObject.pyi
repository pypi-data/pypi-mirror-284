from typing import overload
import ghidra.trace.database.target
import ghidra.trace.model
import java.lang
import java.util.stream


class CachePerDBTraceObject(object):





    class Cached(java.lang.Record):




        def __init__(self, __a0: bool, __a1: object): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isMiss(self) -> bool: ...

        @staticmethod
        def miss() -> ghidra.trace.database.target.CachePerDBTraceObject.Cached: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def value(self) -> object: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def expandLifespan(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.model.Lifespan: ...

    def getClass(self) -> java.lang.Class: ...

    def getValue(self, __a0: long, __a1: unicode) -> ghidra.trace.database.target.CachePerDBTraceObject.Cached: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def notifyValueCreated(self, __a0: ghidra.trace.database.target.DBTraceObjectValue) -> None: ...

    def notifyValueDeleted(self, __a0: ghidra.trace.database.target.DBTraceObjectValue) -> None: ...

    def offerGetValue(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.stream.Stream, __a2: long, __a3: unicode) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    def offerStreamAnyKey(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.stream.Stream, __a2: ghidra.trace.model.Lifespan) -> java.util.stream.Stream: ...

    def offerStreamPerKey(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.stream.Stream, __a2: ghidra.trace.model.Lifespan, __a3: unicode, __a4: bool) -> java.util.stream.Stream: ...

    @overload
    def streamValues(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.database.target.CachePerDBTraceObject.Cached: ...

    @overload
    def streamValues(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: bool) -> ghidra.trace.database.target.CachePerDBTraceObject.Cached: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

