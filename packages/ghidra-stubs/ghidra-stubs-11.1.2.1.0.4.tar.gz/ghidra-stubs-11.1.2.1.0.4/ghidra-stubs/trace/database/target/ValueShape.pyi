from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.util.database.spatial
import java.lang


class ValueShape(ghidra.util.database.spatial.BoundedShape, object):








    def description(self) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressSpaceId(self) -> int: ...

    def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

    def getChild(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getChildOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getClass(self) -> java.lang.Class: ...

    def getEntryKey(self) -> unicode: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getMaxAddress(self, __a0: ghidra.program.model.address.AddressFactory) -> ghidra.program.model.address.Address: ...

    def getMaxAddressOffset(self) -> long: ...

    def getMinAddress(self, __a0: ghidra.program.model.address.AddressFactory) -> ghidra.program.model.address.Address: ...

    def getMinAddressOffset(self) -> long: ...

    def getParent(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getRange(self, __a0: ghidra.program.model.address.AddressFactory) -> ghidra.program.model.address.AddressRange: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpaceId(self) -> int: ...

    @property
    def bounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

    @property
    def child(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def childOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def entryKey(self) -> unicode: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def maxAddressOffset(self) -> long: ...

    @property
    def minAddressOffset(self) -> long: ...

    @property
    def parent(self) -> ghidra.trace.database.target.DBTraceObject: ...