from typing import overload
import ghidra.trace.database.target
import ghidra.trace.model
import java.lang


class DBTraceObjectValueBehind(object, ghidra.trace.database.target.TraceObjectValueStorage):




    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObjectManager, __a1: ghidra.trace.database.target.DBTraceObject, __a2: unicode, __a3: ghidra.trace.model.Lifespan, __a4: object): ...



    def doDelete(self) -> None: ...

    def doSetLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getChildOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getClass(self) -> java.lang.Class: ...

    def getEntryKey(self) -> unicode: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getManager(self) -> ghidra.trace.database.target.DBTraceObjectManager: ...

    def getParent(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getValue(self) -> object: ...

    def getWrapper(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def childOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def entryKey(self) -> unicode: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def manager(self) -> ghidra.trace.database.target.DBTraceObjectManager: ...

    @property
    def parent(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def value(self) -> object: ...

    @property
    def wrapper(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...