from typing import overload
import ghidra.trace.database.target.visitors
import ghidra.trace.model
import ghidra.trace.model.target
import java.lang
import java.util.stream


class OrderedSuccessorsVisitor(object, ghidra.trace.database.target.visitors.TreeTraversal.SpanIntersectingVisitor):




    def __init__(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath, __a1: bool): ...



    def composePath(self, __a0: ghidra.trace.model.target.TraceObjectValPath, __a1: ghidra.trace.model.target.TraceObjectValue) -> ghidra.trace.model.target.TraceObjectValPath: ...

    def composeSpan(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObjectValue) -> ghidra.trace.model.Lifespan: ...

    def continueObject(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> ghidra.trace.model.target.TraceObject: ...

    def continueValues(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.trace.model.target.TraceObjectValPath) -> java.util.stream.Stream: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def visitValue(self, __a0: ghidra.trace.model.target.TraceObjectValue, __a1: ghidra.trace.model.target.TraceObjectValPath) -> ghidra.trace.database.target.visitors.TreeTraversal.VisitResult: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

