from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.util.database
import ghidra.util.database.spatial
import ghidra.util.database.spatial.hyper
import java.lang
import java.util
import java.util.function


class DBTraceObjectValueRStarTree(ghidra.util.database.spatial.hyper.AbstractHyperRStarTree):





    class DBTraceObjectValueMap(ghidra.util.database.spatial.hyper.AbstractHyperRStarTree.AsSpatialMap):




        def __init__(self, __a0: ghidra.util.database.spatial.AbstractConstraintsTree, __a1: ghidra.trace.database.target.TraceObjectValueQuery, __a2: ghidra.program.model.address.AddressFactory, __a3: java.util.concurrent.locks.ReadWriteLock): ...



        def clear(self) -> None: ...

        @staticmethod
        def emptyMap() -> ghidra.util.database.spatial.SpatialMap: ...

        def entries(self) -> java.util.Collection: ...

        def equals(self, __a0: object) -> bool: ...

        def firstEntry(self) -> java.util.Map.Entry: ...

        def firstKey(self) -> ghidra.util.database.spatial.BoundedShape: ...

        def firstValue(self) -> object: ...

        def getAddressSetView(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def keys(self) -> java.util.Collection: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def orderedEntries(self) -> java.util.Collection: ...

        def orderedKeys(self) -> java.util.Collection: ...

        def orderedValues(self) -> java.util.Collection: ...

        def put(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> object: ...

        @overload
        def reduce(self, __a0: ghidra.trace.database.target.TraceObjectValueQuery) -> ghidra.trace.database.target.DBTraceObjectValueRStarTree.DBTraceObjectValueMap: ...

        @overload
        def reduce(self, __a0: ghidra.util.database.spatial.hyper.AbstractHyperBoxQuery) -> ghidra.util.database.spatial.hyper.AbstractHyperRStarTree.AsSpatialMap: ...

        @overload
        def reduce(self, __a0: object) -> ghidra.util.database.spatial.SpatialMap: ...

        @overload
        def remove(self, __a0: java.util.Map.Entry) -> bool: ...

        @overload
        def remove(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> bool: ...

        def size(self) -> int: ...

        def toString(self) -> unicode: ...

        def values(self) -> java.util.Collection: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObjectManager, __a1: ghidra.util.database.DBCachedObjectStoreFactory, __a2: unicode, __a3: ghidra.util.database.spatial.hyper.EuclideanHyperSpace, __a4: java.lang.Class, __a5: java.lang.Class, __a6: bool, __a7: int): ...



    def asSpatialMap(self) -> ghidra.util.database.spatial.AbstractConstraintsTreeSpatialMap: ...

    def checkIntegrity(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataByKey(self, __a0: long) -> ghidra.util.database.spatial.DBTreeDataRecord: ...

    def getUserIndex(self, __a0: java.lang.Class, __a1: ghidra.util.database.DBObjectColumn) -> ghidra.util.database.DBCachedObjectIndex: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

