from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.database
import ghidra.trace.database.address
import ghidra.trace.database.guest
import ghidra.trace.database.listing
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.listing
import ghidra.trace.model.stack
import ghidra.trace.model.thread
import ghidra.trace.util
import ghidra.util
import ghidra.util.database
import ghidra.util.task
import java.io
import java.lang
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceCodeManager(ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager, ghidra.trace.model.listing.TraceCodeManager, ghidra.trace.database.space.DBTraceDelegatingManager):
    NAME: unicode = u'Code'




    class DBTraceCodePrototypeEntry(ghidra.util.database.DBAnnotatedObject, ghidra.trace.database.address.DBTraceOverlaySpaceAdapter.DecodesAddresses):
        TABLE_NAME: unicode = u'Prototypes'



        def __init__(self, __a0: ghidra.trace.database.listing.DBTraceCodeManager, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getOverlaySpaceAdapter(self) -> ghidra.trace.database.address.DBTraceOverlaySpaceAdapter: ...

        def getPrototype(self) -> ghidra.program.model.lang.InstructionPrototype: ...

        def getTableName(self) -> unicode: ...

        def hashCode(self) -> int: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def overlaySpaceAdapter(self) -> ghidra.trace.database.address.DBTraceOverlaySpaceAdapter: ...

        @property
        def prototype(self) -> ghidra.program.model.lang.InstructionPrototype: ...

    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace, __a6: ghidra.trace.database.thread.DBTraceThreadManager, __a7: ghidra.trace.database.guest.DBTracePlatformManager, __a8: ghidra.trace.database.data.DBTraceDataTypeManager, __a9: ghidra.trace.database.address.DBTraceOverlaySpaceAdapter, __a10: ghidra.trace.database.symbol.DBTraceReferenceManager): ...



    def checkIsInMemory(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def clearData(self, __a0: java.util.Set, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def clearPlatform(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.trace.database.guest.DBTraceGuestPlatform, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def codeUnits(self) -> ghidra.trace.model.listing.TraceCodeUnitsView: ...

    def data(self) -> ghidra.trace.model.listing.TraceDataView: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def definedData(self) -> ghidra.trace.model.listing.TraceDefinedDataView: ...

    def definedUnits(self) -> ghidra.trace.model.listing.TraceDefinedUnitsView: ...

    def delegateAddressSet(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> ghidra.program.model.address.AddressSetView: ...

    def delegateAny(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcPredicate) -> bool: ...

    def delegateCollection(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.Collection: ...

    def delegateDeleteB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    def delegateDeleteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateFirst(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> object: ...

    def delegateHashSet(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.HashSet: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: object) -> object: ...

    def delegateReadB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: int) -> int: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: java.util.function.IntSupplier) -> int: ...

    def delegateReadOr(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: ghidra.trace.database.space.DBTraceDelegatingManager.ExcSupplier) -> object: ...

    def delegateWrite(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    def delegateWriteAll(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateWriteI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction) -> int: ...

    def delegateWriteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def deleteLangauge(self, __a0: ghidra.trace.database.guest.DBTraceGuestPlatform.DBTraceGuestLanguage, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def deletePlatform(self, __a0: ghidra.trace.database.guest.DBTraceGuestPlatform, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def doCreateUndefinedUnit(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.trace.model.thread.TraceThread, __a3: int) -> ghidra.trace.database.listing.UndefinedDBTraceData: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getActiveMemorySpaces(self) -> java.util.Collection: ...

    def getActiveRegisterSpaces(self) -> java.util.Collection: ...

    def getActiveSpaces(self) -> java.util.Collection: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeAdded(self, __a0: long, __a1: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.stack.TraceStackFrame, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.database.listing.DBTraceCodeSpace: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int, __a2: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    def getCodeRemoved(self, __a0: long, __a1: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getCodeSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    @overload
    def getCodeSpace(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getTrace(self) -> ghidra.trace.database.DBTrace: ...

    def hashCode(self) -> int: ...

    def instructions(self) -> ghidra.trace.model.listing.TraceInstructionsView: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def replaceDataTypes(self, __a0: java.util.Map) -> None: ...

    def toString(self) -> unicode: ...

    def undefinedData(self) -> ghidra.trace.model.listing.TraceUndefinedDataView: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

