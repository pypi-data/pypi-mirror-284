from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.database.listing
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.thread
import java.lang
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceCodeUnitsMemoryView(ghidra.trace.database.listing.AbstractWithUndefinedDBTraceCodeUnitsMemoryView, ghidra.trace.model.listing.TraceCodeUnitsView, ghidra.trace.database.listing.InternalBaseCodeUnitsView):




    def __init__(self, __a0: ghidra.trace.database.listing.DBTraceCodeManager): ...



    def checkIsInMemory(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def containsAddress(self, __a0: long, __a1: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def coversRange(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

    @overload
    def coversRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> bool: ...

    def delegateAddressSet(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> ghidra.program.model.address.AddressSetView: ...

    def delegateAny(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcPredicate) -> bool: ...

    def delegateCollection(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.Collection: ...

    def delegateDeleteB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    def delegateDeleteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateFirst(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> object: ...

    def delegateHashSet(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.HashSet: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: object) -> object: ...

    def delegateReadB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: int) -> int: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: java.util.function.IntSupplier) -> int: ...

    def delegateReadOr(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: ghidra.trace.database.space.DBTraceDelegatingManager.ExcSupplier) -> object: ...

    def delegateWrite(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    def delegateWriteAll(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateWriteI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction) -> int: ...

    def delegateWriteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    @overload
    def emptyOrFullIterableUndefined(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> java.lang.Iterable: ...

    @overload
    def emptyOrFullIterableUndefined(self, __a0: long, __a1: ghidra.program.model.address.AddressRange, __a2: bool) -> java.lang.Iterable: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def get(self, __a0: long, __a1: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.AddressRange, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.AddressSetView, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: bool) -> java.lang.Iterable: ...

    @overload
    def getAddressSetView(self, __a0: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressSetView(self, __a0: long, __a1: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressSetView: ...

    def getAfter(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getBefore(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getCeiling(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getContaining(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    @overload
    def getContaining(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    @overload
    def getContaining(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    def getFloor(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    @overload
    def getForRegister(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    @overload
    def getForRegister(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.database.listing.AbstractBaseDBTraceCodeUnitsView: ...

    def getFrameLevel(self) -> int: ...

    def getIntersecting(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> java.lang.Iterable: ...

    def getSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    @overload
    def intersectsRange(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

    @overload
    def intersectsRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

