from typing import Iterator
from typing import List
from typing import overload
import ghidra.program.database.mem
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.mem
import ghidra.trace.database.program
import ghidra.trace.model
import ghidra.util.task
import java.io
import java.lang
import java.nio
import java.util
import java.util.function


class DBTraceProgramViewRegisterMemory(ghidra.trace.database.program.AbstractDBTraceProgramViewMemory):




    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView, __a1: ghidra.trace.database.memory.DBTraceMemorySpace): ...

    def __iter__(self): ...

    @overload
    def contains(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def contains(self, __a0: ghidra.program.model.address.AddressSetView) -> bool: ...

    @overload
    def contains(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address) -> bool: ...

    def convertToInitialized(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: int) -> ghidra.program.model.mem.MemoryBlock: ...

    def convertToUninitialized(self, __a0: ghidra.program.model.mem.MemoryBlock) -> ghidra.program.model.mem.MemoryBlock: ...

    def createBitMappedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: long, __a4: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    def createBlock(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: unicode, __a2: ghidra.program.model.address.Address, __a3: long) -> ghidra.program.model.mem.MemoryBlock: ...

    @overload
    def createByteMappedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: long, __a4: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    @overload
    def createByteMappedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: long, __a4: ghidra.program.database.mem.ByteMappingScheme, __a5: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    def createFileBytes(self, __a0: unicode, __a1: long, __a2: long, __a3: java.io.InputStream, __a4: ghidra.util.task.TaskMonitor) -> ghidra.program.database.mem.FileBytes: ...

    @overload
    def createInitializedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.database.mem.FileBytes, __a3: long, __a4: long, __a5: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    @overload
    def createInitializedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: java.io.InputStream, __a3: long, __a4: ghidra.util.task.TaskMonitor, __a5: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    @overload
    def createInitializedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: long, __a3: int, __a4: ghidra.util.task.TaskMonitor, __a5: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    def createUninitializedBlock(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: long, __a3: bool) -> ghidra.program.model.mem.MemoryBlock: ...

    def deleteFileBytes(self, __a0: ghidra.program.database.mem.FileBytes) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def findBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: List[int], __a3: bool, __a4: ghidra.util.task.TaskMonitor) -> ghidra.program.model.address.Address: ...

    @overload
    def findBytes(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: List[int], __a3: List[int], __a4: bool, __a5: ghidra.util.task.TaskMonitor) -> ghidra.program.model.address.Address: ...

    def findFirstAddressInCommon(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.Address: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    @overload
    def getAddressRanges(self) -> ghidra.program.model.address.AddressRangeIterator: ...

    @overload
    def getAddressRanges(self, __a0: bool) -> ghidra.program.model.address.AddressRangeIterator: ...

    @overload
    def getAddressRanges(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.address.AddressRangeIterator: ...

    def getAddressSourceInfo(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.database.mem.AddressSourceInfo: ...

    @overload
    def getAddresses(self, __a0: bool) -> ghidra.program.model.address.AddressIterator: ...

    @overload
    def getAddresses(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.address.AddressIterator: ...

    def getAllFileBytes(self) -> List[object]: ...

    def getAllInitializedAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getBlock(self, __a0: unicode) -> ghidra.program.model.mem.MemoryBlock: ...

    @overload
    def getBlock(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.mem.MemoryBlock: ...

    def getBlocks(self) -> List[ghidra.program.model.mem.MemoryBlock]: ...

    def getByte(self, __a0: ghidra.program.model.address.Address) -> int: ...

    @overload
    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> int: ...

    @overload
    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getExecuteSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getFirstRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getInitializedAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getInt(self, __a0: ghidra.program.model.address.Address) -> int: ...

    @overload
    def getInt(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> int: ...

    @overload
    def getInts(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> int: ...

    @overload
    def getInts(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

    @overload
    def getInts(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int, __a4: bool) -> int: ...

    def getLastRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getLiveMemoryHandler(self) -> ghidra.program.model.mem.LiveMemoryHandler: ...

    def getLoadedAndInitializedAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getLong(self, __a0: ghidra.program.model.address.Address) -> long: ...

    @overload
    def getLong(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> long: ...

    @overload
    def getLongs(self, __a0: ghidra.program.model.address.Address, __a1: List[long]) -> int: ...

    @overload
    def getLongs(self, __a0: ghidra.program.model.address.Address, __a1: List[long], __a2: int, __a3: int) -> int: ...

    @overload
    def getLongs(self, __a0: ghidra.program.model.address.Address, __a1: List[long], __a2: int, __a3: int, __a4: bool) -> int: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getNumAddressRanges(self) -> int: ...

    def getNumAddresses(self) -> long: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getRangeContaining(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.AddressRange: ...

    @overload
    def getShort(self, __a0: ghidra.program.model.address.Address) -> int: ...

    @overload
    def getShort(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> int: ...

    @overload
    def getShorts(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> int: ...

    @overload
    def getShorts(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

    @overload
    def getShorts(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int, __a4: bool) -> int: ...

    def getSize(self) -> long: ...

    def getSnap(self) -> long: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hasSameAddresses(self, __a0: ghidra.program.model.address.AddressSetView) -> bool: ...

    def hashCode(self) -> int: ...

    def intersect(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSet: ...

    def intersectRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.address.AddressSet: ...

    @overload
    def intersects(self, __a0: ghidra.program.model.address.AddressSetView) -> bool: ...

    @overload
    def intersects(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address) -> bool: ...

    def isBigEndian(self) -> bool: ...

    def isEmpty(self) -> bool: ...

    def isExternalBlockAddress(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def isForceFullView(self) -> bool: ...

    @staticmethod
    def isValidMemoryBlockName(__a0: unicode) -> bool: ...

    @overload
    def iterator(self) -> java.util.Iterator: ...

    @overload
    def iterator(self, __a0: bool) -> java.util.Iterator: ...

    @overload
    def iterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> java.util.Iterator: ...

    def join(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: ghidra.program.model.mem.MemoryBlock) -> ghidra.program.model.mem.MemoryBlock: ...

    def locateAddressesForFileBytesOffset(self, __a0: ghidra.program.database.mem.FileBytes, __a1: long) -> List[object]: ...

    def locateAddressesForFileOffset(self, __a0: long) -> List[object]: ...

    def moveBlock(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def mustRead(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool) -> java.nio.ByteBuffer: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeBlock(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setByte(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def setBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> None: ...

    @overload
    def setBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> None: ...

    def setForceFullView(self, __a0: bool) -> None: ...

    @overload
    def setInt(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def setInt(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool) -> None: ...

    def setLiveMemoryHandler(self, __a0: ghidra.program.model.mem.LiveMemoryHandler) -> None: ...

    @overload
    def setLong(self, __a0: ghidra.program.model.address.Address, __a1: long) -> None: ...

    @overload
    def setLong(self, __a0: ghidra.program.model.address.Address, __a1: long, __a2: bool) -> None: ...

    @overload
    def setShort(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def setShort(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool) -> None: ...

    def split(self, __a0: ghidra.program.model.mem.MemoryBlock, __a1: ghidra.program.model.address.Address) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def subtract(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSet: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def trimEnd(__a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.address.AddressSetView: ...

    @staticmethod
    def trimStart(__a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.address.AddressSetView: ...

    def union(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSet: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def xor(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSet: ...

    @property
    def blocks(self) -> List[ghidra.program.model.mem.MemoryBlock]: ...

    @property
    def forceFullView(self) -> bool: ...

    @forceFullView.setter
    def forceFullView(self, value: bool) -> None: ...