from typing import overload
import ghidra.framework.data
import ghidra.program.database
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.symbol
import ghidra.util.task
import java.lang
import java.util


class DBTraceProgramViewFunctionManager(object, ghidra.program.model.listing.FunctionManager):




    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView): ...



    @overload
    def createFunction(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.AddressSetView, __a3: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Function: ...

    @overload
    def createFunction(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.address.AddressSetView, __a4: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Function: ...

    def createThunkFunction(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.address.AddressSetView, __a4: ghidra.program.model.listing.Function, __a5: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Function: ...

    def deleteAddressRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getCallingConvention(self, __a0: unicode) -> ghidra.program.model.lang.PrototypeModel: ...

    def getCallingConventionNames(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultCallingConvention(self) -> ghidra.program.model.lang.PrototypeModel: ...

    def getExternalFunctions(self) -> ghidra.program.model.listing.FunctionIterator: ...

    def getFunction(self, __a0: long) -> ghidra.program.model.listing.Function: ...

    def getFunctionAt(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.listing.Function: ...

    def getFunctionContaining(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.listing.Function: ...

    def getFunctionCount(self) -> int: ...

    def getFunctionTagManager(self) -> ghidra.program.model.listing.FunctionTagManager: ...

    @overload
    def getFunctions(self, __a0: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    @overload
    def getFunctions(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    @overload
    def getFunctions(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    @overload
    def getFunctionsNoStubs(self, __a0: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    @overload
    def getFunctionsNoStubs(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    @overload
    def getFunctionsNoStubs(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.listing.FunctionIterator: ...

    def getFunctionsOverlapping(self, __a0: ghidra.program.model.address.AddressSetView) -> java.util.Iterator: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getReferencedFunction(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.listing.Function: ...

    def getReferencedVariable(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: int, __a3: bool) -> ghidra.program.model.listing.Variable: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def isInFunction(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def moveAddressRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def programReady(self, __a0: ghidra.framework.data.OpenMode, __a1: int, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def removeFunction(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def setProgram(self, __a0: ghidra.program.database.ProgramDB) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def callingConventionNames(self) -> java.util.Collection: ...

    @property
    def defaultCallingConvention(self) -> ghidra.program.model.lang.PrototypeModel: ...

    @property
    def externalFunctions(self) -> ghidra.program.model.listing.FunctionIterator: ...

    @property
    def functionCount(self) -> int: ...

    @property
    def functionTagManager(self) -> ghidra.program.model.listing.FunctionTagManager: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...