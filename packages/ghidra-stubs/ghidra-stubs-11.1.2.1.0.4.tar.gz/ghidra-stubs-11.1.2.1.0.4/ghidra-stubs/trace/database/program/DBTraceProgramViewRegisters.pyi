from typing import List
from typing import overload
import db
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.database
import ghidra.program.database.map
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.mem
import ghidra.program.model.pcode
import ghidra.program.model.reloc
import ghidra.program.model.symbol
import ghidra.program.model.util
import ghidra.trace.model
import ghidra.trace.model.program
import ghidra.trace.model.thread
import ghidra.util.task
import java.io
import java.lang
import java.util
import utility.function


class DBTraceProgramViewRegisters(object, ghidra.trace.model.program.TraceProgramView):
    ANALYSIS_PROPERTIES: unicode = u'Analyzers'
    ANALYSIS_START_DATE: unicode = u'2007-Jan-01'
    ANALYSIS_START_DATE_FORMAT: unicode = u'yyyy-MMM-dd'
    ANALYZED_OPTION_NAME: unicode = u'Analyzed'
    ASK_TO_ANALYZE_OPTION_NAME: unicode = u'Should Ask To Analyze'
    CREATED_WITH_GHIDRA_VERSION: unicode = u'Created With Ghidra Version'
    DATE_CREATED: unicode = u'Date Created'
    DISASSEMBLER_PROPERTIES: unicode = u'Disassembler'
    DO_DOMAIN_FILE_CHANGED: ghidra.framework.model.EventType
    DO_OBJECT_CLOSED: ghidra.framework.model.EventType
    DO_OBJECT_ERROR: ghidra.framework.model.EventType
    DO_OBJECT_RENAMED: ghidra.framework.model.EventType
    DO_OBJECT_RESTORED: ghidra.framework.model.EventType
    DO_OBJECT_SAVED: ghidra.framework.model.EventType
    DO_PROPERTY_CHANGED: ghidra.framework.model.EventType
    JANUARY_1_1970: java.util.Date
    MAX_OPERANDS: int = 16
    PREFERRED_ROOT_NAMESPACE_CATEGORY_PROPERTY: unicode = u'Preferred Root Namespace Category'
    PROGRAM_INFO: unicode = u'Program Information'
    undoLock: object



    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView, __a1: ghidra.trace.database.listing.DBTraceCodeSpace, __a2: ghidra.trace.database.memory.DBTraceMemorySpace): ...



    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createAddressSetPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.AddressSetPropertyMap: ...

    def createIntRangeMap(self, __a0: unicode) -> ghidra.program.database.IntRangeMap: ...

    def createOverlaySpace(self, __a0: unicode, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.program.database.ProgramOverlayAddressSpace: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def deleteAddressSetPropertyMap(self, __a0: unicode) -> None: ...

    def deleteIntRangeMap(self, __a0: unicode) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getAddressMap(self) -> ghidra.program.database.map.AddressMap: ...

    def getAddressSetPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.AddressSetPropertyMap: ...

    def getAllRedoNames(self) -> List[object]: ...

    def getAllUndoNames(self) -> List[object]: ...

    def getBookmarkManager(self) -> ghidra.program.model.listing.BookmarkManager: ...

    def getChanges(self) -> ghidra.program.model.listing.ProgramChangeSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompiler(self) -> unicode: ...

    def getCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getConsumerList(self) -> List[object]: ...

    def getCreationDate(self) -> java.util.Date: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDefaultPointerSize(self) -> int: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEquateTable(self) -> ghidra.program.model.symbol.EquateTable: ...

    def getExecutableFormat(self) -> unicode: ...

    def getExecutableMD5(self) -> unicode: ...

    def getExecutablePath(self) -> unicode: ...

    def getExecutableSHA256(self) -> unicode: ...

    def getExternalManager(self) -> ghidra.program.model.symbol.ExternalManager: ...

    def getFunctionManager(self) -> ghidra.program.model.listing.FunctionManager: ...

    def getGlobalNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    def getImageBase(self) -> ghidra.program.model.address.Address: ...

    def getIntRangeMap(self, __a0: unicode) -> ghidra.program.database.IntRangeMap: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getLanguageCompilerSpecPair(self) -> ghidra.program.model.lang.LanguageCompilerSpecPair: ...

    def getLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getListing(self) -> ghidra.program.model.listing.Listing: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMaxSnap(self) -> long: ...

    def getMemory(self) -> ghidra.program.model.mem.Memory: ...

    def getMetadata(self) -> java.util.Map: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getModificationNumber(self) -> long: ...

    def getName(self) -> unicode: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPreferredRootNamespaceCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getProgramContext(self) -> ghidra.program.model.listing.ProgramContext: ...

    def getProgramUserData(self) -> ghidra.program.model.listing.ProgramUserData: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.program.model.symbol.ReferenceManager: ...

    @overload
    def getRegister(self, __a0: unicode) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.pcode.Varnode) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.address.Address, __a1: int) -> ghidra.program.model.lang.Register: ...

    def getRegisters(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.lang.Register]: ...

    def getRelocationTable(self) -> ghidra.program.model.reloc.RelocationTable: ...

    def getSnap(self) -> long: ...

    def getSymbolTable(self) -> ghidra.program.model.symbol.SymbolTable: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getUndoName(self) -> unicode: ...

    def getUniqueProgramID(self) -> long: ...

    def getUsrPropertyManager(self) -> ghidra.program.model.util.PropertyMapManager: ...

    def getViewRegisters(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.program.TraceProgramView: ...

    def getViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    @overload
    def parseAddress(self, __a0: unicode) -> List[ghidra.program.model.address.Address]: ...

    @overload
    def parseAddress(self, __a0: unicode, __a1: bool) -> List[ghidra.program.model.address.Address]: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removeOverlaySpace(self, __a0: unicode) -> bool: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def renameOverlaySpace(self, __a0: unicode, __a1: unicode) -> None: ...

    def restoreImageBase(self) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setCompiler(self, __a0: unicode) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setExecutableFormat(self, __a0: unicode) -> None: ...

    def setExecutableMD5(self, __a0: unicode) -> None: ...

    def setExecutablePath(self, __a0: unicode) -> None: ...

    def setExecutableSHA256(self, __a0: unicode) -> None: ...

    def setImageBase(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> None: ...

    def setLanguage(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.CompilerSpecID, __a2: bool, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setPreferredRootNamespaceCategoryPath(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalCallback) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalSupplier) -> object: ...

    @property
    def addressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def addressMap(self) -> ghidra.program.database.map.AddressMap: ...

    @property
    def allRedoNames(self) -> List[object]: ...

    @property
    def allUndoNames(self) -> List[object]: ...

    @property
    def bookmarkManager(self) -> ghidra.program.model.listing.BookmarkManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def changes(self) -> ghidra.program.model.listing.ProgramChangeSet: ...

    @property
    def closed(self) -> bool: ...

    @property
    def compiler(self) -> unicode: ...

    @compiler.setter
    def compiler(self, value: unicode) -> None: ...

    @property
    def compilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def consumerList(self) -> java.util.ArrayList: ...

    @property
    def creationDate(self) -> java.util.Date: ...

    @property
    def currentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def defaultPointerSize(self) -> int: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def equateTable(self) -> ghidra.program.model.symbol.EquateTable: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def executableFormat(self) -> unicode: ...

    @executableFormat.setter
    def executableFormat(self, value: unicode) -> None: ...

    @property
    def executableMD5(self) -> unicode: ...

    @executableMD5.setter
    def executableMD5(self, value: unicode) -> None: ...

    @property
    def executablePath(self) -> unicode: ...

    @executablePath.setter
    def executablePath(self, value: unicode) -> None: ...

    @property
    def executableSHA256(self) -> unicode: ...

    @executableSHA256.setter
    def executableSHA256(self, value: unicode) -> None: ...

    @property
    def externalManager(self) -> ghidra.program.model.symbol.ExternalManager: ...

    @property
    def functionManager(self) -> ghidra.program.model.listing.FunctionManager: ...

    @property
    def globalNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    @property
    def imageBase(self) -> ghidra.program.model.address.Address: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def languageCompilerSpecPair(self) -> ghidra.program.model.lang.LanguageCompilerSpecPair: ...

    @property
    def languageID(self) -> ghidra.program.model.lang.LanguageID: ...

    @property
    def listing(self) -> ghidra.program.model.listing.Listing: ...

    @property
    def locked(self) -> bool: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def maxSnap(self) -> long: ...

    @property
    def memory(self) -> ghidra.trace.model.program.TraceProgramViewMemory: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def preferredRootNamespaceCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    @property
    def programContext(self) -> ghidra.program.model.listing.ProgramContext: ...

    @property
    def programUserData(self) -> ghidra.program.model.listing.ProgramUserData: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.program.model.symbol.ReferenceManager: ...

    @property
    def relocationTable(self) -> ghidra.program.model.reloc.RelocationTable: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def snap(self) -> long: ...

    @property
    def symbolTable(self) -> ghidra.program.model.symbol.SymbolTable: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def undoName(self) -> unicode: ...

    @property
    def uniqueProgramID(self) -> long: ...

    @property
    def usrPropertyManager(self) -> ghidra.program.model.util.PropertyMapManager: ...

    @property
    def viewport(self) -> ghidra.trace.model.TraceTimeViewport: ...