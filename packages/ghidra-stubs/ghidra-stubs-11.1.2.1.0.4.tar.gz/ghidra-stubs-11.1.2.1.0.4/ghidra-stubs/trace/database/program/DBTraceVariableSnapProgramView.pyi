from typing import List
from typing import overload
import db
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.database
import ghidra.program.database.map
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.mem
import ghidra.program.model.pcode
import ghidra.program.model.reloc
import ghidra.program.model.symbol
import ghidra.program.model.util
import ghidra.trace.database.program
import ghidra.trace.model
import ghidra.trace.model.memory
import ghidra.trace.model.program
import ghidra.trace.model.thread
import ghidra.util.task
import java.io
import java.lang
import java.util
import utility.function


class DBTraceVariableSnapProgramView(ghidra.trace.database.program.DBTraceProgramView, ghidra.trace.model.program.TraceVariableSnapProgramView):




    def __init__(self, __a0: ghidra.trace.database.DBTrace, __a1: long, __a2: ghidra.program.model.lang.CompilerSpec): ...



    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createAddressSetPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.AddressSetPropertyMap: ...

    def createIntRangeMap(self, __a0: unicode) -> ghidra.program.database.IntRangeMap: ...

    def createOverlaySpace(self, __a0: unicode, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.program.database.ProgramOverlayAddressSpace: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def deleteAddressSetPropertyMap(self, __a0: unicode) -> None: ...

    def deleteIntRangeMap(self, __a0: unicode) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getAddressMap(self) -> ghidra.program.database.map.AddressMap: ...

    def getAddressSetPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.AddressSetPropertyMap: ...

    def getAllRedoNames(self) -> List[object]: ...

    def getAllUndoNames(self) -> List[object]: ...

    def getBookmarkManager(self) -> ghidra.program.model.listing.BookmarkManager: ...

    def getChanges(self) -> ghidra.program.model.listing.ProgramChangeSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompiler(self) -> unicode: ...

    def getCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getConsumerList(self) -> List[object]: ...

    def getCreationDate(self) -> java.util.Date: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDefaultPointerSize(self) -> int: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEquateTable(self) -> ghidra.program.model.symbol.EquateTable: ...

    def getExecutableFormat(self) -> unicode: ...

    def getExecutableMD5(self) -> unicode: ...

    def getExecutablePath(self) -> unicode: ...

    def getExecutableSHA256(self) -> unicode: ...

    def getExternalManager(self) -> ghidra.program.model.symbol.ExternalManager: ...

    def getFunctionManager(self) -> ghidra.program.model.listing.FunctionManager: ...

    def getGlobalNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    def getImageBase(self) -> ghidra.program.model.address.Address: ...

    def getIntRangeMap(self, __a0: unicode) -> ghidra.program.database.IntRangeMap: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getLanguageCompilerSpecPair(self) -> ghidra.program.model.lang.LanguageCompilerSpecPair: ...

    def getLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getListing(self) -> ghidra.program.model.listing.Listing: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMaxSnap(self) -> long: ...

    def getMemory(self) -> ghidra.program.model.mem.Memory: ...

    def getMetadata(self) -> java.util.Map: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getModificationNumber(self) -> long: ...

    def getName(self) -> unicode: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPreferredRootNamespaceCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getProgramContext(self) -> ghidra.program.model.listing.ProgramContext: ...

    def getProgramUserData(self) -> ghidra.program.model.listing.ProgramUserData: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.program.model.symbol.ReferenceManager: ...

    @overload
    def getRegister(self, __a0: unicode) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.pcode.Varnode) -> ghidra.program.model.lang.Register: ...

    @overload
    def getRegister(self, __a0: ghidra.program.model.address.Address, __a1: int) -> ghidra.program.model.lang.Register: ...

    def getRegisters(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.lang.Register]: ...

    def getRelocationTable(self) -> ghidra.program.model.reloc.RelocationTable: ...

    def getSnap(self) -> long: ...

    def getSymbolTable(self) -> ghidra.program.model.symbol.SymbolTable: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getUndoName(self) -> unicode: ...

    def getUniqueProgramID(self) -> long: ...

    def getUsrPropertyManager(self) -> ghidra.program.model.util.PropertyMapManager: ...

    def getViewRegisters(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.program.TraceProgramView: ...

    def getViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    @overload
    def parseAddress(self, __a0: unicode) -> List[ghidra.program.model.address.Address]: ...

    @overload
    def parseAddress(self, __a0: unicode, __a1: bool) -> List[ghidra.program.model.address.Address]: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removeOverlaySpace(self, __a0: unicode) -> bool: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def renameOverlaySpace(self, __a0: unicode, __a1: unicode) -> None: ...

    def restoreImageBase(self) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def seekLatest(self) -> None: ...

    def setCompiler(self, __a0: unicode) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setExecutableFormat(self, __a0: unicode) -> None: ...

    def setExecutableMD5(self, __a0: unicode) -> None: ...

    def setExecutablePath(self, __a0: unicode) -> None: ...

    def setExecutableSHA256(self, __a0: unicode) -> None: ...

    def setImageBase(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> None: ...

    def setLanguage(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.CompilerSpecID, __a2: bool, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setPreferredRootNamespaceCategoryPath(self, __a0: unicode) -> None: ...

    def setSnap(self, __a0: long) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    def updateBytesChanged(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def updateMemoryAddRegionBlock(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateMemoryAddSpaceBlock(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def updateMemoryChangeRegionBlockFlags(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.trace.model.Lifespan) -> None: ...

    def updateMemoryChangeRegionBlockLifespan(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.trace.model.Lifespan) -> None: ...

    def updateMemoryChangeRegionBlockName(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateMemoryChangeRegionBlockRange(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.program.model.address.AddressRange) -> None: ...

    def updateMemoryDeleteRegionBlock(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateMemoryDeleteSpaceBlock(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def updateMemoryRefreshBlocks(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalCallback) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalSupplier) -> object: ...

    @property
    def snap(self) -> long: ...

    @snap.setter
    def snap(self, value: long) -> None: ...