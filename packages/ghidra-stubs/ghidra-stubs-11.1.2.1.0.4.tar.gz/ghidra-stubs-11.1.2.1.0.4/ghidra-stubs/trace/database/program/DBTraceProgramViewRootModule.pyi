from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.listing
import java.lang


class DBTraceProgramViewRootModule(object, ghidra.program.model.listing.ProgramModule):
    EMPTY_MODULE_ARRAY: List[ghidra.program.model.listing.ProgramModule]



    def __init__(self, __a0: ghidra.trace.database.program.AbstractDBTraceProgramViewListing): ...



    @overload
    def add(self, __a0: ghidra.program.model.listing.ProgramFragment) -> None: ...

    @overload
    def add(self, __a0: ghidra.program.model.listing.ProgramModule) -> None: ...

    @overload
    def contains(self, __a0: ghidra.program.model.listing.CodeUnit) -> bool: ...

    @overload
    def contains(self, __a0: ghidra.program.model.listing.ProgramFragment) -> bool: ...

    @overload
    def contains(self, __a0: ghidra.program.model.listing.ProgramModule) -> bool: ...

    def createFragment(self, __a0: unicode) -> ghidra.program.model.listing.ProgramFragment: ...

    def createModule(self, __a0: unicode) -> ghidra.program.model.listing.ProgramModule: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getChildren(self) -> List[ghidra.program.model.listing.Group]: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getFirstAddress(self) -> ghidra.program.model.address.Address: ...

    def getIndex(self, __a0: unicode) -> int: ...

    def getLastAddress(self) -> ghidra.program.model.address.Address: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getModificationNumber(self) -> long: ...

    def getName(self) -> unicode: ...

    def getNumChildren(self) -> int: ...

    def getNumParents(self) -> int: ...

    def getParentNames(self) -> List[unicode]: ...

    def getParents(self) -> List[ghidra.program.model.listing.ProgramModule]: ...

    def getTreeID(self) -> long: ...

    def getTreeName(self) -> unicode: ...

    def getVersionTag(self) -> object: ...

    def hashCode(self) -> int: ...

    @overload
    def isDescendant(self, __a0: ghidra.program.model.listing.ProgramFragment) -> bool: ...

    @overload
    def isDescendant(self, __a0: ghidra.program.model.listing.ProgramModule) -> bool: ...

    def moveChild(self, __a0: unicode, __a1: int) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeChild(self, __a0: unicode) -> bool: ...

    def reparent(self, __a0: unicode, __a1: ghidra.program.model.listing.ProgramModule) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def children(self) -> List[ghidra.program.model.listing.Group]: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def firstAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def lastAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def numChildren(self) -> int: ...

    @property
    def numParents(self) -> int: ...

    @property
    def parentNames(self) -> List[unicode]: ...

    @property
    def parents(self) -> List[ghidra.program.model.listing.ProgramModule]: ...

    @property
    def treeID(self) -> long: ...

    @property
    def treeName(self) -> unicode: ...

    @property
    def versionTag(self) -> object: ...