from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import java.lang
import java.util
import java.util.function


class DBTraceTimeViewport(object, ghidra.trace.model.TraceTimeViewport):








    def addChangeListener(self, __a0: java.lang.Runnable) -> None: ...

    def computeVisibleParts(self, __a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.trace.model.Lifespan, __a2: object, __a3: ghidra.trace.model.TraceTimeViewport.Occlusion) -> ghidra.program.model.address.AddressSet: ...

    def containsAnyUpper(self, __a0: ghidra.trace.model.Lifespan) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getOrderedSnaps(self) -> List[object]: ...

    @overload
    def getOrderedSpans(self) -> List[object]: ...

    @overload
    def getOrderedSpans(self, __a0: long) -> List[object]: ...

    def getReversedSnaps(self) -> List[object]: ...

    def getTop(self, __a0: java.util.function.Function) -> object: ...

    def hashCode(self) -> int: ...

    def isCompletelyVisible(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.Lifespan, __a2: object, __a3: ghidra.trace.model.TraceTimeViewport.Occlusion) -> bool: ...

    def isForked(self) -> bool: ...

    def mergedIterator(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Iterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeChangeListener(self, __a0: java.lang.Runnable) -> None: ...

    def setSnap(self, __a0: long) -> None: ...

    def toString(self) -> unicode: ...

    def unionedAddresses(self, __a0: java.util.function.Function) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def forked(self) -> bool: ...

    @property
    def orderedSnaps(self) -> List[object]: ...

    @property
    def orderedSpans(self) -> List[object]: ...

    @property
    def reversedSnaps(self) -> List[object]: ...

    @property
    def snap(self) -> None: ...  # No getter available.

    @snap.setter
    def snap(self, value: long) -> None: ...