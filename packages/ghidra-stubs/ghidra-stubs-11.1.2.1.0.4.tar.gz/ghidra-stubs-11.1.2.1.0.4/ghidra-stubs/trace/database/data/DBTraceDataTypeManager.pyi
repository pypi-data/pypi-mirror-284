from typing import List
from typing import overload
import db
import ghidra.docking.settings
import ghidra.framework.model
import ghidra.program.database.data
import ghidra.program.database.map
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.trace.database
import ghidra.trace.model
import ghidra.trace.model.data
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util


class DBTraceDataTypeManager(ghidra.program.database.data.ProgramBasedDataTypeManagerDB, ghidra.trace.model.data.TraceBasedDataTypeManager, ghidra.trace.database.DBTraceManager):




    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.trace.database.DBTrace): ...



    def addDataType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataTypeConflictHandler) -> ghidra.program.model.data.DataType: ...

    def addDataTypeManagerListener(self, __a0: ghidra.program.model.data.DataTypeManagerChangeListener) -> None: ...

    def addDataTypes(self, __a0: java.util.Collection, __a1: ghidra.program.model.data.DataTypeConflictHandler, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def addInvalidatedListener(self, __a0: ghidra.program.model.data.InvalidatedListener) -> None: ...

    def addType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataTypeConflictHandler) -> ghidra.program.model.data.DataType: ...

    def allowsDefaultBuiltInSettings(self) -> bool: ...

    def allowsDefaultComponentSettings(self) -> bool: ...

    def associateDataTypeWithArchive(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.SourceArchive) -> None: ...

    def clearAllSettings(self, __a0: ghidra.program.model.listing.Data) -> None: ...

    def clearSetting(self, __a0: ghidra.program.model.listing.Data, __a1: unicode) -> bool: ...

    def close(self) -> None: ...

    def contains(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    def containsCategory(self, __a0: ghidra.program.model.data.CategoryPath) -> bool: ...

    def createCategory(self, __a0: ghidra.program.model.data.CategoryPath) -> ghidra.program.model.data.Category: ...

    def dataTypeChanged(self, __a0: ghidra.program.model.data.DataType, __a1: bool) -> None: ...

    def dataTypeSettingsChanged(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def dedupeAllConflicts(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def dedupeConflicts(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    def deleteAddressRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def disassociate(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def dispose(self) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findDataType(self, __a0: unicode) -> ghidra.program.model.data.DataType: ...

    def findDataTypeForID(self, __a0: ghidra.util.UniversalID) -> ghidra.program.model.data.DataType: ...

    @overload
    def findDataTypes(self, __a0: unicode, __a1: List[object]) -> None: ...

    @overload
    def findDataTypes(self, __a0: unicode, __a1: List[object], __a2: bool, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def findEnumValueNames(self, __a0: long, __a1: java.util.Set) -> None: ...

    def fixupComposites(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def flushEvents(self) -> None: ...

    def getAddressMap(self) -> ghidra.program.database.map.AddressMap: ...

    def getAllComposites(self) -> java.util.Iterator: ...

    @overload
    def getAllDataTypes(self) -> java.util.Iterator: ...

    @overload
    def getAllDataTypes(self, __a0: List[object]) -> None: ...

    def getAllFunctionDefinitions(self) -> java.util.Iterator: ...

    def getAllStructures(self) -> java.util.Iterator: ...

    def getCallingConvention(self, __a0: unicode) -> ghidra.program.model.lang.PrototypeModel: ...

    def getCallingConventionID(self, __a0: unicode, __a1: bool) -> int: ...

    def getCallingConventionName(self, __a0: int) -> unicode: ...

    @overload
    def getCategory(self, __a0: long) -> ghidra.program.model.data.Category: ...

    @overload
    def getCategory(self, __a0: ghidra.program.model.data.CategoryPath) -> ghidra.program.model.data.Category: ...

    def getCategoryCount(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataOrganization(self) -> ghidra.program.model.data.DataOrganization: ...

    @overload
    def getDataType(self, __a0: long) -> ghidra.program.model.data.DataType: ...

    @overload
    def getDataType(self, __a0: unicode) -> ghidra.program.model.data.DataType: ...

    @overload
    def getDataType(self, __a0: ghidra.program.model.data.DataTypePath) -> ghidra.program.model.data.DataType: ...

    @overload
    def getDataType(self, __a0: ghidra.program.model.data.CategoryPath, __a1: unicode) -> ghidra.program.model.data.DataType: ...

    @overload
    def getDataType(self, __a0: ghidra.program.model.data.SourceArchive, __a1: ghidra.util.UniversalID) -> ghidra.program.model.data.DataType: ...

    def getDataTypeCount(self, __a0: bool) -> int: ...

    @overload
    def getDataTypes(self, __a0: ghidra.program.model.data.CategoryPath) -> List[ghidra.program.model.data.DataType]: ...

    @overload
    def getDataTypes(self, __a0: ghidra.program.model.data.SourceArchive) -> List[object]: ...

    def getDataTypesContaining(self, __a0: ghidra.program.model.data.DataType) -> java.util.Set: ...

    def getDefaultCallingConvention(self) -> ghidra.program.model.lang.PrototypeModel: ...

    def getDefinedCallingConventionNames(self) -> java.util.Collection: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getFavorites(self) -> List[object]: ...

    def getID(self, __a0: ghidra.program.model.data.DataType) -> long: ...

    def getInstanceSettingsNames(self, __a0: ghidra.program.model.listing.Data) -> List[unicode]: ...

    def getKnownCallingConventionNames(self) -> java.util.Collection: ...

    def getLastChangeTimeForMyManager(self) -> long: ...

    def getLocalSourceArchive(self) -> ghidra.program.model.data.SourceArchive: ...

    def getLongSettingsValue(self, __a0: ghidra.program.model.listing.Data, __a1: unicode) -> long: ...

    def getName(self) -> unicode: ...

    def getPath(self) -> unicode: ...

    @overload
    def getPointer(self, __a0: ghidra.program.model.data.DataType) -> ghidra.program.model.data.Pointer: ...

    @overload
    def getPointer(self, __a0: ghidra.program.model.data.DataType, __a1: int) -> ghidra.program.model.data.Pointer: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramArchitecture(self) -> ghidra.program.model.lang.ProgramArchitecture: ...

    def getProgramArchitectureSummary(self) -> unicode: ...

    def getResolvedID(self, __a0: ghidra.program.model.data.DataType) -> long: ...

    def getRootCategory(self) -> ghidra.program.model.data.Category: ...

    def getSettings(self, __a0: ghidra.program.model.listing.Data, __a1: unicode) -> object: ...

    @overload
    def getSourceArchive(self, __a0: unicode) -> ghidra.program.model.data.SourceArchive: ...

    @overload
    def getSourceArchive(self, __a0: ghidra.util.UniversalID) -> ghidra.program.model.data.SourceArchive: ...

    def getSourceArchives(self) -> List[object]: ...

    def getStringSettingsValue(self, __a0: ghidra.program.model.listing.Data, __a1: unicode) -> unicode: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getType(self) -> ghidra.program.model.data.ArchiveType: ...

    def getUniqueName(self, __a0: ghidra.program.model.data.CategoryPath, __a1: unicode) -> unicode: ...

    def getUniversalID(self) -> ghidra.util.UniversalID: ...

    @overload
    def getUnusedConflictName(self, __a0: ghidra.program.model.data.DataType) -> unicode: ...

    @overload
    def getUnusedConflictName(self, __a0: ghidra.program.model.data.CategoryPath, __a1: ghidra.program.model.data.DataType) -> unicode: ...

    def hashCode(self) -> int: ...

    @overload
    def invalidateCache(self) -> None: ...

    @overload
    def invalidateCache(self, __a0: bool) -> None: ...

    def isChangeAllowed(self, __a0: ghidra.program.model.listing.Data, __a1: ghidra.docking.settings.SettingsDefinition) -> bool: ...

    def isChanged(self) -> bool: ...

    def isEmptySetting(self, __a0: ghidra.program.model.listing.Data) -> bool: ...

    def isFavorite(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    def isUpdatable(self) -> bool: ...

    def moveAddressRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    def remove(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    def removeDataTypeManagerListener(self, __a0: ghidra.program.model.data.DataTypeManagerChangeListener) -> None: ...

    def removeInvalidatedListener(self, __a0: ghidra.program.model.data.InvalidatedListener) -> None: ...

    def removeSourceArchive(self, __a0: ghidra.program.model.data.SourceArchive) -> None: ...

    def replaceDataType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataType, __a2: bool) -> ghidra.program.model.data.DataType: ...

    def replaceSourceArchive(self, __a0: ghidra.program.model.data.SourceArchive, __a1: ghidra.program.model.data.SourceArchive) -> None: ...

    def replaceType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataType, __a2: bool) -> ghidra.program.model.data.DataType: ...

    def resolve(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataTypeConflictHandler) -> ghidra.program.model.data.DataType: ...

    def resolveSourceArchive(self, __a0: ghidra.program.model.data.SourceArchive) -> ghidra.program.model.data.SourceArchive: ...

    def resolveType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.data.DataTypeConflictHandler) -> ghidra.program.model.data.DataType: ...

    def setFavorite(self, __a0: ghidra.program.model.data.DataType, __a1: bool) -> None: ...

    def setLongSettingsValue(self, __a0: ghidra.program.model.listing.Data, __a1: unicode, __a2: long) -> bool: ...

    def setName(self, __a0: unicode) -> None: ...

    def setSettings(self, __a0: ghidra.program.model.listing.Data, __a1: unicode, __a2: object) -> bool: ...

    def setStringSettingsValue(self, __a0: ghidra.program.model.listing.Data, __a1: unicode, __a2: unicode) -> bool: ...

    def sourceArchiveChanged(self, __a0: ghidra.util.UniversalID) -> None: ...

    def startTransaction(self, __a0: unicode) -> int: ...

    def toString(self) -> unicode: ...

    def updateID(self) -> None: ...

    @overload
    def updateSourceArchiveName(self, __a0: unicode, __a1: unicode) -> bool: ...

    @overload
    def updateSourceArchiveName(self, __a0: ghidra.util.UniversalID, __a1: unicode) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def path(self) -> unicode: ...

    @property
    def trace(self) -> ghidra.trace.database.DBTrace: ...

    @property
    def type(self) -> ghidra.program.model.data.ArchiveType: ...

    @property
    def updatable(self) -> bool: ...