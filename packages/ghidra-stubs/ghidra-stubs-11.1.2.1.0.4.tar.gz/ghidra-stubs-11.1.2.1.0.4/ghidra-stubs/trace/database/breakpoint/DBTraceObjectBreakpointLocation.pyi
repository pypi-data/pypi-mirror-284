from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import ghidra.trace.model.target
import ghidra.trace.util
import ghidra.util.database
import java.lang
import java.util


class DBTraceObjectBreakpointLocation(object, ghidra.trace.model.breakpoint.TraceObjectBreakpointLocation, ghidra.trace.database.target.DBTraceObjectInterface):
    KEY_COMMENT: unicode = u'_comment'
    KEY_EMU_ENABLED: unicode = u'_emu_enabled'
    KEY_EMU_SLEIGH: unicode = u'_emu_sleigh'



    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObject): ...



    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getClearedSnap(self) -> long: ...

    def getComment(self) -> unicode: ...

    def getEmuSleigh(self) -> unicode: ...

    def getKinds(self) -> java.util.Set: ...

    def getLength(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getOrCreateSpecification(self) -> ghidra.trace.model.breakpoint.TraceObjectBreakpointSpec: ...

    def getPath(self) -> unicode: ...

    def getPlacedSnap(self) -> long: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getSpecification(self) -> ghidra.trace.model.breakpoint.TraceObjectBreakpointSpec: ...

    def getThreads(self) -> java.util.Set: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getTraceAddressSpace(self) -> ghidra.trace.util.TraceAddressSpace: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def isEmuEnabled(self, __a0: long) -> bool: ...

    def isEnabled(self, __a0: long) -> bool: ...

    def isValid(self, __a0: long) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setClearedSnap(self, __a0: long) -> None: ...

    @overload
    def setComment(self, __a0: unicode) -> None: ...

    @overload
    def setComment(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    @overload
    def setEmuEnabled(self, __a0: bool) -> None: ...

    @overload
    def setEmuEnabled(self, __a0: ghidra.trace.model.Lifespan, __a1: bool) -> None: ...

    @overload
    def setEmuSleigh(self, __a0: unicode) -> None: ...

    @overload
    def setEmuSleigh(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    @overload
    def setEnabled(self, __a0: bool) -> None: ...

    @overload
    def setEnabled(self, __a0: ghidra.trace.model.Lifespan, __a1: bool) -> None: ...

    @overload
    def setKinds(self, __a0: java.util.Collection) -> None: ...

    @overload
    def setKinds(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.Collection) -> None: ...

    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    @overload
    def setName(self, __a0: unicode) -> None: ...

    @overload
    def setName(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    def setRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def spaceForValue(self, __a0: long, __a1: unicode) -> ghidra.trace.util.TraceAddressSpace: ...

    def splitAndSet(self, __a0: long, __a1: bool, __a2: java.util.Collection) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def toString(self) -> unicode: ...

    def translateEvent(self, __a0: ghidra.trace.util.TraceChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def clearedSnap(self) -> long: ...

    @clearedSnap.setter
    def clearedSnap(self, value: long) -> None: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def emuEnabled(self) -> None: ...  # No getter available.

    @emuEnabled.setter
    def emuEnabled(self, value: bool) -> None: ...

    @property
    def emuSleigh(self) -> unicode: ...

    @emuSleigh.setter
    def emuSleigh(self, value: unicode) -> None: ...

    @property
    def enabled(self) -> None: ...  # No getter available.

    @enabled.setter
    def enabled(self, value: bool) -> None: ...

    @property
    def kinds(self) -> java.util.Set: ...

    @property
    def length(self) -> long: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def orCreateSpecification(self) -> ghidra.trace.model.breakpoint.TraceObjectBreakpointSpec: ...

    @property
    def path(self) -> unicode: ...

    @property
    def placedSnap(self) -> long: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def specification(self) -> ghidra.trace.model.breakpoint.TraceObjectBreakpointSpec: ...

    @property
    def threads(self) -> java.util.Set: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def traceAddressSpace(self) -> ghidra.trace.util.TraceAddressSpace: ...