from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.database
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.modules
import ghidra.trace.util
import java.io
import java.lang
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceModuleManager(ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager, ghidra.trace.model.modules.TraceModuleManager, ghidra.trace.database.space.DBTraceDelegatingManager):
    NAME: unicode = u'Module'



    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace): ...



    def addLoadedModule(self, __a0: unicode, __a1: unicode, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.modules.TraceModule: ...

    def addModule(self, __a0: unicode, __a1: unicode, __a2: ghidra.program.model.address.AddressRange, __a3: ghidra.trace.model.Lifespan) -> ghidra.trace.model.modules.TraceModule: ...

    def checkIsInMemory(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def delegateAddressSet(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> ghidra.program.model.address.AddressSetView: ...

    def delegateAny(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcPredicate) -> bool: ...

    def delegateCollection(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.Collection: ...

    def delegateDeleteB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    def delegateDeleteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateFirst(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> object: ...

    def delegateHashSet(self, __a0: java.lang.Iterable, __a1: java.util.function.Function) -> java.util.HashSet: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    @overload
    def delegateRead(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: object) -> object: ...

    def delegateReadB(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.Predicate, __a2: bool) -> bool: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: int) -> int: ...

    @overload
    def delegateReadI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction, __a2: java.util.function.IntSupplier) -> int: ...

    def delegateReadOr(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction, __a2: ghidra.trace.database.space.DBTraceDelegatingManager.ExcSupplier) -> object: ...

    def delegateWrite(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcFunction) -> object: ...

    def delegateWriteAll(self, __a0: java.lang.Iterable, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def delegateWriteI(self, __a0: ghidra.program.model.address.AddressSpace, __a1: java.util.function.ToIntFunction) -> int: ...

    def delegateWriteV(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.database.space.DBTraceDelegatingManager.ExcConsumer) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getActiveMemorySpaces(self) -> java.util.Collection: ...

    def getActiveRegisterSpaces(self) -> java.util.Collection: ...

    def getActiveSpaces(self) -> java.util.Collection: ...

    def getAllModules(self) -> java.util.Collection: ...

    def getAllSections(self) -> java.util.Collection: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getClass(self) -> java.lang.Class: ...

    def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> object: ...

    def getLoadedModuleByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.modules.TraceModule: ...

    def getLoadedModules(self, __a0: long) -> java.util.Collection: ...

    def getLoadedSectionByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.modules.TraceSection: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getModulesAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getModulesByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getModulesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getSectionsAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getSectionsByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getSectionsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getTrace(self) -> ghidra.trace.database.DBTrace: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

    @property
    def allModules(self) -> java.util.Collection: ...

    @property
    def allSections(self) -> java.util.Collection: ...

    @property
    def lock(self) -> java.util.concurrent.locks.ReadWriteLock: ...