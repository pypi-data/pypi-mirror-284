from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.trace.model.modules
import ghidra.trace.model.target
import ghidra.trace.util
import ghidra.util.database
import java.lang
import java.util


class DBTraceObjectModule(object, ghidra.trace.model.modules.TraceObjectModule, ghidra.trace.database.target.DBTraceObjectInterface):




    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObject): ...



    @overload
    def addSection(self, __a0: unicode, __a1: ghidra.program.model.address.AddressRange) -> ghidra.trace.model.modules.TraceSection: ...

    @overload
    def addSection(self, __a0: unicode, __a1: unicode, __a2: ghidra.program.model.address.AddressRange) -> ghidra.trace.model.modules.TraceSection: ...

    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBase(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getLoadedSnap(self) -> long: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getPath(self) -> unicode: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getSectionByName(self, __a0: unicode) -> ghidra.trace.model.modules.TraceSection: ...

    def getSections(self) -> java.util.Collection: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getUnloadedSnap(self) -> long: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBase(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def setLength(self, __a0: long) -> None: ...

    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def setLoadedSnap(self, __a0: long) -> None: ...

    def setMaxAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def setName(self, __a0: unicode) -> None: ...

    @overload
    def setName(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    @overload
    def setRange(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    @overload
    def setRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def setUnloadedSnap(self, __a0: long) -> None: ...

    def spaceForValue(self, __a0: long, __a1: unicode) -> ghidra.trace.util.TraceAddressSpace: ...

    def toString(self) -> unicode: ...

    def translateEvent(self, __a0: ghidra.trace.util.TraceChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def base(self) -> ghidra.program.model.address.Address: ...

    @base.setter
    def base(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def length(self) -> long: ...

    @length.setter
    def length(self, value: long) -> None: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def loadedSnap(self) -> long: ...

    @loadedSnap.setter
    def loadedSnap(self, value: long) -> None: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @maxAddress.setter
    def maxAddress(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def path(self) -> unicode: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @range.setter
    def range(self, value: ghidra.program.model.address.AddressRange) -> None: ...

    @property
    def sections(self) -> java.util.Collection: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def unloadedSnap(self) -> long: ...

    @unloadedSnap.setter
    def unloadedSnap(self, value: long) -> None: ...