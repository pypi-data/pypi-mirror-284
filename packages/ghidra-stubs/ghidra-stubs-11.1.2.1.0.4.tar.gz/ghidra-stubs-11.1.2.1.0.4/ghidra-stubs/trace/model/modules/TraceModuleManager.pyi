from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.modules
import java.lang
import java.util


class TraceModuleManager(ghidra.trace.model.modules.TraceModuleOperations, object):








    def addLoadedModule(self, __a0: unicode, __a1: unicode, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.modules.TraceModule: ...

    def addModule(self, __a0: unicode, __a1: unicode, __a2: ghidra.program.model.address.AddressRange, __a3: ghidra.trace.model.Lifespan) -> ghidra.trace.model.modules.TraceModule: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllModules(self) -> java.util.Collection: ...

    def getAllSections(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getLoadedModuleByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.modules.TraceModule: ...

    def getLoadedModules(self, __a0: long) -> java.util.Collection: ...

    def getLoadedSectionByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.modules.TraceSection: ...

    def getModulesAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getModulesByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getModulesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getSectionsAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getSectionsByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getSectionsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allModules(self) -> java.util.Collection: ...

    @property
    def allSections(self) -> java.util.Collection: ...