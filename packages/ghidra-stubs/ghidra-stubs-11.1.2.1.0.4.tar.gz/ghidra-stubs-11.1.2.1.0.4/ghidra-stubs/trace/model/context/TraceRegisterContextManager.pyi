from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.thread
import java.lang
import java.util


class TraceRegisterContextManager(ghidra.trace.model.context.TraceRegisterContextOperations, object):








    def clear(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getEntry(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> java.util.Map.Entry: ...

    def getRegisterContextRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.context.TraceRegisterContextSpace: ...

    def getRegisterContextSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.model.context.TraceRegisterContextSpace: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getRegisterValueAddressRanges(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressSetView: ...

    def getValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def getValueWithDefault(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.Address) -> ghidra.program.model.lang.RegisterValue: ...

    def hasRegisterValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long) -> bool: ...

    def hasRegisterValueInAddressRange(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: long, __a3: ghidra.program.model.address.AddressRange) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.Register, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def setValue(self, __a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.RegisterValue, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

