from typing import List
from typing import overload
import ghidra.trace.model
import ghidra.trace.model.stack
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.util.database
import java.lang


class TraceObjectStack(ghidra.trace.model.stack.TraceStack, ghidra.trace.model.target.TraceObjectInterface, object):








    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDepth(self) -> int: ...

    def getFrame(self, __a0: int, __a1: bool) -> ghidra.trace.model.stack.TraceStackFrame: ...

    def getFrames(self, __a0: long) -> List[object]: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getSnap(self) -> long: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hasFixedFrames(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDepth(self, __a0: int, __a1: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def depth(self) -> int: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def snap(self) -> long: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...