from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.stack
import ghidra.trace.model.target
import java.lang


class TraceObjectStackFrame(ghidra.trace.model.stack.TraceStackFrame, ghidra.trace.model.target.TraceObjectInterface, object):








    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self, __a0: long) -> unicode: ...

    def getLevel(self) -> int: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getProgramCounter(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def getStack(self) -> ghidra.trace.model.stack.TraceStack: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, __a0: long, __a1: unicode) -> None: ...

    def setProgramCounter(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def level(self) -> int: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def stack(self) -> ghidra.trace.model.stack.TraceStack: ...