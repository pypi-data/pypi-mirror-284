from typing import overload
import ghidra.dbg.target.schema
import ghidra.dbg.util
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.target
import java.lang
import java.util
import java.util.stream


class TraceObjectManager(object):








    def clear(self) -> None: ...

    def createObject(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.trace.model.target.TraceObject: ...

    def createRootObject(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema) -> ghidra.trace.model.target.TraceObjectValue: ...

    def cullDisconnectedObjects(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllObjects(self) -> java.util.stream.Stream: ...

    def getAllValues(self) -> java.util.stream.Stream: ...

    def getClass(self) -> java.lang.Class: ...

    def getObjectByCanonicalPath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectById(self, __a0: long) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectCount(self) -> int: ...

    def getObjectsByPath(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObjectKeyPath) -> java.util.stream.Stream: ...

    def getRootObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getRootSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getValuePaths(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    @overload
    def getValuesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    @overload
    def getValuesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: unicode) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def queryAllInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class) -> java.util.stream.Stream: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allObjects(self) -> java.util.stream.Stream: ...

    @property
    def allValues(self) -> java.util.stream.Stream: ...

    @property
    def objectCount(self) -> int: ...

    @property
    def rootObject(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def rootSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...