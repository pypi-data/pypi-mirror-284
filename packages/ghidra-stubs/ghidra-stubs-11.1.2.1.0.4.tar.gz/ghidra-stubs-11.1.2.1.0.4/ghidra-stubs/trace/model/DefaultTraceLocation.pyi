from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang


class DefaultTraceLocation(object, ghidra.trace.model.TraceLocation):




    def __init__(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.Address): ...



    @overload
    def compareTo(self, __a0: ghidra.trace.model.TraceLocation) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...