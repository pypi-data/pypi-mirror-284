from typing import List
from typing import overload
import ghidra.dbg.target
import ghidra.dbg.target.schema
import ghidra.dbg.util
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.util.task
import java.lang
import java.util


class TraceGuestPlatform(ghidra.trace.model.guest.TracePlatform, object):








    def addMappedRange(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long) -> ghidra.trace.model.guest.TraceGuestPlatformMappedRange: ...

    def addMappedRegisterRange(self) -> ghidra.trace.model.guest.TraceGuestPlatformMappedRange: ...

    def addRegisterMapOverride(self, __a0: ghidra.program.model.lang.Register, __a1: unicode) -> ghidra.trace.model.symbol.TraceLabelSymbol: ...

    def delete(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getConventionalRegisterObjectNames(self, __a0: ghidra.program.model.lang.Register) -> java.util.Collection: ...

    @overload
    def getConventionalRegisterPath(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.lang.Register) -> ghidra.dbg.util.PathMatcher: ...

    @overload
    def getConventionalRegisterPath(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.program.model.lang.Register) -> ghidra.dbg.util.PathMatcher: ...

    @overload
    def getConventionalRegisterPath(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.program.model.lang.Register) -> ghidra.dbg.util.PathMatcher: ...

    @overload
    def getConventionalRegisterPath(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema, __a1: List[object], __a2: ghidra.program.model.lang.Register) -> ghidra.dbg.util.PathMatcher: ...

    @overload
    def getConventionalRegisterPath(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema, __a1: List[object], __a2: java.util.Collection) -> ghidra.dbg.util.PathMatcher: ...

    def getConventionalRegisterRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.program.model.lang.Register) -> ghidra.program.model.address.AddressRange: ...

    def getGuestAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getHostAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getMappedMemBuffer(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.mem.MemBuffer: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isGuest(self) -> bool: ...

    def isHost(self) -> bool: ...

    def mapGuestInstructionAddressesToHost(self, __a0: ghidra.program.model.lang.InstructionSet) -> ghidra.program.model.lang.InstructionSet: ...

    @overload
    def mapGuestToHost(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def mapGuestToHost(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressRange: ...

    @overload
    def mapGuestToHost(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def mapHostToGuest(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def mapHostToGuest(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressRange: ...

    @overload
    def mapHostToGuest(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSetView: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def compilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def guest(self) -> bool: ...

    @property
    def guestAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def host(self) -> bool: ...

    @property
    def hostAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...