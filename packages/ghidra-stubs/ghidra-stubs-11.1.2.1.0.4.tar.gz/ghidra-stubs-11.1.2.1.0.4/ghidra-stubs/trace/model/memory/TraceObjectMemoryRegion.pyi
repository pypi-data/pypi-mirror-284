from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.memory
import ghidra.trace.model.target
import ghidra.util.database
import java.lang
import java.util


class TraceObjectMemoryRegion(ghidra.trace.model.memory.TraceMemoryRegion, ghidra.trace.model.target.TraceObjectInterface, object):
    KEY_VOLATILE: unicode = u'_volatile'







    @overload
    def addFlags(self, __a0: List[ghidra.trace.model.memory.TraceMemoryFlag]) -> None: ...

    @overload
    def addFlags(self, __a0: java.util.Collection) -> None: ...

    @overload
    def addFlags(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.Collection) -> None: ...

    @overload
    def clearFlags(self, __a0: List[ghidra.trace.model.memory.TraceMemoryFlag]) -> None: ...

    @overload
    def clearFlags(self, __a0: java.util.Collection) -> None: ...

    @overload
    def clearFlags(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.Collection) -> None: ...

    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCreationSnap(self) -> long: ...

    def getDestructionSnap(self) -> long: ...

    @overload
    def getFlags(self) -> java.util.Set: ...

    @overload
    def getFlags(self, __a0: long) -> java.util.Set: ...

    def getLength(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    @overload
    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    @overload
    def getMaxAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    @overload
    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    @overload
    def getMinAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getPath(self) -> unicode: ...

    @overload
    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    @overload
    def getRange(self, __a0: long) -> ghidra.program.model.address.AddressRange: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def isExecute(self) -> bool: ...

    def isRead(self) -> bool: ...

    def isValid(self, __a0: long) -> bool: ...

    def isVolatile(self) -> bool: ...

    def isWrite(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setCreationSnap(self, __a0: long) -> None: ...

    def setDestructionSnap(self, __a0: long) -> None: ...

    def setExecute(self, __a0: bool) -> None: ...

    @overload
    def setFlags(self, __a0: List[ghidra.trace.model.memory.TraceMemoryFlag]) -> None: ...

    @overload
    def setFlags(self, __a0: java.util.Collection) -> None: ...

    @overload
    def setFlags(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.Collection) -> None: ...

    def setLength(self, __a0: long) -> None: ...

    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def setMaxAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def setMinAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def setName(self, __a0: unicode) -> None: ...

    @overload
    def setName(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    @overload
    def setRange(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    @overload
    def setRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def setRead(self, __a0: bool) -> None: ...

    def setVolatile(self, __a0: bool) -> None: ...

    def setWrite(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def creationSnap(self) -> long: ...

    @creationSnap.setter
    def creationSnap(self, value: long) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def destructionSnap(self) -> long: ...

    @destructionSnap.setter
    def destructionSnap(self, value: long) -> None: ...

    @property
    def execute(self) -> bool: ...

    @execute.setter
    def execute(self, value: bool) -> None: ...

    @property
    def flags(self) -> java.util.Set: ...

    @property
    def length(self) -> long: ...

    @length.setter
    def length(self, value: long) -> None: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @maxAddress.setter
    def maxAddress(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @minAddress.setter
    def minAddress(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def path(self) -> unicode: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @range.setter
    def range(self, value: ghidra.program.model.address.AddressRange) -> None: ...

    @property
    def read(self) -> bool: ...

    @read.setter
    def read(self, value: bool) -> None: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def volatile(self) -> bool: ...

    @volatile.setter
    def volatile(self, value: bool) -> None: ...

    @property
    def write(self) -> bool: ...

    @write.setter
    def write(self, value: bool) -> None: ...