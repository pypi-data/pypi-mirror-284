from typing import overload
import ghidra.program.model.address
import ghidra.program.model.symbol
import ghidra.trace.model
import java.lang


class TraceReference(ghidra.program.model.symbol.Reference, object):
    MNEMONIC: int = -1
    OTHER: int = -2







    def clearAssociatedSymbol(self) -> None: ...

    @overload
    def compareTo(self, __a0: ghidra.program.model.symbol.Reference) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAssociatedSymbol(self) -> ghidra.program.model.symbol.Symbol: ...

    def getClass(self) -> java.lang.Class: ...

    def getFromAddress(self) -> ghidra.program.model.address.Address: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getOperandIndex(self) -> int: ...

    def getReferenceType(self) -> ghidra.program.model.symbol.RefType: ...

    def getSource(self) -> ghidra.program.model.symbol.SourceType: ...

    def getStartSnap(self) -> long: ...

    def getSymbolID(self) -> long: ...

    def getToAddress(self) -> ghidra.program.model.address.Address: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isEntryPointReference(self) -> bool: ...

    def isExternalReference(self) -> bool: ...

    def isMemoryReference(self) -> bool: ...

    def isMnemonicReference(self) -> bool: ...

    def isOffsetReference(self) -> bool: ...

    def isOperandReference(self) -> bool: ...

    def isPrimary(self) -> bool: ...

    def isRegisterReference(self) -> bool: ...

    def isShiftedReference(self) -> bool: ...

    def isStackReference(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAssociatedSymbol(self, __a0: ghidra.program.model.symbol.Symbol) -> None: ...

    def setPrimary(self, __a0: bool) -> None: ...

    def setReferenceType(self, __a0: ghidra.program.model.symbol.RefType) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def associatedSymbol(self) -> ghidra.program.model.symbol.Symbol: ...

    @associatedSymbol.setter
    def associatedSymbol(self, value: ghidra.program.model.symbol.Symbol) -> None: ...

    @property
    def entryPointReference(self) -> bool: ...

    @property
    def externalReference(self) -> bool: ...

    @property
    def fromAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def memoryReference(self) -> bool: ...

    @property
    def mnemonicReference(self) -> bool: ...

    @property
    def offsetReference(self) -> bool: ...

    @property
    def operandIndex(self) -> int: ...

    @property
    def operandReference(self) -> bool: ...

    @property
    def primary(self) -> bool: ...

    @primary.setter
    def primary(self, value: bool) -> None: ...

    @property
    def referenceType(self) -> ghidra.program.model.symbol.RefType: ...

    @referenceType.setter
    def referenceType(self, value: ghidra.program.model.symbol.RefType) -> None: ...

    @property
    def registerReference(self) -> bool: ...

    @property
    def shiftedReference(self) -> bool: ...

    @property
    def source(self) -> ghidra.program.model.symbol.SourceType: ...

    @property
    def stackReference(self) -> bool: ...

    @property
    def startSnap(self) -> long: ...

    @property
    def symbolID(self) -> long: ...

    @property
    def toAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...