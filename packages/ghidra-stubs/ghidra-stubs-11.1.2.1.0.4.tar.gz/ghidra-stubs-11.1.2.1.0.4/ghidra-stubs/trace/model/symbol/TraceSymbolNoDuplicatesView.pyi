from typing import overload
import ghidra.trace.model.symbol
import java.lang
import java.util


class TraceSymbolNoDuplicatesView(ghidra.trace.model.symbol.TraceSymbolView, object):








    def equals(self, __a0: object) -> bool: ...

    def getAll(self, __a0: bool) -> java.util.Collection: ...

    def getChildNamed(self, __a0: unicode, __a1: ghidra.trace.model.symbol.TraceNamespaceSymbol) -> ghidra.trace.model.symbol.TraceSymbol: ...

    def getChildren(self, __a0: ghidra.trace.model.symbol.TraceNamespaceSymbol) -> java.util.Collection: ...

    def getChildrenNamed(self, __a0: unicode, __a1: ghidra.trace.model.symbol.TraceNamespaceSymbol) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getGlobalNamed(self, __a0: unicode) -> ghidra.trace.model.symbol.TraceSymbol: ...

    def getGlobals(self) -> java.util.Collection: ...

    def getGlobalsNamed(self, __a0: unicode) -> java.util.Collection: ...

    def getManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getNamed(self, __a0: unicode) -> java.util.Collection: ...

    def getWithMatchingName(self, __a0: unicode, __a1: bool) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def scanByName(self, __a0: unicode) -> java.util.Iterator: ...

    def size(self, __a0: bool) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def globals(self) -> java.util.Collection: ...

    @property
    def manager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...