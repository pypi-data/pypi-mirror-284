from typing import overload
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang


class TraceBookmark(ghidra.program.model.listing.Bookmark, object):








    def compareTo(self, __a0: object) -> int: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getCategory(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getId(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getType(self) -> ghidra.program.model.listing.BookmarkType: ...

    def getTypeString(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def set(self, __a0: unicode, __a1: unicode) -> None: ...

    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def category(self) -> unicode: ...

    @property
    def comment(self) -> unicode: ...

    @property
    def id(self) -> long: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def type(self) -> ghidra.trace.model.bookmark.TraceBookmarkType: ...

    @property
    def typeString(self) -> unicode: ...