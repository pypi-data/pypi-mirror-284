from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import java.lang
import java.util


class TraceBreakpointManager(object):








    @overload
    def addBreakpoint(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.Address, __a3: java.util.Collection, __a4: java.util.Collection, __a5: bool, __a6: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    @overload
    def addBreakpoint(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection, __a4: java.util.Collection, __a5: bool, __a6: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllBreakpoints(self) -> java.util.Collection: ...

    def getBreakpointsAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getBreakpointsByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getBreakpointsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getPlacedBreakpointByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def placeBreakpoint(self, __a0: unicode, __a1: long, __a2: ghidra.program.model.address.Address, __a3: java.util.Collection, __a4: java.util.Collection, __a5: bool, __a6: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    @overload
    def placeBreakpoint(self, __a0: unicode, __a1: long, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection, __a4: java.util.Collection, __a5: bool, __a6: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allBreakpoints(self) -> java.util.Collection: ...