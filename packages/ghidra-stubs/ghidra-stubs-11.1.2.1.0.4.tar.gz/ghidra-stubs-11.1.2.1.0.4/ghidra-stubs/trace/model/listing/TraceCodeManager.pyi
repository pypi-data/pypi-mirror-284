from typing import overload
import ghidra.program.model.address
import ghidra.trace.model.listing
import ghidra.trace.model.stack
import ghidra.trace.model.thread
import ghidra.trace.util
import java.lang


class TraceCodeManager(ghidra.trace.model.listing.TraceCodeOperations, object):








    def codeUnits(self) -> ghidra.trace.model.listing.TraceCodeUnitsView: ...

    def data(self) -> ghidra.trace.model.listing.TraceDataView: ...

    def definedData(self) -> ghidra.trace.model.listing.TraceDefinedDataView: ...

    def definedUnits(self) -> ghidra.trace.model.listing.TraceDefinedUnitsView: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeAdded(self, __a0: long, __a1: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.stack.TraceStackFrame, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    @overload
    def getCodeRegisterSpace(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int, __a2: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    def getCodeRemoved(self, __a0: long, __a1: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getCodeSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    @overload
    def getCodeSpace(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.model.listing.TraceCodeSpace: ...

    def hashCode(self) -> int: ...

    def instructions(self) -> ghidra.trace.model.listing.TraceInstructionsView: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def undefinedData(self) -> ghidra.trace.model.listing.TraceUndefinedDataView: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

