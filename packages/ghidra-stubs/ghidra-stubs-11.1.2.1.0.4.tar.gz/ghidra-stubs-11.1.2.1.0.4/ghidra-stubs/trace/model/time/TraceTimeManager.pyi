from typing import overload
import ghidra.trace.model.time
import ghidra.trace.model.time.schedule
import java.lang
import java.util


class TraceTimeManager(object):








    def createSnapshot(self, __a0: unicode) -> ghidra.trace.model.time.TraceSnapshot: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllSnapshots(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getMaxSnap(self) -> long: ...

    def getMostRecentSnapshot(self, __a0: long) -> ghidra.trace.model.time.TraceSnapshot: ...

    def getSnapshot(self, __a0: long, __a1: bool) -> ghidra.trace.model.time.TraceSnapshot: ...

    def getSnapshotCount(self) -> long: ...

    def getSnapshots(self, __a0: long, __a1: bool, __a2: long, __a3: bool) -> java.util.Collection: ...

    def getSnapshotsWithSchedule(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allSnapshots(self) -> java.util.Collection: ...

    @property
    def maxSnap(self) -> long: ...

    @property
    def snapshotCount(self) -> long: ...