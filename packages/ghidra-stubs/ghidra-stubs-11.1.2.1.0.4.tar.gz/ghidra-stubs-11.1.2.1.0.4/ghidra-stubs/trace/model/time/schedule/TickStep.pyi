from typing import List
from typing import overload
import ghidra.pcode.emu
import ghidra.program.model.lang
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import ghidra.util.task
import java.lang


class TickStep(ghidra.trace.model.time.schedule.AbstractStep):




    def __init__(self, __a0: long, __a1: long): ...



    def addTo(self, __a0: ghidra.trace.model.time.schedule.Step) -> None: ...

    def advance(self, __a0: long) -> None: ...

    def clone(self) -> object: ...

    def coalescePatches(self, __a0: ghidra.program.model.lang.Language, __a1: List[object]) -> long: ...

    def compareStep(self, __a0: ghidra.trace.model.time.schedule.Step) -> ghidra.trace.model.time.schedule.CompareResult: ...

    def compareStepType(self, __a0: ghidra.trace.model.time.schedule.Step) -> ghidra.trace.model.time.schedule.CompareResult: ...

    @overload
    def compareTo(self, __a0: ghidra.trace.model.time.schedule.Step) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def execute(self, __a0: ghidra.pcode.emu.PcodeThread, __a1: ghidra.trace.model.time.schedule.Stepper, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def execute(self, __a0: ghidra.trace.model.thread.TraceThreadManager, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.pcode.emu.PcodeMachine, __a3: ghidra.trace.model.time.schedule.Stepper, __a4: ghidra.util.task.TaskMonitor) -> ghidra.trace.model.thread.TraceThread: ...

    def getClass(self) -> java.lang.Class: ...

    def getPatchCount(self) -> long: ...

    def getThread(self, __a0: ghidra.trace.model.thread.TraceThreadManager, __a1: ghidra.trace.model.thread.TraceThread) -> ghidra.trace.model.thread.TraceThread: ...

    def getThreadKey(self) -> long: ...

    def getTickCount(self) -> long: ...

    def getType(self) -> ghidra.trace.model.time.schedule.Step.StepType: ...

    def getTypeOrder(self) -> int: ...

    def hashCode(self) -> int: ...

    def isCompatible(self, __a0: ghidra.trace.model.time.schedule.Step) -> bool: ...

    def isEventThread(self) -> bool: ...

    def isNop(self) -> bool: ...

    @staticmethod
    def nop() -> ghidra.trace.model.time.schedule.TickStep: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def parse(__a0: long, __a1: unicode) -> ghidra.trace.model.time.schedule.TickStep: ...

    def rewind(self, __a0: long) -> long: ...

    def subtract(self, __a0: ghidra.trace.model.time.schedule.Step) -> ghidra.trace.model.time.schedule.Step: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def type(self) -> ghidra.trace.model.time.schedule.Step.StepType: ...