from typing import List
from typing import overload
import ghidra.pcode.emu
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import ghidra.util.task
import java.lang
import java.util


class Sequence(object, java.lang.Comparable):
    SEP: unicode = u';'







    @overload
    def advance(self, __a0: ghidra.trace.model.time.schedule.Sequence) -> None: ...

    @overload
    def advance(self, __a0: ghidra.trace.model.time.schedule.Step) -> None: ...

    @staticmethod
    def catenate(__a0: ghidra.trace.model.time.schedule.Sequence, __a1: ghidra.trace.model.time.schedule.Sequence) -> ghidra.trace.model.time.schedule.Sequence: ...

    def clone(self) -> object: ...

    def coalescePatches(self, __a0: ghidra.program.model.lang.Language) -> None: ...

    def collectThreads(self, __a0: java.util.Set, __a1: ghidra.trace.model.Trace, __a2: ghidra.trace.model.thread.TraceThread) -> ghidra.trace.model.thread.TraceThread: ...

    def compareSeq(self, __a0: ghidra.trace.model.time.schedule.Sequence) -> ghidra.trace.model.time.schedule.CompareResult: ...

    @overload
    def compareTo(self, __a0: ghidra.trace.model.time.schedule.Sequence) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def execute(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.pcode.emu.PcodeMachine, __a3: ghidra.trace.model.time.schedule.Stepper, __a4: ghidra.util.task.TaskMonitor) -> ghidra.trace.model.thread.TraceThread: ...

    def getClass(self) -> java.lang.Class: ...

    def getLastThreadKey(self) -> long: ...

    def getSteps(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def isNop(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of(__a0: List[ghidra.trace.model.time.schedule.Step]) -> ghidra.trace.model.time.schedule.Sequence: ...

    @overload
    @staticmethod
    def of(__a0: List[object]) -> ghidra.trace.model.time.schedule.Sequence: ...

    @staticmethod
    def parse(__a0: unicode) -> ghidra.trace.model.time.schedule.Sequence: ...

    def relativize(self, __a0: ghidra.trace.model.time.schedule.Sequence) -> ghidra.trace.model.time.schedule.Sequence: ...

    def rewind(self, __a0: long) -> long: ...

    def toString(self) -> unicode: ...

    def totalPatchCount(self) -> long: ...

    def totalTickCount(self) -> long: ...

    def validate(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.thread.TraceThread) -> ghidra.trace.model.thread.TraceThread: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def lastThreadKey(self) -> long: ...

    @property
    def nop(self) -> bool: ...

    @property
    def steps(self) -> List[object]: ...