from typing import List
from typing import overload
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.util.database
import java.lang


class TraceObjectThread(ghidra.trace.model.thread.TraceThread, ghidra.trace.model.target.TraceObjectInterface, object):
    KEY_COMMENT: unicode = u'_comment'







    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getCreationSnap(self) -> long: ...

    def getDestructionSnap(self) -> long: ...

    def getKey(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getPath(self) -> unicode: ...

    def getRegisters(self) -> List[object]: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isAlive(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isValid(self, __a0: long) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setCreationSnap(self, __a0: long) -> None: ...

    def setDestructionSnap(self, __a0: long) -> None: ...

    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    @overload
    def setName(self, __a0: unicode) -> None: ...

    @overload
    def setName(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alive(self) -> bool: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def creationSnap(self) -> long: ...

    @creationSnap.setter
    def creationSnap(self, value: long) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def destructionSnap(self) -> long: ...

    @destructionSnap.setter
    def destructionSnap(self, value: long) -> None: ...

    @property
    def key(self) -> long: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def path(self) -> unicode: ...

    @property
    def registers(self) -> List[object]: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...