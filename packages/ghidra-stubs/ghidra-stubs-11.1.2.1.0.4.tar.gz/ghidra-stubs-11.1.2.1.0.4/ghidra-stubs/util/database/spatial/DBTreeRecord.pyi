from typing import overload
import ghidra.util
import ghidra.util.database
import ghidra.util.database.spatial
import java.lang


class DBTreeRecord(ghidra.util.database.DBAnnotatedObject):




    def __init__(self, __a0: ghidra.util.database.DBCachedObjectStore, __a1: db.DBRecord): ...



    def equals(self, __a0: object) -> bool: ...

    def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

    def getClass(self) -> java.lang.Class: ...

    def getKey(self) -> long: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getParentKey(self) -> long: ...

    def getShape(self) -> ghidra.util.database.spatial.BoundedShape: ...

    def getTableName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    @overload
    def isDeleted(self) -> bool: ...

    @overload
    def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setInvalid(self) -> None: ...

    def setParentKey(self, __a0: long) -> None: ...

    def setShape(self, __a0: ghidra.util.database.spatial.BoundedShape) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

    @property
    def parentKey(self) -> long: ...

    @parentKey.setter
    def parentKey(self, value: long) -> None: ...

    @property
    def shape(self) -> ghidra.util.database.spatial.BoundedShape: ...

    @shape.setter
    def shape(self, value: ghidra.util.database.spatial.BoundedShape) -> None: ...