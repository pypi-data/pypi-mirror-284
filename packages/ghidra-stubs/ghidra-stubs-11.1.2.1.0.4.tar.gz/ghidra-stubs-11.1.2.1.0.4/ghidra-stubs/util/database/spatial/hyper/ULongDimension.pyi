from typing import overload
import ghidra.util.database.spatial.hyper
import java.lang


class ULongDimension(ghidra.util.database.spatial.hyper.Dimension, object):








    def absoluteMax(self) -> object: ...

    def absoluteMin(self) -> object: ...

    def boxMid(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    @overload
    def compare(self, __a0: long, __a1: long) -> int: ...

    @overload
    def compare(self, __a0: object, __a1: object) -> int: ...

    def contains(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperPoint) -> bool: ...

    @overload
    def distance(self, __a0: long, __a1: long) -> float: ...

    @overload
    def distance(self, __a0: object, __a1: object) -> float: ...

    def encloses(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def intersect(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> bool: ...

    def intersectionLower(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def intersectionUpper(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def lower(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def max(self, __a0: object, __a1: object) -> object: ...

    def measure(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    @overload
    def mid(self, __a0: long, __a1: long) -> long: ...

    @overload
    def mid(self, __a0: object, __a1: object) -> object: ...

    def min(self, __a0: object, __a1: object) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pointDistance(self, __a0: ghidra.util.database.spatial.hyper.HyperPoint, __a1: ghidra.util.database.spatial.hyper.HyperPoint) -> float: ...

    def toString(self) -> unicode: ...

    def unionLower(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def unionUpper(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def upper(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> object: ...

    def value(self, __a0: ghidra.util.database.spatial.hyper.HyperPoint) -> object: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

