from typing import Iterator
from typing import List
from typing import overload
import ghidra.util.database
import java.lang
import java.util
import java.util.function


class DBCachedObjectStoreSubMap(ghidra.util.database.DBCachedObjectStoreMap):




    def __init__(self, __a0: ghidra.util.database.DBCachedObjectStore, __a1: db.util.ErrorHandler, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.database.DirectedIterator.Direction, __a4: ghidra.util.database.KeySpan): ...

    def __iter__(self): ...

    @overload
    def ceilingEntry(self, __a0: long) -> java.util.Map.Entry: ...

    @overload
    def ceilingEntry(self, __a0: object) -> java.util.Map.Entry: ...

    @overload
    def ceilingKey(self, __a0: long) -> long: ...

    @overload
    def ceilingKey(self, __a0: object) -> object: ...

    def clear(self) -> None: ...

    def comparator(self) -> java.util.Comparator: ...

    def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

    def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

    def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

    def containsKey(self, __a0: object) -> bool: ...

    def containsValue(self, __a0: object) -> bool: ...

    @staticmethod
    def copyOf(__a0: java.util.Map) -> java.util.Map: ...

    def descendingKeySet(self) -> java.util.NavigableSet: ...

    def descendingMap(self) -> java.util.NavigableMap: ...

    @staticmethod
    def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

    def entrySet(self) -> java.util.Set: ...

    def equals(self, __a0: object) -> bool: ...

    def firstEntry(self) -> java.util.Map.Entry: ...

    def firstKey(self) -> object: ...

    @overload
    def floorEntry(self, __a0: long) -> java.util.Map.Entry: ...

    @overload
    def floorEntry(self, __a0: object) -> java.util.Map.Entry: ...

    @overload
    def floorKey(self, __a0: long) -> long: ...

    @overload
    def floorKey(self, __a0: object) -> object: ...

    def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getOrDefault(self, __a0: object, __a1: object) -> object: ...

    def hashCode(self) -> int: ...

    @overload
    def headMap(self, __a0: long) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def headMap(self, __a0: object) -> java.util.SortedMap: ...

    @overload
    def headMap(self, __a0: long, __a1: bool) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def headMap(self, __a0: object, __a1: bool) -> java.util.NavigableMap: ...

    @overload
    def higherEntry(self, __a0: long) -> java.util.Map.Entry: ...

    @overload
    def higherEntry(self, __a0: object) -> java.util.Map.Entry: ...

    @overload
    def higherKey(self, __a0: long) -> long: ...

    @overload
    def higherKey(self, __a0: object) -> object: ...

    def isEmpty(self) -> bool: ...

    def keySet(self) -> java.util.Set: ...

    def lastEntry(self) -> java.util.Map.Entry: ...

    def lastKey(self) -> object: ...

    @overload
    def lowerEntry(self, __a0: long) -> java.util.Map.Entry: ...

    @overload
    def lowerEntry(self, __a0: object) -> java.util.Map.Entry: ...

    @overload
    def lowerKey(self, __a0: long) -> long: ...

    @overload
    def lowerKey(self, __a0: object) -> object: ...

    def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

    def navigableKeySet(self) -> java.util.NavigableSet: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of() -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object, __a18: object, __a19: object) -> java.util.Map: ...

    @staticmethod
    def ofEntries(__a0: List[java.util.Map.Entry]) -> java.util.Map: ...

    def pollFirstEntry(self) -> java.util.Map.Entry: ...

    def pollLastEntry(self) -> java.util.Map.Entry: ...

    @overload
    def put(self, __a0: long, __a1: ghidra.util.database.DBAnnotatedObject) -> ghidra.util.database.DBAnnotatedObject: ...

    @overload
    def put(self, __a0: object, __a1: object) -> object: ...

    def putAll(self, __a0: java.util.Map) -> None: ...

    def putFirst(self, __a0: object, __a1: object) -> object: ...

    def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

    def putLast(self, __a0: object, __a1: object) -> object: ...

    @overload
    def remove(self, __a0: object) -> object: ...

    @overload
    def remove(self, __a0: object, __a1: object) -> bool: ...

    @overload
    def replace(self, __a0: object, __a1: object) -> object: ...

    @overload
    def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

    def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

    def reversed(self) -> java.util.SequencedMap: ...

    def sequencedEntrySet(self) -> java.util.SequencedSet: ...

    def sequencedKeySet(self) -> java.util.SequencedSet: ...

    def sequencedValues(self) -> java.util.SequencedCollection: ...

    def size(self) -> int: ...

    @overload
    def subMap(self, __a0: long, __a1: long) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def subMap(self, __a0: object, __a1: object) -> java.util.SortedMap: ...

    @overload
    def subMap(self, __a0: long, __a1: bool, __a2: long, __a3: bool) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def subMap(self, __a0: object, __a1: bool, __a2: object, __a3: bool) -> java.util.NavigableMap: ...

    @overload
    def tailMap(self, __a0: long) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def tailMap(self, __a0: object) -> java.util.SortedMap: ...

    @overload
    def tailMap(self, __a0: long, __a1: bool) -> ghidra.util.database.DBCachedObjectStoreSubMap: ...

    @overload
    def tailMap(self, __a0: object, __a1: bool) -> java.util.NavigableMap: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...