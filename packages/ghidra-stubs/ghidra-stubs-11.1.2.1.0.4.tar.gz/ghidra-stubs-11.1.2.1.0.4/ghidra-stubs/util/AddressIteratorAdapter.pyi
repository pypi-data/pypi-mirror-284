from typing import Iterator
from typing import overload
import generic
import ghidra.program.model.address
import java.lang
import java.util
import java.util.function


class AddressIteratorAdapter(generic.NestedIterator, ghidra.program.model.address.AddressIterator):




    @overload
    def __init__(self, __a0: java.util.Iterator, __a1: bool): ...

    @overload
    def __init__(self, __a0: java.util.Iterator, __a1: ghidra.program.model.address.Address, __a2: bool): ...

    def __iter__(self) -> Iterator[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    @staticmethod
    def forRange(__a0: ghidra.program.model.address.AddressRange, __a1: bool) -> java.lang.Iterable: ...

    def getClass(self) -> java.lang.Class: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> java.util.Iterator: ...

    def next(self) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def remove(self) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    @staticmethod
    def start(__a0: java.util.Iterator, __a1: java.util.function.Function) -> java.util.Iterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

