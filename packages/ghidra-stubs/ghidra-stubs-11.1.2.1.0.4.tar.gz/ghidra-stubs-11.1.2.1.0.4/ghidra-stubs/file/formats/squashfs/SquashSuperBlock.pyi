from typing import overload
import java.lang


class SquashSuperBlock(object):








    def allowDuplicates(self) -> bool: ...

    def checkCompatibility(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBlockLog(self) -> int: ...

    def getBlockSize(self) -> long: ...

    def getBytesUsed(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompressionType(self) -> int: ...

    def getCompressionTypeString(self) -> unicode: ...

    def getDirectoryTableStart(self) -> long: ...

    def getExportTableStart(self) -> long: ...

    def getFragmentTableStart(self) -> long: ...

    def getIdTableStart(self) -> long: ...

    def getInodeCount(self) -> long: ...

    def getInodeTableStart(self) -> long: ...

    def getMagicBytes(self) -> long: ...

    def getMajorVersion(self) -> int: ...

    def getMinorVersion(self) -> int: ...

    def getModTime(self) -> long: ...

    def getRawFlags(self) -> int: ...

    def getRootInode(self) -> long: ...

    def getRootInodeBlockLocation(self) -> long: ...

    def getRootInodeOffset(self) -> long: ...

    def getTotalFragments(self) -> long: ...

    def getTotalIDs(self) -> int: ...

    def getVersionString(self) -> unicode: ...

    def getXattrIdTableStart(self) -> long: ...

    def hasXattrs(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isAlwaysFragment(self) -> bool: ...

    def isCompressionOptionsPresent(self) -> bool: ...

    def isDataUncompressed(self) -> bool: ...

    def isExportable(self) -> bool: ...

    def isFragmentsUncompressed(self) -> bool: ...

    def isFragmentsUnused(self) -> bool: ...

    def isIDsUncompressed(self) -> bool: ...

    def isInodesUncompressed(self) -> bool: ...

    def isUsedFlagSet(self) -> bool: ...

    def isXattrsUncompressed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def IDsUncompressed(self) -> bool: ...

    @property
    def alwaysFragment(self) -> bool: ...

    @property
    def blockLog(self) -> int: ...

    @property
    def blockSize(self) -> long: ...

    @property
    def bytesUsed(self) -> long: ...

    @property
    def compressionOptionsPresent(self) -> bool: ...

    @property
    def compressionType(self) -> int: ...

    @property
    def compressionTypeString(self) -> unicode: ...

    @property
    def dataUncompressed(self) -> bool: ...

    @property
    def directoryTableStart(self) -> long: ...

    @property
    def exportTableStart(self) -> long: ...

    @property
    def exportable(self) -> bool: ...

    @property
    def fragmentTableStart(self) -> long: ...

    @property
    def fragmentsUncompressed(self) -> bool: ...

    @property
    def fragmentsUnused(self) -> bool: ...

    @property
    def idTableStart(self) -> long: ...

    @property
    def inodeCount(self) -> long: ...

    @property
    def inodeTableStart(self) -> long: ...

    @property
    def inodesUncompressed(self) -> bool: ...

    @property
    def magicBytes(self) -> long: ...

    @property
    def majorVersion(self) -> int: ...

    @property
    def minorVersion(self) -> int: ...

    @property
    def modTime(self) -> long: ...

    @property
    def rawFlags(self) -> int: ...

    @property
    def rootInode(self) -> long: ...

    @property
    def rootInodeBlockLocation(self) -> long: ...

    @property
    def rootInodeOffset(self) -> long: ...

    @property
    def totalFragments(self) -> long: ...

    @property
    def totalIDs(self) -> int: ...

    @property
    def usedFlagSet(self) -> bool: ...

    @property
    def versionString(self) -> unicode: ...

    @property
    def xattrIdTableStart(self) -> long: ...

    @property
    def xattrsUncompressed(self) -> bool: ...