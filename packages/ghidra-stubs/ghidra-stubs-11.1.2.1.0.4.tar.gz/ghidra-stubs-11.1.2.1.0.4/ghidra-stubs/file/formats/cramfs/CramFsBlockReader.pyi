from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.file.formats.cramfs
import java.io
import java.lang


class CramFsBlockReader(object):




    def __init__(self, __a0: ghidra.app.util.bin.ByteProvider, __a1: ghidra.file.formats.cramfs.CramFsInode, __a2: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getBlockPointerTable(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getCramfsInode(self) -> ghidra.file.formats.cramfs.CramFsInode: ...

    def getNumBlockPointers(self) -> int: ...

    def getProvider(self) -> ghidra.app.util.bin.ByteProvider: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readDataBlock(self, __a0: int) -> List[int]: ...

    def readDataBlockDecompressed(self, __a0: int) -> java.io.InputStream: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def blockPointerTable(self) -> List[object]: ...

    @property
    def cramfsInode(self) -> ghidra.file.formats.cramfs.CramFsInode: ...

    @property
    def numBlockPointers(self) -> int: ...

    @property
    def provider(self) -> ghidra.app.util.bin.ByteProvider: ...