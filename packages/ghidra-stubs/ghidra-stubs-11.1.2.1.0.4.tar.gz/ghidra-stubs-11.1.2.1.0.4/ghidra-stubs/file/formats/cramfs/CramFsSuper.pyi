from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.file.formats.cramfs
import ghidra.program.model.data
import java.lang


class CramFsSuper(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType



    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getChildList(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getFlags(self) -> int: ...

    def getFsid(self) -> ghidra.file.formats.cramfs.CramFsInfo: ...

    def getFuture(self) -> int: ...

    def getMagic(self) -> int: ...

    def getName(self) -> unicode: ...

    def getRoot(self) -> ghidra.file.formats.cramfs.CramFsInode: ...

    def getSignature(self) -> unicode: ...

    def getSize(self) -> int: ...

    def hashCode(self) -> int: ...

    def isExtensionsBlockPointerFlagEnabled(self) -> bool: ...

    def isLittleEndian(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def childList(self) -> List[object]: ...

    @property
    def extensionsBlockPointerFlagEnabled(self) -> bool: ...

    @property
    def flags(self) -> int: ...

    @property
    def fsid(self) -> ghidra.file.formats.cramfs.CramFsInfo: ...

    @property
    def future(self) -> int: ...

    @property
    def littleEndian(self) -> bool: ...

    @property
    def magic(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def root(self) -> ghidra.file.formats.cramfs.CramFsInode: ...

    @property
    def signature(self) -> unicode: ...

    @property
    def size(self) -> int: ...