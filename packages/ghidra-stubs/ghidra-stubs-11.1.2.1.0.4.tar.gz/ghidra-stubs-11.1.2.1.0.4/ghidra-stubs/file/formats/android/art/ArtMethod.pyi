from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class ArtMethod(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType



    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader, __a1: int, __a2: unicode): ...



    def equals(self, __a0: object) -> bool: ...

    def getAccessFlags(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> long: ...

    def getDeclaringClass(self) -> int: ...

    def getDexCacheResolvedMethods(self) -> long: ...

    def getDexCacheResolvedTypes(self) -> long: ...

    def getDexCodeItemOffset(self) -> int: ...

    def getDexMethodIndex(self) -> int: ...

    def getEntryPointFromInterpreter(self) -> long: ...

    def getEntryPointFromJNI(self) -> long: ...

    def getEntryPointFromQuickCompiledCode(self) -> long: ...

    def getHotnessCount(self) -> int: ...

    def getImtIndex(self) -> int: ...

    def getMethodIndex(self) -> int: ...

    def getPadding(self) -> int: ...

    def getUnknown1(self) -> long: ...

    def getUnknown2(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def accessFlags(self) -> int: ...

    @property
    def data(self) -> long: ...

    @property
    def declaringClass(self) -> int: ...

    @property
    def dexCacheResolvedMethods(self) -> long: ...

    @property
    def dexCacheResolvedTypes(self) -> long: ...

    @property
    def dexCodeItemOffset(self) -> int: ...

    @property
    def dexMethodIndex(self) -> int: ...

    @property
    def entryPointFromInterpreter(self) -> long: ...

    @property
    def entryPointFromJNI(self) -> long: ...

    @property
    def entryPointFromQuickCompiledCode(self) -> long: ...

    @property
    def hotnessCount(self) -> int: ...

    @property
    def imtIndex(self) -> int: ...

    @property
    def methodIndex(self) -> int: ...

    @property
    def padding(self) -> int: ...

    @property
    def unknown1(self) -> long: ...

    @property
    def unknown2(self) -> int: ...