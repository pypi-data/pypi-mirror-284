from typing import overload
import ghidra.file.formats.android.bootimg
import ghidra.program.model.data
import java.lang


class VendorBootImageHeaderV3(ghidra.file.formats.android.bootimg.VendorBootImageHeader):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCmdline(self) -> unicode: ...

    def getDtbAddress(self) -> long: ...

    def getDtbOffset(self) -> long: ...

    def getDtbSize(self) -> int: ...

    def getHeaderSize(self) -> int: ...

    def getHeaderVersion(self) -> int: ...

    def getKernelAddress(self) -> int: ...

    def getMagic(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNestedVendorRamdiskCount(self) -> long: ...

    def getNestedVendorRamdiskOffset(self, __a0: int) -> long: ...

    def getNestedVendorRamdiskSize(self, __a0: int) -> int: ...

    def getPageSize(self) -> int: ...

    def getRamdiskAddress(self) -> int: ...

    def getTagsAddress(self) -> int: ...

    def getVendorRamdiskOffset(self) -> long: ...

    def getVendorRamdiskSize(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def cmdline(self) -> unicode: ...

    @property
    def dtbAddress(self) -> long: ...

    @property
    def dtbOffset(self) -> long: ...

    @property
    def dtbSize(self) -> int: ...

    @property
    def headerSize(self) -> int: ...

    @property
    def headerVersion(self) -> int: ...

    @property
    def kernelAddress(self) -> int: ...

    @property
    def magic(self) -> unicode: ...

    @property
    def name(self) -> unicode: ...

    @property
    def pageSize(self) -> int: ...

    @property
    def ramdiskAddress(self) -> int: ...

    @property
    def tagsAddress(self) -> int: ...

    @property
    def vendorRamdiskOffset(self) -> long: ...

    @property
    def vendorRamdiskSize(self) -> int: ...