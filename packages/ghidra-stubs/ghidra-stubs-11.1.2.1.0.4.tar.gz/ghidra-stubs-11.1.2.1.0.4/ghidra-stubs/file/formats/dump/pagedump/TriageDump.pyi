from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class TriageDump(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'PAGEDUMP_TRIAGE'
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def equals(self, __a0: object) -> bool: ...

    def getBStoreLimit(self) -> long: ...

    def getBStoreOffset(self) -> int: ...

    def getBStoreSize(self) -> int: ...

    def getBrokenDriverOffset(self) -> int: ...

    def getCallStackOffset(self) -> int: ...

    def getCallStackSize(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextOffset(self) -> int: ...

    def getDataBlocksCount(self) -> int: ...

    def getDataBlocksOffset(self) -> int: ...

    def getDataPageAddress(self) -> long: ...

    def getDataPageOffset(self) -> int: ...

    def getDataPageSize(self) -> int: ...

    def getDebuggerDataOffset(self) -> int: ...

    def getDebuggerDataSize(self) -> int: ...

    def getDriverCount(self) -> int: ...

    def getDriverListOffset(self) -> int: ...

    def getExceptionOffset(self) -> int: ...

    def getMmOffset(self) -> int: ...

    def getPrcbOffset(self) -> int: ...

    def getProcessOffset(self) -> int: ...

    def getServicePackBuild(self) -> int: ...

    def getSizeOfDump(self) -> long: ...

    def getStringPoolOffset(self) -> int: ...

    def getStringPoolSize(self) -> int: ...

    def getThreadOffset(self) -> int: ...

    def getTopOfStack(self) -> long: ...

    def getTriageOptions(self) -> int: ...

    def getUnloadedDriversOffset(self) -> int: ...

    def getValidOffset(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBStoreLimit(self, __a0: long) -> None: ...

    def setBStoreOffset(self, __a0: int) -> None: ...

    def setBStoreSize(self, __a0: int) -> None: ...

    def setBrokenDriverOffset(self, __a0: int) -> None: ...

    def setCallStackOffset(self, __a0: int) -> None: ...

    def setCallStackSize(self, __a0: int) -> None: ...

    def setContextOffset(self, __a0: int) -> None: ...

    def setDataBlocksCount(self, __a0: int) -> None: ...

    def setDataBlocksOffset(self, __a0: int) -> None: ...

    def setDataPageAddress(self, __a0: long) -> None: ...

    def setDataPageOffset(self, __a0: int) -> None: ...

    def setDataPageSize(self, __a0: int) -> None: ...

    def setDebuggerDataOffset(self, __a0: int) -> None: ...

    def setDebuggerDataSize(self, __a0: int) -> None: ...

    def setDriverCount(self, __a0: int) -> None: ...

    def setDriverListOffset(self, __a0: int) -> None: ...

    def setExceptionOffset(self, __a0: int) -> None: ...

    def setMmOffset(self, __a0: int) -> None: ...

    def setPrcbOffset(self, __a0: int) -> None: ...

    def setProcessOffset(self, __a0: int) -> None: ...

    def setServicePackBuild(self, __a0: int) -> None: ...

    def setSizeOfDump(self, __a0: long) -> None: ...

    def setStringPoolOffset(self, __a0: int) -> None: ...

    def setStringPoolSize(self, __a0: int) -> None: ...

    def setThreadOffset(self, __a0: int) -> None: ...

    def setTopOfStack(self, __a0: long) -> None: ...

    def setTriageOptions(self, __a0: int) -> None: ...

    def setUnloadedDriversOffset(self, __a0: int) -> None: ...

    def setValidOffset(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def BStoreLimit(self) -> long: ...

    @BStoreLimit.setter
    def BStoreLimit(self, value: long) -> None: ...

    @property
    def BStoreOffset(self) -> int: ...

    @BStoreOffset.setter
    def BStoreOffset(self, value: int) -> None: ...

    @property
    def BStoreSize(self) -> int: ...

    @BStoreSize.setter
    def BStoreSize(self, value: int) -> None: ...

    @property
    def brokenDriverOffset(self) -> int: ...

    @brokenDriverOffset.setter
    def brokenDriverOffset(self, value: int) -> None: ...

    @property
    def callStackOffset(self) -> int: ...

    @callStackOffset.setter
    def callStackOffset(self, value: int) -> None: ...

    @property
    def callStackSize(self) -> int: ...

    @callStackSize.setter
    def callStackSize(self, value: int) -> None: ...

    @property
    def contextOffset(self) -> int: ...

    @contextOffset.setter
    def contextOffset(self, value: int) -> None: ...

    @property
    def dataBlocksCount(self) -> int: ...

    @dataBlocksCount.setter
    def dataBlocksCount(self, value: int) -> None: ...

    @property
    def dataBlocksOffset(self) -> int: ...

    @dataBlocksOffset.setter
    def dataBlocksOffset(self, value: int) -> None: ...

    @property
    def dataPageAddress(self) -> long: ...

    @dataPageAddress.setter
    def dataPageAddress(self, value: long) -> None: ...

    @property
    def dataPageOffset(self) -> int: ...

    @dataPageOffset.setter
    def dataPageOffset(self, value: int) -> None: ...

    @property
    def dataPageSize(self) -> int: ...

    @dataPageSize.setter
    def dataPageSize(self, value: int) -> None: ...

    @property
    def debuggerDataOffset(self) -> int: ...

    @debuggerDataOffset.setter
    def debuggerDataOffset(self, value: int) -> None: ...

    @property
    def debuggerDataSize(self) -> int: ...

    @debuggerDataSize.setter
    def debuggerDataSize(self, value: int) -> None: ...

    @property
    def driverCount(self) -> int: ...

    @driverCount.setter
    def driverCount(self, value: int) -> None: ...

    @property
    def driverListOffset(self) -> int: ...

    @driverListOffset.setter
    def driverListOffset(self, value: int) -> None: ...

    @property
    def exceptionOffset(self) -> int: ...

    @exceptionOffset.setter
    def exceptionOffset(self, value: int) -> None: ...

    @property
    def mmOffset(self) -> int: ...

    @mmOffset.setter
    def mmOffset(self, value: int) -> None: ...

    @property
    def prcbOffset(self) -> int: ...

    @prcbOffset.setter
    def prcbOffset(self, value: int) -> None: ...

    @property
    def processOffset(self) -> int: ...

    @processOffset.setter
    def processOffset(self, value: int) -> None: ...

    @property
    def servicePackBuild(self) -> int: ...

    @servicePackBuild.setter
    def servicePackBuild(self, value: int) -> None: ...

    @property
    def sizeOfDump(self) -> long: ...

    @sizeOfDump.setter
    def sizeOfDump(self, value: long) -> None: ...

    @property
    def stringPoolOffset(self) -> int: ...

    @stringPoolOffset.setter
    def stringPoolOffset(self, value: int) -> None: ...

    @property
    def stringPoolSize(self) -> int: ...

    @stringPoolSize.setter
    def stringPoolSize(self, value: int) -> None: ...

    @property
    def threadOffset(self) -> int: ...

    @threadOffset.setter
    def threadOffset(self, value: int) -> None: ...

    @property
    def topOfStack(self) -> long: ...

    @topOfStack.setter
    def topOfStack(self, value: long) -> None: ...

    @property
    def triageOptions(self) -> int: ...

    @triageOptions.setter
    def triageOptions(self, value: int) -> None: ...

    @property
    def unloadedDriversOffset(self) -> int: ...

    @unloadedDriversOffset.setter
    def unloadedDriversOffset(self, value: int) -> None: ...

    @property
    def validOffset(self) -> int: ...

    @validOffset.setter
    def validOffset(self, value: int) -> None: ...