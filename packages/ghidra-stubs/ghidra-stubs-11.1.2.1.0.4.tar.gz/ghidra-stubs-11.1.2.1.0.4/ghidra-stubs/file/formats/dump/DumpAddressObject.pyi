from typing import overload
import ghidra.program.model.address
import java.lang


class DumpAddressObject(object):




    def __init__(self, __a0: unicode, __a1: long, __a2: long, __a3: long): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getAdjustedAddress(self, __a0: long) -> long: ...

    def getBase(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getCopyLen(self, __a0: long, __a1: long) -> long: ...

    def getLength(self) -> long: ...

    def getProviderId(self) -> unicode: ...

    def getRVA(self) -> long: ...

    def getRangeName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isExec(self) -> bool: ...

    def isRead(self) -> bool: ...

    def isWrite(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def setBase(self, __a0: long) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setExec(self, __a0: bool) -> None: ...

    def setLength(self, __a0: long) -> None: ...

    def setProviderId(self, __a0: unicode) -> None: ...

    def setRVA(self, __a0: long) -> None: ...

    def setRangeName(self, __a0: unicode) -> None: ...

    def setRead(self, __a0: bool) -> None: ...

    def setWrite(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def RVA(self) -> long: ...

    @RVA.setter
    def RVA(self, value: long) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @address.setter
    def address(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def base(self) -> long: ...

    @base.setter
    def base(self, value: long) -> None: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def exec(self) -> bool: ...

    @exec.setter
    def exec(self, value: bool) -> None: ...

    @property
    def length(self) -> long: ...

    @length.setter
    def length(self, value: long) -> None: ...

    @property
    def providerId(self) -> unicode: ...

    @providerId.setter
    def providerId(self, value: unicode) -> None: ...

    @property
    def rangeName(self) -> unicode: ...

    @rangeName.setter
    def rangeName(self, value: unicode) -> None: ...

    @property
    def read(self) -> bool: ...

    @read.setter
    def read(self, value: bool) -> None: ...

    @property
    def write(self) -> bool: ...

    @write.setter
    def write(self, value: bool) -> None: ...