from typing import List
from typing import overload
import ghidra.app.util.bin
import java.io
import java.lang


class DumpFileReader(ghidra.app.util.bin.BinaryReader):




    def __init__(self, __a0: ghidra.app.util.bin.ByteProvider, __a1: bool, __a2: int): ...



    def align(self, __a0: int) -> int: ...

    def asBigEndian(self) -> ghidra.app.util.bin.BinaryReader: ...

    def asLittleEndian(self) -> ghidra.app.util.bin.BinaryReader: ...

    @overload
    def clone(self) -> object: ...

    @overload
    def clone(self, __a0: long) -> ghidra.app.util.bin.BinaryReader: ...

    def equals(self, __a0: object) -> bool: ...

    def getByteProvider(self) -> ghidra.app.util.bin.ByteProvider: ...

    def getClass(self) -> java.lang.Class: ...

    def getInputStream(self) -> java.io.InputStream: ...

    def getPointerIndex(self) -> long: ...

    def getPointerSize(self) -> int: ...

    @overload
    def hasNext(self) -> bool: ...

    @overload
    def hasNext(self, __a0: int) -> bool: ...

    def hashCode(self) -> int: ...

    def isBigEndian(self) -> bool: ...

    def isLittleEndian(self) -> bool: ...

    @overload
    def isValidIndex(self, __a0: long) -> bool: ...

    @overload
    def isValidIndex(self, __a0: int) -> bool: ...

    def isValidRange(self, __a0: long, __a1: int) -> bool: ...

    def length(self) -> long: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def peekNextByte(self) -> int: ...

    def peekNextInt(self) -> int: ...

    def peekNextLong(self) -> long: ...

    def peekNextShort(self) -> int: ...

    @overload
    def readAsciiString(self, __a0: long) -> unicode: ...

    @overload
    def readAsciiString(self, __a0: long, __a1: int) -> unicode: ...

    def readByte(self, __a0: long) -> int: ...

    def readByteArray(self, __a0: long, __a1: int) -> List[int]: ...

    def readInt(self, __a0: long) -> int: ...

    def readIntArray(self, __a0: long, __a1: int) -> List[int]: ...

    def readLong(self, __a0: long) -> long: ...

    def readLongArray(self, __a0: long, __a1: int) -> List[long]: ...

    @overload
    def readNext(self, __a0: ghidra.app.util.bin.BinaryReader.InputStreamReaderFunction) -> object: ...

    @overload
    def readNext(self, __a0: ghidra.app.util.bin.BinaryReader.ReaderFunction) -> object: ...

    @overload
    def readNextAsciiString(self) -> unicode: ...

    @overload
    def readNextAsciiString(self, __a0: int) -> unicode: ...

    def readNextByte(self) -> int: ...

    def readNextByteArray(self, __a0: int) -> List[int]: ...

    def readNextInt(self) -> int: ...

    def readNextIntArray(self, __a0: int) -> List[int]: ...

    def readNextLong(self) -> long: ...

    def readNextLongArray(self, __a0: int) -> List[long]: ...

    def readNextPointer(self) -> long: ...

    def readNextShort(self) -> int: ...

    def readNextShortArray(self, __a0: int) -> List[int]: ...

    @overload
    def readNextUnicodeString(self) -> unicode: ...

    @overload
    def readNextUnicodeString(self, __a0: int) -> unicode: ...

    def readNextUnsignedByte(self) -> int: ...

    def readNextUnsignedInt(self) -> long: ...

    def readNextUnsignedIntExact(self) -> int: ...

    def readNextUnsignedShort(self) -> int: ...

    def readNextUnsignedValue(self, __a0: int) -> long: ...

    @overload
    def readNextUnsignedVarIntExact(self, __a0: ghidra.app.util.bin.BinaryReader.InputStreamReaderFunction) -> int: ...

    @overload
    def readNextUnsignedVarIntExact(self, __a0: ghidra.app.util.bin.BinaryReader.ReaderFunction) -> int: ...

    @overload
    def readNextUtf8String(self) -> unicode: ...

    @overload
    def readNextUtf8String(self, __a0: int) -> unicode: ...

    def readNextValue(self, __a0: int) -> long: ...

    @overload
    def readNextVarInt(self, __a0: ghidra.app.util.bin.BinaryReader.InputStreamReaderFunction) -> int: ...

    @overload
    def readNextVarInt(self, __a0: ghidra.app.util.bin.BinaryReader.ReaderFunction) -> int: ...

    def readPointer(self, __a0: long) -> long: ...

    def readShort(self, __a0: long) -> int: ...

    def readShortArray(self, __a0: long, __a1: int) -> List[int]: ...

    @overload
    def readUnicodeString(self, __a0: long) -> unicode: ...

    @overload
    def readUnicodeString(self, __a0: long, __a1: int) -> unicode: ...

    def readUnsignedByte(self, __a0: long) -> int: ...

    def readUnsignedInt(self, __a0: long) -> long: ...

    def readUnsignedShort(self, __a0: long) -> int: ...

    def readUnsignedValue(self, __a0: long, __a1: int) -> long: ...

    @overload
    def readUtf8String(self, __a0: long) -> unicode: ...

    @overload
    def readUtf8String(self, __a0: long, __a1: int) -> unicode: ...

    def readValue(self, __a0: long, __a1: int) -> long: ...

    def setLittleEndian(self, __a0: bool) -> None: ...

    @overload
    def setPointerIndex(self, __a0: long) -> long: ...

    @overload
    def setPointerIndex(self, __a0: int) -> long: ...

    def setPointerSize(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def pointerSize(self) -> int: ...

    @pointerSize.setter
    def pointerSize(self, value: int) -> None: ...