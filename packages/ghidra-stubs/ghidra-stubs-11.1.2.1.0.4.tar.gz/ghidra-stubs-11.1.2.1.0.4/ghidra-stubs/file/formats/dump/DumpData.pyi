from typing import overload
import ghidra.program.model.address
import ghidra.program.model.data
import java.lang


class DumpData(object):




    @overload
    def __init__(self, __a0: long, __a1: ghidra.program.model.data.DataType): ...

    @overload
    def __init__(self, __a0: long, __a1: unicode, __a2: int): ...

    @overload
    def __init__(self, __a0: long, __a1: ghidra.program.model.data.DataType, __a2: unicode): ...

    @overload
    def __init__(self, __a0: long, __a1: ghidra.program.model.data.DataType, __a2: unicode, __a3: bool, __a4: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getName(self) -> unicode: ...

    def getOffset(self) -> long: ...

    def getSize(self) -> long: ...

    def hashCode(self) -> int: ...

    def isGenerateFragment(self) -> bool: ...

    def isGenerateSymbol(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAddressSpace(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def setDataType(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def setGenerateFragment(self, __a0: bool) -> None: ...

    def setGenerateSymbol(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setOffset(self, __a0: long) -> None: ...

    def setSize(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @addressSpace.setter
    def addressSpace(self, value: ghidra.program.model.address.AddressSpace) -> None: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @dataType.setter
    def dataType(self, value: ghidra.program.model.data.DataType) -> None: ...

    @property
    def generateFragment(self) -> bool: ...

    @generateFragment.setter
    def generateFragment(self, value: bool) -> None: ...

    @property
    def generateSymbol(self) -> bool: ...

    @generateSymbol.setter
    def generateSymbol(self, value: bool) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def offset(self) -> long: ...

    @offset.setter
    def offset(self, value: long) -> None: ...

    @property
    def size(self) -> long: ...