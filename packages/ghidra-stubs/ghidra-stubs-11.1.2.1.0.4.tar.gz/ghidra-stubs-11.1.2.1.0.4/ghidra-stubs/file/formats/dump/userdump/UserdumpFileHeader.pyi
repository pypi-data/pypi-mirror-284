from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class UserdumpFileHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'USERDUMP_HEADER'
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDebugEventOffset(self) -> long: ...

    def getMachineImageType(self) -> int: ...

    def getMajorVersion(self) -> int: ...

    def getMemoryDescriptorOffset(self) -> long: ...

    def getMemoryRegionCount(self) -> int: ...

    def getMemoryRegionOffset(self) -> long: ...

    def getMinorVersion(self) -> int: ...

    def getModuleCount(self) -> int: ...

    def getModuleOffset(self) -> long: ...

    def getSignature(self) -> int: ...

    def getThreadCount(self) -> int: ...

    def getThreadOffset(self) -> long: ...

    def getThreadStateOffset(self) -> long: ...

    def getValidDump(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDebugEventOffset(self, __a0: long) -> None: ...

    def setMachineImageType(self, __a0: int) -> None: ...

    def setMajorVersion(self, __a0: int) -> None: ...

    def setMemoryDescriptorOffset(self, __a0: long) -> None: ...

    def setMemoryRegionCount(self, __a0: int) -> None: ...

    def setMemoryRegionOffset(self, __a0: long) -> None: ...

    def setMinorVersion(self, __a0: int) -> None: ...

    def setModuleCount(self, __a0: int) -> None: ...

    def setModuleOffset(self, __a0: long) -> None: ...

    def setSignature(self, __a0: int) -> None: ...

    def setThreadCount(self, __a0: int) -> None: ...

    def setThreadOffset(self, __a0: long) -> None: ...

    def setThreadStateOffset(self, __a0: long) -> None: ...

    def setValidDump(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def debugEventOffset(self) -> long: ...

    @debugEventOffset.setter
    def debugEventOffset(self, value: long) -> None: ...

    @property
    def machineImageType(self) -> int: ...

    @machineImageType.setter
    def machineImageType(self, value: int) -> None: ...

    @property
    def majorVersion(self) -> int: ...

    @majorVersion.setter
    def majorVersion(self, value: int) -> None: ...

    @property
    def memoryDescriptorOffset(self) -> long: ...

    @memoryDescriptorOffset.setter
    def memoryDescriptorOffset(self, value: long) -> None: ...

    @property
    def memoryRegionCount(self) -> int: ...

    @memoryRegionCount.setter
    def memoryRegionCount(self, value: int) -> None: ...

    @property
    def memoryRegionOffset(self) -> long: ...

    @memoryRegionOffset.setter
    def memoryRegionOffset(self, value: long) -> None: ...

    @property
    def minorVersion(self) -> int: ...

    @minorVersion.setter
    def minorVersion(self, value: int) -> None: ...

    @property
    def moduleCount(self) -> int: ...

    @moduleCount.setter
    def moduleCount(self, value: int) -> None: ...

    @property
    def moduleOffset(self) -> long: ...

    @moduleOffset.setter
    def moduleOffset(self, value: long) -> None: ...

    @property
    def signature(self) -> int: ...

    @signature.setter
    def signature(self, value: int) -> None: ...

    @property
    def threadCount(self) -> int: ...

    @threadCount.setter
    def threadCount(self, value: int) -> None: ...

    @property
    def threadOffset(self) -> long: ...

    @threadOffset.setter
    def threadOffset(self, value: long) -> None: ...

    @property
    def threadStateOffset(self) -> long: ...

    @threadStateOffset.setter
    def threadStateOffset(self, value: long) -> None: ...

    @property
    def validDump(self) -> int: ...

    @validDump.setter
    def validDump(self, value: int) -> None: ...