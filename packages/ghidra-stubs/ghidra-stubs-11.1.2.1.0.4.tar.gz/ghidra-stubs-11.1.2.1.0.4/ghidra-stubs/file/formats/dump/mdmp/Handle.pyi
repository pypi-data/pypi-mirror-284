from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class Handle(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'MINIDUMP_HANDLE'
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def equals(self, __a0: object) -> bool: ...

    def getAttributes(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getGrantedAccess(self) -> int: ...

    def getHandle(self) -> long: ...

    def getHandleCount(self) -> int: ...

    def getObjectInfoRva(self) -> int: ...

    def getObjectNameRVA(self) -> int: ...

    def getPointerCount(self) -> int: ...

    def getTypeNameRVA(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAttributes(self, __a0: int) -> None: ...

    def setGrantedAccess(self, __a0: int) -> None: ...

    def setHandle(self, __a0: long) -> None: ...

    def setHandleCount(self, __a0: int) -> None: ...

    def setObjectInfoRva(self, __a0: int) -> None: ...

    def setObjectNameRVA(self, __a0: int) -> None: ...

    def setPointerCount(self, __a0: int) -> None: ...

    def setTypeNameRVA(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def attributes(self) -> int: ...

    @attributes.setter
    def attributes(self, value: int) -> None: ...

    @property
    def grantedAccess(self) -> int: ...

    @grantedAccess.setter
    def grantedAccess(self, value: int) -> None: ...

    @property
    def handle(self) -> long: ...

    @handle.setter
    def handle(self, value: long) -> None: ...

    @property
    def handleCount(self) -> int: ...

    @handleCount.setter
    def handleCount(self, value: int) -> None: ...

    @property
    def objectInfoRva(self) -> int: ...

    @objectInfoRva.setter
    def objectInfoRva(self, value: int) -> None: ...

    @property
    def objectNameRVA(self) -> int: ...

    @objectNameRVA.setter
    def objectNameRVA(self, value: int) -> None: ...

    @property
    def pointerCount(self) -> int: ...

    @pointerCount.setter
    def pointerCount(self, value: int) -> None: ...

    @property
    def typeNameRVA(self) -> int: ...

    @typeNameRVA.setter
    def typeNameRVA(self, value: int) -> None: ...