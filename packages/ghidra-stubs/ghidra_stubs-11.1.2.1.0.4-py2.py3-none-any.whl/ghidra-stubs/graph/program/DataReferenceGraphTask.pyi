from typing import overload
import ghidra.util.task
import java.lang


class DataReferenceGraphTask(ghidra.util.task.Task):




    @overload
    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.address.AddressSet, __a3: ghidra.service.graph.GraphDisplay, __a4: int, __a5: ghidra.graph.program.DataReferenceGraph.Directions): ...

    @overload
    def __init__(self, __a0: bool, __a1: bool, __a2: ghidra.framework.plugintool.PluginTool, __a3: ghidra.program.util.ProgramSelection, __a4: ghidra.program.util.ProgramLocation, __a5: ghidra.service.graph.GraphDisplayProvider, __a6: int, __a7: int, __a8: ghidra.graph.program.DataReferenceGraph.Directions): ...



    def addTaskListener(self, __a0: ghidra.util.task.TaskListener) -> None: ...

    def canCancel(self) -> bool: ...

    def cancel(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getStatusTextAlignment(self) -> int: ...

    def getTaskTitle(self) -> unicode: ...

    def getWaitForTaskCompleted(self) -> bool: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isCancelled(self) -> bool: ...

    def isModal(self) -> bool: ...

    def monitoredRun(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def run(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def setHasProgress(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

