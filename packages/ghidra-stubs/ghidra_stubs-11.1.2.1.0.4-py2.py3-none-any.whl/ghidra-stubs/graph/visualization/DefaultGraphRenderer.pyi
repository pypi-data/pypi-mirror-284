from typing import overload
import ghidra.graph.visualization
import ghidra.service.graph
import java.awt
import java.lang
import org.jungrapht.visualization


class DefaultGraphRenderer(object, ghidra.graph.visualization.GraphRenderer):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.service.graph.GraphDisplayOptions): ...



    def clearCache(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getEdgePriority(self, __a0: unicode) -> int: ...

    def getEdgeSelectionColor(self) -> java.awt.Color: ...

    def getFavoredEdgeType(self) -> unicode: ...

    def getGraphDisplayOptions(self) -> ghidra.service.graph.GraphDisplayOptions: ...

    def getVertexSelectionColor(self) -> java.awt.Color: ...

    def hashCode(self) -> int: ...

    def initializeViewer(self, __a0: org.jungrapht.visualization.VisualizationViewer) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setGraphTypeDisplayOptions(self, __a0: ghidra.service.graph.GraphDisplayOptions) -> None: ...

    def toString(self) -> unicode: ...

    def vertexChanged(self, __a0: ghidra.service.graph.AttributedVertex) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def edgeSelectionColor(self) -> java.awt.Color: ...

    @property
    def favoredEdgeType(self) -> unicode: ...

    @property
    def graphDisplayOptions(self) -> ghidra.service.graph.GraphDisplayOptions: ...

    @property
    def graphTypeDisplayOptions(self) -> None: ...  # No getter available.

    @graphTypeDisplayOptions.setter
    def graphTypeDisplayOptions(self, value: ghidra.service.graph.GraphDisplayOptions) -> None: ...

    @property
    def vertexSelectionColor(self) -> java.awt.Color: ...