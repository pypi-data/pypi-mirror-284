from typing import overload
import ghidra.service.graph
import java.lang
import java.util
import java.util.function
import org.jgrapht
import org.jungrapht.visualization
import org.jungrapht.visualization.sublayout


class GhidraGraphCollapser(org.jungrapht.visualization.sublayout.VisualGraphCollapser):




    def __init__(self, __a0: org.jungrapht.visualization.VisualizationServer): ...



    def collapse(self, __a0: java.util.Collection, __a1: java.util.function.Function) -> object: ...

    def collapsedGraphFunction(self) -> java.util.function.Function: ...

    def convertToOutermostVertices(self, __a0: java.util.Set) -> java.util.Set: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def expand(self, __a0: java.util.Collection) -> None: ...

    @overload
    def expand(self, __a0: object) -> None: ...

    def findOwnerOf(self, __a0: object) -> object: ...

    @staticmethod
    def forGraph(__a0: org.jgrapht.Graph) -> org.jungrapht.visualization.sublayout.Collapser: ...

    @staticmethod
    def forVisualization(__a0: org.jungrapht.visualization.VisualizationServer) -> org.jungrapht.visualization.sublayout.Collapser: ...

    def getClass(self) -> java.lang.Class: ...

    def getClusterGraph(self, __a0: java.util.Collection) -> org.jgrapht.Graph: ...

    def getCollapsedGraphMap(self) -> java.util.Map: ...

    def getOutermostVertex(self, __a0: ghidra.service.graph.AttributedVertex) -> ghidra.service.graph.AttributedVertex: ...

    def groupSelectedVertices(self) -> ghidra.service.graph.AttributedVertex: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def ungroupSelectedVertices(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

