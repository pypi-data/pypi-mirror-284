from typing import overload
import ghidra.app.plugin.processors.sleigh
import ghidra.pcode.emu
import ghidra.pcode.exec
import ghidra.pcode.exec.trace
import ghidra.pcode.exec.trace.data
import ghidra.program.model.address
import ghidra.trace.model.guest
import java.lang
import java.util


class TracePcodeMachine(ghidra.pcode.emu.PcodeMachine, object):








    def addAccessBreakpoint(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.pcode.emu.PcodeMachine.AccessKind) -> None: ...

    def addBreakpoint(self, __a0: ghidra.program.model.address.Address, __a1: unicode) -> None: ...

    def clearAccessBreakpoints(self) -> None: ...

    def clearAllInjects(self) -> None: ...

    def clearInject(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def compileSleigh(self, __a0: unicode, __a1: unicode) -> ghidra.pcode.exec.PcodeProgram: ...

    def createLocalState(self, __a0: ghidra.pcode.emu.PcodeThread) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def createSharedState(self) -> ghidra.pcode.exec.trace.TracePcodeExecutorState: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllThreads(self) -> java.util.Collection: ...

    def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.app.plugin.processors.sleigh.SleighLanguage: ...

    def getSharedState(self) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def getSoftwareInterruptMode(self) -> ghidra.pcode.emu.PcodeMachine.SwiMode: ...

    def getStubUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def getThread(self, __a0: unicode, __a1: bool) -> ghidra.pcode.emu.PcodeThread: ...

    def getUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def hashCode(self) -> int: ...

    def inject(self, __a0: ghidra.program.model.address.Address, __a1: unicode) -> None: ...

    def isSuspended(self) -> bool: ...

    @overload
    def newThread(self) -> ghidra.pcode.emu.PcodeThread: ...

    @overload
    def newThread(self, __a0: unicode) -> ghidra.pcode.emu.PcodeThread: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSoftwareInterruptMode(self, __a0: ghidra.pcode.emu.PcodeMachine.SwiMode) -> None: ...

    def setSuspended(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def writeDown(self, __a0: ghidra.pcode.exec.trace.data.PcodeTraceAccess) -> None: ...

    @overload
    def writeDown(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: long) -> None: ...

    @property
    def allThreads(self) -> java.util.Collection: ...

    @property
    def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    @property
    def language(self) -> ghidra.app.plugin.processors.sleigh.SleighLanguage: ...

    @property
    def sharedState(self) -> ghidra.pcode.exec.PcodeExecutorState: ...

    @property
    def softwareInterruptMode(self) -> ghidra.pcode.emu.PcodeMachine.SwiMode: ...

    @softwareInterruptMode.setter
    def softwareInterruptMode(self, value: ghidra.pcode.emu.PcodeMachine.SwiMode) -> None: ...

    @property
    def stubUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    @property
    def suspended(self) -> bool: ...

    @suspended.setter
    def suspended(self, value: bool) -> None: ...

    @property
    def useropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...