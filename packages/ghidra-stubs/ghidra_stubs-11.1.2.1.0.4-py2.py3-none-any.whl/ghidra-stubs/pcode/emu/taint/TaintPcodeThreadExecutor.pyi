from typing import List
from typing import overload
import ghidra.app.plugin.processors.sleigh
import ghidra.pcode.emu
import ghidra.pcode.exec
import ghidra.pcode.opbehavior
import ghidra.program.model.pcode
import java.lang
import java.util


class TaintPcodeThreadExecutor(ghidra.pcode.emu.DefaultPcodeThread.PcodeThreadExecutor):




    def __init__(self, __a0: ghidra.pcode.emu.DefaultPcodeThread): ...



    @overload
    def begin(self, __a0: ghidra.pcode.exec.PcodeProgram) -> ghidra.pcode.exec.PcodeFrame: ...

    @overload
    def begin(self, __a0: List[object], __a1: java.util.Map) -> ghidra.pcode.exec.PcodeFrame: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def execute(self, __a0: ghidra.pcode.exec.PcodeProgram, __a1: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeFrame: ...

    @overload
    def execute(self, __a0: List[object], __a1: java.util.Map, __a2: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeFrame: ...

    def executeBinaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.opbehavior.BinaryOpBehavior) -> None: ...

    def executeBranch(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def executeCall(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame, __a2: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def executeCallother(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame, __a2: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def executeConditionalBranch(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def executeIndirectBranch(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def executeIndirectCall(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def executeLoad(self, __a0: ghidra.program.model.pcode.PcodeOp) -> None: ...

    def executeReturn(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def executeSleigh(self, __a0: unicode) -> None: ...

    def executeStore(self, __a0: ghidra.program.model.pcode.PcodeOp) -> None: ...

    def executeUnaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.opbehavior.UnaryOpBehavior) -> None: ...

    def finish(self, __a0: ghidra.pcode.exec.PcodeFrame, __a1: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.app.plugin.processors.sleigh.SleighLanguage: ...

    def getReason(self) -> ghidra.pcode.exec.PcodeExecutorStatePiece.Reason: ...

    def getState(self) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def getThread(self) -> ghidra.pcode.emu.DefaultPcodeThread: ...

    def getUseropName(self, __a0: int, __a1: ghidra.pcode.exec.PcodeFrame) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def skip(self, __a0: ghidra.pcode.exec.PcodeFrame) -> None: ...

    def step(self, __a0: ghidra.pcode.exec.PcodeFrame, __a1: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def stepOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: ghidra.pcode.exec.PcodeFrame, __a2: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

