from typing import overload
import ghidra.app.util.bin
import ghidra.file.formats.dump.pagedump
import ghidra.program.model.data
import java.lang


class PagedumpFileHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DMP_CONTEXT_RECORD_SIZE_32: int = 1200
    DMP_CONTEXT_RECORD_SIZE_64: int = 3000
    DMP_HEADER_COMMENT_SIZE: int = 128
    DMP_PHYSICAL_MEMORY_BLOCK_SIZE_32: int = 700
    DMP_PHYSICAL_MEMORY_BLOCK_SIZE_64: int = 700
    DMP_RESERVED_0_SIZE_32: int = 1760
    DMP_RESERVED_0_SIZE_64: int = 4008
    DMP_RESERVED_2_SIZE_32: int = 16
    DMP_RESERVED_3_SIZE_32: int = 56
    DWORD: ghidra.program.model.data.DataType
    HEADER_SIZE: int = 4096
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'PAGEDUMP_HEADER'
    OFFSET_DUMP_TYPE: int
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def addToDataType(self, __a0: ghidra.program.model.data.DataType, __a1: long) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAttributes(self) -> int: ...

    def getBootId(self) -> int: ...

    def getBugCheckCode(self) -> int: ...

    def getBugCheckParameter1(self) -> long: ...

    def getBugCheckParameter2(self) -> long: ...

    def getBugCheckParameter3(self) -> long: ...

    def getBugCheckParameter4(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextOffset(self) -> long: ...

    def getDirectoryTableBase(self) -> long: ...

    def getDumpType(self) -> int: ...

    def getKdDebuggerDataBlock(self) -> long: ...

    def getKdSecondaryVersion(self) -> int: ...

    def getMachineImageType(self) -> int: ...

    def getMajorVersion(self) -> int: ...

    def getMiniDumpFields(self) -> int: ...

    def getMinorVersion(self) -> int: ...

    def getNumberOfProcessors(self) -> int: ...

    def getPaeEnabled(self) -> int: ...

    def getPfnTableBase(self) -> long: ...

    def getPhysicalMemoryBlockBuffer(self) -> ghidra.file.formats.dump.pagedump.PhysicalMemoryDescriptor: ...

    def getProductType(self) -> int: ...

    def getPsActiveProcessHead(self) -> long: ...

    def getPsLoadedModuleList(self) -> long: ...

    def getRequiredDumpSpace(self) -> long: ...

    def getSecondaryDataState(self) -> int: ...

    def getSignature(self) -> int: ...

    def getSuiteMask(self) -> int: ...

    def getSystemTime(self) -> long: ...

    def getSystemUpTime(self) -> long: ...

    def getValidDump(self) -> int: ...

    def getWriterStatus(self) -> int: ...

    def hashCode(self) -> int: ...

    def is32Bit(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAttributes(self, __a0: int) -> None: ...

    def setBootId(self, __a0: int) -> None: ...

    def setBugCheckCode(self, __a0: int) -> None: ...

    def setBugCheckParameter1(self, __a0: long) -> None: ...

    def setBugCheckParameter2(self, __a0: long) -> None: ...

    def setBugCheckParameter3(self, __a0: long) -> None: ...

    def setBugCheckParameter4(self, __a0: long) -> None: ...

    def setDirectoryTableBase(self, __a0: long) -> None: ...

    def setDumpType(self, __a0: int) -> None: ...

    def setKdDebuggerDataBlock(self, __a0: long) -> None: ...

    def setKdSecondaryVersion(self, __a0: int) -> None: ...

    def setMachineImageType(self, __a0: int) -> None: ...

    def setMajorVersion(self, __a0: int) -> None: ...

    def setMiniDumpFields(self, __a0: int) -> None: ...

    def setMinorVersion(self, __a0: int) -> None: ...

    def setNumberOfProcessors(self, __a0: int) -> None: ...

    def setPaeEnabled(self, __a0: int) -> None: ...

    def setPfnTableBase(self, __a0: long) -> None: ...

    def setPhysicalMemoryBlockBuffer(self, __a0: ghidra.file.formats.dump.pagedump.PhysicalMemoryDescriptor) -> None: ...

    def setProductType(self, __a0: int) -> None: ...

    def setPsActiveProcessHead(self, __a0: long) -> None: ...

    def setPsLoadedModuleList(self, __a0: long) -> None: ...

    def setRequiredDumpSpace(self, __a0: long) -> None: ...

    def setSecondaryDataState(self, __a0: int) -> None: ...

    def setSignature(self, __a0: int) -> None: ...

    def setSuiteMask(self, __a0: int) -> None: ...

    def setSystemTime(self, __a0: long) -> None: ...

    def setSystemUpTime(self, __a0: long) -> None: ...

    def setValidDump(self, __a0: int) -> None: ...

    def setWriterStatus(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def 32Bit(self) -> bool: ...

    @property
    def attributes(self) -> int: ...

    @attributes.setter
    def attributes(self, value: int) -> None: ...

    @property
    def bootId(self) -> int: ...

    @bootId.setter
    def bootId(self, value: int) -> None: ...

    @property
    def bugCheckCode(self) -> int: ...

    @bugCheckCode.setter
    def bugCheckCode(self, value: int) -> None: ...

    @property
    def bugCheckParameter1(self) -> long: ...

    @bugCheckParameter1.setter
    def bugCheckParameter1(self, value: long) -> None: ...

    @property
    def bugCheckParameter2(self) -> long: ...

    @bugCheckParameter2.setter
    def bugCheckParameter2(self, value: long) -> None: ...

    @property
    def bugCheckParameter3(self) -> long: ...

    @bugCheckParameter3.setter
    def bugCheckParameter3(self, value: long) -> None: ...

    @property
    def bugCheckParameter4(self) -> long: ...

    @bugCheckParameter4.setter
    def bugCheckParameter4(self, value: long) -> None: ...

    @property
    def contextOffset(self) -> long: ...

    @property
    def directoryTableBase(self) -> long: ...

    @directoryTableBase.setter
    def directoryTableBase(self, value: long) -> None: ...

    @property
    def dumpType(self) -> int: ...

    @dumpType.setter
    def dumpType(self, value: int) -> None: ...

    @property
    def kdDebuggerDataBlock(self) -> long: ...

    @kdDebuggerDataBlock.setter
    def kdDebuggerDataBlock(self, value: long) -> None: ...

    @property
    def kdSecondaryVersion(self) -> int: ...

    @kdSecondaryVersion.setter
    def kdSecondaryVersion(self, value: int) -> None: ...

    @property
    def machineImageType(self) -> int: ...

    @machineImageType.setter
    def machineImageType(self, value: int) -> None: ...

    @property
    def majorVersion(self) -> int: ...

    @majorVersion.setter
    def majorVersion(self, value: int) -> None: ...

    @property
    def miniDumpFields(self) -> int: ...

    @miniDumpFields.setter
    def miniDumpFields(self, value: int) -> None: ...

    @property
    def minorVersion(self) -> int: ...

    @minorVersion.setter
    def minorVersion(self, value: int) -> None: ...

    @property
    def numberOfProcessors(self) -> int: ...

    @numberOfProcessors.setter
    def numberOfProcessors(self, value: int) -> None: ...

    @property
    def paeEnabled(self) -> int: ...

    @paeEnabled.setter
    def paeEnabled(self, value: int) -> None: ...

    @property
    def pfnTableBase(self) -> long: ...

    @pfnTableBase.setter
    def pfnTableBase(self, value: long) -> None: ...

    @property
    def physicalMemoryBlockBuffer(self) -> ghidra.file.formats.dump.pagedump.PhysicalMemoryDescriptor: ...

    @physicalMemoryBlockBuffer.setter
    def physicalMemoryBlockBuffer(self, value: ghidra.file.formats.dump.pagedump.PhysicalMemoryDescriptor) -> None: ...

    @property
    def productType(self) -> int: ...

    @productType.setter
    def productType(self, value: int) -> None: ...

    @property
    def psActiveProcessHead(self) -> long: ...

    @psActiveProcessHead.setter
    def psActiveProcessHead(self, value: long) -> None: ...

    @property
    def psLoadedModuleList(self) -> long: ...

    @psLoadedModuleList.setter
    def psLoadedModuleList(self, value: long) -> None: ...

    @property
    def requiredDumpSpace(self) -> long: ...

    @requiredDumpSpace.setter
    def requiredDumpSpace(self, value: long) -> None: ...

    @property
    def secondaryDataState(self) -> int: ...

    @secondaryDataState.setter
    def secondaryDataState(self, value: int) -> None: ...

    @property
    def signature(self) -> int: ...

    @signature.setter
    def signature(self, value: int) -> None: ...

    @property
    def suiteMask(self) -> int: ...

    @suiteMask.setter
    def suiteMask(self, value: int) -> None: ...

    @property
    def systemTime(self) -> long: ...

    @systemTime.setter
    def systemTime(self, value: long) -> None: ...

    @property
    def systemUpTime(self) -> long: ...

    @systemUpTime.setter
    def systemUpTime(self, value: long) -> None: ...

    @property
    def validDump(self) -> int: ...

    @validDump.setter
    def validDump(self, value: int) -> None: ...

    @property
    def writerStatus(self) -> int: ...

    @writerStatus.setter
    def writerStatus(self, value: int) -> None: ...