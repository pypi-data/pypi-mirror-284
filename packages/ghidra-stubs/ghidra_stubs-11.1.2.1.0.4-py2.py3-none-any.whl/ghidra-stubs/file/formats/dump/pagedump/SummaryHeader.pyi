from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class SummaryHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'PAGEDUMP_SUMMARY'
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SIGNATURE: int = 1162297680
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def equals(self, __a0: object) -> bool: ...

    def getBitmapSize(self) -> int: ...

    def getBuffer(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDumpOptions(self) -> int: ...

    def getHeaderSize(self) -> int: ...

    def getPages(self) -> int: ...

    def getSignature(self) -> int: ...

    def getSizeOfBitMap(self) -> int: ...

    def getValidDump(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBitmapSize(self, __a0: int) -> None: ...

    def setBuffer(self, __a0: List[int]) -> None: ...

    def setDumpOptions(self, __a0: int) -> None: ...

    def setHeaderSize(self, __a0: int) -> None: ...

    def setPages(self, __a0: int) -> None: ...

    def setSignature(self, __a0: int) -> None: ...

    def setSizeOfBitMap(self, __a0: int) -> None: ...

    def setValidDump(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bitmapSize(self) -> int: ...

    @bitmapSize.setter
    def bitmapSize(self, value: int) -> None: ...

    @property
    def buffer(self) -> List[int]: ...

    @buffer.setter
    def buffer(self, value: List[int]) -> None: ...

    @property
    def dumpOptions(self) -> int: ...

    @dumpOptions.setter
    def dumpOptions(self, value: int) -> None: ...

    @property
    def headerSize(self) -> int: ...

    @headerSize.setter
    def headerSize(self, value: int) -> None: ...

    @property
    def pages(self) -> int: ...

    @pages.setter
    def pages(self, value: int) -> None: ...

    @property
    def signature(self) -> int: ...

    @signature.setter
    def signature(self, value: int) -> None: ...

    @property
    def sizeOfBitMap(self) -> int: ...

    @sizeOfBitMap.setter
    def sizeOfBitMap(self, value: int) -> None: ...

    @property
    def validDump(self) -> int: ...

    @validDump.setter
    def validDump(self, value: int) -> None: ...