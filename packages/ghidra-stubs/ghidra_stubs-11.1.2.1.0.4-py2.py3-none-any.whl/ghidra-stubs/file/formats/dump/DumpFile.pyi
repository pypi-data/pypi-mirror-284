from typing import List
from typing import overload
import ghidra.program.database.mem
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.util.task
import java.lang
import java.util


class DumpFile(object):
    ANALYZE_EMBEDDED_OBJECTS_OPTION_DEFAULT: bool = False
    ANALYZE_EMBEDDED_OBJECTS_OPTION_NAME: unicode = u'Analyze Embedded Executables (interactive)'
    CREATE_MEMORY_BLOCKS_OPTION_DEFAULT: bool = True
    CREATE_MEMORY_BLOCKS_OPTION_NAME: unicode = u'Create Memory Blocks'
    JOIN_BLOCKS_OPTION_DEFAULT: bool = False
    JOIN_BLOCKS_OPTION_NAME: unicode = u'Join Blocks'



    def __init__(self, __a0: ghidra.file.formats.dump.DumpFileReader, __a1: ghidra.program.model.data.ProgramBasedDataTypeManager, __a2: List[object], __a3: ghidra.util.task.TaskMonitor): ...



    def addExteriorAddressObject(self, __a0: unicode, __a1: long, __a2: long, __a3: long) -> None: ...

    def addInteriorAddressObject(self, __a0: unicode, __a1: long, __a2: long, __a3: long) -> None: ...

    def analyze(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextOffset(self) -> long: ...

    def getData(self) -> List[object]: ...

    def getExteriorAddressRanges(self) -> java.util.Map: ...

    def getFileBytes(self, __a0: ghidra.util.task.TaskMonitor) -> ghidra.program.database.mem.FileBytes: ...

    def getInteriorAddressRanges(self) -> java.util.Map: ...

    def getModules(self) -> List[object]: ...

    def getProcessId(self) -> unicode: ...

    def getProcesses(self) -> List[object]: ...

    def getThreadId(self) -> unicode: ...

    def getThreads(self) -> List[object]: ...

    def getTypeFromArchive(self, __a0: ghidra.program.model.data.CategoryPath, __a1: unicode) -> ghidra.program.model.data.DataType: ...

    def hashCode(self) -> int: ...

    def joinBlocksEnabled(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def contextOffset(self) -> long: ...

    @property
    def data(self) -> List[object]: ...

    @property
    def exteriorAddressRanges(self) -> java.util.Map: ...

    @property
    def interiorAddressRanges(self) -> java.util.Map: ...

    @property
    def modules(self) -> List[object]: ...

    @property
    def processId(self) -> unicode: ...

    @property
    def processes(self) -> List[object]: ...

    @property
    def threadId(self) -> unicode: ...

    @property
    def threads(self) -> List[object]: ...