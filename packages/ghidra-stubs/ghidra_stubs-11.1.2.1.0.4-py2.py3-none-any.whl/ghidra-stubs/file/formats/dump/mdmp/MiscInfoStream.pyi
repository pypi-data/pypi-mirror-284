from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class MiscInfoStream(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    NAME: unicode = u'MINIDUMP_MISC_INFO'
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType







    def equals(self, __a0: object) -> bool: ...

    def getBias(self) -> int: ...

    def getBuildString(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDaylightBias(self) -> int: ...

    def getDaylightName(self) -> unicode: ...

    def getDbgBuildStr(self) -> unicode: ...

    def getFlags1(self) -> int: ...

    def getProcessCreateTime(self) -> int: ...

    def getProcessExecuteFlags(self) -> int: ...

    def getProcessId(self) -> int: ...

    def getProcessIntegrityLevel(self) -> int: ...

    def getProcessKernelTime(self) -> int: ...

    def getProcessUserTime(self) -> int: ...

    def getProcessorCurrentIdleState(self) -> int: ...

    def getProcessorCurrentMhz(self) -> int: ...

    def getProcessorMaxIdleState(self) -> int: ...

    def getProcessorMaxMhz(self) -> int: ...

    def getProcessorMhzLimit(self) -> int: ...

    def getProtectedProcess(self) -> int: ...

    def getSizeOfInfo(self) -> int: ...

    def getStandardBias(self) -> int: ...

    def getStandardName(self) -> unicode: ...

    def getTimeZoneId(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBias(self, __a0: int) -> None: ...

    def setBuildString(self, __a0: unicode) -> None: ...

    def setDaylightBias(self, __a0: int) -> None: ...

    def setDaylightName(self, __a0: unicode) -> None: ...

    def setDbgBuildStr(self, __a0: unicode) -> None: ...

    def setFlags1(self, __a0: int) -> None: ...

    def setProcessCreateTime(self, __a0: int) -> None: ...

    def setProcessExecuteFlags(self, __a0: int) -> None: ...

    def setProcessId(self, __a0: int) -> None: ...

    def setProcessIntegrityLevel(self, __a0: int) -> None: ...

    def setProcessKernelTime(self, __a0: int) -> None: ...

    def setProcessUserTime(self, __a0: int) -> None: ...

    def setProcessorCurrentIdleState(self, __a0: int) -> None: ...

    def setProcessorCurrentMhz(self, __a0: int) -> None: ...

    def setProcessorMaxIdleState(self, __a0: int) -> None: ...

    def setProcessorMaxMhz(self, __a0: int) -> None: ...

    def setProcessorMhzLimit(self, __a0: int) -> None: ...

    def setProtectedProcess(self, __a0: int) -> None: ...

    def setSizeOfInfo(self, __a0: int) -> None: ...

    def setStandardBias(self, __a0: int) -> None: ...

    def setStandardName(self, __a0: unicode) -> None: ...

    def setTimeZoneId(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bias(self) -> int: ...

    @bias.setter
    def bias(self, value: int) -> None: ...

    @property
    def buildString(self) -> unicode: ...

    @buildString.setter
    def buildString(self, value: unicode) -> None: ...

    @property
    def daylightBias(self) -> int: ...

    @daylightBias.setter
    def daylightBias(self, value: int) -> None: ...

    @property
    def daylightName(self) -> unicode: ...

    @daylightName.setter
    def daylightName(self, value: unicode) -> None: ...

    @property
    def dbgBuildStr(self) -> unicode: ...

    @dbgBuildStr.setter
    def dbgBuildStr(self, value: unicode) -> None: ...

    @property
    def flags1(self) -> int: ...

    @flags1.setter
    def flags1(self, value: int) -> None: ...

    @property
    def processCreateTime(self) -> int: ...

    @processCreateTime.setter
    def processCreateTime(self, value: int) -> None: ...

    @property
    def processExecuteFlags(self) -> int: ...

    @processExecuteFlags.setter
    def processExecuteFlags(self, value: int) -> None: ...

    @property
    def processId(self) -> int: ...

    @processId.setter
    def processId(self, value: int) -> None: ...

    @property
    def processIntegrityLevel(self) -> int: ...

    @processIntegrityLevel.setter
    def processIntegrityLevel(self, value: int) -> None: ...

    @property
    def processKernelTime(self) -> int: ...

    @processKernelTime.setter
    def processKernelTime(self, value: int) -> None: ...

    @property
    def processUserTime(self) -> int: ...

    @processUserTime.setter
    def processUserTime(self, value: int) -> None: ...

    @property
    def processorCurrentIdleState(self) -> int: ...

    @processorCurrentIdleState.setter
    def processorCurrentIdleState(self, value: int) -> None: ...

    @property
    def processorCurrentMhz(self) -> int: ...

    @processorCurrentMhz.setter
    def processorCurrentMhz(self, value: int) -> None: ...

    @property
    def processorMaxIdleState(self) -> int: ...

    @processorMaxIdleState.setter
    def processorMaxIdleState(self, value: int) -> None: ...

    @property
    def processorMaxMhz(self) -> int: ...

    @processorMaxMhz.setter
    def processorMaxMhz(self, value: int) -> None: ...

    @property
    def processorMhzLimit(self) -> int: ...

    @processorMhzLimit.setter
    def processorMhzLimit(self, value: int) -> None: ...

    @property
    def protectedProcess(self) -> int: ...

    @protectedProcess.setter
    def protectedProcess(self, value: int) -> None: ...

    @property
    def sizeOfInfo(self) -> int: ...

    @sizeOfInfo.setter
    def sizeOfInfo(self, value: int) -> None: ...

    @property
    def standardBias(self) -> int: ...

    @standardBias.setter
    def standardBias(self, value: int) -> None: ...

    @property
    def standardName(self) -> unicode: ...

    @standardName.setter
    def standardName(self, value: unicode) -> None: ...

    @property
    def timeZoneId(self) -> int: ...

    @timeZoneId.setter
    def timeZoneId(self, value: int) -> None: ...