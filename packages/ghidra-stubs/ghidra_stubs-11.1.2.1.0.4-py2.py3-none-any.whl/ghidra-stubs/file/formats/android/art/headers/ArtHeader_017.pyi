from typing import List
from typing import overload
import ghidra.file.formats.android.art
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.util.task
import java.lang


class ArtHeader_017(ghidra.file.formats.android.art.ArtHeader):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getArtMethodCountForVersion(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getImageBegin(self) -> int: ...

    def getImageMethods(self) -> List[long]: ...

    def getImageSize(self) -> int: ...

    def getMagic(self) -> unicode: ...

    def getOatChecksum(self) -> int: ...

    def getOatDataBegin(self) -> int: ...

    def getOatDataEnd(self) -> int: ...

    def getOatFileBegin(self) -> int: ...

    def getOatFileEnd(self) -> int: ...

    def getPointerSize(self) -> int: ...

    def getVersion(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def markup(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def artMethodCountForVersion(self) -> int: ...

    @property
    def imageBegin(self) -> int: ...

    @property
    def imageMethods(self) -> List[long]: ...

    @property
    def imageSize(self) -> int: ...

    @property
    def oatChecksum(self) -> int: ...

    @property
    def oatDataBegin(self) -> int: ...

    @property
    def oatDataEnd(self) -> int: ...

    @property
    def oatFileBegin(self) -> int: ...

    @property
    def oatFileEnd(self) -> int: ...

    @property
    def pointerSize(self) -> int: ...