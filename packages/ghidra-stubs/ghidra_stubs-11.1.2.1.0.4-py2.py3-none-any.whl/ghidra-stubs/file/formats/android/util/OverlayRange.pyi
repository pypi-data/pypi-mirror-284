from typing import List
from typing import overload
import java.lang


class OverlayRange(object):




    @overload
    def __init__(self, __a0: long, __a1: List[int]): ...

    @overload
    def __init__(self, __a0: int, __a1: List[int]): ...



    @overload
    def containsIndex(self, __a0: long) -> bool: ...

    @overload
    def containsIndex(self, __a0: int) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllBytes(self) -> List[int]: ...

    @overload
    def getByte(self, __a0: long) -> int: ...

    @overload
    def getByte(self, __a0: int) -> int: ...

    @overload
    def getBytes(self, __a0: long, __a1: long) -> List[int]: ...

    @overload
    def getBytes(self, __a0: int, __a1: int) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getEndIndex(self) -> int: ...

    def getStartIndex(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allBytes(self) -> List[int]: ...

    @property
    def endIndex(self) -> int: ...

    @property
    def startIndex(self) -> int: ...