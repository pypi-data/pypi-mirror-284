from typing import List
from typing import overload
import ghidra.file.formats.android.bootimg
import ghidra.program.model.data
import java.lang


class BootImageHeaderV3(ghidra.file.formats.android.bootimg.BootImageHeader):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCommandLine(self) -> unicode: ...

    def getHeaderSize(self) -> int: ...

    def getHeaderVersion(self) -> int: ...

    def getKernelOffset(self) -> long: ...

    def getKernelPageCount(self) -> int: ...

    def getKernelSize(self) -> int: ...

    def getMagic(self) -> unicode: ...

    def getOSVersion(self) -> int: ...

    def getPageSize(self) -> int: ...

    def getRamdiskOffset(self) -> int: ...

    def getRamdiskPageCount(self) -> int: ...

    def getRamdiskSize(self) -> int: ...

    def getReserved(self) -> List[int]: ...

    def getSecondOffset(self) -> long: ...

    def getSecondPageCount(self) -> int: ...

    def getSecondSize(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pageAlign(self, __a0: long) -> long: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def OSVersion(self) -> int: ...

    @property
    def commandLine(self) -> unicode: ...

    @property
    def headerSize(self) -> int: ...

    @property
    def headerVersion(self) -> int: ...

    @property
    def kernelOffset(self) -> long: ...

    @property
    def kernelPageCount(self) -> int: ...

    @property
    def kernelSize(self) -> int: ...

    @property
    def magic(self) -> unicode: ...

    @property
    def pageSize(self) -> int: ...

    @property
    def ramdiskOffset(self) -> int: ...

    @property
    def ramdiskPageCount(self) -> int: ...

    @property
    def ramdiskSize(self) -> int: ...

    @property
    def reserved(self) -> List[int]: ...

    @property
    def secondOffset(self) -> long: ...

    @property
    def secondPageCount(self) -> int: ...

    @property
    def secondSize(self) -> int: ...