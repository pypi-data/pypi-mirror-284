from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.file.formats.android.dex.format
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import java.lang


class CDexHeader(ghidra.file.formats.android.dex.format.DexHeader):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getChecksum(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getClassDefs(self) -> List[object]: ...

    def getClassDefsIdsOffset(self) -> int: ...

    def getClassDefsIdsSize(self) -> int: ...

    def getDataOffset(self) -> int: ...

    def getDataSize(self) -> int: ...

    def getDataType(self, __a0: ghidra.program.model.listing.Program, __a1: int) -> ghidra.program.model.data.DataType: ...

    def getDebugInfoBase(self) -> int: ...

    def getDebugInfoOffsetsPos(self) -> int: ...

    def getDebugInfoOffsetsTableOffset(self) -> int: ...

    def getEndianTag(self) -> int: ...

    def getFeatureFlags(self) -> int: ...

    def getFieldIdsOffset(self) -> int: ...

    def getFieldIdsSize(self) -> int: ...

    def getFields(self) -> List[object]: ...

    def getFileSize(self) -> int: ...

    def getHeaderSize(self) -> int: ...

    def getLinkOffset(self) -> int: ...

    def getLinkSize(self) -> int: ...

    def getMagic(self) -> List[int]: ...

    def getMapList(self) -> ghidra.file.formats.android.dex.format.MapList: ...

    def getMapOffset(self) -> int: ...

    def getMethodAddress(self, __a0: ghidra.program.model.listing.Program, __a1: int) -> ghidra.program.model.address.Address: ...

    def getMethodIdsOffset(self) -> int: ...

    def getMethodIdsSize(self) -> int: ...

    def getMethods(self) -> List[object]: ...

    def getOwnedDataBegin(self) -> int: ...

    def getOwnedDataEnd(self) -> int: ...

    def getProtoIdsOffset(self) -> int: ...

    def getProtoIdsSize(self) -> int: ...

    def getPrototypes(self) -> List[object]: ...

    def getSignature(self) -> List[int]: ...

    def getStringIdsOffset(self) -> int: ...

    def getStringIdsSize(self) -> int: ...

    def getStrings(self) -> List[object]: ...

    def getTypeIdsOffset(self) -> int: ...

    def getTypeIdsSize(self) -> int: ...

    def getTypes(self) -> List[object]: ...

    def getVersion(self) -> List[int]: ...

    def hashCode(self) -> int: ...

    def isDataOffsetRelative(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parse(self, __a0: ghidra.app.util.bin.BinaryReader) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def dataOffsetRelative(self) -> bool: ...

    @property
    def debugInfoBase(self) -> int: ...

    @property
    def debugInfoOffsetsPos(self) -> int: ...

    @property
    def debugInfoOffsetsTableOffset(self) -> int: ...

    @property
    def featureFlags(self) -> int: ...

    @property
    def ownedDataBegin(self) -> int: ...

    @property
    def ownedDataEnd(self) -> int: ...