from typing import overload
import ghidra.file.formats.android.oat.oatmethod
import ghidra.program.model.data
import java.lang


class OatMethodOffsets_KitKat(ghidra.file.formats.android.oat.oatmethod.OatMethodOffsets):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeOffset(self) -> int: ...

    def getCoreSpillMask(self) -> int: ...

    def getFpSpillMask(self) -> int: ...

    def getFrameSizeInBytes(self) -> int: ...

    def getGcMapOffset(self) -> int: ...

    def getMappingTableOffset(self) -> int: ...

    def getVmapTableOffset(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def coreSpillMask(self) -> int: ...

    @property
    def fpSpillMask(self) -> int: ...

    @property
    def frameSizeInBytes(self) -> int: ...

    @property
    def gcMapOffset(self) -> int: ...

    @property
    def mappingTableOffset(self) -> int: ...

    @property
    def vmapTableOffset(self) -> int: ...