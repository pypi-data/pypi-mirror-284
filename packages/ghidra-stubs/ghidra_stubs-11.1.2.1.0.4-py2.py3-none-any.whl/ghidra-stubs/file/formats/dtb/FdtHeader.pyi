from typing import overload
import ghidra.app.util.bin
import ghidra.app.util.importer
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.util.task
import java.lang


class FdtHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType



    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getBootCpuIdPhysical(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getLastCompatibleVersion(self) -> int: ...

    def getMagic(self) -> int: ...

    def getOffsetToDtStrings(self) -> int: ...

    def getOffsetToDtStruct(self) -> int: ...

    def getOffsetToMemoryReserveMap(self) -> int: ...

    def getSizeDtStrings(self) -> int: ...

    def getSizeDtStruct(self) -> int: ...

    def getTotalSize(self) -> int: ...

    def getVersion(self) -> int: ...

    def hashCode(self) -> int: ...

    def markup(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.listing.Program, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.app.util.importer.MessageLog) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bootCpuIdPhysical(self) -> int: ...

    @property
    def lastCompatibleVersion(self) -> int: ...

    @property
    def magic(self) -> int: ...

    @property
    def offsetToDtStrings(self) -> int: ...

    @property
    def offsetToDtStruct(self) -> int: ...

    @property
    def offsetToMemoryReserveMap(self) -> int: ...

    @property
    def sizeDtStrings(self) -> int: ...

    @property
    def sizeDtStruct(self) -> int: ...

    @property
    def totalSize(self) -> int: ...

    @property
    def version(self) -> int: ...