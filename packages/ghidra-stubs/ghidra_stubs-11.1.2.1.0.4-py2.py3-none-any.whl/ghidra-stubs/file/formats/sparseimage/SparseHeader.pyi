from typing import overload
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class SparseHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType



    @overload
    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...

    @overload
    def __init__(self, __a0: ghidra.app.util.bin.ByteProvider): ...



    def equals(self, __a0: object) -> bool: ...

    def getBlk_sz(self) -> int: ...

    def getChunk_hdr_sz(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getFile_hdr_sz(self) -> int: ...

    def getImage_checksum(self) -> int: ...

    def getMagic(self) -> int: ...

    def getMajor_version(self) -> int: ...

    def getMinor_version(self) -> int: ...

    def getTotal_blks(self) -> int: ...

    def getTotal_chunks(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def blk_sz(self) -> int: ...

    @property
    def chunk_hdr_sz(self) -> int: ...

    @property
    def file_hdr_sz(self) -> int: ...

    @property
    def image_checksum(self) -> int: ...

    @property
    def magic(self) -> int: ...

    @property
    def major_version(self) -> int: ...

    @property
    def minor_version(self) -> int: ...

    @property
    def total_blks(self) -> int: ...

    @property
    def total_chunks(self) -> int: ...