from typing import overload
import ghidra.file.formats.squashfs
import java.lang


class SquashBasicDirectoryInode(ghidra.file.formats.squashfs.SquashInode):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader, __a1: ghidra.file.formats.squashfs.SquashSuperBlock, __a2: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDirectoryTableEntry(self) -> ghidra.file.formats.squashfs.SquashDirectoryTableEntry: ...

    def getGroupID(self) -> int: ...

    def getHardLinkCount(self) -> long: ...

    def getIndex(self) -> long: ...

    def getModTime(self) -> long: ...

    def getNumber(self) -> int: ...

    def getOffset(self) -> int: ...

    def getParent(self) -> ghidra.file.formats.squashfs.SquashBasicDirectoryInode: ...

    def getParentInodeNumber(self) -> int: ...

    def getPermissions(self) -> int: ...

    def getType(self) -> int: ...

    def getUncompressedSize(self) -> long: ...

    def getUserID(self) -> int: ...

    def hashCode(self) -> int: ...

    def isDir(self) -> bool: ...

    def isFile(self) -> bool: ...

    def isParentRoot(self) -> bool: ...

    def isSymLink(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def hardLinkCount(self) -> long: ...

    @property
    def index(self) -> long: ...

    @property
    def offset(self) -> int: ...

    @property
    def parentInodeNumber(self) -> int: ...

    @property
    def parentRoot(self) -> bool: ...

    @property
    def uncompressedSize(self) -> long: ...