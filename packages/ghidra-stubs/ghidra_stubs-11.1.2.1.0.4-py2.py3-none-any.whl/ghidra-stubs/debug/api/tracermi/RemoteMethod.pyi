from typing import overload
import ghidra.dbg.target.schema
import ghidra.debug.api.target
import ghidra.debug.api.tracermi
import ghidra.trace.model
import java.lang
import java.util


class RemoteMethod(object):








    def action(self) -> ghidra.debug.api.target.ActionName: ...

    @staticmethod
    def checkType(__a0: unicode, __a1: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName, __a2: ghidra.dbg.target.schema.TargetObjectSchema, __a3: object) -> None: ...

    def description(self) -> unicode: ...

    def display(self) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def invoke(self, __a0: java.util.Map) -> object: ...

    def invokeAsync(self, __a0: java.util.Map) -> ghidra.debug.api.tracermi.RemoteAsyncResult: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parameters(self) -> java.util.Map: ...

    def retType(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def toString(self) -> unicode: ...

    def validate(self, __a0: java.util.Map) -> ghidra.trace.model.Trace: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

