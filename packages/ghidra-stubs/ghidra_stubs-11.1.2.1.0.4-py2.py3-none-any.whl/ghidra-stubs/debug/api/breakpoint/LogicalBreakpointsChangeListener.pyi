from typing import overload
import ghidra.debug.api.breakpoint
import ghidra.trace.model.breakpoint
import java.lang
import java.util


class LogicalBreakpointsChangeListener(object):








    def breakpointAdded(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointRemoved(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointUpdated(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint) -> None: ...

    def breakpointsAdded(self, __a0: java.util.Collection) -> None: ...

    def breakpointsRemoved(self, __a0: java.util.Collection) -> None: ...

    def breakpointsUpdated(self, __a0: java.util.Collection) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def locationAdded(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def locationRemoved(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def locationUpdated(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

