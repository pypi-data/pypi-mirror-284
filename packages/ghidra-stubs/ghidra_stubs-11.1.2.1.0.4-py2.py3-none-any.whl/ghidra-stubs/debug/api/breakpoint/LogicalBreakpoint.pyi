from typing import List
from typing import overload
import ghidra.debug.api.breakpoint
import ghidra.framework.model
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import java.lang
import java.util
import java.util.concurrent


class LogicalBreakpoint(object):
    DISABLED_BOOKMARK_TYPE: unicode = u'BreakpointDisabled'
    ENABLED_BOOKMARK_TYPE: unicode = u'BreakpointEnabled'
    ICON_MARKER_DISABLED: javax.swing.Icon
    ICON_MARKER_ENABLED: javax.swing.Icon
    ICON_MARKER_INCON_DIS: javax.swing.Icon
    ICON_MARKER_INCON_EN: javax.swing.Icon
    ICON_MARKER_INCON_MIX: javax.swing.Icon
    ICON_MARKER_INEFF_DIS: javax.swing.Icon
    ICON_MARKER_INEFF_EN: javax.swing.Icon
    ICON_MARKER_INEFF_MIX: javax.swing.Icon
    ICON_MARKER_MIXED: javax.swing.Icon
    ICON_OVERLAY_INCONSISTENT: javax.swing.Icon
    NAME_MARKER_DISABLED: unicode = u'Disabled Breakpoint'
    NAME_MARKER_ENABLED: unicode = u'Enabled Breakpoint'
    NAME_MARKER_INCON_DIS: unicode = u'Inconsistent Disabled Breakpoint'
    NAME_MARKER_INCON_EN: unicode = u'Inconsistent Enabled Breakpoint'
    NAME_MARKER_INCON_MIX: unicode = u'Inconsistent Mixed Breakpoint'
    NAME_MARKER_INEFF_DIS: unicode = u'Ineffective Disabled Breakpoint'
    NAME_MARKER_INEFF_EN: unicode = u'Ineffective Enabled Breakpoint'
    NAME_MARKER_INEFF_MIX: unicode = u'Ineffective Mixed Breakpoint'
    NAME_MARKER_MIXED: unicode = u'Mixed Breakpoint'




    class ProgramMode(java.lang.Enum):
        DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode
        ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode
        MISSING: ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode
        NONE: ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode







        def combineTrace(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode, __a1: ghidra.debug.api.breakpoint.LogicalBreakpoint.Perspective) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.ProgramMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Consistency(java.lang.Enum):
        INCONSISTENT: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency
        INEFFECTIVE: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency
        NORMAL: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def sameAddress(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class State(java.lang.Enum):
        DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INCONSISTENT_DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INCONSISTENT_ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INCONSISTENT_MIXED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INEFFECTIVE_DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INEFFECTIVE_ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        INEFFECTIVE_MIXED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        MIXED: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        NONE: ghidra.debug.api.breakpoint.LogicalBreakpoint.State
        consistency: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency
        display: unicode
        icon: javax.swing.Icon
        mode: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromFields(__a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode, __a1: ghidra.debug.api.breakpoint.LogicalBreakpoint.Consistency) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getToggled(self, __a0: bool) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        def hashCode(self) -> int: ...

        def isEffective(self) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isIneffective(self) -> bool: ...

        def isNormal(self) -> bool: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def sameAdddress(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.State) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        @staticmethod
        def sameAddress(__a0: java.util.Collection) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.State]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def effective(self) -> bool: ...

        @property
        def enabled(self) -> bool: ...

        @property
        def ineffective(self) -> bool: ...

        @property
        def normal(self) -> bool: ...




    class Perspective(java.lang.Enum):
        LOGICAL: ghidra.debug.api.breakpoint.LogicalBreakpoint.Perspective
        TRACE: ghidra.debug.api.breakpoint.LogicalBreakpoint.Perspective







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Perspective: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.Perspective]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Mode(java.lang.Enum):
        DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode
        ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode
        MIXED: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def sameAddress(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMode(java.lang.Enum):
        DISABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode
        ENABLED: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode
        MISSING: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode
        MIXED: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode
        NONE: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode







        def combine(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromBool(__a0: bool) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.debug.api.breakpoint.LogicalBreakpoint.TraceMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def computeState(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForLocation(self, __a0: ghidra.trace.model.breakpoint.TraceBreakpoint) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForProgram(self, __a0: ghidra.program.model.listing.Program) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def computeStateForTrace(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def delete(self) -> java.util.concurrent.CompletableFuture: ...

    def deleteForProgram(self) -> None: ...

    def deleteForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def disable(self) -> java.util.concurrent.CompletableFuture: ...

    def disableForProgram(self) -> None: ...

    def disableForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def enable(self) -> java.util.concurrent.CompletableFuture: ...

    def enableForProgram(self) -> None: ...

    def enableForTrace(self, __a0: ghidra.trace.model.Trace) -> java.util.concurrent.CompletableFuture: ...

    def equals(self, __a0: object) -> bool: ...

    def generateStatusEnable(self, __a0: ghidra.trace.model.Trace) -> unicode: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDomainObject(self) -> ghidra.framework.model.DomainObject: ...

    def getEmuSleigh(self) -> unicode: ...

    def getKinds(self) -> java.util.Set: ...

    def getLength(self) -> long: ...

    def getMappedTraces(self) -> java.util.Set: ...

    def getName(self) -> unicode: ...

    def getParticipatingTraces(self) -> java.util.Set: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramBookmark(self) -> ghidra.program.model.listing.Bookmark: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getTraceAddress(self, __a0: ghidra.trace.model.Trace) -> ghidra.program.model.address.Address: ...

    @overload
    def getTraceBreakpoints(self) -> java.util.Set: ...

    @overload
    def getTraceBreakpoints(self, __a0: ghidra.trace.model.Trace) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setEmuSleigh(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def domainObject(self) -> ghidra.framework.model.DomainObject: ...

    @property
    def empty(self) -> bool: ...

    @property
    def emuSleigh(self) -> unicode: ...

    @emuSleigh.setter
    def emuSleigh(self, value: unicode) -> None: ...

    @property
    def kinds(self) -> java.util.Set: ...

    @property
    def length(self) -> long: ...

    @property
    def mappedTraces(self) -> java.util.Set: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def participatingTraces(self) -> java.util.Set: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def programBookmark(self) -> ghidra.program.model.listing.Bookmark: ...

    @property
    def programLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def traceBreakpoints(self) -> java.util.Set: ...