from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.feature.vt.api
import ghidra.program.model.address
import java.lang
import java.util


class FunctionNode(object, java.lang.Comparable):




    def __init__(self, __a0: ghidra.program.model.listing.Function, __a1: generic.lsh.vector.LSHVector, __a2: java.util.ArrayList): ...



    def addAssociate(self, __a0: ghidra.feature.vt.api.FunctionNode, __a1: ghidra.feature.vt.api.FunctionPair) -> None: ...

    def clearAssociates(self) -> None: ...

    @overload
    def compareTo(self, __a0: ghidra.feature.vt.api.FunctionNode) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def findEdge(self, __a0: ghidra.feature.vt.api.FunctionNode) -> ghidra.feature.vt.api.FunctionPair: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getAssociateIterator(self) -> java.util.Iterator: ...

    def getChildren(self) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def getLen(self) -> int: ...

    def getParents(self) -> java.util.Set: ...

    def getVector(self) -> generic.lsh.vector.LSHVector: ...

    def hashCode(self) -> int: ...

    def isAcceptedMatch(self) -> bool: ...

    @staticmethod
    def neigborhoodAllocate() -> java.util.Set: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def releaseCallAddresses(self) -> List[object]: ...

    def removeAssociate(self, __a0: ghidra.feature.vt.api.FunctionNode) -> None: ...

    def setAcceptedMatch(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def acceptedMatch(self) -> bool: ...

    @acceptedMatch.setter
    def acceptedMatch(self, value: bool) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def associateIterator(self) -> java.util.Iterator: ...

    @property
    def children(self) -> java.util.Set: ...

    @property
    def len(self) -> int: ...

    @property
    def parents(self) -> java.util.Set: ...

    @property
    def vector(self) -> generic.lsh.vector.LSHVector: ...