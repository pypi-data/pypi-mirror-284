from typing import List
from typing import overload
import ghidra.app.util.bin.format.pdb2.pdbreader
import java.lang


class ModuleInformation(object):




    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFilenameByOffset(self, __a0: int) -> unicode: ...

    def getFilenamesArray(self) -> List[object]: ...

    def getModuleName(self) -> unicode: ...

    def getNumFilesContributing(self) -> int: ...

    def getOffsetsArray(self) -> List[object]: ...

    def getSectionContribution(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.SectionContribution: ...

    def getSizeC13StyleLineNumberInformation(self) -> int: ...

    def getSizeLineNumberDebugInformation(self) -> int: ...

    def getSizeLocalSymbolsDebugInformation(self) -> int: ...

    def getStreamNumberDebugInformation(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def filenamesArray(self) -> List[object]: ...

    @property
    def moduleName(self) -> unicode: ...

    @property
    def numFilesContributing(self) -> int: ...

    @property
    def offsetsArray(self) -> List[object]: ...

    @property
    def sectionContribution(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.SectionContribution: ...

    @property
    def sizeC13StyleLineNumberInformation(self) -> int: ...

    @property
    def sizeLineNumberDebugInformation(self) -> int: ...

    @property
    def sizeLocalSymbolsDebugInformation(self) -> int: ...

    @property
    def streamNumberDebugInformation(self) -> int: ...