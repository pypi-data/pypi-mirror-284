from typing import overload
import ghidra.app.util.bin.format.elf
import ghidra.app.util.bin.format.elf.extend
import ghidra.app.util.bin.format.elf.relocation
import ghidra.app.util.importer
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.reloc
import java.lang
import java.util


class PowerPC_ElfRelocationContext(ghidra.app.util.bin.format.elf.relocation.ElfRelocationContext):








    def dispose(self) -> None: ...

    def endRelocationTableProcessing(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def extractAddend(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getElfHeader(self) -> ghidra.app.util.bin.format.elf.ElfHeader: ...

    def getGOTValue(self) -> long: ...

    def getImageBaseWordAdjustmentOffset(self) -> long: ...

    def getLoadAdapter(self) -> ghidra.app.util.bin.format.elf.extend.ElfLoadAdapter: ...

    def getLoadHelper(self) -> ghidra.app.util.bin.format.elf.ElfLoadHelper: ...

    def getLog(self) -> ghidra.app.util.importer.MessageLog: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getRelocationAddress(self, __a0: ghidra.program.model.address.Address, __a1: long) -> ghidra.program.model.address.Address: ...

    @staticmethod
    def getRelocationContext(__a0: ghidra.app.util.bin.format.elf.ElfLoadHelper, __a1: java.util.Map) -> ghidra.app.util.bin.format.elf.relocation.ElfRelocationContext: ...

    def getRelrRelocationType(self) -> int: ...

    def getSymbol(self, __a0: int) -> ghidra.app.util.bin.format.elf.ElfSymbol: ...

    def getSymbolAddress(self, __a0: ghidra.app.util.bin.format.elf.ElfSymbol) -> ghidra.program.model.address.Address: ...

    def getSymbolName(self, __a0: int) -> unicode: ...

    def getSymbolValue(self, __a0: ghidra.app.util.bin.format.elf.ElfSymbol) -> long: ...

    def hasRelocationHandler(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBigEndian(self) -> bool: ...

    def markRelocationError(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: int, __a3: unicode, __a4: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processRelocation(self, __a0: ghidra.app.util.bin.format.elf.ElfRelocation, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.reloc.RelocationResult: ...

    def startRelocationTableProcessing(self, __a0: ghidra.app.util.bin.format.elf.ElfRelocationTable) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

