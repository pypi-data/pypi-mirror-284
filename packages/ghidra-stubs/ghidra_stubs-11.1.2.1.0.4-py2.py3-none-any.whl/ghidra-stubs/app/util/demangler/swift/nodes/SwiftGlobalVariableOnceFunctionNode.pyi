from typing import List
from typing import overload
import ghidra.app.util.demangler
import ghidra.app.util.demangler.swift
import ghidra.app.util.demangler.swift.nodes
import java.lang
import java.util.function


class SwiftGlobalVariableOnceFunctionNode(ghidra.app.util.demangler.swift.nodes.SwiftNode):




    def __init__(self): ...



    def childWasSkipped(self) -> bool: ...

    def demangle(self, __a0: ghidra.app.util.demangler.swift.SwiftDemangler) -> ghidra.app.util.demangler.Demangled: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def get(__a0: ghidra.app.util.demangler.swift.nodes.SwiftNode.NodeProperties) -> ghidra.app.util.demangler.swift.nodes.SwiftNode: ...

    def getChild(self, __a0: ghidra.app.util.demangler.swift.SwiftDemangledNodeKind) -> ghidra.app.util.demangler.swift.nodes.SwiftNode: ...

    def getChildren(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDepth(self) -> int: ...

    def getFirstAncestor(self, __a0: List[ghidra.app.util.demangler.swift.SwiftDemangledNodeKind]) -> ghidra.app.util.demangler.swift.nodes.SwiftNode: ...

    def getIndex(self) -> unicode: ...

    def getKind(self) -> ghidra.app.util.demangler.swift.SwiftDemangledNodeKind: ...

    def getParent(self) -> ghidra.app.util.demangler.swift.nodes.SwiftNode: ...

    def getText(self) -> unicode: ...

    def getUnknown(self) -> ghidra.app.util.demangler.DemangledUnknown: ...

    def hasChild(self, __a0: ghidra.app.util.demangler.swift.SwiftDemangledNodeKind) -> bool: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def join(__a0: ghidra.app.util.demangler.Demangled, __a1: ghidra.app.util.demangler.Demangled) -> ghidra.app.util.demangler.Demangled: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setParent(self, __a0: ghidra.app.util.demangler.swift.nodes.SwiftNode) -> None: ...

    def skip(self, __a0: ghidra.app.util.demangler.swift.nodes.SwiftNode) -> None: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def toString(__a0: ghidra.app.util.demangler.swift.nodes.SwiftNode, __a1: bool) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def walkAndTest(self, __a0: java.util.function.Predicate) -> bool: ...

