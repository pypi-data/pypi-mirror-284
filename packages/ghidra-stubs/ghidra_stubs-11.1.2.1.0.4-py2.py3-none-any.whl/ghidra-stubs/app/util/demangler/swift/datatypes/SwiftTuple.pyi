from typing import List
from typing import overload
import ghidra.app.util.demangler
import ghidra.app.util.demangler.swift.datatypes
import ghidra.program.model.data
import java.lang


class SwiftTuple(ghidra.app.util.demangler.swift.datatypes.SwiftStructure):




    def __init__(self, __a0: unicode, __a1: unicode, __a2: ghidra.app.util.demangler.DemangledList, __a3: ghidra.app.util.demangler.swift.SwiftDemangler): ...



    @overload
    def addField(self, __a0: unicode, __a1: ghidra.app.util.demangler.DemangledDataType) -> None: ...

    @overload
    def addField(self, __a0: unicode, __a1: unicode, __a2: ghidra.app.util.demangler.DemangledDataType) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getArrayDimensions(self) -> int: ...

    def getBasedName(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataType(self, __a0: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.DataType: ...

    def getDemangledName(self) -> unicode: ...

    def getFields(self) -> List[object]: ...

    def getMangledString(self) -> unicode: ...

    def getMemberScope(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNamespace(self) -> ghidra.app.util.demangler.Demangled: ...

    def getNamespaceName(self) -> unicode: ...

    def getNamespaceString(self) -> unicode: ...

    def getOriginalDemangled(self) -> unicode: ...

    def getPointerLevels(self) -> int: ...

    def getSignature(self) -> unicode: ...

    def getTemplate(self) -> ghidra.app.util.demangler.DemangledTemplate: ...

    def hashCode(self) -> int: ...

    def incrementPointerLevels(self) -> None: ...

    def isArray(self) -> bool: ...

    def isClass(self) -> bool: ...

    def isCoclass(self) -> bool: ...

    def isCointerface(self) -> bool: ...

    def isComplex(self) -> bool: ...

    def isConst(self) -> bool: ...

    def isEnum(self) -> bool: ...

    def isLValueReference(self) -> bool: ...

    def isPointer(self) -> bool: ...

    def isPointer64(self) -> bool: ...

    def isPrimitive(self) -> bool: ...

    def isRValueReference(self) -> bool: ...

    def isReference(self) -> bool: ...

    def isRestrict(self) -> bool: ...

    def isSigned(self) -> bool: ...

    def isStruct(self) -> bool: ...

    def isTemplate(self) -> bool: ...

    def isUnaligned(self) -> bool: ...

    def isUnion(self) -> bool: ...

    def isUnsigned(self) -> bool: ...

    def isVarArgs(self) -> bool: ...

    def isVoid(self) -> bool: ...

    def isVolatile(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setArray(self, __a0: int) -> None: ...

    def setBasedName(self, __a0: unicode) -> None: ...

    def setClass(self) -> None: ...

    def setCoclass(self) -> None: ...

    def setCointerface(self) -> None: ...

    def setComplex(self) -> None: ...

    def setConst(self) -> None: ...

    def setEnum(self) -> None: ...

    @overload
    def setEnumType(self) -> unicode: ...

    @overload
    def setEnumType(self, __a0: unicode) -> None: ...

    def setLValueReference(self) -> None: ...

    def setMemberScope(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setNamespace(self, __a0: ghidra.app.util.demangler.Demangled) -> None: ...

    def setPointer64(self) -> None: ...

    def setRValueReference(self) -> None: ...

    def setReference(self) -> None: ...

    def setRestrict(self) -> None: ...

    def setSigned(self) -> None: ...

    def setStruct(self) -> None: ...

    @overload
    def setTemplate(self) -> None: ...

    @overload
    def setTemplate(self, __a0: ghidra.app.util.demangler.DemangledTemplate) -> None: ...

    def setUnaligned(self) -> None: ...

    def setUnion(self) -> None: ...

    def setUnsigned(self) -> None: ...

    def setVarArgs(self) -> None: ...

    def setVolatile(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

