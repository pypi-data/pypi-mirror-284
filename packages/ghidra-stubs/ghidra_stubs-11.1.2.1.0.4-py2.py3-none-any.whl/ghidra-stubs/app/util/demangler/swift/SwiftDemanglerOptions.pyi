from typing import overload
import ghidra.app.util.demangler
import java.io
import java.lang


class SwiftDemanglerOptions(ghidra.app.util.demangler.DemanglerOptions):
    INCOMPLETE_PREFIX: unicode = u'$'
    UNSUPPORTED_PREFIX: unicode = u'$$'



    def __init__(self): ...



    def applyCallingConvention(self) -> bool: ...

    def applySignature(self) -> bool: ...

    def demangleOnlyKnownPatterns(self) -> bool: ...

    def doDisassembly(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getIncompletePrefix(self) -> unicode: ...

    def getSwiftDir(self) -> java.io.File: ...

    def getUnsupportedPrefix(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setApplyCallingConvention(self, __a0: bool) -> None: ...

    def setApplySignature(self, __a0: bool) -> None: ...

    def setDemangleOnlyKnownPatterns(self, __a0: bool) -> None: ...

    def setDoDisassembly(self, __a0: bool) -> None: ...

    def setIncompletePrefix(self, __a0: bool) -> None: ...

    def setSwiftDir(self, __a0: java.io.File) -> None: ...

    def setUnsupportedPrefix(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def incompletePrefix(self) -> unicode: ...

    @property
    def swiftDir(self) -> java.io.File: ...

    @swiftDir.setter
    def swiftDir(self, value: java.io.File) -> None: ...

    @property
    def unsupportedPrefix(self) -> unicode: ...