from typing import List
from typing import overload
import ghidra.app.util.demangler.swift
import java.lang


class SwiftNativeDemangler(object):





    class SwiftNativeDemangledOutput(java.lang.Record):




        def __init__(self, __a0: unicode, __a1: List[object]): ...



        def demangled(self) -> unicode: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def tree(self) -> List[object]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: java.io.File): ...



    def demangle(self, __a0: unicode) -> ghidra.app.util.demangler.swift.SwiftNativeDemangler.SwiftNativeDemangledOutput: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

