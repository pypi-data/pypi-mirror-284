from typing import overload
import ghidra.app.services
import ghidra.debug.api.tracemgr
import ghidra.framework.plugintool
import java.lang


class TraceActivatedPluginEvent(ghidra.framework.plugintool.PluginEvent):




    def __init__(self, __a0: unicode, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a2: ghidra.app.services.DebuggerTraceManagerService.ActivationCause): ...



    def equals(self, __a0: object) -> bool: ...

    def getActiveCoordinates(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    def getCause(self) -> ghidra.app.services.DebuggerTraceManagerService.ActivationCause: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventName(self) -> unicode: ...

    def getSourceName(self) -> unicode: ...

    def getToolEventName(self) -> unicode: ...

    def getTriggerEvent(self) -> ghidra.framework.plugintool.PluginEvent: ...

    def hashCode(self) -> int: ...

    def isToolEvent(self) -> bool: ...

    @staticmethod
    def lookupToolEventName(__a0: java.lang.Class) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSourceName(self, __a0: unicode) -> None: ...

    def setTriggerEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def activeCoordinates(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

    @property
    def cause(self) -> ghidra.app.services.DebuggerTraceManagerService.ActivationCause: ...