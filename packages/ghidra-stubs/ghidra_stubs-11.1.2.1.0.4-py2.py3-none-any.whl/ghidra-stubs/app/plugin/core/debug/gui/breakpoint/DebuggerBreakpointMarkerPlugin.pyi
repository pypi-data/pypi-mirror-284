from typing import List
from typing import overload
import docking
import docking.action
import docking.actions
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.util
import java.awt
import java.beans
import java.lang
import java.net
import java.util
import java.util.function
import javax.swing


class DebuggerBreakpointMarkerPlugin(ghidra.framework.plugintool.Plugin, docking.actions.PopupActionProvider):





    class AbstractToggleBreakpointAction(docking.action.DockingAction):
        HELP_ANCHOR: unicode = u'toggle_breakpoint'
        ICON: javax.swing.Icon
        NAME: unicode = u'Toggle Breakpoint'



        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.breakpoint.DebuggerBreakpointMarkerPlugin, __a1: ghidra.framework.plugintool.Plugin): ...



        def actionPerformed(self, __a0: docking.ActionContext) -> None: ...

        def addPropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def addToWindowWhen(self, __a0: java.lang.Class) -> None: ...

        def createButton(self) -> javax.swing.JButton: ...

        def createMenuComponent(self, __a0: bool) -> java.awt.Component: ...

        def createMenuItem(self, __a0: bool) -> javax.swing.JMenuItem: ...

        def dispose(self) -> None: ...

        def enabledWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def firePropertyChanged(self, __a0: unicode, __a1: object, __a2: object) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getContextClass(self) -> java.lang.Class: ...

        def getDefaultKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getDescription(self) -> unicode: ...

        def getFullName(self) -> unicode: ...

        def getHelpInfo(self) -> unicode: ...

        def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

        def getHelpObject(self) -> object: ...

        def getInceptionInformation(self) -> unicode: ...

        def getKeyBinding(self) -> javax.swing.KeyStroke: ...

        def getKeyBindingData(self) -> docking.action.KeyBindingData: ...

        def getKeyBindingType(self) -> docking.action.KeyBindingType: ...

        def getMenuBarData(self) -> docking.action.MenuData: ...

        def getName(self) -> unicode: ...

        def getOwner(self) -> unicode: ...

        def getOwnerDescription(self) -> unicode: ...

        def getPopupMenuData(self) -> docking.action.MenuData: ...

        def getToolBarData(self) -> docking.action.ToolBarData: ...

        def hashCode(self) -> int: ...

        def isAddToPopup(self, __a0: docking.ActionContext) -> bool: ...

        def isEnabled(self) -> bool: ...

        def isEnabledForContext(self, __a0: docking.ActionContext) -> bool: ...

        def isValidContext(self, __a0: docking.ActionContext) -> bool: ...

        def markHelpUnnecessary(self) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def popupWhen(self, __a0: java.util.function.Predicate) -> None: ...

        def removePropertyChangeListener(self, __a0: java.beans.PropertyChangeListener) -> None: ...

        def setAddToAllWindows(self, __a0: bool) -> None: ...

        def setContextClass(self, __a0: java.lang.Class, __a1: bool) -> None: ...

        def setDescription(self, __a0: unicode) -> None: ...

        def setEnabled(self, __a0: bool) -> None: ...

        def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

        def setKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def setMenuBarData(self, __a0: docking.action.MenuData) -> None: ...

        def setPopupMenuData(self, __a0: docking.action.MenuData) -> None: ...

        def setToolBarData(self, __a0: docking.action.ToolBarData) -> None: ...

        def setUnvalidatedKeyBindingData(self, __a0: docking.action.KeyBindingData) -> None: ...

        def shouldAddToWindow(self, __a0: bool, __a1: java.util.Set) -> bool: ...

        def supportsDefaultContext(self) -> bool: ...

        def toString(self) -> unicode: ...

        def validContextWhen(self, __a0: java.util.function.Predicate) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getPopupActions(self, __a0: docking.Tool, __a1: docking.ActionContext) -> List[object]: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

