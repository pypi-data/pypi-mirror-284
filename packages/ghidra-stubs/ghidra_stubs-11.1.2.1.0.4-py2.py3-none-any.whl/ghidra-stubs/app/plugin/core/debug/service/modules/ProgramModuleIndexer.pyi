from typing import List
from typing import overload
import ghidra.framework.model
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.trace.model.modules
import java.lang
import java.util


class ProgramModuleIndexer(object, ghidra.framework.model.DomainFolderChangeListener):
    MODULE_PATHS_PROPERTY: unicode = u'Module Paths'



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    @staticmethod
    def addModulePaths(__a0: ghidra.program.model.listing.Program, __a1: java.util.Collection) -> None: ...

    def domainFileAdded(self, __a0: ghidra.framework.model.DomainFile) -> None: ...

    def domainFileMoved(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainFolder, __a2: unicode) -> None: ...

    def domainFileObjectClosed(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileObjectOpenedForUpdate(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode, __a2: unicode) -> None: ...

    def domainFileRenamed(self, __a0: ghidra.framework.model.DomainFile, __a1: unicode) -> None: ...

    def domainFileStatusChanged(self, __a0: ghidra.framework.model.DomainFile, __a1: bool) -> None: ...

    def domainFolderAdded(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderMoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderRenamed(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderSetActive(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def filter(self, __a0: java.util.Collection, __a1: java.util.Collection) -> java.util.Collection: ...

    def getBestEntries(self, __a0: ghidra.trace.model.modules.TraceModule) -> List[object]: ...

    @overload
    def getBestMatch(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.modules.TraceModule, __a2: ghidra.program.model.listing.Program) -> ghidra.framework.model.DomainFile: ...

    @overload
    def getBestMatch(self, __a0: ghidra.trace.model.modules.TraceModule, __a1: ghidra.program.model.listing.Program, __a2: java.util.Collection) -> ghidra.framework.model.DomainFile: ...

    @overload
    def getBestMatch(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.modules.TraceModule, __a2: ghidra.program.model.listing.Program, __a3: java.util.Collection) -> ghidra.framework.model.DomainFile: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    @staticmethod
    def getModulePaths(__a0: ghidra.framework.model.DomainFile) -> java.util.Collection: ...

    @overload
    @staticmethod
    def getModulePaths(__a0: java.util.Map) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def setModulePaths(__a0: ghidra.program.model.listing.Program, __a1: java.util.Collection) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

