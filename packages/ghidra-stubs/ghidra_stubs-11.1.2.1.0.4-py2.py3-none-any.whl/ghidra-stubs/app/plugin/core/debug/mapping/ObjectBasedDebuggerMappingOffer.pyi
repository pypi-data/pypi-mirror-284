from typing import overload
import ghidra.app.plugin.core.debug.mapping
import ghidra.debug.api.model
import ghidra.program.model.lang
import java.lang
import java.util


class ObjectBasedDebuggerMappingOffer(ghidra.app.plugin.core.debug.mapping.DefaultDebuggerMappingOffer):




    def __init__(self, __a0: ghidra.dbg.target.TargetObject): ...



    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def first(__a0: java.util.Collection) -> ghidra.debug.api.model.DebuggerTargetTraceMapper: ...

    def getClass(self) -> java.lang.Class: ...

    def getConfidence(self) -> int: ...

    def getDescription(self) -> unicode: ...

    def getTraceCompilerSpecID(self) -> ghidra.program.model.lang.CompilerSpecID: ...

    def getTraceLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def hashCode(self) -> int: ...

    def isOverride(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def take(self) -> ghidra.debug.api.model.DebuggerTargetTraceMapper: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def unique(__a0: java.util.Collection) -> ghidra.debug.api.model.DebuggerMappingOffer: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

