from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.dbg.target
import ghidra.trace.model.thread
import java.lang
import java.util


class RecorderThreadMap(object):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    @overload
    def get(self, __a0: ghidra.dbg.target.TargetThread) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedThreadRecorder: ...

    @overload
    def get(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedThreadRecorder: ...

    @overload
    def get(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.app.plugin.core.debug.service.model.interfaces.ManagedThreadRecorder: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def put(self, __a0: ghidra.app.plugin.core.debug.service.model.interfaces.ManagedThreadRecorder) -> None: ...

    def recorders(self) -> java.util.Collection: ...

    def remove(self, __a0: ghidra.app.plugin.core.debug.service.model.interfaces.ManagedThreadRecorder) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

