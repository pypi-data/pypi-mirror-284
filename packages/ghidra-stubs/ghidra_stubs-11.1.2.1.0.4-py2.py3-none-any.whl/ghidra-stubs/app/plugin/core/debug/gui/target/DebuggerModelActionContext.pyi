from typing import overload
import docking
import ghidra.app.services
import ghidra.dbg
import java.awt
import java.awt.event
import java.lang


class DebuggerModelActionContext(docking.DefaultActionContext):








    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponentProvider(self) -> docking.ComponentProvider: ...

    def getContextObject(self) -> object: ...

    def getEventClickModifiers(self) -> int: ...

    def getIfDebuggerModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getIfModelService(self) -> ghidra.app.services.DebuggerModelService: ...

    def getMouseEvent(self) -> java.awt.event.MouseEvent: ...

    def getSourceComponent(self) -> java.awt.Component: ...

    def getSourceObject(self) -> object: ...

    def hasAnyEventClickModifiers(self, __a0: int) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContextObject(self, __a0: object) -> docking.DefaultActionContext: ...

    def setEventClickModifiers(self, __a0: int) -> None: ...

    def setMouseEvent(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def setSourceObject(self, __a0: object) -> docking.ActionContext: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def ifDebuggerModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def ifModelService(self) -> ghidra.app.services.DebuggerModelService: ...