from typing import List
from typing import overload
import ghidra.app.plugin.core.debug
import ghidra.app.plugin.core.debug.gui.objects
import ghidra.dbg
import ghidra.dbg.target
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.listing
import ghidra.util.datastruct
import java.lang
import java.net


class DebuggerObjectsPlugin(ghidra.app.plugin.core.debug.AbstractDebuggerPlugin, ghidra.app.plugin.core.debug.gui.objects.ObjectUpdateService, ghidra.util.datastruct.CollectionChangeListener):
    modelService: ghidra.app.services.DebuggerModelService



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addProvider(self, __a0: ghidra.app.plugin.core.debug.gui.objects.DebuggerObjectsProvider) -> None: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    @overload
    def elementAdded(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    @overload
    def elementAdded(self, __a0: object) -> None: ...

    @overload
    def elementModified(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    @overload
    def elementModified(self, __a0: object) -> None: ...

    @overload
    def elementRemoved(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    @overload
    def elementRemoved(self, __a0: object) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def fireObjectUpdated(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getActiveProgram(self) -> ghidra.program.model.listing.Program: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def objectError(self, __a0: unicode, __a1: java.lang.Throwable) -> None: ...

    @staticmethod
    def of(__a0: java.lang.Class) -> java.lang.Class: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setActiveProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def setFocus(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject) -> None: ...

    def showConsole(self, __a0: ghidra.dbg.target.TargetInterpreter) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def activeProgram(self) -> ghidra.program.model.listing.Program: ...

    @activeProgram.setter
    def activeProgram(self, value: ghidra.program.model.listing.Program) -> None: ...