from typing import List
from typing import overload
import ghidra.app.plugin.core.debug
import ghidra.app.plugin.core.debug.service.control
import ghidra.app.services
import ghidra.debug.api.control
import ghidra.debug.api.tracemgr
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.trace.model
import ghidra.trace.model.program
import java.lang
import java.net
import java.util.concurrent


class DebuggerControlServicePlugin(ghidra.app.plugin.core.debug.AbstractDebuggerPlugin, ghidra.app.services.DebuggerControlService):





    class FollowsViewStateEditor(ghidra.app.plugin.core.debug.service.control.DebuggerControlServicePlugin.AbstractStateEditor, ghidra.app.services.DebuggerControlService.StateEditingMemoryHandler):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.service.control.DebuggerControlServicePlugin, __a1: ghidra.trace.model.program.TraceProgramView): ...



        def addLiveMemoryListener(self, __a0: ghidra.program.model.mem.LiveMemoryListener) -> None: ...

        def clearCache(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getByte(self, __a0: ghidra.program.model.address.Address) -> int: ...

        def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def getCoordinates(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

        def getService(self) -> ghidra.app.services.DebuggerControlService: ...

        def hashCode(self) -> int: ...

        def isRegisterEditable(self, __a0: ghidra.program.model.lang.Register) -> bool: ...

        def isVariableEditable(self, __a0: ghidra.program.model.address.Address, __a1: int) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def putByte(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

        def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

        def removeLiveMemoryListener(self, __a0: ghidra.program.model.mem.LiveMemoryListener) -> None: ...

        def setRegister(self, __a0: ghidra.program.model.lang.RegisterValue) -> java.util.concurrent.CompletableFuture: ...

        def setVariable(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def coordinates(self) -> ghidra.debug.api.tracemgr.DebuggerCoordinates: ...

        @property
        def service(self) -> ghidra.app.services.DebuggerControlService: ...

    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def addModeChangeListener(self, __a0: ghidra.app.services.DebuggerControlService.ControlModeChangeListener) -> None: ...

    @overload
    def createStateEditor(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.app.services.DebuggerControlService.StateEditor: ...

    @overload
    def createStateEditor(self, __a0: ghidra.trace.model.Trace) -> ghidra.app.services.DebuggerControlService.StateEditor: ...

    @overload
    def createStateEditor(self, __a0: ghidra.trace.model.program.TraceProgramView) -> ghidra.app.services.DebuggerControlService.StateEditingMemoryHandler: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentMode(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.control.ControlMode: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def removeModeChangeListener(self, __a0: ghidra.app.services.DebuggerControlService.ControlModeChangeListener) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setCurrentMode(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.debug.api.control.ControlMode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

