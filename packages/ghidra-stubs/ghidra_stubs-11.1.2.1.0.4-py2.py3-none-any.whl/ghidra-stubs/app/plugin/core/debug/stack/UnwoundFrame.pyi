from typing import overload
import ghidra.app.plugin.core.debug.stack
import ghidra.app.services
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.pcode
import java.lang
import java.util.concurrent


class UnwoundFrame(object):








    def equals(self, __a0: object) -> bool: ...

    @overload
    def evaluate(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.listing.VariableStorage, __a2: ghidra.program.model.address.AddressSetView) -> object: ...

    @overload
    def evaluate(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.pcode.PcodeOp, __a2: ghidra.program.model.address.AddressSetView) -> object: ...

    def getBasePointer(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getError(self) -> java.lang.Exception: ...

    def getFunction(self) -> ghidra.program.model.listing.Function: ...

    def getLevel(self) -> int: ...

    def getProgramCounter(self) -> ghidra.program.model.address.Address: ...

    def getReturnAddress(self) -> ghidra.program.model.address.Address: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.lang.Register) -> object: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.listing.Variable) -> object: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.listing.VariableStorage) -> object: ...

    def getWarnings(self) -> ghidra.app.plugin.core.debug.stack.StackUnwindWarningSet: ...

    def hashCode(self) -> int: ...

    def isFake(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setReturnAddress(self, __a0: ghidra.app.services.DebuggerControlService.StateEditor, __a1: ghidra.program.model.address.Address) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def setValue(self, __a0: ghidra.app.services.DebuggerControlService.StateEditor, __a1: ghidra.program.model.listing.Variable, __a2: long) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def setValue(self, __a0: ghidra.app.services.DebuggerControlService.StateEditor, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.listing.VariableStorage, __a3: long) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def zext(self, __a0: object, __a1: int) -> object: ...

    @property
    def basePointer(self) -> ghidra.program.model.address.Address: ...

    @property
    def description(self) -> unicode: ...

    @property
    def error(self) -> java.lang.Exception: ...

    @property
    def fake(self) -> bool: ...

    @property
    def function(self) -> ghidra.program.model.listing.Function: ...

    @property
    def level(self) -> int: ...

    @property
    def programCounter(self) -> ghidra.program.model.address.Address: ...

    @property
    def returnAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def warnings(self) -> ghidra.app.plugin.core.debug.stack.StackUnwindWarningSet: ...