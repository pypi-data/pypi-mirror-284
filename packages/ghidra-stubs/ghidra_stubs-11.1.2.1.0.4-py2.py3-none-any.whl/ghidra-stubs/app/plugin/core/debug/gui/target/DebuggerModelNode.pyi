from typing import List
from typing import overload
import docking.widgets.tree
import docking.widgets.tree.support
import ghidra.app.plugin.core.debug.gui
import ghidra.dbg
import ghidra.dbg.error
import ghidra.dbg.target
import ghidra.program.model.address
import ghidra.util.task
import java.lang
import java.util
import java.util.function
import java.util.stream
import javax.swing
import javax.swing.tree


class DebuggerModelNode(ghidra.app.plugin.core.debug.gui.DebuggerResources.AbstractDebuggerModelNode, ghidra.dbg.DebuggerModelListener):




    def __init__(self, __a0: ghidra.dbg.DebuggerObjectModel, __a1: ghidra.app.plugin.core.debug.gui.target.DebuggerTargetsProvider): ...



    @overload
    def addNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

    @overload
    def addNode(self, __a0: int, __a1: docking.widgets.tree.GTreeNode) -> None: ...

    def addNodes(self, __a0: List[object]) -> None: ...

    def attributesChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Collection, __a2: java.util.Map) -> None: ...

    def breakpointHit(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject, __a2: ghidra.dbg.target.TargetStackFrame, __a3: ghidra.dbg.target.TargetBreakpointSpec, __a4: ghidra.dbg.target.TargetBreakpointLocation) -> None: ...

    def catastrophic(self, __a0: java.lang.Throwable) -> None: ...

    def clone(self) -> object: ...

    def collapse(self) -> None: ...

    @overload
    def compareTo(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    @overload
    def consoleOutput(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetConsole.Channel, __a2: unicode) -> None: ...

    @overload
    def consoleOutput(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetConsole.Channel, __a2: List[int]) -> None: ...

    def created(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def dispose(self) -> None: ...

    def elementsChanged(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Collection, __a2: java.util.Map) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def event(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetThread, __a2: ghidra.dbg.target.TargetEventScope.TargetEventType, __a3: unicode, __a4: List[object]) -> None: ...

    def expand(self) -> None: ...

    def filter(self, __a0: docking.widgets.tree.support.GTreeFilter, __a1: ghidra.util.task.TaskMonitor) -> docking.widgets.tree.GTreeNode: ...

    def fireNodeChanged(self) -> None: ...

    def fireNodeStructureChanged(self) -> None: ...

    @overload
    def getChild(self, __a0: int) -> docking.widgets.tree.GTreeNode: ...

    @overload
    def getChild(self, __a0: unicode) -> docking.widgets.tree.GTreeNode: ...

    @overload
    def getChild(self, __a0: unicode, __a1: java.util.function.Predicate) -> docking.widgets.tree.GTreeNode: ...

    def getChildCount(self) -> int: ...

    def getChildren(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDebuggerModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getDisplayText(self) -> unicode: ...

    def getIcon(self, __a0: bool) -> javax.swing.Icon: ...

    def getIndexInParent(self) -> int: ...

    def getIndexOfChild(self, __a0: docking.widgets.tree.GTreeNode) -> int: ...

    def getLeafCount(self) -> int: ...

    def getName(self) -> unicode: ...

    def getNodeCount(self) -> int: ...

    def getParent(self) -> docking.widgets.tree.GTreeNode: ...

    def getRoot(self) -> docking.widgets.tree.GTreeNode: ...

    def getToolTip(self) -> unicode: ...

    def getTree(self) -> docking.widgets.tree.GTree: ...

    def getTreePath(self) -> javax.swing.tree.TreePath: ...

    def hashCode(self) -> int: ...

    def invalidateCacheRequested(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def invalidated(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject, __a2: unicode) -> None: ...

    def isAncestor(self, __a0: docking.widgets.tree.GTreeNode) -> bool: ...

    def isAutoExpandPermitted(self) -> bool: ...

    def isEditable(self) -> bool: ...

    def isExpanded(self) -> bool: ...

    def isInProgress(self) -> bool: ...

    def isLeaf(self) -> bool: ...

    def isLoaded(self) -> bool: ...

    def isRoot(self) -> bool: ...

    def iterator(self, __a0: bool) -> java.util.Iterator: ...

    def loadAll(self, __a0: ghidra.util.task.TaskMonitor) -> int: ...

    def memoryReadError(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.dbg.error.DebuggerMemoryAccessException) -> None: ...

    def memoryUpdated(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.address.Address, __a2: List[int]) -> None: ...

    def modelClosed(self, __a0: ghidra.dbg.DebuggerModelClosedReason) -> None: ...

    def modelOpened(self) -> None: ...

    def modelStateChanged(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def registersUpdated(self, __a0: ghidra.dbg.target.TargetObject, __a1: java.util.Map) -> None: ...

    def removeAll(self) -> None: ...

    def removeNode(self, __a0: docking.widgets.tree.GTreeNode) -> None: ...

    def rootAdded(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def setChildren(self, __a0: List[object]) -> None: ...

    def stream(self, __a0: bool) -> java.util.stream.Stream: ...

    def toString(self) -> unicode: ...

    def valueChanged(self, __a0: object) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def debuggerModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def displayText(self) -> unicode: ...

    @property
    def leaf(self) -> bool: ...

    @property
    def name(self) -> unicode: ...