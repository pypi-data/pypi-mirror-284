from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.service.model
import ghidra.app.services
import ghidra.dbg
import ghidra.dbg.target
import ghidra.debug.api.action
import ghidra.debug.api.model
import ghidra.framework.main
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.thread
import ghidra.util.datastruct
import java.lang
import java.net
import java.util
import java.util.concurrent
import java.util.stream


class DebuggerModelServicePlugin(ghidra.framework.plugintool.Plugin, ghidra.app.plugin.core.debug.service.model.DebuggerModelServiceInternal, ghidra.framework.main.ApplicationLevelOnlyPlugin):
    DATE_FORMAT: java.text.DateFormat



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def activateModel(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    def addFactoriesChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def addModel(self, __a0: ghidra.dbg.DebuggerObjectModel) -> bool: ...

    def addModelsChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def addTraceRecordersChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def closeAllModels(self) -> java.util.concurrent.CompletableFuture: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def doActivateModel(self, __a0: ghidra.dbg.DebuggerObjectModel) -> bool: ...

    def doRemoveRecorder(self, __a0: ghidra.debug.api.model.TraceRecorder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def fireFocusEvent(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def fireModelActivatedEvent(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def fireSnapEvent(self, __a0: ghidra.debug.api.model.TraceRecorder, __a1: long) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getModelFactories(self) -> java.util.Set: ...

    def getModels(self) -> java.util.Set: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getProgramLaunchOffers(self, __a0: ghidra.program.model.listing.Program) -> java.util.stream.Stream: ...

    @overload
    def getRecorder(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.debug.api.model.TraceRecorder: ...

    @overload
    def getRecorder(self, __a0: ghidra.trace.model.Trace) -> ghidra.debug.api.model.TraceRecorder: ...

    def getRecorderForSuccessor(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.debug.api.model.TraceRecorder: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTarget(self, __a0: ghidra.trace.model.Trace) -> ghidra.dbg.target.TargetObject: ...

    def getTargetFocus(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.dbg.target.TargetObject: ...

    def getTargetThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.dbg.target.TargetThread: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTrace(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.trace.model.Trace: ...

    def getTraceRecorders(self) -> java.util.Collection: ...

    @overload
    def getTraceThread(self, __a0: ghidra.dbg.target.TargetThread) -> ghidra.trace.model.thread.TraceThread: ...

    @overload
    def getTraceThread(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetThread) -> ghidra.trace.model.thread.TraceThread: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def recordTarget(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.debug.api.model.DebuggerTargetTraceMapper, __a2: ghidra.debug.api.action.ActionSource) -> ghidra.debug.api.model.TraceRecorder: ...

    @overload
    def recordTargetAndActivateTrace(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.debug.api.model.DebuggerTargetTraceMapper) -> ghidra.debug.api.model.TraceRecorder: ...

    @overload
    def recordTargetAndActivateTrace(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.debug.api.model.DebuggerTargetTraceMapper, __a2: ghidra.app.services.DebuggerTraceManagerService) -> ghidra.debug.api.model.TraceRecorder: ...

    def recordTargetBestOffer(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.debug.api.model.TraceRecorder: ...

    def recordTargetPromptOffers(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.debug.api.model.TraceRecorder: ...

    def refreshFactoryInstances(self) -> None: ...

    def removeFactoriesChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def removeModel(self, __a0: ghidra.dbg.DebuggerObjectModel) -> bool: ...

    def removeModelsChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def removeTraceRecordersChangedListener(self, __a0: ghidra.util.datastruct.CollectionChangeListener) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setModelFactories(self, __a0: java.util.Collection) -> None: ...

    @overload
    def showConnectDialog(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def showConnectDialog(self, __a0: ghidra.dbg.DebuggerModelFactory) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def showConnectDialog(self, __a0: ghidra.program.model.listing.Program) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def currentModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def modelFactories(self) -> java.util.Set: ...

    @property
    def models(self) -> java.util.Set: ...

    @property
    def traceRecorders(self) -> java.util.Collection: ...