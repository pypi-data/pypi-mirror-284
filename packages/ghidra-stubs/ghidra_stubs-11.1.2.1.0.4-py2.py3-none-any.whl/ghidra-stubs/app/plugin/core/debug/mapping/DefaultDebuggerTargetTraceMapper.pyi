from typing import overload
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.framework.plugintool
import ghidra.program.model.lang
import ghidra.trace.model
import java.lang
import java.util
import java.util.concurrent


class DefaultDebuggerTargetTraceMapper(object, ghidra.debug.api.model.DebuggerTargetTraceMapper):




    def __init__(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.program.model.lang.LanguageID, __a2: ghidra.program.model.lang.CompilerSpecID, __a3: java.util.Collection): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getExtraRegNames(self) -> java.util.Set: ...

    def getTraceCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getTraceLanguage(self) -> ghidra.program.model.lang.Language: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def offerMemory(self, __a0: ghidra.dbg.target.TargetMemory) -> java.util.concurrent.CompletableFuture: ...

    def offerRegisters(self, __a0: ghidra.dbg.target.TargetRegisterContainer) -> java.util.concurrent.CompletableFuture: ...

    def startRecording(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.trace.model.Trace) -> ghidra.debug.api.model.TraceRecorder: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def extraRegNames(self) -> java.util.Set: ...

    @property
    def traceCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def traceLanguage(self) -> ghidra.program.model.lang.Language: ...