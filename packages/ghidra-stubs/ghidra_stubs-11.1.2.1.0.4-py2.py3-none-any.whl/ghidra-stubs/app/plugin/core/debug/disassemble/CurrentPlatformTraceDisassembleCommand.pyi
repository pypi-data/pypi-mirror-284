from typing import overload
import docking
import ghidra.app.plugin.core.debug.disassemble
import ghidra.debug.api.platform
import ghidra.framework.cmd
import ghidra.framework.model
import ghidra.framework.plugintool
import ghidra.trace.model.program
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.util.task
import java.lang


class CurrentPlatformTraceDisassembleCommand(ghidra.framework.cmd.BackgroundCommand):
    NAME: unicode = u'Disassemble'




    class Reqs(java.lang.Record):




        def __init__(self, __a0: ghidra.debug.api.platform.DebuggerPlatformMapper, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.trace.model.target.TraceObject, __a3: ghidra.trace.model.program.TraceProgramView): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromContext(__a0: ghidra.framework.plugintool.PluginTool, __a1: docking.ActionContext) -> ghidra.app.plugin.core.debug.disassemble.CurrentPlatformTraceDisassembleCommand.Reqs: ...

        @staticmethod
        def fromView(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.trace.model.program.TraceProgramView) -> ghidra.app.plugin.core.debug.disassemble.CurrentPlatformTraceDisassembleCommand.Reqs: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def mapper(self) -> ghidra.debug.api.platform.DebuggerPlatformMapper: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def object(self) -> ghidra.trace.model.target.TraceObject: ...

        def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

        def toString(self) -> unicode: ...

        def view(self) -> ghidra.trace.model.program.TraceProgramView: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.app.plugin.core.debug.disassemble.CurrentPlatformTraceDisassembleCommand.Reqs, __a3: ghidra.program.model.address.Address): ...



    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject) -> bool: ...

    @overload
    def applyTo(self, __a0: ghidra.trace.model.program.TraceProgramView, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    def canCancel(self) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getName(self) -> unicode: ...

    def getStatusMsg(self) -> unicode: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isModal(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def run(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def taskCompleted(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

