from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.service.emulation.data
import ghidra.debug.api.emulation
import ghidra.debug.api.target
import ghidra.framework.plugintool
import ghidra.generic.util.datastruct
import ghidra.pcode.exec.trace.data
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.memory
import ghidra.trace.model.property
import java.lang
import java.nio
import java.util.concurrent


class DefaultPcodeDebuggerMemoryAccess(ghidra.pcode.exec.trace.data.DefaultPcodeTraceMemoryAccess, ghidra.debug.api.emulation.PcodeDebuggerMemoryAccess, ghidra.app.plugin.core.debug.service.emulation.data.InternalPcodeDebuggerDataAccess):








    def equals(self, __a0: object) -> bool: ...

    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: java.nio.ByteBuffer) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    def getPropertyAccess(self, __a0: unicode, __a1: java.lang.Class) -> ghidra.pcode.exec.trace.data.PcodeTracePropertyAccess: ...

    def getPropertyOps(self, __a0: unicode, __a1: java.lang.Class, __a2: bool) -> ghidra.trace.model.property.TracePropertyMapOperations: ...

    def getServiceProvider(self) -> ghidra.framework.plugintool.ServiceProvider: ...

    def getSnap(self) -> long: ...

    def getTarget(self) -> ghidra.debug.api.target.Target: ...

    def getViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def getViewportState(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.trace.model.memory.TraceMemoryState: ...

    def hashCode(self) -> int: ...

    def intersectUnknown(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.program.model.address.AddressSetView: ...

    def intersectViewKnown(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.address.AddressSetView: ...

    def isLive(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: java.nio.ByteBuffer) -> int: ...

    def readFromStaticImages(self, __a0: ghidra.generic.util.datastruct.SemisparseByteArray, __a1: ghidra.program.model.address.AddressSetView) -> bool: ...

    def readFromTargetMemory(self, __a0: ghidra.program.model.address.AddressSetView) -> java.util.concurrent.CompletableFuture: ...

    def setState(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.memory.TraceMemoryState) -> None: ...

    def toString(self) -> unicode: ...

    def translate(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeTargetMemory(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

    @property
    def live(self) -> bool: ...

    @property
    def serviceProvider(self) -> ghidra.framework.plugintool.ServiceProvider: ...

    @property
    def target(self) -> ghidra.debug.api.target.Target: ...