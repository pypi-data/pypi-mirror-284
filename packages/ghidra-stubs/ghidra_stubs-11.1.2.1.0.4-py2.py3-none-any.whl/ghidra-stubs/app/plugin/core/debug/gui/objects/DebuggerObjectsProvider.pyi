from typing import List
from typing import overload
import docking
import docking.action
import ghidra.app.plugin.core.debug.gui.objects
import ghidra.app.services
import ghidra.dbg
import ghidra.dbg.target
import ghidra.debug.api.tracemgr
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.thread
import ghidra.util
import java.awt.event
import java.lang
import java.util
import javax.swing


class DebuggerObjectsProvider(ghidra.framework.plugintool.ComponentProviderAdapter, ghidra.app.plugin.core.debug.gui.objects.ObjectContainerListener):
    COLOR_BACKGROUND: java.awt.Color
    COLOR_FOREGROUND: java.awt.Color
    COLOR_FOREGROUND_ACCESSOR: java.awt.Color
    COLOR_FOREGROUND_ERROR: java.awt.Color
    COLOR_FOREGROUND_INTRINSIC: java.awt.Color
    COLOR_FOREGROUND_INVALIDATED: java.awt.Color
    COLOR_FOREGROUND_INVISIBLE: java.awt.Color
    COLOR_FOREGROUND_LINK: java.awt.Color
    COLOR_FOREGROUND_MODIFIED: java.awt.Color
    COLOR_FOREGROUND_SUBSCRIBED: java.awt.Color
    COLOR_FOREGROUND_TARGET: java.awt.Color
    PATH_JOIN_CHAR: unicode = u'.'
    attachDialog: ghidra.app.plugin.core.debug.gui.objects.components.DebuggerAttachDialog
    breakpointDialog: ghidra.app.plugin.core.debug.gui.objects.components.DebuggerBreakpointDialog
    configDialog: ghidra.app.plugin.core.debug.gui.objects.components.DebuggerMethodInvocationDialog
    currentProgram: ghidra.program.model.listing.Program
    methodDialog: ghidra.app.plugin.core.debug.gui.objects.components.DebuggerMethodInvocationDialog
    modelService: ghidra.app.services.DebuggerModelService



    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.objects.DebuggerObjectsPlugin, __a1: ghidra.dbg.DebuggerObjectModel, __a2: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer, __a3: bool): ...



    def addLocalAction(self, __a0: docking.action.DockingActionIf) -> None: ...

    def addTable(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def addTargetToMap(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def addToTool(self) -> None: ...

    def addTree(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def adjustFontSize(self, __a0: bool) -> None: ...

    def canBeParent(self) -> bool: ...

    def closeComponent(self) -> None: ...

    def componentActivated(self) -> None: ...

    def componentDeactived(self) -> None: ...

    def componentHidden(self) -> None: ...

    def componentShown(self) -> None: ...

    def contextChanged(self) -> None: ...

    def deleteFromMap(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def descendsFrom(self, __a0: docking.ActionContext, __a1: java.lang.Class) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def fireObjectUpdated(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def getActionContext(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def getAncestor(self, __a0: docking.ActionContext, __a1: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getConsoleService(self) -> ghidra.app.services.ConsoleService: ...

    def getContainerByPath(self, __a0: List[object]) -> ghidra.app.plugin.core.debug.gui.objects.ObjectContainer: ...

    def getContextType(self) -> java.lang.Class: ...

    def getDefaultWindowPosition(self) -> docking.WindowPosition: ...

    def getFocus(self) -> ghidra.dbg.target.TargetObject: ...

    def getGraphBroker(self) -> ghidra.app.services.GraphDisplayBroker: ...

    def getHelpInfo(self) -> unicode: ...

    def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

    def getHelpObject(self) -> object: ...

    def getIcon(self) -> javax.swing.Icon: ...

    def getInstanceID(self) -> long: ...

    def getIntraGroupPosition(self) -> docking.WindowPosition: ...

    def getListener(self) -> ghidra.dbg.DebuggerModelListener: ...

    def getListingService(self) -> ghidra.app.services.DebuggerListingService: ...

    def getLocalActions(self) -> java.util.Set: ...

    @staticmethod
    def getMappedName(__a0: unicode, __a1: unicode) -> unicode: ...

    @staticmethod
    def getMappedOwner(__a0: unicode, __a1: unicode) -> unicode: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getModelService(self) -> ghidra.app.services.DebuggerModelService: ...

    def getName(self) -> unicode: ...

    def getNodeTimeout(self) -> int: ...

    def getObjectFromContext(self, __a0: docking.ActionContext) -> ghidra.dbg.target.TargetObject: ...

    def getOwner(self) -> unicode: ...

    def getParent(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> ghidra.app.plugin.core.debug.gui.objects.ObjectContainer: ...

    def getPlugin(self) -> ghidra.app.plugin.core.debug.gui.objects.DebuggerObjectsPlugin: ...

    def getRoot(self) -> ghidra.app.plugin.core.debug.gui.objects.ObjectContainer: ...

    def getSelectedContainer(self, __a0: object) -> ghidra.app.plugin.core.debug.gui.objects.ObjectContainer: ...

    def getSelectedObject(self) -> ghidra.dbg.target.TargetObject: ...

    def getSubTitle(self) -> unicode: ...

    def getTabText(self) -> unicode: ...

    def getTitle(self) -> unicode: ...

    def getTool(self) -> docking.Tool: ...

    def getTraceManager(self) -> ghidra.app.services.DebuggerTraceManagerService: ...

    def getWindowGroup(self) -> unicode: ...

    def getWindowSubMenuName(self) -> unicode: ...

    def hasInstance(self, __a0: docking.ActionContext, __a1: java.lang.Class) -> bool: ...

    def hashCode(self) -> int: ...

    def initiateConsole(self, __a0: docking.ActionContext) -> None: ...

    def isAccessConditioned(self, __a0: docking.ActionContext) -> bool: ...

    def isActive(self) -> bool: ...

    def isAutorecord(self) -> bool: ...

    def isFocusedProvider(self) -> bool: ...

    def isHideIntrinsics(self) -> bool: ...

    def isInTool(self) -> bool: ...

    def isInstance(self, __a0: docking.ActionContext, __a1: java.lang.Class) -> bool: ...

    def isLocalOnly(self) -> bool: ...

    def isRoot(self, __a0: docking.ActionContext) -> bool: ...

    def isSnapshot(self) -> bool: ...

    @overload
    def isStopped(self, __a0: docking.ActionContext) -> bool: ...

    @overload
    def isStopped(self, __a0: ghidra.dbg.target.TargetObject) -> bool: ...

    def isTransient(self) -> bool: ...

    def isUpdateWhileRunning(self) -> bool: ...

    def isVisible(self) -> bool: ...

    def modelActivated(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    def navigateToSelectedObject(self, __a0: ghidra.dbg.target.TargetObject, __a1: object) -> ghidra.program.model.address.Address: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def performAttach(self, __a0: docking.ActionContext) -> None: ...

    def performConfigure(self, __a0: docking.ActionContext) -> None: ...

    def performDetach(self, __a0: docking.ActionContext) -> None: ...

    def performInterrupt(self, __a0: docking.ActionContext) -> None: ...

    def performKill(self, __a0: docking.ActionContext) -> None: ...

    def performLaunch(self, __a0: docking.ActionContext) -> None: ...

    def performMethod(self, __a0: docking.ActionContext) -> None: ...

    def performNavigate(self, __a0: docking.ActionContext) -> None: ...

    def performQuickLaunch(self, __a0: docking.ActionContext) -> None: ...

    def performReattach(self, __a0: docking.ActionContext) -> None: ...

    def performRefresh(self, __a0: docking.ActionContext) -> None: ...

    def performResume(self, __a0: docking.ActionContext) -> None: ...

    def performSetBreakpoint(self, __a0: docking.ActionContext) -> None: ...

    def performStartRecording(self, __a0: docking.ActionContext) -> None: ...

    def performStepFinish(self, __a0: docking.ActionContext) -> None: ...

    def performStepInto(self, __a0: docking.ActionContext) -> None: ...

    def performStepLast(self, __a0: docking.ActionContext) -> None: ...

    def performStepOver(self, __a0: docking.ActionContext) -> None: ...

    def performToggle(self, __a0: docking.ActionContext) -> None: ...

    def performToggleAutoRecord(self, __a0: docking.ActionContext) -> None: ...

    def performToggleAutoupdate(self, __a0: docking.ActionContext) -> None: ...

    def performToggleBase(self, __a0: docking.ActionContext) -> None: ...

    def performToggleHideIntrinsics(self, __a0: docking.ActionContext) -> None: ...

    def performToggleIgnoreState(self, __a0: docking.ActionContext) -> None: ...

    def performToggleSelectionOnly(self, __a0: docking.ActionContext) -> None: ...

    def performToggleSubscription(self, __a0: docking.ActionContext) -> None: ...

    def performToggleUpdateWhileRunning(self, __a0: docking.ActionContext) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @overload
    def refresh(self) -> None: ...

    @overload
    def refresh(self, __a0: unicode) -> None: ...

    @overload
    def refresh(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    @staticmethod
    def registerProviderNameOwnerChange(__a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def removeFromTool(self) -> None: ...

    def requestFocus(self) -> None: ...

    def resetFontSize(self) -> None: ...

    def setAutorecord(self, __a0: bool) -> None: ...

    def setFocus(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetObject) -> None: ...

    def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

    def setHideIntrinsics(self, __a0: bool) -> None: ...

    def setIntraGroupPosition(self, __a0: docking.WindowPosition) -> None: ...

    def setLocalOnly(self, __a0: bool) -> None: ...

    def setModel(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    def setNodeTimeout(self, __a0: int) -> None: ...

    def setProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def setSubTitle(self, __a0: unicode) -> None: ...

    def setTabText(self, __a0: unicode) -> None: ...

    def setTitle(self, __a0: unicode) -> None: ...

    def setTrace(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.thread.TraceThread, __a2: bool) -> None: ...

    def setVisible(self, __a0: bool) -> None: ...

    def signalContentsChanged(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def signalDataChanged(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def startRecording(self, __a0: ghidra.dbg.target.TargetObject, __a1: bool) -> None: ...

    def stopRecording(self, __a0: ghidra.dbg.target.TargetObject) -> None: ...

    def toFront(self) -> None: ...

    def toString(self) -> unicode: ...

    def traceActivated(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    def traceClosed(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def traceOpened(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def update(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    def updateActions(self, __a0: ghidra.app.plugin.core.debug.gui.objects.ObjectContainer) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def autorecord(self) -> bool: ...

    @autorecord.setter
    def autorecord(self, value: bool) -> None: ...

    @property
    def component(self) -> javax.swing.JComponent: ...

    @property
    def consoleService(self) -> ghidra.app.services.ConsoleService: ...

    @property
    def focus(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def graphBroker(self) -> ghidra.app.services.GraphDisplayBroker: ...

    @property
    def hideIntrinsics(self) -> bool: ...

    @hideIntrinsics.setter
    def hideIntrinsics(self, value: bool) -> None: ...

    @property
    def listener(self) -> ghidra.dbg.DebuggerModelListener: ...

    @property
    def listingService(self) -> ghidra.app.services.DebuggerListingService: ...

    @property
    def localOnly(self) -> bool: ...

    @localOnly.setter
    def localOnly(self, value: bool) -> None: ...

    @property
    def model(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @model.setter
    def model(self, value: ghidra.dbg.DebuggerObjectModel) -> None: ...

    @property
    def nodeTimeout(self) -> int: ...

    @nodeTimeout.setter
    def nodeTimeout(self, value: int) -> None: ...

    @property
    def plugin(self) -> ghidra.app.plugin.core.debug.gui.objects.DebuggerObjectsPlugin: ...

    @property
    def program(self) -> None: ...  # No getter available.

    @program.setter
    def program(self, value: ghidra.program.model.listing.Program) -> None: ...

    @property
    def root(self) -> ghidra.app.plugin.core.debug.gui.objects.ObjectContainer: ...

    @property
    def selectedObject(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def traceManager(self) -> ghidra.app.services.DebuggerTraceManagerService: ...

    @property
    def updateWhileRunning(self) -> bool: ...