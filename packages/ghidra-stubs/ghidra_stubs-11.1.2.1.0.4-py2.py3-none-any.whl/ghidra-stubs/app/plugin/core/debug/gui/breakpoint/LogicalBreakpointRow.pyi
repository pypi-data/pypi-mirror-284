from typing import overload
import ghidra.debug.api.breakpoint
import ghidra.framework.model
import ghidra.program.model.address
import java.lang


class LogicalBreakpointRow(object):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.breakpoint.DebuggerBreakpointsProvider, __a1: ghidra.debug.api.breakpoint.LogicalBreakpoint): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDomainObject(self) -> ghidra.framework.model.DomainObject: ...

    def getImageName(self) -> unicode: ...

    def getKinds(self) -> unicode: ...

    def getLength(self) -> long: ...

    def getLocationCount(self) -> int: ...

    def getLogicalBreakpoint(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint: ...

    def getMode(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode: ...

    def getName(self) -> unicode: ...

    def getState(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    def hasSleigh(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isMapped(self) -> bool: ...

    def isNamable(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setState(self, __a0: ghidra.debug.api.breakpoint.LogicalBreakpoint.State) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def domainObject(self) -> ghidra.framework.model.DomainObject: ...

    @property
    def enabled(self) -> None: ...  # No getter available.

    @enabled.setter
    def enabled(self, value: bool) -> None: ...

    @property
    def imageName(self) -> unicode: ...

    @property
    def kinds(self) -> unicode: ...

    @property
    def length(self) -> long: ...

    @property
    def locationCount(self) -> int: ...

    @property
    def logicalBreakpoint(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint: ...

    @property
    def mapped(self) -> bool: ...

    @property
    def mode(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.Mode: ...

    @property
    def namable(self) -> bool: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def state(self) -> ghidra.debug.api.breakpoint.LogicalBreakpoint.State: ...

    @state.setter
    def state(self, value: ghidra.debug.api.breakpoint.LogicalBreakpoint.State) -> None: ...