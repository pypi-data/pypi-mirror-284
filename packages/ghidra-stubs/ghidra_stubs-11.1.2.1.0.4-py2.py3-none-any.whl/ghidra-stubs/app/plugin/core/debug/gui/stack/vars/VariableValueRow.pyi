from typing import List
from typing import overload
import generic.theme
import ghidra.app.plugin.core.debug.gui.stack.vars
import ghidra.app.plugin.core.debug.stack
import ghidra.pcode.exec
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.util
import java.lang
import java.util


class VariableValueRow(object):
    COLOR_ERROR: generic.theme.GColor
    COLOR_STALE: generic.theme.GColor




    class FrameRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.stack.UnwoundFrame): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def frame(self) -> ghidra.app.plugin.core.debug.stack.UnwoundFrame: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RowKey(java.lang.Enum):
        BYTES: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        ERROR: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        FRAME: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        INSTRUCTION: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        INTEGER: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        LOCATION: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        NAME: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        STATUS: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        STORAGE: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        TYPE: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        VALUE: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey
        WARNINGS: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ValueRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: unicode, __a1: ghidra.trace.model.memory.TraceMemoryState): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        def state(self) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def value(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class LocationRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: unicode): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromCodeUnit(__a0: ghidra.program.model.listing.CodeUnit) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.LocationRow: ...

        @staticmethod
        def fromRange(__a0: ghidra.program.model.address.AddressRange) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.LocationRow: ...

        @staticmethod
        def fromWatchValue(__a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a1: ghidra.program.model.lang.Language) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.LocationRow: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def locString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class BytesRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        @overload
        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue): ...

        @overload
        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes, __a1: ghidra.trace.model.memory.TraceMemoryState): ...



        def bytes(self) -> ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromCodeUnit(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.BytesRow: ...

        @staticmethod
        def fromRange(__a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.program.model.address.AddressRange, __a2: long) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.BytesRow: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        def state(self) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StorageRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: ghidra.program.model.listing.VariableStorage): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromCodeUnit(__a0: ghidra.program.model.listing.CodeUnit) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.StorageRow: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        def storage(self) -> ghidra.program.model.listing.VariableStorage: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class WarningsRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: ghidra.app.plugin.core.debug.stack.StackUnwindWarningSet): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        def warnings(self) -> ghidra.app.plugin.core.debug.stack.StackUnwindWarningSet: ...






    class ErrorRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: java.lang.Throwable): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def error(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class InstructionRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: ghidra.program.model.listing.Instruction): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def instruction(self) -> ghidra.program.model.listing.Instruction: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class IntegerRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        @overload
        def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.BytesRow): ...

        @overload
        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue): ...

        @overload
        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes, __a1: ghidra.trace.model.memory.TraceMemoryState): ...



        def bytes(self) -> ghidra.pcode.exec.DebuggerPcodeUtils.PrettyBytes: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromCodeUnit(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.IntegerRow: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        def state(self) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StatusRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: unicode): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        def status(self) -> unicode: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class NameRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: unicode): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TypeRow(java.lang.Record, ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow):




        def __init__(self, __a0: ghidra.program.model.data.DataType): ...



        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        @overload
        @staticmethod
        def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

        def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

        def keyToHtml(self) -> unicode: ...

        def keyToSimpleString(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reportDetails(self) -> None: ...

        @staticmethod
        def styleSimple(__a0: object) -> unicode: ...

        @staticmethod
        def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

        def toHtml(self) -> unicode: ...

        def toSimpleString(self) -> unicode: ...

        def toString(self) -> unicode: ...

        def type(self) -> ghidra.program.model.data.DataType: ...

        def valueToHtml(self) -> unicode: ...

        def valueToSimpleString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    @staticmethod
    def computeState(__a0: ghidra.trace.model.listing.TraceCodeUnit, __a1: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

    @overload
    @staticmethod
    def computeState(__a0: ghidra.trace.model.Trace, __a1: ghidra.trace.util.TraceAddressSpace, __a2: ghidra.program.model.address.AddressRange, __a3: long) -> ghidra.trace.model.memory.TraceMemoryState: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def htmlFg(__a0: generic.theme.GColor, __a1: unicode) -> unicode: ...

    def key(self) -> ghidra.app.plugin.core.debug.gui.stack.vars.VariableValueRow.RowKey: ...

    def keyToHtml(self) -> unicode: ...

    def keyToSimpleString(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def reportDetails(self) -> None: ...

    @staticmethod
    def styleSimple(__a0: object) -> unicode: ...

    @staticmethod
    def styleState(__a0: ghidra.trace.model.memory.TraceMemoryState, __a1: unicode) -> unicode: ...

    def toHtml(self) -> unicode: ...

    def toSimpleString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    def valueToHtml(self) -> unicode: ...

    def valueToSimpleString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

