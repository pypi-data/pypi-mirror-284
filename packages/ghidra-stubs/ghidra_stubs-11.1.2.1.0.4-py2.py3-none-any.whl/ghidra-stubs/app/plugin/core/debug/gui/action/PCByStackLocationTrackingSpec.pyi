from typing import List
from typing import overload
import ghidra.app.plugin.core.debug.gui.action
import ghidra.debug.api.action
import ghidra.debug.api.tracemgr
import ghidra.framework.plugintool
import ghidra.program.model.address
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.stack
import ghidra.trace.util
import java.lang
import java.util
import javax.swing


class PCByStackLocationTrackingSpec(java.lang.Enum, ghidra.debug.api.action.LocationTrackingSpec, ghidra.debug.api.action.LocationTracker):
    CONFIG_NAME: unicode = u'TRACK_PC_BY_STACK'
    INSTANCE: ghidra.app.plugin.core.debug.gui.action.PCByStackLocationTrackingSpec







    def affectedByBytesChange(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: ghidra.trace.model.TraceAddressSnapRange, __a2: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> bool: ...

    def affectedByStackChange(self, __a0: ghidra.trace.model.stack.TraceStack, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> bool: ...

    @staticmethod
    def changeIsCurrent(__a0: ghidra.trace.util.TraceAddressSpace, __a1: ghidra.trace.model.TraceAddressSnapRange, __a2: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> bool: ...

    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeTitle(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> unicode: ...

    def computeTraceAddress(self, __a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> ghidra.program.model.address.Address: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getConfigName(self) -> unicode: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def getDefaultGoToInput(self, __a0: ghidra.framework.plugintool.ServiceProvider, __a1: ghidra.debug.api.tracemgr.DebuggerCoordinates, __a2: ghidra.program.util.ProgramLocation) -> ghidra.debug.api.action.GoToInput: ...

    def getLocationLabel(self) -> unicode: ...

    def getMenuIcon(self) -> javax.swing.Icon: ...

    def getMenuName(self) -> unicode: ...

    def getTracker(self) -> ghidra.debug.api.action.LocationTracker: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def shouldDisassemble(self) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.app.plugin.core.debug.gui.action.PCByStackLocationTrackingSpec: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.app.plugin.core.debug.gui.action.PCByStackLocationTrackingSpec]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def configName(self) -> unicode: ...

    @property
    def locationLabel(self) -> unicode: ...

    @property
    def menuIcon(self) -> javax.swing.Icon: ...

    @property
    def menuName(self) -> unicode: ...

    @property
    def tracker(self) -> ghidra.debug.api.action.LocationTracker: ...