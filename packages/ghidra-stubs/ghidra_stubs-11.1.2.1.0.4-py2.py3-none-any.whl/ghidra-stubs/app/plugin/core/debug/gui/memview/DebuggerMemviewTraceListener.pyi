from typing import overload
import ghidra.app.plugin.core.debug.gui.memview
import ghidra.debug.api.tracemgr
import ghidra.framework.model
import ghidra.trace.model
import ghidra.trace.util
import java.lang


class DebuggerMemviewTraceListener(ghidra.trace.model.TraceDomainObjectListener):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.memview.MemviewProvider): ...



    def coordinatesActivated(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    def domainObjectChanged(self, __a0: ghidra.framework.model.DomainObjectChangedEvent) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getProvider(self) -> ghidra.app.plugin.core.debug.gui.memview.MemviewProvider: ...

    def handleChangeRecord(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> None: ...

    def handleTraceChangeRecord(self, __a0: ghidra.trace.util.TraceChangeRecord) -> None: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setCoordinates(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    def toString(self) -> unicode: ...

    def toggleTrackTrace(self) -> None: ...

    def traceClosed(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def coordinates(self) -> None: ...  # No getter available.

    @coordinates.setter
    def coordinates(self, value: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    @property
    def provider(self) -> ghidra.app.plugin.core.debug.gui.memview.MemviewProvider: ...