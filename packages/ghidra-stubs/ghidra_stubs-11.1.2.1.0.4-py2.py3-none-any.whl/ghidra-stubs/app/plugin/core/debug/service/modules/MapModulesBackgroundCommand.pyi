from typing import overload
import ghidra.framework.cmd
import ghidra.framework.model
import ghidra.framework.plugintool
import ghidra.trace.model
import ghidra.util.task
import java.lang


class MapModulesBackgroundCommand(ghidra.framework.cmd.BackgroundCommand):




    def __init__(self, __a0: ghidra.app.services.DebuggerStaticMappingService, __a1: java.util.Collection): ...



    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject) -> bool: ...

    @overload
    def applyTo(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    def canCancel(self) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getName(self) -> unicode: ...

    def getStatusMsg(self) -> unicode: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isModal(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def run(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def taskCompleted(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

