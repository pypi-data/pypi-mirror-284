from typing import overload
import ghidra.app.plugin.core.debug.service.model.launch
import ghidra.dbg.target
import ghidra.debug.api.model
import ghidra.util.task
import java.lang
import java.util
import java.util.concurrent
import javax.swing


class GenericDebuggerProgramLaunchOffer(ghidra.app.plugin.core.debug.service.model.launch.AbstractDebuggerProgramLaunchOffer):




    def __init__(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.framework.plugintool.PluginTool, __a2: ghidra.dbg.DebuggerObjectModel): ...



    def defaultPriority(self) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getButtonTitle(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getConfigName(self) -> unicode: ...

    def getIcon(self) -> javax.swing.Icon: ...

    @overload
    def getLauncherArgs(self, __a0: ghidra.dbg.target.TargetLauncher, __a1: bool) -> java.util.Map: ...

    @overload
    def getLauncherArgs(self, __a0: ghidra.dbg.target.TargetLauncher, __a1: bool, __a2: ghidra.debug.api.model.DebuggerProgramLaunchOffer.LaunchConfigurator) -> java.util.Map: ...

    def getMenuParentTitle(self) -> unicode: ...

    def getMenuTitle(self) -> unicode: ...

    def getQuickTitle(self) -> unicode: ...

    def hashCode(self) -> int: ...

    @overload
    def launchProgram(self, __a0: ghidra.util.task.TaskMonitor, __a1: ghidra.debug.api.model.DebuggerProgramLaunchOffer.PromptMode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def launchProgram(self, __a0: ghidra.util.task.TaskMonitor, __a1: ghidra.debug.api.model.DebuggerProgramLaunchOffer.PromptMode, __a2: ghidra.debug.api.model.DebuggerProgramLaunchOffer.LaunchConfigurator) -> java.util.concurrent.CompletableFuture: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def buttonTitle(self) -> unicode: ...

    @property
    def configName(self) -> unicode: ...

    @property
    def menuParentTitle(self) -> unicode: ...

    @property
    def menuTitle(self) -> unicode: ...