from typing import overload
import ghidra.debug.api.tracermi
import ghidra.trace.model
import java.lang
import java.net
import java.util


class TraceRmiHandler(object, ghidra.debug.api.tracermi.TraceRmiConnection):
    VERSION: unicode = u'11.1'



    def __init__(self, __a0: ghidra.app.plugin.core.debug.service.tracermi.TraceRmiPlugin, __a1: java.net.Socket): ...



    def close(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def forceCloseTrace(self, __a0: ghidra.trace.model.Trace) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getLastSnapshot(self, __a0: ghidra.trace.model.Trace) -> long: ...

    def getMethods(self) -> ghidra.debug.api.tracermi.RemoteMethodRegistry: ...

    def getRemoteAddress(self) -> java.net.SocketAddress: ...

    def getTargets(self) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def isClosed(self) -> bool: ...

    def isTarget(self, __a0: ghidra.trace.model.Trace) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def receiveLoop(self) -> None: ...

    def registerTerminals(self, __a0: java.util.Collection) -> None: ...

    def start(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def waitClosed(self) -> None: ...

    def waitForTrace(self, __a0: long) -> ghidra.trace.model.Trace: ...

    @property
    def closed(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @property
    def methods(self) -> ghidra.app.plugin.core.debug.service.tracermi.DefaultRemoteMethodRegistry: ...

    @property
    def remoteAddress(self) -> java.net.SocketAddress: ...

    @property
    def targets(self) -> java.util.Collection: ...