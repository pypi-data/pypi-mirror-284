from typing import overload
import docking
import docking.action
import ghidra.app.plugin.core.debug.gui.watch
import ghidra.app.services
import ghidra.debug.api.tracemgr
import ghidra.debug.api.watch
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.trace.model
import ghidra.trace.model.time.schedule
import ghidra.util
import java.awt.event
import java.lang
import java.util
import javax.swing


class DebuggerWatchesProvider(ghidra.framework.plugintool.ComponentProviderAdapter, ghidra.app.services.DebuggerWatchesService):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.watch.DebuggerWatchesPlugin): ...



    def addLocalAction(self, __a0: docking.action.DockingActionIf) -> None: ...

    def addToTool(self) -> None: ...

    def addWatch(self, __a0: unicode) -> ghidra.app.plugin.core.debug.gui.watch.DefaultWatchRow: ...

    def adjustFontSize(self, __a0: bool) -> None: ...

    def canBeParent(self) -> bool: ...

    def closeComponent(self) -> None: ...

    def componentActivated(self) -> None: ...

    def componentDeactived(self) -> None: ...

    def componentHidden(self) -> None: ...

    def componentShown(self) -> None: ...

    def contextChanged(self) -> None: ...

    def coordinatesActivated(self, __a0: ghidra.debug.api.tracemgr.DebuggerCoordinates) -> None: ...

    def doCheckDepsAndReevaluate(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getActionContext(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getContextType(self) -> java.lang.Class: ...

    def getDefaultWindowPosition(self) -> docking.WindowPosition: ...

    def getHelpInfo(self) -> unicode: ...

    def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

    def getHelpObject(self) -> object: ...

    def getIcon(self) -> javax.swing.Icon: ...

    def getInstanceID(self) -> long: ...

    def getIntraGroupPosition(self) -> docking.WindowPosition: ...

    def getLocalActions(self) -> java.util.Set: ...

    @staticmethod
    def getMappedName(__a0: unicode, __a1: unicode) -> unicode: ...

    @staticmethod
    def getMappedOwner(__a0: unicode, __a1: unicode) -> unicode: ...

    def getName(self) -> unicode: ...

    def getOwner(self) -> unicode: ...

    def getSubTitle(self) -> unicode: ...

    def getTabText(self) -> unicode: ...

    def getTitle(self) -> unicode: ...

    def getTool(self) -> docking.Tool: ...

    def getWatches(self) -> java.util.Collection: ...

    def getWindowGroup(self) -> unicode: ...

    def getWindowSubMenuName(self) -> unicode: ...

    def goToTime(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> None: ...

    def hashCode(self) -> int: ...

    def isActive(self) -> bool: ...

    def isEditsEnabled(self) -> bool: ...

    def isFocusedProvider(self) -> bool: ...

    def isInTool(self) -> bool: ...

    def isSnapshot(self) -> bool: ...

    def isTransient(self) -> bool: ...

    def isVisible(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def reevaluate(self) -> None: ...

    @staticmethod
    def registerProviderNameOwnerChange(__a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def removeFromTool(self) -> None: ...

    def removeWatch(self, __a0: ghidra.debug.api.watch.WatchRow) -> None: ...

    def requestFocus(self) -> None: ...

    def resetFontSize(self) -> None: ...

    def setHelpLocation(self, __a0: ghidra.util.HelpLocation) -> None: ...

    def setIntraGroupPosition(self, __a0: docking.WindowPosition) -> None: ...

    def setSubTitle(self, __a0: unicode) -> None: ...

    def setTabText(self, __a0: unicode) -> None: ...

    def setTitle(self, __a0: unicode) -> None: ...

    def setVisible(self, __a0: bool) -> None: ...

    def toFront(self) -> None: ...

    def toString(self) -> unicode: ...

    def traceClosed(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def waitEvaluate(self, __a0: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def component(self) -> javax.swing.JComponent: ...

    @property
    def editsEnabled(self) -> bool: ...

    @property
    def watches(self) -> List[object]: ...