from typing import overload
import ghidra.app.plugin.core.debug.service.model.interfaces
import ghidra.dbg.target
import ghidra.program.model.address
import ghidra.trace.model.breakpoint
import java.lang
import java.util


class DefaultBreakpointRecorder(object, ghidra.app.plugin.core.debug.service.model.interfaces.ManagedBreakpointRecorder):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.service.model.DefaultTraceRecorder): ...



    def breakpointLocationChanged(self, __a0: ghidra.program.model.address.AddressRange, __a1: unicode) -> None: ...

    def breakpointSpecChanged(self, __a0: ghidra.dbg.target.TargetBreakpointSpec, __a1: bool, __a2: java.util.Collection) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBreakpointContainer(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer: ...

    def getClass(self) -> java.lang.Class: ...

    def getTraceBreakpoint(self, __a0: ghidra.dbg.target.TargetBreakpointLocation) -> ghidra.trace.model.breakpoint.TraceBreakpoint: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def offerBreakpointContainer(self, __a0: ghidra.dbg.target.TargetBreakpointSpecContainer) -> None: ...

    def offerBreakpointLocation(self, __a0: ghidra.dbg.target.TargetObject, __a1: ghidra.dbg.target.TargetBreakpointLocation) -> None: ...

    def recordBreakpoint(self, __a0: ghidra.dbg.target.TargetBreakpointLocation, __a1: java.util.Set) -> None: ...

    def removeBreakpointLocation(self, __a0: ghidra.dbg.target.TargetBreakpointLocation) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def breakpointContainer(self) -> ghidra.dbg.target.TargetBreakpointSpecContainer: ...