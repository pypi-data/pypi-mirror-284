from typing import overload
import ghidra.program.model.address
import java.lang
import utility.function


class ConvertConstantTask(object, utility.function.Callback):




    @overload
    def __init__(self, __a0: ghidra.program.model.pcode.Varnode, __a1: bool): ...

    @overload
    def __init__(self, __a0: ghidra.app.plugin.core.decompile.DecompilerActionContext, __a1: unicode, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.pcode.Varnode, __a4: bool, __a5: long, __a6: int): ...



    def call(self) -> None: ...

    @staticmethod
    def dummy() -> utility.function.Callback: ...

    @staticmethod
    def dummyIfNull(__a0: utility.function.Callback) -> utility.function.Callback: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getSize(self) -> int: ...

    def getValue(self) -> long: ...

    def hashCode(self) -> int: ...

    def isSigned(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def runTask(self) -> None: ...

    def setAlternate(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: int, __a3: long) -> None: ...

    @staticmethod
    def signExtendValue(__a0: bool, __a1: long, __a2: int) -> long: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def signed(self) -> bool: ...

    @property
    def size(self) -> int: ...

    @property
    def value(self) -> long: ...