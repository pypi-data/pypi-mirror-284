from typing import List
from typing import overload
import ghidra.graph
import ghidra.program.model.symbol
import java.lang


class PCodeCfgGraphType(ghidra.graph.ProgramGraphType):








    def containsEdgeType(self, __a0: unicode) -> bool: ...

    def containsVertexType(self, __a0: unicode) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    @staticmethod
    def getEdgeType(__a0: ghidra.program.model.symbol.RefType) -> unicode: ...

    def getEdgeTypes(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getOptionsName(self) -> unicode: ...

    def getVertexTypes(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

