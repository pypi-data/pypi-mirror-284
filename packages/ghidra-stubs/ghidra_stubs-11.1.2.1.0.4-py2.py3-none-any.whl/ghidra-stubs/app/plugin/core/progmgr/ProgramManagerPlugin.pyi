from typing import List
from typing import overload
import ghidra.app.services
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.address
import ghidra.program.model.listing
import java.lang
import java.net


class ProgramManagerPlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.ProgramManager, ghidra.framework.options.OptionsChangeListener):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def accept(self, __a0: java.net.URL) -> bool: ...

    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def closeAllPrograms(self, __a0: bool) -> bool: ...

    def closeOtherPrograms(self, __a0: bool) -> bool: ...

    @overload
    def closeProgram(self) -> bool: ...

    @overload
    def closeProgram(self, __a0: ghidra.program.model.listing.Program, __a1: bool) -> bool: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getAllOpenPrograms(self) -> List[ghidra.program.model.listing.Program]: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentProgram(self) -> ghidra.program.model.listing.Program: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getProgram(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.listing.Program: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def isManaged(self, __a0: ghidra.program.model.listing.Program) -> bool: ...

    def isVisible(self, __a0: ghidra.program.model.listing.Program) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def openCachedProgram(self, __a0: ghidra.framework.model.DomainFile, __a1: object) -> ghidra.program.model.listing.Program: ...

    @overload
    def openCachedProgram(self, __a0: java.net.URL, __a1: object) -> ghidra.program.model.listing.Program: ...

    @overload
    def openProgram(self, __a0: ghidra.framework.model.DomainFile) -> ghidra.program.model.listing.Program: ...

    @overload
    def openProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    @overload
    def openProgram(self, __a0: ghidra.framework.model.DomainFile, __a1: int) -> ghidra.program.model.listing.Program: ...

    @overload
    def openProgram(self, __a0: ghidra.program.model.listing.Program, __a1: int) -> None: ...

    @overload
    def openProgram(self, __a0: java.net.URL, __a1: int) -> ghidra.program.model.listing.Program: ...

    @overload
    def openProgram(self, __a0: ghidra.framework.model.DomainFile, __a1: int, __a2: int) -> ghidra.program.model.listing.Program: ...

    def openPrograms(self, __a0: List[object]) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.ToolOptions, __a1: unicode, __a2: object, __a3: object) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def releaseProgram(self, __a0: ghidra.program.model.listing.Program, __a1: object) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    @overload
    def saveProgram(self) -> None: ...

    @overload
    def saveProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    @overload
    def saveProgramAs(self) -> None: ...

    @overload
    def saveProgramAs(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def setCurrentProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def setPersistentOwner(self, __a0: ghidra.program.model.listing.Program, __a1: object) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def allOpenPrograms(self) -> List[ghidra.program.model.listing.Program]: ...

    @property
    def currentProgram(self) -> ghidra.program.model.listing.Program: ...

    @currentProgram.setter
    def currentProgram(self, value: ghidra.program.model.listing.Program) -> None: ...

    @property
    def data(self) -> List[ghidra.framework.model.DomainFile]: ...

    @property
    def supportedDataTypes(self) -> List[java.lang.Class]: ...