from typing import List
from typing import overload
import ghidra.app.events
import ghidra.app.plugin.core.format
import ghidra.program.model.address
import ghidra.program.util
import java.lang


class ProgramByteBlockSet(object, ghidra.app.plugin.core.format.ByteBlockSet):








    def dispose(self) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self, __a0: ghidra.app.plugin.core.format.ByteBlock, __a1: long) -> ghidra.program.model.address.Address: ...

    def getAddressSet(self, __a0: ghidra.app.plugin.core.format.ByteBlockSelection) -> ghidra.program.model.address.AddressSet: ...

    @overload
    def getBlockSelection(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.app.plugin.core.format.ByteBlockSelection: ...

    @overload
    def getBlockSelection(self, __a0: ghidra.program.model.address.AddressRangeIterator) -> ghidra.app.plugin.core.format.ByteBlockSelection: ...

    @overload
    def getBlockSelection(self, __a0: ghidra.program.util.ProgramSelection) -> ghidra.app.plugin.core.format.ByteBlockSelection: ...

    @overload
    def getBlockSelection(self, __a0: ghidra.program.model.address.AddressSetView) -> ghidra.app.plugin.core.format.ByteBlockSelection: ...

    def getBlocks(self) -> List[ghidra.app.plugin.core.format.ByteBlock]: ...

    def getByteBlockInfo(self, __a0: ghidra.program.model.address.Address) -> ghidra.app.plugin.core.format.ByteBlockInfo: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getPluginEvent(self, __a0: unicode, __a1: ghidra.app.plugin.core.format.ByteBlockSelection) -> ghidra.app.events.ProgramSelectionPluginEvent: ...

    @overload
    def getPluginEvent(self, __a0: unicode, __a1: ghidra.app.plugin.core.format.ByteBlock, __a2: long, __a3: int) -> ghidra.app.events.ProgramLocationPluginEvent: ...

    def hashCode(self) -> int: ...

    def isChanged(self, __a0: ghidra.app.plugin.core.format.ByteBlock, __a1: long, __a2: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def notifyByteEditing(self, __a0: ghidra.app.plugin.core.format.ByteBlock, __a1: long, __a2: List[int], __a3: List[int]) -> None: ...

    def startTransaction(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def blocks(self) -> List[ghidra.app.plugin.core.format.ByteBlock]: ...