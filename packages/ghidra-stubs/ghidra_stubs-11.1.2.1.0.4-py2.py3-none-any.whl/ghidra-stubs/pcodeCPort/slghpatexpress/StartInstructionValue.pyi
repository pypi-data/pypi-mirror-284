from typing import overload
import generic.stl
import ghidra.pcodeCPort.slghpatexpress
import ghidra.pcodeCPort.utils
import ghidra.program.model.pcode
import java.lang


class StartInstructionValue(ghidra.pcodeCPort.slghpatexpress.PatternValue):
    location: ghidra.sleigh.grammar.Location



    def __init__(self, __a0: ghidra.sleigh.grammar.Location): ...



    def encode(self, __a0: ghidra.program.model.pcode.Encoder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def genMinPattern(self, __a0: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def genPattern(self, __a0: long) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def getClass(self) -> java.lang.Class: ...

    def getMinMax(self, __a0: generic.stl.VectorSTL, __a1: generic.stl.VectorSTL) -> None: ...

    @overload
    def getSubValue(self, __a0: generic.stl.VectorSTL) -> long: ...

    @overload
    def getSubValue(self, __a0: generic.stl.VectorSTL, __a1: ghidra.pcodeCPort.utils.MutableInt) -> long: ...

    def hashCode(self) -> int: ...

    def layClaim(self) -> None: ...

    def listValues(self, __a0: generic.stl.VectorSTL) -> None: ...

    def maxValue(self) -> long: ...

    def minValue(self) -> long: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def release(__a0: ghidra.pcodeCPort.slghpatexpress.PatternExpression) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

