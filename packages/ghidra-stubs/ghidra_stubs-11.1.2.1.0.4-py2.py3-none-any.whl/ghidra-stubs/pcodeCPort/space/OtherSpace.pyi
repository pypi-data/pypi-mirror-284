from typing import overload
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import ghidra.program.model.pcode
import java.io
import java.lang


class OtherSpace(ghidra.pcodeCPort.space.AddrSpace):




    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.translate.Translate): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.translate.Translate, __a1: unicode, __a2: int): ...



    def compareTo(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> int: ...

    def contain(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> bool: ...

    def encode(self, __a0: ghidra.program.model.pcode.Encoder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddrSize(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getContain(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getDelay(self) -> int: ...

    def getIndex(self) -> int: ...

    def getMask(self) -> long: ...

    def getName(self) -> unicode: ...

    def getScale(self) -> int: ...

    def getShortCut(self) -> int: ...

    def getTrans(self) -> ghidra.pcodeCPort.translate.Translate: ...

    def getType(self) -> ghidra.pcodeCPort.space.spacetype: ...

    def getWordSize(self) -> int: ...

    def hasPhysical(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBigEndian(self) -> bool: ...

    def isHeritaged(self) -> bool: ...

    def isOtherSpace(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def printOffset(self, __a0: java.io.PrintStream, __a1: long) -> None: ...

    def printRaw(self, __a0: java.io.PrintStream, __a1: long) -> int: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, __a0: long) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def wrapOffset(self, __a0: long) -> long: ...

