from typing import overload
import ghidra.pcodeCPort.slghpattern
import ghidra.program.model.pcode
import java.lang


class PatternBlock(object):




    @overload
    def __init__(self, __a0: bool): ...

    @overload
    def __init__(self, __a0: generic.stl.VectorSTL): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.slghpattern.PatternBlock, __a1: ghidra.pcodeCPort.slghpattern.PatternBlock): ...

    @overload
    def __init__(self, __a0: int, __a1: int, __a2: int): ...



    def alwaysFalse(self) -> bool: ...

    def alwaysTrue(self) -> bool: ...

    def clone(self) -> object: ...

    def commonSubPattern(self, __a0: ghidra.pcodeCPort.slghpattern.PatternBlock) -> ghidra.pcodeCPort.slghpattern.PatternBlock: ...

    def dispose(self) -> None: ...

    def encode(self, __a0: ghidra.program.model.pcode.Encoder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> int: ...

    def getMask(self, __a0: int, __a1: int) -> int: ...

    def getValue(self, __a0: int, __a1: int) -> int: ...

    def hashCode(self) -> int: ...

    def identical(self, __a0: ghidra.pcodeCPort.slghpattern.PatternBlock) -> bool: ...

    def intersect(self, __a0: ghidra.pcodeCPort.slghpattern.PatternBlock) -> ghidra.pcodeCPort.slghpattern.PatternBlock: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def shift(self, __a0: int) -> None: ...

    def specializes(self, __a0: ghidra.pcodeCPort.slghpattern.PatternBlock) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def length(self) -> int: ...