from typing import Iterator
from typing import List
from typing import overload
import ghidra.util
import java.lang
import java.util
import java.util.function


class TwoWayBreakdownAddressRangeIterator(ghidra.util.AbstractPeekableIterator):





    class Which(java.lang.Enum):
        BOTH: ghidra.util.TwoWayBreakdownAddressRangeIterator.Which
        LEFT: ghidra.util.TwoWayBreakdownAddressRangeIterator.Which
        RIGHT: ghidra.util.TwoWayBreakdownAddressRangeIterator.Which
        includesLeft: bool
        includesRight: bool







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def inIntersect(self) -> bool: ...

        def inSubtract(self) -> bool: ...

        def inXor(self) -> bool: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.util.TwoWayBreakdownAddressRangeIterator.Which: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.util.TwoWayBreakdownAddressRangeIterator.Which]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class MyEntry(object, java.util.Map.Entry):




        def __init__(self): ...



        @overload
        @staticmethod
        def comparingByKey() -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparingByKey(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparingByValue() -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparingByValue(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def copyOf(__a0: java.util.Map.Entry) -> java.util.Map.Entry: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> object: ...

        def getValue(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def setValue(self, __a0: ghidra.util.TwoWayBreakdownAddressRangeIterator.Which) -> ghidra.util.TwoWayBreakdownAddressRangeIterator.Which: ...

        @overload
        def setValue(self, __a0: object) -> object: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def key(self) -> ghidra.program.model.address.AddressRange: ...

        @property
        def value(self) -> ghidra.util.TwoWayBreakdownAddressRangeIterator.Which: ...

        @value.setter
        def value(self, value: ghidra.util.TwoWayBreakdownAddressRangeIterator.Which) -> None: ...

    def __init__(self, __a0: java.util.Iterator, __a1: java.util.Iterator, __a2: bool): ...

    def __iter__(self) -> Iterator[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def next(self) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def peek(self) -> object: ...

    def remove(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

