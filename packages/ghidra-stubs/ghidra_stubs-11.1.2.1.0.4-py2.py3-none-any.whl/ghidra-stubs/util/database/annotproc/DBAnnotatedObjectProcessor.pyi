from typing import overload
import java.lang
import java.util
import javax.annotation.processing
import javax.lang.model
import javax.lang.model.element


class DBAnnotatedObjectProcessor(javax.annotation.processing.AbstractProcessor):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompletions(self, __a0: javax.lang.model.element.Element, __a1: javax.lang.model.element.AnnotationMirror, __a2: javax.lang.model.element.ExecutableElement, __a3: unicode) -> java.lang.Iterable: ...

    def getSupportedAnnotationTypes(self) -> java.util.Set: ...

    def getSupportedOptions(self) -> java.util.Set: ...

    def getSupportedSourceVersion(self) -> javax.lang.model.SourceVersion: ...

    def hashCode(self) -> int: ...

    def init(self, __a0: javax.annotation.processing.ProcessingEnvironment) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def process(self, __a0: java.util.Set, __a1: javax.annotation.processing.RoundEnvironment) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def supportedAnnotationTypes(self) -> java.util.Set: ...

    @property
    def supportedSourceVersion(self) -> javax.lang.model.SourceVersion: ...