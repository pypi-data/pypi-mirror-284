from typing import overload
import java.lang
import java.util
import javax.lang.model.element
import javax.lang.model.type


class ValidationContext(object):




    def __init__(self, __a0: javax.annotation.processing.ProcessingEnvironment): ...



    def equals(self, __a0: object) -> bool: ...

    @overload
    def findSupertype(self, __a0: javax.lang.model.element.TypeElement, __a1: javax.lang.model.element.TypeElement) -> javax.lang.model.type.DeclaredType: ...

    @overload
    def findSupertype(self, __a0: javax.lang.model.type.DeclaredType, __a1: javax.lang.model.element.TypeElement) -> javax.lang.model.type.DeclaredType: ...

    def format(self, __a0: javax.lang.model.type.TypeMirror) -> unicode: ...

    @overload
    def getArguments(self, __a0: javax.lang.model.element.TypeElement, __a1: javax.lang.model.element.TypeElement) -> java.util.Map: ...

    @overload
    def getArguments(self, __a0: javax.lang.model.type.DeclaredType, __a1: javax.lang.model.element.TypeElement) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def hasType(self, __a0: javax.lang.model.element.VariableElement, __a1: javax.lang.model.element.TypeElement) -> bool: ...

    @overload
    def hasType(self, __a0: javax.lang.model.element.VariableElement, __a1: javax.lang.model.type.TypeMirror) -> bool: ...

    def hashCode(self) -> int: ...

    def isCapturable(self, __a0: javax.lang.model.type.TypeMirror, __a1: javax.lang.model.type.TypeMirror) -> bool: ...

    def isEnumType(self, __a0: javax.lang.model.type.TypeMirror) -> bool: ...

    def isSubclass(self, __a0: javax.lang.model.element.TypeElement, __a1: javax.lang.model.element.TypeElement) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

