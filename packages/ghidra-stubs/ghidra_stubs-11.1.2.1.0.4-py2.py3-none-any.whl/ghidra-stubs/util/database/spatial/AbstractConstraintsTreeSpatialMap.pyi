from typing import overload
import ghidra.util.database.spatial
import java.lang
import java.util


class AbstractConstraintsTreeSpatialMap(object, ghidra.util.database.spatial.SpatialMap):
    EMPTY_MAP: ghidra.util.database.spatial.SpatialMap



    def __init__(self, __a0: ghidra.util.database.spatial.AbstractConstraintsTree, __a1: ghidra.util.database.spatial.Query): ...



    def clear(self) -> None: ...

    @staticmethod
    def emptyMap() -> ghidra.util.database.spatial.SpatialMap: ...

    def entries(self) -> java.util.Collection: ...

    def equals(self, __a0: object) -> bool: ...

    def firstEntry(self) -> java.util.Map.Entry: ...

    def firstKey(self) -> ghidra.util.database.spatial.BoundedShape: ...

    def firstValue(self) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def keys(self) -> java.util.Collection: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def orderedEntries(self) -> java.util.Collection: ...

    def orderedKeys(self) -> java.util.Collection: ...

    def orderedValues(self) -> java.util.Collection: ...

    def put(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> object: ...

    def reduce(self, __a0: object) -> ghidra.util.database.spatial.SpatialMap: ...

    @overload
    def remove(self, __a0: java.util.Map.Entry) -> bool: ...

    @overload
    def remove(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> bool: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    def values(self) -> java.util.Collection: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...