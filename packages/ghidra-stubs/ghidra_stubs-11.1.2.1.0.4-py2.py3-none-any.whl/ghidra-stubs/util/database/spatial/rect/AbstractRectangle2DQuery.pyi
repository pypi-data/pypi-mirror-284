from typing import overload
import ghidra.util.database.spatial
import ghidra.util.database.spatial.rect
import java.lang
import java.util


class AbstractRectangle2DQuery(object, ghidra.util.database.spatial.Query):





    class QueryFactory(object):








        def create(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D, __a1: ghidra.util.database.spatial.rect.Rectangle2D, __a2: ghidra.util.database.spatial.rect.Rectangle2DDirection) -> ghidra.util.database.spatial.rect.AbstractRectangle2DQuery: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D, __a1: ghidra.util.database.spatial.rect.Rectangle2D, __a2: ghidra.util.database.spatial.rect.EuclideanSpace2D, __a3: ghidra.util.database.spatial.rect.Rectangle2DDirection): ...



    def and(self, __a0: ghidra.util.database.spatial.rect.AbstractRectangle2DQuery) -> ghidra.util.database.spatial.rect.AbstractRectangle2DQuery: ...

    def equals(self, __a0: object) -> bool: ...

    def getBoundsComparator(self) -> java.util.Comparator: ...

    def getClass(self) -> java.lang.Class: ...

    def getDirection(self) -> ghidra.util.database.spatial.rect.Rectangle2DDirection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def starting(self, __a0: ghidra.util.database.spatial.rect.Rectangle2DDirection) -> ghidra.util.database.spatial.rect.AbstractRectangle2DQuery: ...

    @overload
    def terminateEarlyData(self, __a0: ghidra.util.database.spatial.BoundedShape) -> bool: ...

    @overload
    def terminateEarlyData(self, __a0: object) -> bool: ...

    @overload
    def terminateEarlyNode(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

    @overload
    def terminateEarlyNode(self, __a0: object) -> bool: ...

    def testData(self, __a0: object) -> bool: ...

    @overload
    def testNode(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.Query.QueryInclusion: ...

    @overload
    def testNode(self, __a0: object) -> ghidra.util.database.spatial.Query.QueryInclusion: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def boundsComparator(self) -> java.util.Comparator: ...

    @property
    def direction(self) -> ghidra.util.database.spatial.rect.Rectangle2DDirection: ...