from typing import overload
import ghidra.util.database
import ghidra.util.database.spatial
import java.lang


class AbstractRStarConstraintsTree(ghidra.util.database.spatial.AbstractConstraintsTree):




    def __init__(self, __a0: ghidra.util.database.DBCachedObjectStoreFactory, __a1: unicode, __a2: java.lang.Class, __a3: java.lang.Class, __a4: bool, __a5: int): ...



    def asSpatialMap(self) -> ghidra.util.database.spatial.AbstractConstraintsTreeSpatialMap: ...

    def checkIntegrity(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataByKey(self, __a0: long) -> ghidra.util.database.spatial.DBTreeDataRecord: ...

    def getUserIndex(self, __a0: java.lang.Class, __a1: ghidra.util.database.DBObjectColumn) -> ghidra.util.database.DBCachedObjectIndex: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

