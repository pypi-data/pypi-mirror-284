from typing import List
from typing import overload
import ghidra.util.database.spatial.hyper
import java.lang


class EuclideanHyperSpace(object):








    def boxArea(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def boxCenter(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> ghidra.util.database.spatial.hyper.HyperPoint: ...

    def boxContains(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperPoint) -> bool: ...

    def boxEncloses(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> bool: ...

    def boxIntersection(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> ghidra.util.database.spatial.hyper.HyperBox: ...

    def boxMargin(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def boxUnionBounds(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> ghidra.util.database.spatial.hyper.HyperBox: ...

    def boxesEqual(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> bool: ...

    def collectBounds(self, __a0: ghidra.util.database.spatial.hyper.HyperBox) -> List[object]: ...

    def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.hyper.HyperBox, __a1: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDimensions(self) -> List[object]: ...

    def getFull(self) -> ghidra.util.database.spatial.hyper.HyperBox: ...

    def hashCode(self) -> int: ...

    def measureIntersection(self, __a0: ghidra.util.database.spatial.hyper.Dimension, __a1: ghidra.util.database.spatial.hyper.HyperBox, __a2: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def measureUnion(self, __a0: ghidra.util.database.spatial.hyper.Dimension, __a1: ghidra.util.database.spatial.hyper.HyperBox, __a2: ghidra.util.database.spatial.hyper.HyperBox) -> float: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def sqDistance(self, __a0: ghidra.util.database.spatial.hyper.HyperPoint, __a1: ghidra.util.database.spatial.hyper.HyperPoint) -> float: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def dimensions(self) -> List[object]: ...

    @property
    def full(self) -> ghidra.util.database.spatial.hyper.HyperBox: ...