from typing import overload
import db.util
import ghidra.util.database
import java.io
import java.lang
import java.util.concurrent.locks


class DBCachedObjectStore(object, db.util.ErrorHandler):








    def asMap(self) -> ghidra.util.database.DBCachedObjectStoreMap: ...

    def contains(self, __a0: ghidra.util.database.DBAnnotatedObject) -> bool: ...

    def containsKey(self, __a0: long) -> bool: ...

    @overload
    def create(self) -> ghidra.util.database.DBAnnotatedObject: ...

    @overload
    def create(self, __a0: long) -> ghidra.util.database.DBAnnotatedObject: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def delete(self, __a0: ghidra.util.database.DBAnnotatedObject) -> bool: ...

    def deleteAll(self) -> None: ...

    def deleteKey(self, __a0: long) -> ghidra.util.database.DBAnnotatedObject: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getIndex(self, __a0: java.lang.Class, __a1: unicode) -> ghidra.util.database.DBCachedObjectIndex: ...

    @overload
    def getIndex(self, __a0: java.lang.Class, __a1: ghidra.util.database.DBObjectColumn) -> ghidra.util.database.DBCachedObjectIndex: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getMaxKey(self) -> long: ...

    def getObjectAt(self, __a0: long) -> ghidra.util.database.DBAnnotatedObject: ...

    def getRecordCount(self) -> int: ...

    def getTableName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readLock(self) -> java.util.concurrent.locks.Lock: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeLock(self) -> java.util.concurrent.locks.Lock: ...

    @property
    def lock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    @property
    def maxKey(self) -> long: ...

    @property
    def recordCount(self) -> int: ...

    @property
    def tableName(self) -> unicode: ...