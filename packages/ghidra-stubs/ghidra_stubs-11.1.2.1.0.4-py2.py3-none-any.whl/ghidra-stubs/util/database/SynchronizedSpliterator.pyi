from typing import overload
import java.lang
import java.util
import java.util.function


class SynchronizedSpliterator(object, java.util.Spliterator):
    CONCURRENT: int = 4096
    DISTINCT: int = 1
    IMMUTABLE: int = 1024
    NONNULL: int = 256
    ORDERED: int = 16
    SIZED: int = 64
    SORTED: int = 4
    SUBSIZED: int = 16384



    def __init__(self, __a0: java.util.Spliterator, __a1: object): ...



    def characteristics(self) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def estimateSize(self) -> long: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getComparator(self) -> java.util.Comparator: ...

    def getExactSizeIfKnown(self) -> long: ...

    def hasCharacteristics(self, __a0: int) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def tryAdvance(self, __a0: java.util.function.Consumer) -> bool: ...

    def trySplit(self) -> java.util.Spliterator: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def comparator(self) -> java.util.Comparator: ...

    @property
    def exactSizeIfKnown(self) -> long: ...