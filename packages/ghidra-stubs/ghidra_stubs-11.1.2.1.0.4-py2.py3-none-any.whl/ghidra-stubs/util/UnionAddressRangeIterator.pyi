from typing import Iterator
from typing import overload
import ghidra.program.model.address
import ghidra.util
import java.lang
import java.util
import java.util.function


class UnionAddressRangeIterator(ghidra.util.AbstractPeekableIterator, ghidra.program.model.address.AddressRangeIterator):




    @overload
    def __init__(self, __a0: java.util.Collection, __a1: bool): ...

    @overload
    def __init__(self, __a0: java.util.Iterator, __a1: bool): ...

    def __iter__(self) -> Iterator[object]: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> java.util.Iterator: ...

    def next(self) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def peek(self) -> object: ...

    def remove(self) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

