from typing import overload
import java.lang
import java.nio
import java.nio.channels
import java.util.concurrent


class DebugByteChannel(object, java.nio.channels.AsynchronousByteChannel):




    def __init__(self, __a0: java.nio.channels.AsynchronousByteChannel): ...



    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isOpen(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def read(self, __a0: java.nio.ByteBuffer) -> java.util.concurrent.Future: ...

    @overload
    def read(self, __a0: java.nio.ByteBuffer, __a1: object, __a2: java.nio.channels.CompletionHandler) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def write(self, __a0: java.nio.ByteBuffer) -> java.util.concurrent.Future: ...

    @overload
    def write(self, __a0: java.nio.ByteBuffer, __a1: object, __a2: java.nio.channels.CompletionHandler) -> None: ...

    @property
    def open(self) -> bool: ...