from typing import List
from typing import overload
import ghidra.features.bsim.query.client.tables
import ghidra.features.bsim.query.description
import java.lang
import java.sql


class DescriptionTable(ghidra.features.bsim.query.client.tables.SQLComplexTable):





    class DescriptionRow(object):
        addr: long
        flags: int
        func_name: unicode
        id_exe: long
        id_sig: long
        rowid: long



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.features.bsim.query.client.tables.ExeTable): ...



    def close(self) -> None: ...

    @staticmethod
    def convertDescriptionRow(__a0: ghidra.features.bsim.query.client.tables.DescriptionTable.DescriptionRow, __a1: ghidra.features.bsim.query.description.ExecutableRecord, __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: ghidra.features.bsim.query.description.SignatureRecord) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def convertDescriptionRows(self, __a0: List[object], __a1: List[object], __a2: ghidra.features.bsim.query.description.ExecutableRecord, __a3: ghidra.features.bsim.query.description.DescriptionManager, __a4: ghidra.features.bsim.query.description.SignatureRecord) -> None: ...

    def create(self, __a0: java.sql.Statement) -> None: ...

    def delete(self, __a0: long) -> int: ...

    def drop(self, __a0: java.sql.Statement) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def extractDescriptionRow(__a0: java.sql.ResultSet, __a1: ghidra.features.bsim.query.client.tables.DescriptionTable.DescriptionRow) -> None: ...

    def extractDescriptionRows(self, __a0: java.sql.ResultSet, __a1: int) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def insert(self, __a0: List[object]) -> long: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def queryFuncName(self, __a0: long, __a1: unicode, __a2: int) -> List[object]: ...

    def queryFuncNameAddr(self, __a0: long, __a1: unicode, __a2: long) -> ghidra.features.bsim.query.client.tables.DescriptionTable.DescriptionRow: ...

    def querySingleDescriptionId(self, __a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: long) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def queryVectorIdMatch(self, __a0: long, __a1: int) -> List[object]: ...

    def queryVectorIdMatchFilter(self, __a0: long, __a1: unicode, __a2: unicode, __a3: int) -> List[object]: ...

    def setConnection(self, __a0: java.sql.Connection) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

