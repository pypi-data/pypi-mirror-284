from typing import overload
import ghidra.features.bsim.query.client
import ghidra.features.bsim.query.description
import java.lang


class ExecutableScorer(object):





    class FunctionPair(object, java.lang.Comparable):




        def __init__(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: ghidra.features.bsim.query.description.FunctionDescription, __a2: float, __a3: float): ...



        @overload
        def compareTo(self, __a0: ghidra.features.bsim.query.client.ExecutableScorer.FunctionPair) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def commitSelfScore(self) -> None: ...

    def countSelfScores(self) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getExecutable(self, __a0: int) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    @overload
    def getExecutable(self, __a0: unicode) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    @overload
    def getNormalizedScore(self, __a0: int, __a1: bool) -> float: ...

    @overload
    def getNormalizedScore(self, __a0: int, __a1: int, __a2: bool) -> float: ...

    @overload
    def getScore(self, __a0: int) -> float: ...

    @overload
    def getScore(self, __a0: int, __a1: int) -> float: ...

    def getSelfScore(self, __a0: int) -> float: ...

    def getSigThreshold(self) -> float: ...

    def getSimThreshold(self) -> float: ...

    def getSingularExecutable(self) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def getSingularSelfScore(self) -> float: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numExecutables(self) -> int: ...

    def resetStorage(self, __a0: float, __a1: float) -> None: ...

    def setSingleExecutable(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def sigThreshold(self) -> float: ...

    @property
    def simThreshold(self) -> float: ...

    @property
    def singleExecutable(self) -> None: ...  # No getter available.

    @singleExecutable.setter
    def singleExecutable(self, value: unicode) -> None: ...

    @property
    def singularExecutable(self) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    @property
    def singularSelfScore(self) -> float: ...