from typing import List
from typing import overload
import ghidra.features.bsim.gui.filters
import ghidra.features.bsim.query
import ghidra.features.bsim.query.client
import ghidra.features.bsim.query.protocol
import java.lang


class SQLEffects(object):




    def __init__(self): ...



    def addFunctionFilter(self, __a0: int, __a1: bool) -> None: ...

    def addLink(self, __a0: unicode) -> None: ...

    def addWhere(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType, __a1: unicode) -> None: ...

    @staticmethod
    def createFilter(__a0: ghidra.features.bsim.query.protocol.BSimFilter, __a1: List[ghidra.features.bsim.query.client.IDSQLResolution], __a2: ghidra.features.bsim.query.SQLFunctionDatabase) -> ghidra.features.bsim.query.client.BSimSqlClause: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setExeTable(self) -> None: ...

    def setPathTable(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

