from typing import overload
import ghidra.features.bsim.query.client
import java.lang


class ExecutableComparison(object):





    class Count(object):
        value: int



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, __a0: ghidra.features.bsim.query.FunctionDatabase, __a1: int, __a2: ghidra.util.task.TaskMonitor): ...

    @overload
    def __init__(self, __a0: ghidra.features.bsim.query.FunctionDatabase, __a1: int, __a2: unicode, __a3: ghidra.features.bsim.query.client.ScoreCaching, __a4: ghidra.util.task.TaskMonitor): ...



    def addAllExecutables(self, __a0: int) -> None: ...

    def addExecutable(self, __a0: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fillinSelfScores(self) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getExceedCount(self) -> int: ...

    def getMaxHitCount(self) -> int: ...

    def getScorer(self) -> ghidra.features.bsim.query.client.ExecutableScorer: ...

    def hashCode(self) -> int: ...

    def isConfigured(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def performScoring(self) -> None: ...

    def resetThresholds(self, __a0: float, __a1: float) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def configured(self) -> bool: ...

    @property
    def exceedCount(self) -> int: ...

    @property
    def maxHitCount(self) -> int: ...

    @property
    def scorer(self) -> ghidra.features.bsim.query.client.ExecutableScorer: ...