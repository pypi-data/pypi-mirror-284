from typing import List
from typing import overload
import ghidra.features.bsim.query.client.tables
import ghidra.features.bsim.query.description
import java.lang
import java.sql
import java.util


class ExeTable(ghidra.features.bsim.query.client.tables.SQLComplexTable):
    TABLE_NAME: unicode = u'exetable'




    class ExecutableRow(object):
        arch_id: long
        compiler_id: long
        date_milli: long
        exename: unicode
        md5: unicode
        path_id: long
        repo_id: long
        rowid: long



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ExeTableOrderColumn(java.lang.Enum):
        MD5: ghidra.features.bsim.query.client.tables.ExeTable.ExeTableOrderColumn
        NAME: ghidra.features.bsim.query.client.tables.ExeTable.ExeTableOrderColumn







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.features.bsim.query.client.tables.ExeTable.ExeTableOrderColumn: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.features.bsim.query.client.tables.ExeTable.ExeTableOrderColumn]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.features.bsim.query.client.tables.SQLStringTable, __a1: ghidra.features.bsim.query.client.tables.SQLStringTable, __a2: ghidra.features.bsim.query.client.tables.SQLStringTable, __a3: ghidra.features.bsim.query.client.tables.SQLStringTable, __a4: ghidra.features.bsim.query.client.tables.ExeToCategoryTable): ...



    def close(self) -> None: ...

    def create(self, __a0: java.sql.Statement) -> None: ...

    def delete(self, __a0: long) -> int: ...

    def drop(self, __a0: java.sql.Statement) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def extractExecutableRows(self, __a0: java.sql.ResultSet, __a1: List[object], __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def insert(self, __a0: List[object]) -> long: ...

    def makeExecutableRecord(self, __a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: ghidra.features.bsim.query.client.tables.ExeTable.ExecutableRow) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def queryAllExe(self, __a0: int, __a1: unicode, __a2: unicode, __a3: long, __a4: long, __a5: ghidra.features.bsim.query.client.tables.ExeTable.ExeTableOrderColumn, __a6: bool) -> List[object]: ...

    def queryExeCount(self, __a0: unicode, __a1: unicode, __a2: long, __a3: long, __a4: bool) -> int: ...

    def queryMd5ExeMatch(self, __a0: unicode) -> ghidra.features.bsim.query.client.tables.ExeTable.ExecutableRow: ...

    def queryNameExeMatch(self, __a0: List[object], __a1: ghidra.features.bsim.query.description.DescriptionManager, __a2: unicode, __a3: int) -> int: ...

    def querySingleExecutable(self, __a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: unicode, __a2: unicode, __a3: unicode) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def querySingleExecutableId(self, __a0: long) -> ghidra.features.bsim.query.client.tables.ExeTable.ExecutableRow: ...

    def setConnection(self, __a0: java.sql.Connection) -> None: ...

    def toString(self) -> unicode: ...

    def updateExecutable(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord.Update) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

