from typing import List
from typing import overload
import java.lang
import java.util


class ScoreCaching(object):








    def commitSelfScore(self, __a0: unicode, __a1: float) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getSelfScore(self, __a0: unicode) -> float: ...

    def getSigThreshold(self) -> float: ...

    def getSimThreshold(self) -> float: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def prefetchScores(self, __a0: java.util.Set, __a1: List[object]) -> None: ...

    def resetStorage(self, __a0: float, __a1: float) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def sigThreshold(self) -> float: ...

    @property
    def simThreshold(self) -> float: ...