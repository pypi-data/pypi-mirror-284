from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.xml
import java.io
import java.lang


class Base64VectorFactory(generic.lsh.vector.WeightedLSHCosineVectorFactory):




    def __init__(self): ...



    @staticmethod
    def allocateBuffer() -> List[int]: ...

    def buildVector(self, __a0: List[int]) -> generic.lsh.vector.LSHVector: ...

    def buildZeroVector(self) -> generic.lsh.vector.LSHVector: ...

    def calculateSignificance(self, __a0: generic.lsh.vector.VectorCompare) -> float: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getSelfSignificance(self, __a0: generic.lsh.vector.LSHVector) -> float: ...

    def getSettings(self) -> int: ...

    def getSignificanceAddend(self) -> float: ...

    def getSignificanceScale(self) -> float: ...

    def hashCode(self) -> int: ...

    def isLoaded(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readWeights(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

    def restoreVectorFromBase64(self, __a0: java.io.Reader, __a1: List[int]) -> generic.lsh.vector.LSHVector: ...

    def restoreVectorFromSql(self, __a0: unicode) -> generic.lsh.vector.LSHVector: ...

    def restoreVectorFromXml(self, __a0: ghidra.xml.XmlPullParser) -> generic.lsh.vector.LSHVector: ...

    def set(self, __a0: generic.lsh.vector.WeightFactory, __a1: generic.lsh.vector.IDFLookup, __a2: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

