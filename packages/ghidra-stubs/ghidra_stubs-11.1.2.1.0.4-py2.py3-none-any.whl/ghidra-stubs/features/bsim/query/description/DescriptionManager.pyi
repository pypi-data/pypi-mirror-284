from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query.description
import ghidra.xml
import java.io
import java.lang
import java.util


class DescriptionManager(object):
    LAYOUT_VERSION: int = 5



    def __init__(self): ...



    def attachSignature(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: ghidra.features.bsim.query.description.SignatureRecord) -> None: ...

    def cacheExecutableByRow(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord, __a1: ghidra.features.bsim.query.description.RowKey) -> None: ...

    def clear(self) -> None: ...

    def clearFunctions(self) -> None: ...

    def containsDescription(self, __a0: unicode, __a1: long, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def findExecutable(self, __a0: unicode) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    @overload
    def findExecutable(self, __a0: unicode, __a1: unicode, __a2: unicode) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def findExecutableByRow(self, __a0: ghidra.features.bsim.query.description.RowKey) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def findFunction(self, __a0: unicode, __a1: long, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def findFunctionByName(self, __a0: unicode, __a1: ghidra.features.bsim.query.description.ExecutableRecord) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def generateExecutableXrefMap(self) -> java.util.Map: ...

    def generateFunctionIdMap(self, __a0: java.util.Map) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getExecutableRecordSet(self) -> java.util.TreeSet: ...

    def getMajorVersion(self) -> int: ...

    def getMinorVersion(self) -> int: ...

    def getSettings(self) -> int: ...

    def hashCode(self) -> int: ...

    def listAllFunctions(self) -> java.util.Iterator: ...

    def listFunctions(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> java.util.Iterator: ...

    def listFunctionsAfter(self, __a0: ghidra.features.bsim.query.description.FunctionDescription) -> java.util.Iterator: ...

    def makeCallgraphLink(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: ghidra.features.bsim.query.description.FunctionDescription, __a2: int) -> None: ...

    def matchAndSetXrefs(self, __a0: ghidra.features.bsim.query.description.DescriptionManager) -> None: ...

    def newExecutableLibrary(self, __a0: unicode, __a1: unicode, __a2: ghidra.features.bsim.query.description.RowKey) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def newExecutableRecord(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: java.util.Date, __a5: unicode, __a6: unicode, __a7: ghidra.features.bsim.query.description.RowKey) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def newFunctionDescription(self, __a0: unicode, __a1: long, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    @overload
    def newSignature(self, __a0: generic.lsh.vector.LSHVector, __a1: int) -> ghidra.features.bsim.query.description.SignatureRecord: ...

    @overload
    def newSignature(self, __a0: ghidra.xml.XmlPullParser, __a1: generic.lsh.vector.LSHVectorFactory, __a2: int) -> ghidra.features.bsim.query.description.SignatureRecord: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numExecutables(self) -> int: ...

    def numFunctions(self) -> int: ...

    def overrideRepository(self, __a0: unicode, __a1: unicode) -> None: ...

    def populateExecutableXref(self) -> None: ...

    def restoreXml(self, __a0: ghidra.xml.XmlPullParser, __a1: generic.lsh.vector.LSHVectorFactory) -> None: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def setExeAlreadyStored(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> None: ...

    def setExeCategories(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord, __a1: List[object]) -> None: ...

    def setExeRowId(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord, __a1: ghidra.features.bsim.query.description.RowKey) -> None: ...

    def setFunctionDescriptionFlags(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: int) -> None: ...

    def setFunctionDescriptionId(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: ghidra.features.bsim.query.description.RowKey) -> None: ...

    def setSettings(self, __a0: int) -> None: ...

    @overload
    def setSignatureId(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: long) -> None: ...

    @overload
    def setSignatureId(self, __a0: ghidra.features.bsim.query.description.SignatureRecord, __a1: long) -> None: ...

    def setVersion(self, __a0: int, __a1: int) -> None: ...

    def toString(self) -> unicode: ...

    def transferExecutable(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord) -> ghidra.features.bsim.query.description.ExecutableRecord: ...

    def transferFunction(self, __a0: ghidra.features.bsim.query.description.FunctionDescription, __a1: bool) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def transferSettings(self, __a0: ghidra.features.bsim.query.description.DescriptionManager) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def exeAlreadyStored(self) -> None: ...  # No getter available.

    @exeAlreadyStored.setter
    def exeAlreadyStored(self, value: ghidra.features.bsim.query.description.ExecutableRecord) -> None: ...

    @property
    def executableRecordSet(self) -> java.util.TreeSet: ...

    @property
    def majorVersion(self) -> int: ...

    @property
    def minorVersion(self) -> int: ...

    @property
    def settings(self) -> int: ...

    @settings.setter
    def settings(self, value: int) -> None: ...