from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query
import ghidra.features.bsim.query.client
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.protocol
import java.io
import java.lang


class SQLFunctionDatabase(ghidra.features.bsim.query.FunctionDatabase, object):








    def changePassword(self, __a0: unicode, __a1: List[int]) -> unicode: ...

    @staticmethod
    def checkSettingsForInsert(__a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: ghidra.features.bsim.query.description.DatabaseInformation) -> bool: ...

    @staticmethod
    def checkSettingsForQuery(__a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: ghidra.features.bsim.query.description.DatabaseInformation) -> None: ...

    def close(self) -> None: ...

    def compareLayout(self) -> int: ...

    @staticmethod
    def constructFatalError(__a0: int, __a1: ghidra.features.bsim.query.description.ExecutableRecord, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> unicode: ...

    @staticmethod
    def constructNonfatalError(__a0: int, __a1: ghidra.features.bsim.query.description.ExecutableRecord, __a2: ghidra.features.bsim.query.description.ExecutableRecord) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def formatBitAndSQL(self, __a0: unicode, __a1: unicode) -> unicode: ...

    @staticmethod
    def generateLSHVectorFactory() -> generic.lsh.vector.WeightedLSHCosineVectorFactory: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getConfigurationTemplates() -> List[object]: ...

    def getConnectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    def getInfo(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    def getLSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    def getLastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    def getOverviewFunctionsPerStage(self) -> int: ...

    def getQueriedFunctionsPerStage(self) -> int: ...

    def getServerInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    def getStatus(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    def getURLString(self) -> unicode: ...

    def getUserName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def initialize(self) -> bool: ...

    @staticmethod
    def isConfigTemplate(__a0: java.io.File) -> bool: ...

    def isPasswordChangeAllowed(self) -> bool: ...

    @staticmethod
    def loadConfigurationTemplate(__a0: unicode) -> ghidra.features.bsim.query.client.Configuration: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def query(self, __a0: ghidra.features.bsim.query.protocol.BSimQuery) -> ghidra.features.bsim.query.protocol.QueryResponseRecord: ...

    def setUserName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def LSHVectorFactory(self) -> generic.lsh.vector.LSHVectorFactory: ...

    @property
    def URLString(self) -> unicode: ...

    @property
    def connectionType(self) -> ghidra.features.bsim.query.FunctionDatabase.ConnectionType: ...

    @property
    def info(self) -> ghidra.features.bsim.query.description.DatabaseInformation: ...

    @property
    def lastError(self) -> ghidra.features.bsim.query.FunctionDatabase.Error: ...

    @property
    def overviewFunctionsPerStage(self) -> int: ...

    @property
    def passwordChangeAllowed(self) -> bool: ...

    @property
    def queriedFunctionsPerStage(self) -> int: ...

    @property
    def serverInfo(self) -> ghidra.features.bsim.query.BSimServerInfo: ...

    @property
    def status(self) -> ghidra.features.bsim.query.FunctionDatabase.Status: ...

    @property
    def userName(self) -> unicode: ...

    @userName.setter
    def userName(self, value: unicode) -> None: ...