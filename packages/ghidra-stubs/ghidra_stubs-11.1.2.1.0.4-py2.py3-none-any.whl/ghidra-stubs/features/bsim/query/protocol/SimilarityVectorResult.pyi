from typing import List
from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.query.description
import ghidra.xml
import java.io
import java.lang
import java.util


class SimilarityVectorResult(object):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.features.bsim.query.description.FunctionDescription): ...



    def addNotes(self, __a0: List[object]) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBase(self) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    def getClass(self) -> java.lang.Class: ...

    def getTotalCount(self) -> int: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> java.util.Iterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def restoreXml(self, __a0: ghidra.xml.XmlPullParser, __a1: generic.lsh.vector.LSHVectorFactory, __a2: ghidra.features.bsim.query.description.DescriptionManager, __a3: java.util.Map) -> None: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def sortNotes(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def base(self) -> ghidra.features.bsim.query.description.FunctionDescription: ...

    @property
    def totalCount(self) -> int: ...