from typing import List
from typing import overload
import generic.jar
import generic.lsh.vector
import ghidra.features.bsim.query
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.protocol
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.util.task
import java.lang
import java.util


class GenSignatures(object):





    class SignatureTask(object, ghidra.features.bsim.query.DecompileFunctionTask):




        def __init__(self, __a0: ghidra.features.bsim.query.GenSignatures): ...



        def clone(self, __a0: int) -> ghidra.features.bsim.query.DecompileFunctionTask: ...

        def decompile(self, __a0: ghidra.program.model.listing.Function, __a1: ghidra.util.task.TaskMonitor) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def initializeGlobal(self, __a0: ghidra.program.model.listing.Program) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def shutdown(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: bool): ...



    def addDateColumnName(self, __a0: unicode) -> None: ...

    def addExecutableCategories(self, __a0: List[object]) -> None: ...

    def addFunctionTags(self, __a0: List[object]) -> None: ...

    def clear(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescriptionManager(self) -> ghidra.features.bsim.query.description.DescriptionManager: ...

    @staticmethod
    def getPathFromDomainFile(__a0: ghidra.program.model.listing.Program) -> unicode: ...

    @staticmethod
    def getWeightsFile(__a0: ghidra.program.model.lang.LanguageID, __a1: ghidra.program.model.lang.LanguageID) -> generic.jar.ResourceFile: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openProgram(self, __a0: ghidra.program.model.listing.Program, __a1: unicode, __a2: unicode, __a3: unicode, __a4: unicode, __a5: unicode) -> None: ...

    def scanFunction(self, __a0: ghidra.program.model.listing.Function) -> None: ...

    def scanFunctions(self, __a0: java.util.Iterator, __a1: int, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def scanFunctionsMetadata(self, __a0: java.util.Iterator, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setVectorFactory(self, __a0: generic.lsh.vector.LSHVectorFactory) -> None: ...

    def toString(self) -> unicode: ...

    def transferCachedFunctions(self, __a0: ghidra.features.bsim.query.description.DescriptionManager, __a1: java.util.Iterator, __a2: ghidra.features.bsim.query.protocol.PreFilter) -> int: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def descriptionManager(self) -> ghidra.features.bsim.query.description.DescriptionManager: ...

    @property
    def vectorFactory(self) -> None: ...  # No getter available.

    @vectorFactory.setter
    def vectorFactory(self, value: generic.lsh.vector.LSHVectorFactory) -> None: ...