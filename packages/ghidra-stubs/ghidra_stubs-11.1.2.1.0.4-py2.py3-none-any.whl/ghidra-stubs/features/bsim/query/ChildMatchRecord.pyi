from typing import overload
import generic.lsh.vector
import ghidra.features.bsim.gui.search.results
import ghidra.features.bsim.query
import java.lang


class ChildMatchRecord(object, java.lang.Comparable):




    def __init__(self, __a0: ghidra.features.bsim.gui.search.results.BSimMatchResult, __a1: generic.lsh.vector.LSHVector): ...



    @overload
    def compareTo(self, __a0: ghidra.features.bsim.query.ChildMatchRecord) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getSignificanceWithChildren(self) -> float: ...

    def getSimilarFunction(self) -> ghidra.features.bsim.gui.search.results.BSimMatchResult: ...

    def getSimilarityWithChildren(self) -> float: ...

    def getVecWithChildren(self) -> generic.lsh.vector.LSHVector: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSignificanceWithChildren(self, __a0: float) -> None: ...

    def setSimilarityWithChildren(self, __a0: float) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def significanceWithChildren(self) -> float: ...

    @significanceWithChildren.setter
    def significanceWithChildren(self, value: float) -> None: ...

    @property
    def similarFunction(self) -> ghidra.features.bsim.gui.search.results.BSimMatchResult: ...

    @property
    def similarityWithChildren(self) -> float: ...

    @similarityWithChildren.setter
    def similarityWithChildren(self, value: float) -> None: ...

    @property
    def vecWithChildren(self) -> generic.lsh.vector.LSHVector: ...