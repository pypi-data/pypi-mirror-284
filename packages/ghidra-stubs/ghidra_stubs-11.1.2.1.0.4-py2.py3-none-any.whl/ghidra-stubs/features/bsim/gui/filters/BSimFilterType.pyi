from typing import List
from typing import overload
import ghidra.features.bsim.gui.filters
import ghidra.features.bsim.query.client
import ghidra.features.bsim.query.description
import ghidra.features.bsim.query.elastic
import ghidra.features.bsim.query.protocol
import ghidra.xml
import java.io
import java.lang
import utility.function


class BSimFilterType(object, java.lang.Comparable):
    BLANK: ghidra.features.bsim.gui.filters.BSimFilterType



    def __init__(self, __a0: unicode, __a1: unicode, __a2: unicode): ...



    def buildElasticCombinedClause(self, __a0: List[object]) -> unicode: ...

    def buildSQLCombinedClause(self, __a0: List[object]) -> unicode: ...

    @overload
    def compareTo(self, __a0: ghidra.features.bsim.gui.filters.BSimFilterType) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def evaluate(self, __a0: ghidra.features.bsim.query.description.ExecutableRecord, __a1: unicode) -> bool: ...

    def gatherElasticEffect(self, __a0: ghidra.features.bsim.query.elastic.ElasticEffects, __a1: ghidra.features.bsim.query.protocol.FilterAtom, __a2: ghidra.features.bsim.query.elastic.IDElasticResolution) -> None: ...

    def gatherSQLEffect(self, __a0: ghidra.features.bsim.query.client.SQLEffects, __a1: ghidra.features.bsim.query.protocol.FilterAtom, __a2: ghidra.features.bsim.query.client.IDSQLResolution) -> None: ...

    @staticmethod
    def generateBsimFilters(__a0: ghidra.features.bsim.query.description.DatabaseInformation, __a1: bool) -> List[object]: ...

    def generateIDElasticResolution(self, __a0: ghidra.features.bsim.query.protocol.FilterAtom) -> ghidra.features.bsim.query.elastic.IDElasticResolution: ...

    def generateIDSQLResolution(self, __a0: ghidra.features.bsim.query.protocol.FilterAtom) -> ghidra.features.bsim.query.client.IDSQLResolution: ...

    @staticmethod
    def getBaseFilters() -> List[object]: ...

    @staticmethod
    def getBlank() -> ghidra.features.bsim.gui.filters.BSimFilterType: ...

    def getClass(self) -> java.lang.Class: ...

    def getEditor(self, __a0: List[object], __a1: utility.function.Callback) -> ghidra.features.bsim.gui.filters.BSimValueEditor: ...

    def getHint(self) -> unicode: ...

    def getLabel(self) -> unicode: ...

    def getXmlValue(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isBlank(self) -> bool: ...

    def isChildFilter(self) -> bool: ...

    def isLocal(self) -> bool: ...

    def isMultipleEntryAllowed(self) -> bool: ...

    def isValidValue(self, __a0: unicode) -> bool: ...

    @staticmethod
    def nameToType(__a0: ghidra.xml.XmlElement) -> ghidra.features.bsim.gui.filters.BSimFilterType: ...

    def normalizeValue(self, __a0: unicode) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def orMultipleEntries(self) -> bool: ...

    def saveXml(self, __a0: java.io.Writer) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def blank(self) -> bool: ...

    @property
    def childFilter(self) -> bool: ...

    @property
    def hint(self) -> unicode: ...

    @property
    def label(self) -> unicode: ...

    @property
    def local(self) -> bool: ...

    @property
    def multipleEntryAllowed(self) -> bool: ...

    @property
    def xmlValue(self) -> unicode: ...