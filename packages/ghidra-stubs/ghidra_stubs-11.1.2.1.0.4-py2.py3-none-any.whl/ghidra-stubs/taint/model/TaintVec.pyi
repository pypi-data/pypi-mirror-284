from typing import List
from typing import overload
import ghidra.taint.model
import java.lang
import java.util


class TaintVec(object):
    length: int




    class ShiftMode(java.lang.Enum):
        CIRCULAR: ghidra.taint.model.TaintVec.ShiftMode
        REMAINDER: ghidra.taint.model.TaintVec.ShiftMode
        UNBOUNDED: ghidra.taint.model.TaintVec.ShiftMode







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.taint.model.TaintVec.ShiftMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.taint.model.TaintVec.ShiftMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: int): ...



    @staticmethod
    def array(__a0: unicode, __a1: long, __a2: int) -> ghidra.taint.model.TaintVec: ...

    @staticmethod
    def copies(__a0: ghidra.taint.model.TaintSet, __a1: int) -> ghidra.taint.model.TaintVec: ...

    def copy(self) -> ghidra.taint.model.TaintVec: ...

    def eachUnion(self, __a0: ghidra.taint.model.TaintSet) -> ghidra.taint.model.TaintVec: ...

    @staticmethod
    def empties(__a0: int) -> ghidra.taint.model.TaintVec: ...

    def equals(self, __a0: object) -> bool: ...

    def extended(self, __a0: int, __a1: bool, __a2: bool) -> ghidra.taint.model.TaintVec: ...

    def get(self, __a0: int) -> ghidra.taint.model.TaintSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getSets(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def set(self, __a0: int, __a1: ghidra.taint.model.TaintSet) -> None: ...

    @overload
    def set(self, __a0: int, __a1: ghidra.taint.model.TaintVec) -> ghidra.taint.model.TaintVec: ...

    def setArray(self, __a0: unicode, __a1: long) -> ghidra.taint.model.TaintVec: ...

    def setBlur(self, __a0: bool) -> ghidra.taint.model.TaintVec: ...

    def setCascade(self, __a0: bool) -> ghidra.taint.model.TaintVec: ...

    def setCopies(self, __a0: ghidra.taint.model.TaintSet) -> ghidra.taint.model.TaintVec: ...

    def setEmpties(self) -> ghidra.taint.model.TaintVec: ...

    def setShifted(self, __a0: int, __a1: ghidra.taint.model.TaintVec.ShiftMode) -> ghidra.taint.model.TaintVec: ...

    def tagIndirectRead(self, __a0: ghidra.taint.model.TaintVec) -> ghidra.taint.model.TaintVec: ...

    def tagIndirectWrite(self, __a0: ghidra.taint.model.TaintVec) -> ghidra.taint.model.TaintVec: ...

    def toDisplay(self) -> unicode: ...

    def toString(self) -> unicode: ...

    def truncated(self, __a0: int, __a1: bool) -> ghidra.taint.model.TaintVec: ...

    def union(self) -> ghidra.taint.model.TaintSet: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def zipUnion(self, __a0: ghidra.taint.model.TaintVec) -> ghidra.taint.model.TaintVec: ...

    @property
    def blur(self) -> None: ...  # No getter available.

    @blur.setter
    def blur(self, value: bool) -> None: ...

    @property
    def cascade(self) -> None: ...  # No getter available.

    @cascade.setter
    def cascade(self, value: bool) -> None: ...

    @property
    def sets(self) -> List[object]: ...