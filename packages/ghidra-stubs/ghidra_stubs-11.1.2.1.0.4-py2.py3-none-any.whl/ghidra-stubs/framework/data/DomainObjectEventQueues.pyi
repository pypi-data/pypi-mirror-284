from typing import overload
import ghidra.framework.model
import java.lang


class DomainObjectEventQueues(object):




    def __init__(self, __a0: ghidra.framework.model.DomainObject, __a1: int, __a2: ghidra.util.Lock): ...



    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def equals(self, __a0: object) -> bool: ...

    def fireEvent(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> None: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isSendingEvents(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def sendingEvents(self) -> bool: ...