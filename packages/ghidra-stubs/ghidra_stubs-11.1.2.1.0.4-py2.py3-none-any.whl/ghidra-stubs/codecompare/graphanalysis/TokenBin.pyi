from typing import Iterator
from typing import List
from typing import overload
import ghidra.app.decompiler
import ghidra.codecompare.graphanalysis
import ghidra.program.model.pcode
import java.lang
import java.util
import java.util.function


class TokenBin(object, java.lang.Iterable):






    def __iter__(self): ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def get(self, __a0: int) -> ghidra.app.decompiler.ClangToken: ...

    @staticmethod
    def getBinContainingToken(__a0: List[object], __a1: ghidra.app.decompiler.ClangToken) -> ghidra.codecompare.graphanalysis.TokenBin: ...

    def getClass(self) -> java.lang.Class: ...

    def getHighFunction(self) -> ghidra.program.model.pcode.HighFunction: ...

    def getMatch(self) -> ghidra.codecompare.graphanalysis.TokenBin: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> java.util.Iterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def size(self) -> int: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def highFunction(self) -> ghidra.program.model.pcode.HighFunction: ...

    @property
    def match(self) -> ghidra.codecompare.graphanalysis.TokenBin: ...