from typing import overload
import ghidra.dbg
import java.lang


class DebuggerModelClosedReason(object):
    NORMAL: ghidra.dbg.DebuggerModelClosedReason







    @staticmethod
    def abnormal(__a0: java.lang.Throwable) -> ghidra.dbg.DebuggerModelClosedReason: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getException(self) -> java.lang.Throwable: ...

    def hasException(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isClientInitiated(self) -> bool: ...

    @staticmethod
    def normal() -> ghidra.dbg.DebuggerModelClosedReason: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def clientInitiated(self) -> bool: ...

    @property
    def exception(self) -> java.lang.Throwable: ...