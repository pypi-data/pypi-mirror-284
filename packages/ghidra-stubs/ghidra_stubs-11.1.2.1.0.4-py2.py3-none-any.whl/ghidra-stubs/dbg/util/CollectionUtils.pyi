from typing import Iterator
from typing import List
from typing import overload
import ghidra.dbg.util
import java.lang
import java.util
import java.util.function
import java.util.stream


class CollectionUtils(java.lang.Enum):





    class AbstractImmutableList(java.util.AbstractList):




        def __init__(self): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> List[object]: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> List[object]: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractEmptySet(ghidra.dbg.util.CollectionUtils.AbstractImmutableSet):




        def __init__(self): ...

        def __iter__(self): ...

        def add(self, __a0: object) -> bool: ...

        def addAll(self, __a0: java.util.Collection) -> bool: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Set: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractEmptyMap(java.util.AbstractMap):




        def __init__(self): ...

        def __iter__(self): ...

        def clear(self) -> None: ...

        def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

        def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def containsKey(self, __a0: object) -> bool: ...

        def containsValue(self, __a0: object) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Map) -> java.util.Map: ...

        @staticmethod
        def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

        def entrySet(self) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getOrDefault(self, __a0: object, __a1: object) -> object: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def keySet(self) -> java.util.Set: ...

        def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object, __a18: object, __a19: object) -> java.util.Map: ...

        @staticmethod
        def ofEntries(__a0: List[java.util.Map.Entry]) -> java.util.Map: ...

        def put(self, __a0: object, __a1: object) -> object: ...

        def putAll(self, __a0: java.util.Map) -> None: ...

        def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

        @overload
        def remove(self, __a0: object) -> object: ...

        @overload
        def remove(self, __a0: object, __a1: object) -> bool: ...

        @overload
        def replace(self, __a0: object, __a1: object) -> object: ...

        @overload
        def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

        def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

        def size(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractImmutableMap(java.util.AbstractMap):




        def __init__(self): ...

        def __iter__(self): ...

        def clear(self) -> None: ...

        def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

        def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def containsKey(self, __a0: object) -> bool: ...

        def containsValue(self, __a0: object) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Map) -> java.util.Map: ...

        @staticmethod
        def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

        def entrySet(self) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getOrDefault(self, __a0: object, __a1: object) -> object: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def keySet(self) -> java.util.Set: ...

        def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object, __a18: object, __a19: object) -> java.util.Map: ...

        @staticmethod
        def ofEntries(__a0: List[java.util.Map.Entry]) -> java.util.Map: ...

        def put(self, __a0: object, __a1: object) -> object: ...

        def putAll(self, __a0: java.util.Map) -> None: ...

        def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

        @overload
        def remove(self, __a0: object) -> object: ...

        @overload
        def remove(self, __a0: object, __a1: object) -> bool: ...

        @overload
        def replace(self, __a0: object, __a1: object) -> object: ...

        @overload
        def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

        def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

        def size(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractImmutableSet(java.util.AbstractSet):




        def __init__(self): ...

        def __iter__(self): ...

        def add(self, __a0: object) -> bool: ...

        def addAll(self, __a0: java.util.Collection) -> bool: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Set: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractNMap(ghidra.dbg.util.CollectionUtils.AbstractImmutableMap):




        def __init__(self, __a0: java.util.Map): ...

        def __iter__(self): ...

        def clear(self) -> None: ...

        def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

        def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def containsKey(self, __a0: object) -> bool: ...

        def containsValue(self, __a0: object) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Map) -> java.util.Map: ...

        @staticmethod
        def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

        def entrySet(self) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getOrDefault(self, __a0: object, __a1: object) -> object: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def keySet(self) -> java.util.Set: ...

        def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object) -> java.util.Map: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object, __a18: object, __a19: object) -> java.util.Map: ...

        @staticmethod
        def ofEntries(__a0: List[java.util.Map.Entry]) -> java.util.Map: ...

        def put(self, __a0: object, __a1: object) -> object: ...

        def putAll(self, __a0: java.util.Map) -> None: ...

        def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

        @overload
        def remove(self, __a0: object) -> object: ...

        @overload
        def remove(self, __a0: object, __a1: object) -> bool: ...

        @overload
        def replace(self, __a0: object, __a1: object) -> object: ...

        @overload
        def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

        def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

        def size(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractNSet(ghidra.dbg.util.CollectionUtils.AbstractImmutableSet):




        @overload
        def __init__(self, __a0: List[object]): ...

        @overload
        def __init__(self, __a0: java.util.Collection): ...

        def __iter__(self): ...

        def add(self, __a0: object) -> bool: ...

        def addAll(self, __a0: java.util.Collection) -> bool: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> java.util.Set: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Set: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractEmptyList(java.util.AbstractList):




        def __init__(self): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> List[object]: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> List[object]: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Delta(object):
        EMPTY: ghidra.dbg.util.CollectionUtils.Delta
        EQUAL: java.util.function.BiPredicate
        SAME: java.util.function.BiPredicate
        added: java.util.Map
        removed: java.util.Map







        @overload
        def apply(self, __a0: java.util.Map) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def apply(self, __a0: java.util.Map, __a1: java.util.function.BiPredicate) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        @staticmethod
        def apply(__a0: java.util.Map, __a1: java.util.Collection, __a2: java.util.Map, __a3: java.util.function.BiPredicate) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def applyToKeys(self, __a0: java.util.Set) -> None: ...

        @overload
        @staticmethod
        def applyToKeys(__a0: java.util.Set, __a1: java.util.Collection, __a2: java.util.Map) -> None: ...

        @staticmethod
        def computeAndSet(__a0: java.util.Map, __a1: java.util.Map, __a2: java.util.function.BiPredicate) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        @staticmethod
        def create(__a0: java.util.Collection, __a1: java.util.Map) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        @staticmethod
        def create(__a0: java.util.Map, __a1: java.util.Map) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @staticmethod
        def empty() -> ghidra.dbg.util.CollectionUtils.Delta: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getKeysRemoved(self) -> java.util.Set: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def keysRemoved(self) -> java.util.Set: ...




    class AbstractNList(ghidra.dbg.util.CollectionUtils.AbstractImmutableList):




        @overload
        def __init__(self, __a0: List[object]): ...

        @overload
        def __init__(self, __a0: java.util.Collection): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def addFirst(self, __a0: object) -> None: ...

        def addLast(self, __a0: object) -> None: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> List[object]: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getFirst(self) -> object: ...

        def getLast(self) -> object: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> List[object]: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeFirst(self) -> object: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def removeLast(self) -> object: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def reversed(self) -> java.util.SequencedCollection: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def getAllExisting(__a0: java.util.Map, __a1: java.util.Collection) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.dbg.util.CollectionUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.dbg.util.CollectionUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

