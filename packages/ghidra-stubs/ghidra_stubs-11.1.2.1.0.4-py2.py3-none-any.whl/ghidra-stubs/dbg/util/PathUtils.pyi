from typing import List
from typing import overload
import ghidra.dbg.util
import java.lang
import java.util
import java.util.function


class PathUtils(java.lang.Enum):





    class TargetObjectKeyComparator(java.lang.Enum, java.util.Comparator):
        ATTRIBUTE: ghidra.dbg.util.PathUtils.TargetObjectKeyComparator
        CHILD: ghidra.dbg.util.PathUtils.TargetObjectKeyComparator
        ELEMENT: ghidra.dbg.util.PathUtils.TargetObjectKeyComparator
        ELEMENT_DIM: ghidra.dbg.util.PathUtils.TargetObjectKeyComparator







        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        def ordinal(self) -> int: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.dbg.util.PathUtils.TargetObjectKeyComparator: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.dbg.util.PathUtils.TargetObjectKeyComparator]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class PathComparator(java.lang.Enum, java.util.Comparator):
        KEYED: ghidra.dbg.util.PathUtils.PathComparator
        LONGEST_FIRST: ghidra.dbg.util.PathUtils.PathComparator







        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        def ordinal(self) -> int: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.dbg.util.PathUtils.PathComparator: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.dbg.util.PathUtils.PathComparator]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    @staticmethod
    def extend(__a0: List[object], __a1: unicode) -> List[object]: ...

    @overload
    @staticmethod
    def extend(__a0: List[object], __a1: List[object]) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    @staticmethod
    def getIndex(__a0: List[object]) -> unicode: ...

    @staticmethod
    def getKey(__a0: List[object]) -> unicode: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def index(__a0: List[object], __a1: unicode) -> List[object]: ...

    @staticmethod
    def isAncestor(__a0: List[object], __a1: List[object]) -> bool: ...

    @staticmethod
    def isElementLink(__a0: List[object], __a1: unicode, __a2: List[object]) -> bool: ...

    @staticmethod
    def isHidden(__a0: unicode) -> bool: ...

    @overload
    @staticmethod
    def isIndex(__a0: unicode) -> bool: ...

    @overload
    @staticmethod
    def isIndex(__a0: List[object]) -> bool: ...

    @staticmethod
    def isInvocation(__a0: unicode) -> bool: ...

    @staticmethod
    def isLink(__a0: List[object], __a1: unicode, __a2: List[object]) -> bool: ...

    @overload
    @staticmethod
    def isName(__a0: unicode) -> bool: ...

    @overload
    @staticmethod
    def isName(__a0: List[object]) -> bool: ...

    @overload
    @staticmethod
    def makeIndex(__a0: long) -> unicode: ...

    @overload
    @staticmethod
    def makeIndex(__a0: int) -> unicode: ...

    @staticmethod
    def makeKey(__a0: unicode) -> unicode: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    @staticmethod
    def parent(__a0: List[object]) -> List[object]: ...

    @overload
    @staticmethod
    def parse(__a0: unicode) -> List[object]: ...

    @overload
    @staticmethod
    def parse(__a0: unicode, __a1: unicode) -> List[object]: ...

    @staticmethod
    def parseIndex(__a0: unicode) -> unicode: ...

    @staticmethod
    def parseInvocation(__a0: unicode) -> java.util.Map.Entry: ...

    @staticmethod
    def relativize(__a0: List[object], __a1: List[object]) -> List[object]: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def toString(__a0: List[object]) -> unicode: ...

    @overload
    @staticmethod
    def toString(__a0: List[object], __a1: unicode) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.dbg.util.PathUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.dbg.util.PathUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

