from typing import List
from typing import overload
import ghidra.dbg
import ghidra.dbg.target
import java.lang
import java.util.concurrent


class TargetObjectPath(object, java.lang.Comparable):




    def __init__(self, __a0: ghidra.dbg.DebuggerObjectModel, __a1: List[object]): ...



    @overload
    def compareTo(self, __a0: ghidra.dbg.target.TargetObjectPath) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def fetch(self) -> java.util.concurrent.CompletableFuture: ...

    def getClass(self) -> java.lang.Class: ...

    def getKeyList(self) -> List[object]: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def hashCode(self) -> int: ...

    def index(self) -> unicode: ...

    def isRoot(self) -> bool: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parent(self) -> ghidra.dbg.target.TargetObjectPath: ...

    @overload
    def successor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObjectPath: ...

    @overload
    def successor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObjectPath: ...

    def toPathString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def keyList(self) -> List[object]: ...

    @property
    def model(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def root(self) -> bool: ...