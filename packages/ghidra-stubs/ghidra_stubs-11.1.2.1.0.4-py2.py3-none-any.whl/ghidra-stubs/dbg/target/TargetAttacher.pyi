from typing import Iterator
from typing import List
from typing import overload
import ghidra.dbg
import ghidra.dbg.target
import ghidra.dbg.target.schema
import java.lang
import java.util
import java.util.concurrent
import java.util.function
import java.util.stream


class TargetAttacher(ghidra.dbg.target.TargetObject, object):
    ALL_INTERFACES: java.util.Set
    DISPLAY_ATTRIBUTE_NAME: unicode = u'_display'
    INTERFACES_BY_NAME: java.util.Map
    KIND_ATTRIBUTE_NAME: unicode = u'_kind'
    MODIFIED_ATTRIBUTE_NAME: unicode = u'_modified'
    ORDER_ATTRIBUTE_NAME: unicode = u'_order'
    PREFIX_INVISIBLE: unicode = u'_'
    SHORT_DISPLAY_ATTRIBUTE_NAME: unicode = u'_short_display'
    SUPPORTED_ATTACH_KINDS_ATTRIBUTE_NAME: unicode = u'_supported_attach_kinds'
    TYPE_ATTRIBUTE_NAME: unicode = u'_type'
    VALUE_ATTRIBUTE_NAME: unicode = u'_value'




    class TargetAttachKindSet(java.util.Set, object):
        EMPTY: ghidra.dbg.target.TargetAttacher.TargetAttachKindSet





        def __iter__(self): ...

        def add(self, __a0: object) -> bool: ...

        def addAll(self, __a0: java.util.Collection) -> bool: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Set) -> ghidra.dbg.target.TargetAttacher.TargetAttachKindSet: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> ghidra.dbg.target.TargetAttacher.TargetAttachKindSet: ...

        @overload
        @staticmethod
        def of(__a0: List[ghidra.dbg.target.TargetAttacher.TargetAttachKind]) -> ghidra.dbg.target.TargetAttacher.TargetAttachKindSet: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...




    class TargetAttachKind(java.lang.Enum):
        BY_ID: ghidra.dbg.target.TargetAttacher.TargetAttachKind
        BY_OBJECT_REF: ghidra.dbg.target.TargetAttacher.TargetAttachKind







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.dbg.target.TargetAttacher.TargetAttachKind: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.dbg.target.TargetAttacher.TargetAttachKind]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def as(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def attach(self, __a0: long) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def attach(self, __a0: ghidra.dbg.target.TargetAttachable) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def compareTo(self, __a0: ghidra.dbg.target.TargetObject) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeHashCode(self) -> int: ...

    def doEquals(self, __a0: object) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def fetchAttribute(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChild(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChildrenSupporting(self, __a0: java.lang.Class) -> java.util.concurrent.CompletableFuture: ...

    def fetchElement(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    def getCachedAttribute(self, __a0: unicode) -> object: ...

    def getCachedAttributes(self) -> java.util.Map: ...

    def getCachedElements(self) -> java.util.Map: ...

    def getCachedSuitable(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def getCallbackAttributes(self) -> java.util.Map: ...

    def getCallbackElements(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisplay(self) -> unicode: ...

    def getIndex(self) -> unicode: ...

    def getInterfaceNames(self) -> java.util.Collection: ...

    def getInterfaces(self) -> java.util.Collection: ...

    @staticmethod
    def getInterfacesByName(__a0: java.util.Collection) -> List[object]: ...

    def getJoinedPath(self, __a0: unicode) -> unicode: ...

    def getKind(self) -> unicode: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getName(self) -> unicode: ...

    def getOrder(self) -> int: ...

    def getParent(self) -> ghidra.dbg.target.TargetObject: ...

    def getPath(self) -> List[object]: ...

    def getProtocolID(self) -> object: ...

    def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getShortDisplay(self) -> unicode: ...

    @overload
    def getSuccessor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def getSuccessor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObject: ...

    def getSupportedAttachKinds(self) -> ghidra.dbg.target.TargetAttacher.TargetAttachKindSet: ...

    def getType(self) -> unicode: ...

    def getTypeHint(self) -> unicode: ...

    def getTypedAttributeNowByName(self, __a0: unicode, __a1: java.lang.Class, __a2: object) -> object: ...

    def getValue(self) -> object: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def initInterfacesByName() -> java.util.Map: ...

    def invalidateCaches(self) -> java.util.concurrent.CompletableFuture: ...

    def isModified(self) -> bool: ...

    def isRoot(self) -> bool: ...

    def isValid(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def resync(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def resync(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior, __a1: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def cachedAttributes(self) -> java.util.Map: ...

    @property
    def cachedElements(self) -> java.util.Map: ...

    @property
    def callbackAttributes(self) -> java.util.Map: ...

    @property
    def callbackElements(self) -> java.util.Map: ...

    @property
    def display(self) -> unicode: ...

    @property
    def index(self) -> unicode: ...

    @property
    def interfaceNames(self) -> java.util.Collection: ...

    @property
    def interfaces(self) -> java.util.Collection: ...

    @property
    def kind(self) -> unicode: ...

    @property
    def model(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def name(self) -> unicode: ...

    @property
    def order(self) -> int: ...

    @property
    def parent(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def path(self) -> List[object]: ...

    @property
    def protocolID(self) -> object: ...

    @property
    def root(self) -> bool: ...

    @property
    def schema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def shortDisplay(self) -> unicode: ...

    @property
    def supportedAttachKinds(self) -> ghidra.dbg.target.TargetAttacher.TargetAttachKindSet: ...

    @property
    def type(self) -> unicode: ...

    @property
    def typeHint(self) -> unicode: ...

    @property
    def valid(self) -> bool: ...

    @property
    def value(self) -> object: ...