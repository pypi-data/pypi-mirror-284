from typing import overload
import ghidra.dbg.target.schema
import java.lang
import java.util


class SchemaBuilder(object):




    @overload
    def __init__(self, __a0: ghidra.dbg.target.schema.DefaultSchemaContext, __a1: ghidra.dbg.target.schema.TargetObjectSchema): ...

    @overload
    def __init__(self, __a0: ghidra.dbg.target.schema.DefaultSchemaContext, __a1: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName): ...



    def addAttributeAlias(self, __a0: unicode, __a1: unicode, __a2: object) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def addAttributeSchema(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema, __a1: object) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def addElementSchema(self, __a0: unicode, __a1: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName, __a2: object) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def addInterface(self, __a0: java.lang.Class) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def build(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def buildAndAdd(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def equals(self, __a0: object) -> bool: ...

    def getAttributeResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    def getAttributeSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    def getAttributeSchemas(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultAttributeSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    def getDefaultElementSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    def getElementResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    def getElementSchemas(self) -> java.util.Map: ...

    def getInterfaces(self) -> java.util.Set: ...

    def getType(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isCanonicalContaineration(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeAttributeSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def removeElementSchema(self, __a0: unicode) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def removeInterface(self, __a0: java.lang.Class) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def replaceAttributeAlias(self, __a0: unicode, __a1: unicode, __a2: object) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def replaceAttributeSchema(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema, __a1: object) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setAttributeResyncMode(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setCanonicalContainer(self, __a0: bool) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setDefaultAttributeSchema(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setDefaultElementSchema(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setElementResyncMode(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setInterfaces(self, __a0: java.util.Set) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def setType(self, __a0: java.lang.Class) -> ghidra.dbg.target.schema.SchemaBuilder: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def attributeResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    @attributeResyncMode.setter
    def attributeResyncMode(self, value: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode) -> None: ...

    @property
    def attributeSchemas(self) -> java.util.Map: ...

    @property
    def canonicalContainer(self) -> None: ...  # No getter available.

    @canonicalContainer.setter
    def canonicalContainer(self, value: bool) -> None: ...

    @property
    def canonicalContaineration(self) -> bool: ...

    @property
    def defaultAttributeSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema: ...

    @defaultAttributeSchema.setter
    def defaultAttributeSchema(self, value: ghidra.dbg.target.schema.TargetObjectSchema.AttributeSchema) -> None: ...

    @property
    def defaultElementSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema.SchemaName: ...

    @defaultElementSchema.setter
    def defaultElementSchema(self, value: ghidra.dbg.target.schema.TargetObjectSchema.SchemaName) -> None: ...

    @property
    def elementResyncMode(self) -> ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode: ...

    @elementResyncMode.setter
    def elementResyncMode(self, value: ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode) -> None: ...

    @property
    def elementSchemas(self) -> java.util.Map: ...

    @property
    def interfaces(self) -> java.util.Set: ...

    @interfaces.setter
    def interfaces(self, value: java.util.Set) -> None: ...

    @property
    def type(self) -> java.lang.Class: ...

    @type.setter
    def type(self, value: java.lang.Class) -> None: ...