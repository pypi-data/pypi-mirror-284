from typing import Iterator
from typing import List
from typing import overload
import ghidra.dbg
import ghidra.dbg.agent
import ghidra.dbg.target
import ghidra.dbg.target.schema
import ghidra.dbg.util
import java.lang
import java.lang.annotation
import java.lang.invoke
import java.lang.reflect
import java.util
import java.util.concurrent
import java.util.function
import java.util.stream


class TargetMethod(ghidra.dbg.target.TargetObject, object):
    ALL_INTERFACES: java.util.Set
    DISPLAY_ATTRIBUTE_NAME: unicode = u'_display'
    INTERFACES_BY_NAME: java.util.Map
    KIND_ATTRIBUTE_NAME: unicode = u'_kind'
    MODIFIED_ATTRIBUTE_NAME: unicode = u'_modified'
    ORDER_ATTRIBUTE_NAME: unicode = u'_order'
    PARAMETERS_ATTRIBUTE_NAME: unicode = u'_parameters'
    PREFIX_INVISIBLE: unicode = u'_'
    REDIRECT: unicode = u'<='
    RETURN_TYPE_ATTRIBUTE_NAME: unicode = u'_return_type'
    SHORT_DISPLAY_ATTRIBUTE_NAME: unicode = u'_short_display'
    TYPE_ATTRIBUTE_NAME: unicode = u'_type'
    VALUE_ATTRIBUTE_NAME: unicode = u'_value'




    class StringValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class IntValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> int: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class FloatValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> float: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Export(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def value(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DoubleValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> float: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StringsValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> List[unicode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class BytesValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> List[int]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class LongValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> long: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Value(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> object: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ParameterDescription(object):
        defaultValue: object
        description: unicode
        display: unicode
        name: unicode
        required: bool
        type: java.lang.Class







        def adjust(self, __a0: java.util.Map, __a1: java.util.function.Function) -> None: ...

        @staticmethod
        def annotated(__a0: java.lang.reflect.Parameter) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

        @overload
        @staticmethod
        def choices(__a0: java.lang.Class, __a1: unicode, __a2: java.util.Collection, __a3: unicode, __a4: unicode) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

        @overload
        @staticmethod
        def choices(__a0: java.lang.Class, __a1: unicode, __a2: java.util.Collection, __a3: object, __a4: unicode, __a5: unicode) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

        @staticmethod
        def create(__a0: java.lang.Class, __a1: unicode, __a2: bool, __a3: object, __a4: unicode, __a5: unicode) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

        def equals(self, __a0: object) -> bool: ...

        def get(self, __a0: java.util.Map) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def set(self, __a0: java.util.Map, __a1: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class BoolValue(java.lang.annotation.Annotation, object):








        def annotationType(self) -> java.lang.Class: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def specified(self) -> bool: ...

        def toString(self) -> unicode: ...

        def value(self) -> bool: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TargetParameterMap(java.util.Map, object):
        EMPTY: ghidra.dbg.target.TargetMethod.TargetParameterMap





        def __iter__(self): ...

        def clear(self) -> None: ...

        def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

        def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

        def containsKey(self, __a0: object) -> bool: ...

        def containsValue(self, __a0: object) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Map) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        @staticmethod
        def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

        def entrySet(self) -> java.util.Set: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getOrDefault(self, __a0: object, __a1: object) -> object: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def keySet(self) -> java.util.Set: ...

        def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def of() -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        @staticmethod
        def ofEntries(__a0: List[java.util.Map.Entry]) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        def put(self, __a0: object, __a1: object) -> object: ...

        def putAll(self, __a0: java.util.Map) -> None: ...

        def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

        @overload
        def remove(self, __a0: object) -> object: ...

        @overload
        def remove(self, __a0: object, __a1: object) -> bool: ...

        @overload
        def replace(self, __a0: object, __a1: object) -> object: ...

        @overload
        def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

        def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

        def size(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...




    class AnnotatedTargetMethod(ghidra.dbg.agent.DefaultTargetObject, ghidra.dbg.target.TargetMethod):




        def __init__(self, __a0: java.lang.invoke.MethodHandles.Lookup, __a1: ghidra.dbg.agent.AbstractDebuggerObjectModel, __a2: ghidra.dbg.target.TargetObject, __a3: java.lang.reflect.Method, __a4: ghidra.dbg.target.TargetMethod.Export): ...



        def as(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

        def broadcast(self) -> ghidra.dbg.DebuggerModelListener: ...

        @overload
        def changeAttributes(self, __a0: List[object], __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def changeAttributes(self, __a0: List[object], __a1: java.util.Collection, __a2: java.util.Map, __a3: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def changeElements(self, __a0: java.util.Collection, __a1: java.util.Collection, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def changeElements(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def changeElements(self, __a0: java.util.Collection, __a1: java.util.Collection, __a2: java.util.Map, __a3: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @staticmethod
        def collectExports(__a0: java.lang.invoke.MethodHandles.Lookup, __a1: ghidra.dbg.agent.AbstractDebuggerObjectModel, __a2: ghidra.dbg.target.TargetObject) -> java.util.Map: ...

        @overload
        def compareTo(self, __a0: ghidra.dbg.target.TargetObject) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def computeHashCode(self) -> int: ...

        def doEquals(self, __a0: object) -> bool: ...

        def doInvalidateSubtree(self, __a0: ghidra.dbg.target.TargetObject, __a1: unicode) -> None: ...

        def enforcesStrictSchema(self) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def fetchAttribute(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchAttributes(self) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchAttributes(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

        def fetchChild(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchChildren(self) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchChildren(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

        def fetchChildrenSupporting(self, __a0: java.lang.Class) -> java.util.concurrent.CompletableFuture: ...

        def fetchElement(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchElements(self) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchElements(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubAttribute(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubAttribute(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubAttributes(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubAttributes(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubElements(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSubElements(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSuccessor(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchSuccessor(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchValue(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def fetchValue(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

        def filterValid(self, __a0: unicode, __a1: java.util.Map) -> java.util.Map: ...

        def getCachedAttribute(self, __a0: unicode) -> object: ...

        def getCachedAttributes(self) -> java.util.Map: ...

        def getCachedElements(self) -> java.util.Map: ...

        def getCachedSuitable(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

        def getCallbackAttributes(self) -> java.util.Map: ...

        def getCallbackElements(self) -> java.util.Map: ...

        def getClass(self) -> java.lang.Class: ...

        def getDelegate(self) -> ghidra.dbg.agent.SpiTargetObject: ...

        def getDisplay(self) -> unicode: ...

        def getIndex(self) -> unicode: ...

        def getInterfaceNames(self) -> java.util.Collection: ...

        def getInterfaces(self) -> java.util.Collection: ...

        @staticmethod
        def getInterfacesByName(__a0: java.util.Collection) -> List[object]: ...

        def getJoinedPath(self, __a0: unicode) -> unicode: ...

        def getKind(self) -> unicode: ...

        def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

        def getName(self) -> unicode: ...

        def getOrder(self) -> int: ...

        @overload
        def getParameters(self) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        @overload
        @staticmethod
        def getParameters(__a0: ghidra.dbg.target.TargetObject) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        def getParent(self) -> ghidra.dbg.target.TargetObject: ...

        def getPath(self) -> List[object]: ...

        def getProtocolID(self) -> object: ...

        def getProxy(self) -> ghidra.dbg.agent.SpiTargetObject: ...

        def getReturnType(self) -> java.lang.Class: ...

        def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

        def getShortDisplay(self) -> unicode: ...

        @overload
        def getSuccessor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObject: ...

        @overload
        def getSuccessor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObject: ...

        def getType(self) -> unicode: ...

        def getTypeHint(self) -> unicode: ...

        def getTypedAttributeNowByName(self, __a0: unicode, __a1: java.lang.Class, __a2: object) -> object: ...

        def getValue(self) -> object: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def initInterfacesByName() -> java.util.Map: ...

        def invalidateCaches(self) -> java.util.concurrent.CompletableFuture: ...

        def invalidateSubtree(self, __a0: ghidra.dbg.target.TargetObject, __a1: unicode) -> None: ...

        def invoke(self, __a0: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

        def isModified(self) -> bool: ...

        def isRoot(self) -> bool: ...

        def isValid(self) -> bool: ...

        @overload
        @staticmethod
        def makeParameters(__a0: List[ghidra.dbg.target.TargetMethod.ParameterDescription]) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        @overload
        @staticmethod
        def makeParameters(__a0: java.util.Collection) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        @overload
        @staticmethod
        def makeParameters(__a0: java.util.stream.Stream) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def resync(self) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def resync(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior, __a1: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

        @overload
        def setAttributes(self, __a0: java.util.Map, __a1: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def setAttributes(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def setElements(self, __a0: java.util.Collection, __a1: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        @overload
        def setElements(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

        def toString(self) -> unicode: ...

        @staticmethod
        def validateArguments(__a0: java.util.Map, __a1: java.util.Map, __a2: bool) -> java.util.Map: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Param(java.lang.annotation.Annotation, object):
        DEFAULTS: List[object]







        def annotationType(self) -> java.lang.Class: ...

        def choicesString(self) -> ghidra.dbg.target.TargetMethod.StringsValue: ...

        def defaultBool(self) -> ghidra.dbg.target.TargetMethod.BoolValue: ...

        def defaultBytes(self) -> ghidra.dbg.target.TargetMethod.BytesValue: ...

        def defaultDouble(self) -> ghidra.dbg.target.TargetMethod.DoubleValue: ...

        def defaultFloat(self) -> ghidra.dbg.target.TargetMethod.FloatValue: ...

        def defaultInt(self) -> ghidra.dbg.target.TargetMethod.IntValue: ...

        def defaultLong(self) -> ghidra.dbg.target.TargetMethod.LongValue: ...

        def defaultString(self) -> ghidra.dbg.target.TargetMethod.StringValue: ...

        def description(self) -> unicode: ...

        def display(self) -> unicode: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def required(self) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def as(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def compareTo(self, __a0: ghidra.dbg.target.TargetObject) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeHashCode(self) -> int: ...

    def doEquals(self, __a0: object) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def fetchAttribute(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChild(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChildrenSupporting(self, __a0: java.lang.Class) -> java.util.concurrent.CompletableFuture: ...

    def fetchElement(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    def getCachedAttribute(self, __a0: unicode) -> object: ...

    def getCachedAttributes(self) -> java.util.Map: ...

    def getCachedElements(self) -> java.util.Map: ...

    def getCachedSuitable(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def getCallbackAttributes(self) -> java.util.Map: ...

    def getCallbackElements(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisplay(self) -> unicode: ...

    def getIndex(self) -> unicode: ...

    def getInterfaceNames(self) -> java.util.Collection: ...

    def getInterfaces(self) -> java.util.Collection: ...

    @staticmethod
    def getInterfacesByName(__a0: java.util.Collection) -> List[object]: ...

    def getJoinedPath(self, __a0: unicode) -> unicode: ...

    def getKind(self) -> unicode: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getName(self) -> unicode: ...

    def getOrder(self) -> int: ...

    @overload
    def getParameters(self) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    @overload
    @staticmethod
    def getParameters(__a0: ghidra.dbg.target.TargetObject) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    def getParent(self) -> ghidra.dbg.target.TargetObject: ...

    def getPath(self) -> List[object]: ...

    def getProtocolID(self) -> object: ...

    def getReturnType(self) -> java.lang.Class: ...

    def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getShortDisplay(self) -> unicode: ...

    @overload
    def getSuccessor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def getSuccessor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObject: ...

    def getType(self) -> unicode: ...

    def getTypeHint(self) -> unicode: ...

    def getTypedAttributeNowByName(self, __a0: unicode, __a1: java.lang.Class, __a2: object) -> object: ...

    def getValue(self) -> object: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def initInterfacesByName() -> java.util.Map: ...

    def invalidateCaches(self) -> java.util.concurrent.CompletableFuture: ...

    def invoke(self, __a0: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

    def isModified(self) -> bool: ...

    def isRoot(self) -> bool: ...

    def isValid(self) -> bool: ...

    @overload
    @staticmethod
    def makeParameters(__a0: List[ghidra.dbg.target.TargetMethod.ParameterDescription]) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    @overload
    @staticmethod
    def makeParameters(__a0: java.util.Collection) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    @overload
    @staticmethod
    def makeParameters(__a0: java.util.stream.Stream) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def resync(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def resync(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior, __a1: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def validateArguments(__a0: java.util.Map, __a1: java.util.Map, __a2: bool) -> java.util.Map: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def cachedAttributes(self) -> java.util.Map: ...

    @property
    def cachedElements(self) -> java.util.Map: ...

    @property
    def callbackAttributes(self) -> java.util.Map: ...

    @property
    def callbackElements(self) -> java.util.Map: ...

    @property
    def display(self) -> unicode: ...

    @property
    def index(self) -> unicode: ...

    @property
    def interfaceNames(self) -> java.util.Collection: ...

    @property
    def interfaces(self) -> java.util.Collection: ...

    @property
    def kind(self) -> unicode: ...

    @property
    def model(self) -> ghidra.dbg.DebuggerObjectModel: ...

    @property
    def name(self) -> unicode: ...

    @property
    def order(self) -> int: ...

    @property
    def parameters(self) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    @property
    def parent(self) -> ghidra.dbg.target.TargetObject: ...

    @property
    def path(self) -> List[object]: ...

    @property
    def protocolID(self) -> object: ...

    @property
    def returnType(self) -> java.lang.Class: ...

    @property
    def root(self) -> bool: ...

    @property
    def schema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def shortDisplay(self) -> unicode: ...

    @property
    def type(self) -> unicode: ...

    @property
    def typeHint(self) -> unicode: ...

    @property
    def valid(self) -> bool: ...

    @property
    def value(self) -> object: ...