from typing import List
from typing import overload
import com.sun.jdi
import com.sun.jdi.connect
import com.sun.jdi.event
import ghidra.dbg
import ghidra.dbg.agent
import ghidra.dbg.jdi.manager
import ghidra.dbg.jdi.manager.breakpoint
import ghidra.dbg.jdi.model
import ghidra.dbg.jdi.model.iface1
import ghidra.dbg.jdi.model.iface2
import ghidra.dbg.target
import ghidra.dbg.target.schema
import ghidra.dbg.util
import java.lang
import java.util
import java.util.concurrent


class JdiModelTargetRoot(ghidra.dbg.agent.DefaultTargetModelRoot, ghidra.dbg.jdi.model.iface1.JdiModelTargetAccessConditioned, ghidra.dbg.jdi.model.iface1.JdiModelTargetFocusScope, ghidra.dbg.jdi.model.iface1.JdiModelTargetInterruptible, ghidra.dbg.jdi.model.iface1.JdiModelTargetLauncher, ghidra.dbg.jdi.model.iface1.JdiModelTargetEventScope, ghidra.dbg.jdi.manager.JdiEventsListenerAdapter):




    def __init__(self, __a0: ghidra.dbg.jdi.model.JdiModelImpl, __a1: ghidra.dbg.target.schema.TargetObjectSchema): ...



    def acceptsElement(self, __a0: unicode) -> bool: ...

    def accessWatchpointHit(self, __a0: com.sun.jdi.event.AccessWatchpointEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def as(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def attach(self, __a0: long) -> java.util.concurrent.CompletableFuture: ...

    def breakpointCreated(self, __a0: ghidra.dbg.jdi.manager.breakpoint.JdiBreakpointInfo, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def breakpointDeleted(self, __a0: ghidra.dbg.jdi.manager.breakpoint.JdiBreakpointInfo, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def breakpointHit(self, __a0: com.sun.jdi.event.BreakpointEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def breakpointModified(self, __a0: ghidra.dbg.jdi.manager.breakpoint.JdiBreakpointInfo, __a1: ghidra.dbg.jdi.manager.breakpoint.JdiBreakpointInfo, __a2: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def broadcast(self) -> ghidra.dbg.DebuggerModelListener: ...

    @overload
    def changeAttributes(self, __a0: List[object], __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def changeAttributes(self, __a0: List[object], __a1: java.util.Collection, __a2: java.util.Map, __a3: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def changeElements(self, __a0: java.util.Collection, __a1: java.util.Collection, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def changeElements(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def changeElements(self, __a0: java.util.Collection, __a1: java.util.Collection, __a2: java.util.Map, __a3: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    def classPrepare(self, __a0: com.sun.jdi.event.ClassPrepareEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def classUnload(self, __a0: com.sun.jdi.event.ClassUnloadEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    @overload
    def compareTo(self, __a0: ghidra.dbg.target.TargetObject) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def computeHashCode(self) -> int: ...

    @staticmethod
    def createBooleanParameter(__a0: com.sun.jdi.connect.Connector.BooleanArgument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    @staticmethod
    def createGenericParameter(__a0: com.sun.jdi.connect.Connector.Argument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    @staticmethod
    def createIntegerParameter(__a0: com.sun.jdi.connect.Connector.IntegerArgument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    @staticmethod
    def createParameter(__a0: com.sun.jdi.connect.Connector.Argument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    @staticmethod
    def createSelectedParameter(__a0: com.sun.jdi.connect.Connector.SelectedArgument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    @staticmethod
    def createStringParameter(__a0: com.sun.jdi.connect.Connector.StringArgument) -> ghidra.dbg.target.TargetMethod.ParameterDescription: ...

    def doEquals(self, __a0: object) -> bool: ...

    def doInvalidateSubtree(self, __a0: ghidra.dbg.target.TargetObject, __a1: unicode) -> None: ...

    def enforcesStrictSchema(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def exceptionHit(self, __a0: com.sun.jdi.event.ExceptionEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def fetchAttribute(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchAttributes(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChild(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchChildren(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def fetchChildrenSupporting(self, __a0: java.lang.Class) -> java.util.concurrent.CompletableFuture: ...

    def fetchElement(self, __a0: unicode) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchElements(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttribute(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubAttributes(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSubElements(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchSuccessor(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[unicode]) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def fetchValue(self, __a0: List[object]) -> java.util.concurrent.CompletableFuture: ...

    def filterValid(self, __a0: unicode, __a1: java.util.Map) -> java.util.Map: ...

    @staticmethod
    def getArguments(__a0: java.util.Map, __a1: java.util.Map, __a2: java.util.Map) -> java.util.Map: ...

    def getCachedAttribute(self, __a0: unicode) -> object: ...

    def getCachedAttributes(self) -> java.util.Map: ...

    def getCachedElements(self) -> java.util.Map: ...

    def getCachedSuitable(self, __a0: java.lang.Class) -> ghidra.dbg.target.TargetObject: ...

    def getCallbackAttributes(self) -> java.util.Map: ...

    def getCallbackElements(self) -> java.util.Map: ...

    def getClass(self) -> java.lang.Class: ...

    def getDelegate(self) -> ghidra.dbg.agent.SpiTargetObject: ...

    def getDisplay(self) -> unicode: ...

    def getEventThread(self) -> ghidra.dbg.target.TargetThread: ...

    def getFocus(self) -> ghidra.dbg.target.TargetObject: ...

    def getIndex(self) -> unicode: ...

    def getInstance(self, __a0: com.sun.jdi.Mirror) -> ghidra.dbg.jdi.model.iface2.JdiModelTargetObject: ...

    def getInterfaceNames(self) -> java.util.Collection: ...

    def getInterfaces(self) -> java.util.Collection: ...

    @staticmethod
    def getInterfacesByName(__a0: java.util.Collection) -> List[object]: ...

    def getJoinedPath(self, __a0: unicode) -> unicode: ...

    def getKind(self) -> unicode: ...

    def getManager(self) -> ghidra.dbg.jdi.manager.JdiManager: ...

    def getModel(self) -> ghidra.dbg.DebuggerObjectModel: ...

    def getModelImpl(self) -> ghidra.dbg.jdi.model.JdiModelImpl: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> object: ...

    def getOrder(self) -> int: ...

    def getParameters(self) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...

    def getParent(self) -> ghidra.dbg.target.TargetObject: ...

    def getPath(self) -> List[object]: ...

    def getProtocolID(self) -> object: ...

    def getProxy(self) -> ghidra.dbg.agent.SpiTargetObject: ...

    def getSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getShortDisplay(self) -> unicode: ...

    @overload
    def getSuccessor(self, __a0: List[unicode]) -> ghidra.dbg.target.TargetObject: ...

    @overload
    def getSuccessor(self, __a0: List[object]) -> ghidra.dbg.target.TargetObject: ...

    def getTargetObject(self, __a0: object) -> ghidra.dbg.jdi.model.iface2.JdiModelTargetObject: ...

    def getType(self) -> unicode: ...

    def getTypeHint(self) -> unicode: ...

    def getTypedAttributeNowByName(self, __a0: unicode, __a1: java.lang.Class, __a2: object) -> object: ...

    def getValue(self) -> object: ...

    def hashCode(self) -> int: ...

    def init(self, __a0: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

    @staticmethod
    def initInterfacesByName() -> java.util.Map: ...

    def interrupt(self) -> java.util.concurrent.CompletableFuture: ...

    def invalidateCaches(self) -> java.util.concurrent.CompletableFuture: ...

    def invalidateSubtree(self, __a0: ghidra.dbg.target.TargetObject, __a1: unicode) -> None: ...

    def isAccessible(self) -> bool: ...

    def isModified(self) -> bool: ...

    def isRoot(self) -> bool: ...

    def isValid(self) -> bool: ...

    def launch(self, __a0: java.util.Map) -> java.util.concurrent.CompletableFuture: ...

    def libraryLoaded(self, __a0: com.sun.jdi.VirtualMachine, __a1: unicode, __a2: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def libraryUnloaded(self, __a0: com.sun.jdi.VirtualMachine, __a1: unicode, __a2: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def memoryChanged(self, __a0: com.sun.jdi.VirtualMachine, __a1: long, __a2: int, __a3: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def methodEntry(self, __a0: com.sun.jdi.event.MethodEntryEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def methodExit(self, __a0: com.sun.jdi.event.MethodExitEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def monitorContendedEnter(self, __a0: com.sun.jdi.event.MonitorContendedEnterEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def monitorContendedEntered(self, __a0: com.sun.jdi.event.MonitorContendedEnteredEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def monitorWait(self, __a0: com.sun.jdi.event.MonitorWaitEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def monitorWaited(self, __a0: com.sun.jdi.event.MonitorWaitedEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processShutdown(self, __a0: com.sun.jdi.event.Event, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def processStop(self, __a0: com.sun.jdi.event.EventSet, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def requestFocus(self, __a0: ghidra.dbg.target.TargetObject) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def resync(self) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def resync(self, __a0: ghidra.dbg.DebuggerObjectModel.RefreshBehavior, __a1: ghidra.dbg.DebuggerObjectModel.RefreshBehavior) -> java.util.concurrent.CompletableFuture: ...

    def setAccessible(self, __a0: bool) -> None: ...

    @overload
    def setAttributes(self, __a0: java.util.Map, __a1: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def setAttributes(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def setElements(self, __a0: java.util.Collection, __a1: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    @overload
    def setElements(self, __a0: java.util.Collection, __a1: java.util.Map, __a2: unicode) -> ghidra.dbg.util.CollectionUtils.Delta: ...

    def setFocus(self, __a0: ghidra.dbg.jdi.model.iface1.JdiModelSelectableObject) -> bool: ...

    def stepComplete(self, __a0: com.sun.jdi.event.StepEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def threadExited(self, __a0: com.sun.jdi.event.ThreadDeathEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def threadSelected(self, __a0: com.sun.jdi.ThreadReference, __a1: com.sun.jdi.StackFrame, __a2: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def threadStarted(self, __a0: com.sun.jdi.event.ThreadStartEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def threadStateChanged(self, __a0: com.sun.jdi.ThreadReference, __a1: int, __a2: ghidra.dbg.jdi.manager.JdiCause, __a3: ghidra.dbg.jdi.manager.JdiReason) -> None: ...

    def toString(self) -> unicode: ...

    def vmDied(self, __a0: com.sun.jdi.event.VMDeathEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def vmDisconnected(self, __a0: com.sun.jdi.event.VMDisconnectEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def vmInterrupted(self) -> None: ...

    def vmSelected(self, __a0: com.sun.jdi.VirtualMachine, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def vmStarted(self, __a0: com.sun.jdi.event.VMStartEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def watchpointHit(self, __a0: com.sun.jdi.event.WatchpointEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    def watchpointModified(self, __a0: com.sun.jdi.event.ModificationWatchpointEvent, __a1: ghidra.dbg.jdi.manager.JdiCause) -> None: ...

    @property
    def accessible(self) -> bool: ...

    @accessible.setter
    def accessible(self, value: bool) -> None: ...

    @property
    def display(self) -> unicode: ...

    @property
    def focus(self) -> ghidra.dbg.jdi.model.iface1.JdiModelSelectableObject: ...

    @focus.setter
    def focus(self, value: ghidra.dbg.jdi.model.iface1.JdiModelSelectableObject) -> None: ...

    @property
    def modelImpl(self) -> ghidra.dbg.jdi.model.JdiModelImpl: ...

    @property
    def object(self) -> object: ...

    @property
    def parameters(self) -> ghidra.dbg.target.TargetMethod.TargetParameterMap: ...