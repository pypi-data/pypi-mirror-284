from typing import Iterator
from typing import overload
import ghidra.trace.util
import java.lang
import java.util
import java.util.function


class EnumeratingIterator(java.util.Iterator, object):





    class WrappingEnumeratingIterator(object, ghidra.trace.util.EnumeratingIterator):




        def __init__(self, __a0: java.util.Iterator): ...

        def __iter__(self) -> Iterator[object]: ...

        @staticmethod
        def castOrWrap(__a0: java.util.Iterator) -> ghidra.trace.util.EnumeratingIterator: ...

        def equals(self, __a0: object) -> bool: ...

        def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def getIndex(self) -> int: ...

        def hasNext(self) -> bool: ...

        def hashCode(self) -> int: ...

        def next(self) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def remove(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def index(self) -> int: ...



    def __iter__(self) -> Iterator[object]: ...

    @staticmethod
    def castOrWrap(__a0: java.util.Iterator) -> ghidra.trace.util.EnumeratingIterator: ...

    def equals(self, __a0: object) -> bool: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getIndex(self) -> int: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def next(self) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def remove(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def index(self) -> int: ...