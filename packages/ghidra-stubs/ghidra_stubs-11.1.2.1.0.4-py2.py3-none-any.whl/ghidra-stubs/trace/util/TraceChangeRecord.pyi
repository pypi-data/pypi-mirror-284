from typing import overload
import ghidra.framework.model
import ghidra.trace.util
import java.lang


class TraceChangeRecord(ghidra.framework.model.DomainObjectChangeRecord):




    @overload
    def __init__(self, __a0: ghidra.trace.util.TraceEvent, __a1: ghidra.trace.util.TraceAddressSpace): ...

    @overload
    def __init__(self, __a0: ghidra.trace.util.TraceEvent, __a1: ghidra.trace.util.TraceAddressSpace, __a2: object): ...

    @overload
    def __init__(self, __a0: ghidra.trace.util.TraceEvent, __a1: ghidra.trace.util.TraceAddressSpace, __a2: object, __a3: object): ...

    @overload
    def __init__(self, __a0: ghidra.trace.util.TraceEvent, __a1: ghidra.trace.util.TraceAddressSpace, __a2: object, __a3: object, __a4: object): ...



    def equals(self, __a0: object) -> bool: ...

    def getAffectedObject(self) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventType(self) -> ghidra.framework.model.EventType: ...

    def getNewValue(self) -> object: ...

    def getOldValue(self) -> object: ...

    def getSpace(self) -> ghidra.trace.util.TraceAddressSpace: ...

    def hashCode(self) -> int: ...

    def isOldKnown(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def affectedObject(self) -> object: ...

    @property
    def newValue(self) -> object: ...

    @property
    def oldKnown(self) -> bool: ...

    @property
    def oldValue(self) -> object: ...

    @property
    def space(self) -> ghidra.trace.util.TraceAddressSpace: ...