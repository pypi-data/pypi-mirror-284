from typing import overload
import ghidra.program.model.lang
import ghidra.trace.database
import ghidra.trace.database.space
import ghidra.trace.util
import ghidra.util
import ghidra.util.database
import java.io
import java.lang
import java.util
import java.util.concurrent.locks


class AbstractDBTraceSpaceBasedManager(object, ghidra.trace.database.DBTraceManager):





    class DBTraceSpaceEntry(ghidra.util.database.DBAnnotatedObject):




        def __init__(self, __a0: ghidra.util.database.DBCachedObjectStore, __a1: db.DBRecord): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFrameLevel(self) -> int: ...

        def getKey(self) -> long: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getTableName(self) -> unicode: ...

        def getThreadKey(self) -> long: ...

        def hashCode(self) -> int: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def frameLevel(self) -> int: ...

        @property
        def threadKey(self) -> long: ...

    def __init__(self, __a0: unicode, __a1: db.DBHandle, __a2: ghidra.framework.data.OpenMode, __a3: java.util.concurrent.locks.ReadWriteLock, __a4: ghidra.util.task.TaskMonitor, __a5: ghidra.program.model.lang.Language, __a6: ghidra.trace.database.DBTrace, __a7: ghidra.trace.database.thread.DBTraceThreadManager): ...



    def dbError(self, __a0: java.io.IOException) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: ghidra.trace.util.TraceAddressSpace, __a1: bool) -> ghidra.trace.database.space.DBTraceSpaceBased: ...

    def getActiveMemorySpaces(self) -> java.util.Collection: ...

    def getActiveRegisterSpaces(self) -> java.util.Collection: ...

    def getActiveSpaces(self) -> java.util.Collection: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getClass(self) -> java.lang.Class: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getTrace(self) -> ghidra.trace.database.DBTrace: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def activeMemorySpaces(self) -> java.util.Collection: ...

    @property
    def activeRegisterSpaces(self) -> java.util.Collection: ...

    @property
    def activeSpaces(self) -> java.util.Collection: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def lock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    @property
    def trace(self) -> ghidra.trace.database.DBTrace: ...