from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.map
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.map
import ghidra.trace.model.thread
import ghidra.util.database
import ghidra.util.database.spatial
import java.lang
import java.util
import java.util.function


class DBTraceAddressSnapRangePropertyMapSpace(object, ghidra.trace.database.space.DBTraceSpaceBased, ghidra.util.database.spatial.SpatialMap, ghidra.trace.model.map.TraceAddressSnapRangePropertyMapSpace):
    EMPTY_MAP: ghidra.util.database.spatial.SpatialMap



    def __init__(self, __a0: unicode, __a1: ghidra.util.database.DBCachedObjectStoreFactory, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.program.model.address.AddressSpace, __a4: ghidra.trace.model.thread.TraceThread, __a5: int, __a6: java.lang.Class, __a7: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMap.DBTraceAddressSnapRangePropertyMapDataFactory): ...



    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.Address) -> long: ...

    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def checkIntegrity(self) -> None: ...

    def clear(self) -> None: ...

    @staticmethod
    def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

    def deleteData(self, __a0: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.AbstractDBTraceAddressSnapRangePropertyMapData) -> None: ...

    def deleteValue(self, __a0: object) -> None: ...

    @staticmethod
    def emptyMap() -> ghidra.util.database.spatial.SpatialMap: ...

    def entries(self) -> java.util.Collection: ...

    def equals(self, __a0: object) -> bool: ...

    def explainLanguages(self, __a0: ghidra.program.model.address.AddressSpace) -> unicode: ...

    def firstEntry(self) -> java.util.Map.Entry: ...

    def firstKey(self) -> ghidra.util.database.spatial.BoundedShape: ...

    def firstValue(self) -> object: ...

    @overload
    def getAddressSetView(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressSetView(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataByKey(self, __a0: long) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.AbstractDBTraceAddressSnapRangePropertyMapData: ...

    def getFrameLevel(self) -> int: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getUserIndex(self, __a0: java.lang.Class, __a1: ghidra.util.database.DBObjectColumn) -> ghidra.util.database.DBCachedObjectIndex: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def isEmpty(self) -> bool: ...

    def isMySpace(self, __a0: ghidra.program.model.address.AddressSpace) -> bool: ...

    def keys(self) -> java.util.Collection: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def orderedEntries(self) -> java.util.Collection: ...

    def orderedKeys(self) -> java.util.Collection: ...

    def orderedValues(self) -> java.util.Collection: ...

    @overload
    def put(self, __a0: ghidra.trace.model.TraceAddressSnapRange, __a1: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.trace.model.Lifespan, __a2: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.Lifespan, __a2: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long, __a4: object) -> object: ...

    @overload
    def reduce(self, __a0: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery) -> ghidra.util.database.spatial.SpatialMap: ...

    @overload
    def reduce(self, __a0: object) -> ghidra.util.database.spatial.SpatialMap: ...

    @overload
    def remove(self, __a0: java.util.Map.Entry) -> bool: ...

    @overload
    def remove(self, __a0: ghidra.trace.model.TraceAddressSnapRange, __a1: object) -> bool: ...

    @overload
    def remove(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> bool: ...

    def size(self) -> int: ...

    def toAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def toOverlay(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def toString(self) -> unicode: ...

    def values(self) -> java.util.Collection: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def empty(self) -> bool: ...

    @property
    def frameLevel(self) -> int: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...