from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.map
import ghidra.trace.model
import ghidra.util
import ghidra.util.database
import ghidra.util.database.spatial
import ghidra.util.database.spatial.rect
import java.lang
import java.util


class DBTraceAddressSnapRangePropertyMapTree(ghidra.util.database.spatial.rect.Abstract2DRStarTree):





    class DBTraceAddressSnapRangePropertyMapNode(ghidra.util.database.spatial.DBTreeNodeRecord, ghidra.trace.model.TraceAddressSnapRange):




        def __init__(self, __a0: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def contains(self, __a0: ghidra.util.database.spatial.rect.Point2D) -> bool: ...

        @overload
        def contains(self, __a0: object, __a1: object) -> bool: ...

        def description(self) -> unicode: ...

        def doEquals(self, __a0: object) -> bool: ...

        def doHashCode(self) -> int: ...

        def enclosedBy(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.BoundingShape) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def getArea(self) -> float: ...

        def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

        def getCenter(self) -> ghidra.util.database.spatial.rect.Point2D: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

        def getMargin(self) -> float: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getParentKey(self) -> long: ...

        def getRange(self) -> ghidra.program.model.address.AddressRange: ...

        def getShape(self) -> ghidra.util.database.spatial.BoundedShape: ...

        def getSpace(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

        def getTableName(self) -> unicode: ...

        def getX1(self) -> object: ...

        def getX2(self) -> object: ...

        def getY1(self) -> object: ...

        def getY2(self) -> object: ...

        def hashCode(self) -> int: ...

        @overload
        def immutable(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @overload
        def immutable(self, __a0: object, __a1: object, __a2: object, __a3: object) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersects(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def setParentKey(self, __a0: long) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.util.database.spatial.BoundedShape) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> ghidra.util.database.spatial.BoundingShape: ...

        @staticmethod
        def unionIterable(__a0: java.lang.Iterable) -> ghidra.util.database.spatial.BoundingShape: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def bounds(self) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @property
        def lifespan(self) -> ghidra.trace.model.Lifespan: ...

        @property
        def parentKey(self) -> long: ...

        @parentKey.setter
        def parentKey(self, value: long) -> None: ...

        @property
        def range(self) -> ghidra.program.model.address.AddressRange: ...

        @property
        def shape(self) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @shape.setter
        def shape(self, value: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

        @property
        def space(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...




    class TraceAddressSnapRangeQuery(ghidra.util.database.spatial.rect.AbstractRectangle2DQuery):




        def __init__(self, __a0: ghidra.trace.model.TraceAddressSnapRange, __a1: ghidra.trace.model.TraceAddressSnapRange, __a2: ghidra.util.database.spatial.rect.Rectangle2DDirection): ...



        @staticmethod
        def added(__a0: long, __a1: long, __a2: ghidra.program.model.address.AddressSpace) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        def and(self, __a0: ghidra.util.database.spatial.rect.AbstractRectangle2DQuery) -> ghidra.util.database.spatial.rect.AbstractRectangle2DQuery: ...

        @staticmethod
        def at(__a0: ghidra.program.model.address.Address, __a1: long) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @staticmethod
        def atSnap(__a0: long, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def enclosed(__a0: ghidra.trace.model.TraceAddressSnapRange) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def enclosed(__a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.Lifespan) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def enclosed(__a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @staticmethod
        def equalTo(__a0: ghidra.trace.model.TraceAddressSnapRange) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        def equals(self, __a0: object) -> bool: ...

        def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

        def getBoundsComparator(self) -> java.util.Comparator: ...

        def getClass(self) -> java.lang.Class: ...

        def getDirection(self) -> ghidra.util.database.spatial.rect.Rectangle2DDirection: ...

        def hashCode(self) -> int: ...

        @overload
        @staticmethod
        def intersecting(__a0: ghidra.trace.model.TraceAddressSnapRange) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def intersecting(__a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.Lifespan) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def intersecting(__a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressSpace) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def intersecting(__a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @staticmethod
        def leftLower(__a0: ghidra.program.model.address.Address) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def mostRecent(__a0: ghidra.program.model.address.Address, __a1: long) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @overload
        @staticmethod
        def mostRecent(__a0: ghidra.program.model.address.Address, __a1: ghidra.trace.model.Lifespan) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def removed(__a0: long, __a1: long, __a2: ghidra.program.model.address.AddressSpace) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        @staticmethod
        def rightHigher(__a0: ghidra.program.model.address.Address) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.TraceAddressSnapRangeQuery: ...

        def starting(self, __a0: ghidra.util.database.spatial.rect.Rectangle2DDirection) -> ghidra.util.database.spatial.rect.AbstractRectangle2DQuery: ...

        @overload
        def terminateEarlyData(self, __a0: ghidra.util.database.spatial.BoundedShape) -> bool: ...

        @overload
        def terminateEarlyData(self, __a0: object) -> bool: ...

        @overload
        def terminateEarlyNode(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def terminateEarlyNode(self, __a0: object) -> bool: ...

        @overload
        def testData(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

        @overload
        def testData(self, __a0: object) -> bool: ...

        @overload
        def testNode(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.Query.QueryInclusion: ...

        @overload
        def testNode(self, __a0: object) -> ghidra.util.database.spatial.Query.QueryInclusion: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...




    class AbstractDBTraceAddressSnapRangePropertyMapData(ghidra.util.database.spatial.DBTreeDataRecord, ghidra.trace.model.TraceAddressSnapRange):




        def __init__(self, __a0: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def contains(self, __a0: ghidra.util.database.spatial.rect.Point2D) -> bool: ...

        @overload
        def contains(self, __a0: object, __a1: object) -> bool: ...

        def description(self) -> unicode: ...

        def doEquals(self, __a0: object) -> bool: ...

        def doHashCode(self) -> int: ...

        def enclosedBy(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.BoundingShape) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def getArea(self) -> float: ...

        def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

        def getCenter(self) -> ghidra.util.database.spatial.rect.Point2D: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

        def getMargin(self) -> float: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getParentKey(self) -> long: ...

        def getRange(self) -> ghidra.program.model.address.AddressRange: ...

        def getShape(self) -> ghidra.util.database.spatial.BoundedShape: ...

        def getSpace(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

        def getTableName(self) -> unicode: ...

        def getX1(self) -> object: ...

        def getX2(self) -> object: ...

        def getY1(self) -> object: ...

        def getY2(self) -> object: ...

        def hashCode(self) -> int: ...

        @overload
        def immutable(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @overload
        def immutable(self, __a0: object, __a1: object, __a2: object, __a3: object) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersects(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def setParentKey(self, __a0: long) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.util.database.spatial.BoundedShape) -> None: ...

        @overload
        def shapeEquals(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

        @overload
        def shapeEquals(self, __a0: ghidra.util.database.spatial.BoundedShape) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> ghidra.util.database.spatial.BoundingShape: ...

        @staticmethod
        def unionIterable(__a0: java.lang.Iterable) -> ghidra.util.database.spatial.BoundingShape: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def bounds(self) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @property
        def lifespan(self) -> ghidra.trace.model.Lifespan: ...

        @property
        def parentKey(self) -> long: ...

        @parentKey.setter
        def parentKey(self, value: long) -> None: ...

        @property
        def range(self) -> ghidra.program.model.address.AddressRange: ...

        @property
        def shape(self) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @shape.setter
        def shape(self, value: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

        @property
        def space(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

    def __init__(self, __a0: ghidra.util.database.DBCachedObjectStoreFactory, __a1: unicode, __a2: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapSpace, __a3: java.lang.Class, __a4: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMap.DBTraceAddressSnapRangePropertyMapDataFactory, __a5: bool): ...



    def asSpatialMap(self) -> ghidra.util.database.spatial.AbstractConstraintsTreeSpatialMap: ...

    def checkIntegrity(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataByKey(self, __a0: long) -> ghidra.util.database.spatial.DBTreeDataRecord: ...

    def getMapSpace(self) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapSpace: ...

    def getShapeSpace(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

    def getUserIndex(self, __a0: java.lang.Class, __a1: ghidra.util.database.DBObjectColumn) -> ghidra.util.database.DBCachedObjectIndex: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def mapSpace(self) -> ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapSpace: ...