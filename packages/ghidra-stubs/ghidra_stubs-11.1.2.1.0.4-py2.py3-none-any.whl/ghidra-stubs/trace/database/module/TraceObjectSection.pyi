from typing import overload
import ghidra.program.model.address
import ghidra.trace.model
import ghidra.trace.model.modules
import ghidra.trace.model.target
import ghidra.util.database
import java.lang


class TraceObjectSection(ghidra.trace.model.modules.TraceSection, ghidra.trace.model.target.TraceObjectInterface, object):








    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getEnd(self) -> ghidra.program.model.address.Address: ...

    def getModule(self) -> ghidra.trace.model.modules.TraceModule: ...

    def getName(self) -> unicode: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getPath(self) -> unicode: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getStart(self) -> ghidra.program.model.address.Address: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def setName(self, __a0: unicode) -> None: ...

    @overload
    def setName(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> None: ...

    def setRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def end(self) -> ghidra.program.model.address.Address: ...

    @property
    def module(self) -> ghidra.trace.model.modules.TraceModule: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def path(self) -> unicode: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def start(self) -> ghidra.program.model.address.Address: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...