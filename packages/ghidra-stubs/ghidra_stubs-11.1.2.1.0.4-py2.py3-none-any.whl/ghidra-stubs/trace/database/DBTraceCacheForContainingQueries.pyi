from typing import overload
import ghidra.program.model.address
import ghidra.trace.database
import ghidra.trace.model
import java.lang


class DBTraceCacheForContainingQueries(object):





    class GetKey(object):
        addr: ghidra.program.model.address.Address
        snap: long



        def __init__(self, __a0: long, __a1: ghidra.program.model.address.Address): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: int, __a1: int, __a2: int): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getContaining(self, __a0: ghidra.trace.database.DBTraceCacheForContainingQueries.GetKey) -> object: ...

    def hashCode(self) -> int: ...

    def invalidate(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def notifyEntryRemoved(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: object) -> None: ...

    def notifyEntryShapeChanged(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: object) -> None: ...

    def notifyNewEntries(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressSetView, __a2: object) -> None: ...

    @overload
    def notifyNewEntry(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: object) -> None: ...

    @overload
    def notifyNewEntry(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

