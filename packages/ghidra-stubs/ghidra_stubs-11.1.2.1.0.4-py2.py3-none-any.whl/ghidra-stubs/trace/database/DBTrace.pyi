from typing import List
from typing import overload
import db
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.database
import ghidra.trace.database.address
import ghidra.trace.database.data
import ghidra.trace.database.listing
import ghidra.trace.database.program
import ghidra.trace.database.property
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.database
import ghidra.util.task
import java.io
import java.lang
import java.util
import java.util.concurrent.locks
import utility.function


class DBTrace(ghidra.util.database.DBCachedDomainObjectAdapter, ghidra.trace.model.Trace, ghidra.trace.util.TraceChangeManager):




    @overload
    def __init__(self, __a0: unicode, __a1: ghidra.program.model.lang.CompilerSpec, __a2: object): ...

    @overload
    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: ghidra.util.task.TaskMonitor, __a3: object): ...



    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addDirectChangeListener(self, __a0: ghidra.trace.database.DBTraceDirectChangeListener) -> None: ...

    def addDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def assertValidAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def assertValidSpace(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def categoryAdded(self, __a0: long, __a1: ghidra.program.model.data.Category) -> None: ...

    def categoryDeleted(self, __a0: long, __a1: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryMoved(self, __a0: long, __a1: ghidra.program.model.data.CategoryPath, __a2: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryRenamed(self, __a0: long, __a1: unicode, __a2: unicode) -> None: ...

    def checkExclusiveAccess(self) -> None: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.database.program.DBTraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def dataTypeAdded(self, __a0: long, __a1: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeChanged(self, __a0: long, __a1: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeDeleted(self, __a0: long, __a1: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeMoved(self, __a0: long, __a1: ghidra.program.model.data.DataTypePath, __a2: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeNameChanged(self, __a0: long, __a1: unicode, __a2: unicode) -> None: ...

    def dataTypeReplaced(self, __a0: long, __a1: ghidra.program.model.data.DataTypePath, __a2: ghidra.program.model.data.DataTypePath) -> None: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fireEvent(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> None: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def flushWriteCache(self) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getAllRedoNames(self) -> List[object]: ...

    def getAllUndoNames(self) -> List[object]: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getChangeSet(self) -> ghidra.framework.data.DomainObjectDBChangeSet: ...

    def getChangeStatus(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getCommentAdapter(self) -> ghidra.trace.database.listing.DBTraceCommentAdapter: ...

    def getConsumerList(self) -> List[object]: ...

    @overload
    @staticmethod
    def getContentHandler(__a0: unicode) -> ghidra.framework.data.ContentHandler: ...

    @overload
    @staticmethod
    def getContentHandler(__a0: ghidra.framework.model.DomainObject) -> ghidra.framework.data.ContentHandler: ...

    @overload
    @staticmethod
    def getContentHandler(__a0: java.lang.Class) -> ghidra.framework.data.ContentHandler: ...

    @staticmethod
    def getContentHandlers() -> java.util.Set: ...

    def getCreationDate(self) -> java.util.Date: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDBHandle(self) -> db.DBHandle: ...

    def getDataSettingsAdapter(self) -> ghidra.trace.database.data.DBTraceDataSettingsAdapter: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEmulatorCacheVersion(self) -> long: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getExecutablePath(self) -> unicode: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getInternalAddressFactory(self) -> ghidra.trace.database.address.TraceAddressFactory: ...

    def getInternalAddressPropertyManager(self) -> ghidra.trace.database.property.DBTraceAddressPropertyManager: ...

    def getLock(self) -> ghidra.util.Lock: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getOverlaySpaceAdapter(self) -> ghidra.trace.database.address.DBTraceOverlaySpaceAdapter: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getReadWriteLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getStoreFactory(self) -> ghidra.util.database.DBCachedObjectStoreFactory: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def getUndoStackDepth(self) -> int: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def init(self) -> None: ...

    def invalidate(self) -> None: ...

    def invalidateWriteCache(self) -> None: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isClosing(self) -> bool: ...

    @staticmethod
    def isLegacy(__a0: ghidra.trace.model.Trace) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeDirectChangeListener(self, __a0: ghidra.trace.database.DBTraceDirectChangeListener) -> None: ...

    def removeDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setChanged(self, __a0: ghidra.trace.util.TraceChangeRecord) -> None: ...

    def setEmulatorCacheVersion(self, __a0: long) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setExecutablePath(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    def sourceArchiveAdded(self, __a0: ghidra.util.UniversalID) -> None: ...

    def sourceArchiveChanged(self, __a0: ghidra.util.UniversalID) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    def updateViewportsSnapshotAdded(self, __a0: ghidra.trace.model.time.TraceSnapshot) -> None: ...

    def updateViewportsSnapshotChanged(self, __a0: ghidra.trace.model.time.TraceSnapshot) -> None: ...

    def updateViewportsSnapshotDeleted(self, __a0: ghidra.trace.model.time.TraceSnapshot) -> None: ...

    def updateViewsAddRegionBlock(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateViewsAddSpaceBlock(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def updateViewsBytesChanged(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def updateViewsChangeRegionBlockFlags(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.trace.model.Lifespan) -> None: ...

    def updateViewsChangeRegionBlockLifespan(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.trace.model.Lifespan) -> None: ...

    def updateViewsChangeRegionBlockName(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateViewsChangeRegionBlockRange(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.program.model.address.AddressRange) -> None: ...

    def updateViewsDeleteRegionBlock(self, __a0: ghidra.trace.model.memory.TraceMemoryRegion) -> None: ...

    def updateViewsDeleteSpaceBlock(self, __a0: ghidra.program.model.address.AddressSpace) -> None: ...

    def updateViewsRefreshBlocks(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalCallback) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalSupplier) -> object: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.database.bookmark.DBTraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.database.breakpoint.DBTraceBreakpointManager: ...

    @property
    def changeSet(self) -> ghidra.trace.database.DBTraceChangeSet: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> None: ...  # No getter available.

    @changed.setter
    def changed(self, value: ghidra.trace.util.TraceChangeRecord) -> None: ...

    @property
    def closing(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.database.listing.DBTraceCodeManager: ...

    @property
    def commentAdapter(self) -> ghidra.trace.database.listing.DBTraceCommentAdapter: ...

    @property
    def creationDate(self) -> java.util.Date: ...

    @property
    def dataSettingsAdapter(self) -> ghidra.trace.database.data.DBTraceDataSettingsAdapter: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.database.data.DBTraceDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def emulatorCacheVersion(self) -> long: ...

    @emulatorCacheVersion.setter
    def emulatorCacheVersion(self, value: long) -> None: ...

    @property
    def equateManager(self) -> ghidra.trace.database.symbol.DBTraceEquateManager: ...

    @property
    def executablePath(self) -> unicode: ...

    @executablePath.setter
    def executablePath(self, value: unicode) -> None: ...

    @property
    def internalAddressFactory(self) -> ghidra.trace.database.address.TraceAddressFactory: ...

    @property
    def internalAddressPropertyManager(self) -> ghidra.trace.database.property.DBTraceAddressPropertyManager: ...

    @property
    def memoryManager(self) -> ghidra.trace.database.memory.DBTraceMemoryManager: ...

    @property
    def moduleManager(self) -> ghidra.trace.database.module.DBTraceModuleManager: ...

    @property
    def objectManager(self) -> ghidra.trace.database.target.DBTraceObjectManager: ...

    @property
    def overlaySpaceAdapter(self) -> ghidra.trace.database.address.DBTraceOverlaySpaceAdapter: ...

    @property
    def platformManager(self) -> ghidra.trace.database.guest.DBTracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.database.program.DBTraceVariableSnapProgramView: ...

    @property
    def referenceManager(self) -> ghidra.trace.database.symbol.DBTraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.database.context.DBTraceRegisterContextManager: ...

    @property
    def stackManager(self) -> ghidra.trace.database.stack.DBTraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.database.module.DBTraceStaticMappingManager: ...

    @property
    def storeFactory(self) -> ghidra.util.database.DBCachedObjectStoreFactory: ...

    @property
    def symbolManager(self) -> ghidra.trace.database.symbol.DBTraceSymbolManager: ...

    @property
    def threadManager(self) -> ghidra.trace.database.thread.DBTraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.database.time.DBTraceTimeManager: ...