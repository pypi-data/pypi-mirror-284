from typing import List
from typing import overload
import db
import ghidra.dbg.target.schema
import ghidra.dbg.util
import ghidra.program.model.address
import ghidra.trace.database
import ghidra.trace.database.module
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.trace.model.breakpoint
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.stack
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.util.database
import java.io
import java.lang
import java.util
import java.util.function
import java.util.stream


class DBTraceObjectManager(object, ghidra.trace.model.target.TraceObjectManager, ghidra.trace.database.DBTraceManager):





    class DBTraceObjectSchemaDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.dbg.target.schema.SchemaContext, __a1: db.StringField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace): ...



    def addBreakpoint(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection, __a4: java.util.Collection, __a5: bool, __a6: unicode) -> ghidra.trace.model.breakpoint.TraceObjectBreakpointLocation: ...

    def addMemoryRegion(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan, __a2: ghidra.program.model.address.AddressRange, __a3: java.util.Collection) -> ghidra.trace.model.memory.TraceObjectMemoryRegion: ...

    def addModule(self, __a0: unicode, __a1: unicode, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> ghidra.trace.model.modules.TraceObjectModule: ...

    def addSection(self, __a0: unicode, __a1: unicode, __a2: ghidra.trace.model.Lifespan, __a3: ghidra.program.model.address.AddressRange) -> ghidra.trace.database.module.TraceObjectSection: ...

    def addStack(self, __a0: List[object], __a1: long) -> ghidra.trace.model.stack.TraceObjectStack: ...

    def addStackFrame(self, __a0: List[object], __a1: long) -> ghidra.trace.model.stack.TraceObjectStackFrame: ...

    def addThread(self, __a0: unicode, __a1: unicode, __a2: ghidra.trace.model.Lifespan) -> ghidra.trace.model.thread.TraceObjectThread: ...

    def assertMyThread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.trace.model.thread.TraceThread: ...

    def clear(self) -> None: ...

    def createObject(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.trace.database.target.DBTraceObject: ...

    def createRootObject(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    def cullDisconnectedObjects(self) -> None: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushWbCaches(self) -> None: ...

    @overload
    def getAllObjects(self) -> java.util.stream.Stream: ...

    @overload
    def getAllObjects(self, __a0: java.lang.Class) -> java.util.Collection: ...

    def getAllValues(self) -> java.util.stream.Stream: ...

    def getClass(self) -> java.lang.Class: ...

    def getLatestSuccessor(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.trace.model.target.TraceObjectKeyPath, __a2: long, __a3: java.lang.Class) -> ghidra.trace.model.target.TraceObjectInterface: ...

    def getObjectByCanonicalPath(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.trace.database.target.DBTraceObject: ...

    def getObjectById(self, __a0: long) -> ghidra.trace.database.target.DBTraceObject: ...

    def getObjectByPath(self, __a0: long, __a1: unicode, __a2: java.lang.Class) -> ghidra.trace.model.target.TraceObjectInterface: ...

    def getObjectContaining(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode, __a3: java.lang.Class) -> ghidra.trace.model.target.TraceObjectInterface: ...

    def getObjectCount(self) -> int: ...

    def getObjectsAddressSet(self, __a0: long, __a1: unicode, __a2: java.lang.Class, __a3: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    def getObjectsAtSnap(self, __a0: long, __a1: java.lang.Class) -> java.util.Collection: ...

    @overload
    def getObjectsByPath(self, __a0: unicode, __a1: java.lang.Class) -> java.util.Collection: ...

    @overload
    def getObjectsByPath(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObjectKeyPath) -> java.util.stream.Stream: ...

    def getObjectsContaining(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode, __a3: java.lang.Class) -> java.util.Collection: ...

    def getObjectsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: unicode, __a3: java.lang.Class) -> java.util.Collection: ...

    def getRootObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getRootSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getRootValue(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    def getSuccessor(self, __a0: ghidra.trace.model.target.TraceObject, __a1: ghidra.dbg.util.PathPredicates, __a2: long, __a3: java.lang.Class) -> ghidra.trace.model.target.TraceObjectInterface: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getValuePaths(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def getValuesAt(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode) -> java.util.Collection: ...

    @overload
    def getValuesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    @overload
    def getValuesIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: unicode) -> java.util.Collection: ...

    def hasSchema(self) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def queryAllInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class) -> java.util.stream.Stream: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def waitWbWorkers(self) -> None: ...

    @property
    def allObjects(self) -> java.util.stream.Stream: ...

    @property
    def allValues(self) -> java.util.stream.Stream: ...

    @property
    def objectCount(self) -> int: ...

    @property
    def rootObject(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def rootSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def rootValue(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...