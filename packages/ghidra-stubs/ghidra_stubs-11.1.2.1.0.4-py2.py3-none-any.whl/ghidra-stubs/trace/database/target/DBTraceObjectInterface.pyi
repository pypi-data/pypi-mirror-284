from typing import overload
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.trace.util
import ghidra.util.database
import java.lang


class DBTraceObjectInterface(ghidra.trace.model.target.TraceObjectInterface, ghidra.trace.model.TraceUniqueObject, object):





    class Translator(object):




        def __init__(self, __a0: unicode, __a1: ghidra.trace.database.target.DBTraceObject, __a2: object): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def translate(self, __a0: ghidra.trace.util.TraceChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def computeMaxSnap(self) -> long: ...

    def computeMinSnap(self) -> long: ...

    def computeSpan(self) -> ghidra.trace.model.Lifespan: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def spaceForValue(self, __a0: long, __a1: unicode) -> ghidra.trace.util.TraceAddressSpace: ...

    @overload
    @staticmethod
    def spaceForValue(__a0: ghidra.trace.model.target.TraceObject, __a1: long, __a2: unicode) -> ghidra.trace.util.TraceAddressSpace: ...

    def toString(self) -> unicode: ...

    def translateEvent(self, __a0: ghidra.trace.util.TraceChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def object(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...