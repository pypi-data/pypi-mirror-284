from typing import List
from typing import overload
import ghidra.trace.database.target
import ghidra.trace.model.target
import java.lang
import java.util


class DBTraceObjectValPath(object, ghidra.trace.model.target.TraceObjectValPath):
    EMPTY: ghidra.trace.database.target.DBTraceObjectValPath







    def append(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> ghidra.trace.model.target.TraceObjectValPath: ...

    @overload
    def compareTo(self, __a0: ghidra.trace.model.target.TraceObjectValPath) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def contains(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestination(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.trace.model.target.TraceObject: ...

    def getDestinationValue(self, __a0: object) -> object: ...

    def getEntryList(self) -> List[object]: ...

    def getFirstEntry(self) -> ghidra.trace.model.target.TraceObjectValue: ...

    def getKeyList(self) -> List[object]: ...

    def getLastEntry(self) -> ghidra.trace.model.target.TraceObjectValue: ...

    def getSource(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.trace.model.target.TraceObject: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of() -> ghidra.trace.database.target.DBTraceObjectValPath: ...

    @overload
    @staticmethod
    def of(__a0: List[ghidra.trace.database.target.DBTraceObjectValue]) -> ghidra.trace.database.target.DBTraceObjectValPath: ...

    @overload
    @staticmethod
    def of(__a0: java.util.Collection) -> ghidra.trace.database.target.DBTraceObjectValPath: ...

    def prepend(self, __a0: ghidra.trace.model.target.TraceObjectValue) -> ghidra.trace.model.target.TraceObjectValPath: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def entryList(self) -> List[object]: ...

    @property
    def firstEntry(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...

    @property
    def keyList(self) -> List[object]: ...

    @property
    def lastEntry(self) -> ghidra.trace.database.target.DBTraceObjectValue: ...