from typing import overload
import db
import ghidra.trace.database.target
import ghidra.util.database
import java.lang


class DBTraceObjectDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




    def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



    def encodeField(self, __a0: object) -> db.Field: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFieldType(self) -> java.lang.Class: ...

    def getObjectType(self) -> java.lang.Class: ...

    def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

    def getValueType(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def store(self, __a0: ghidra.trace.database.target.DBTraceObject, __a1: db.LongField) -> None: ...

    @overload
    def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

    @overload
    def store(self, __a0: object, __a1: db.Field) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

