from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.symbol
import ghidra.trace.database.space
import ghidra.trace.database.symbol
import ghidra.trace.model
import ghidra.trace.model.symbol
import ghidra.trace.model.thread
import java.lang
import java.util


class DBTraceReferenceSpace(object, ghidra.trace.database.space.DBTraceSpaceBased, ghidra.trace.model.symbol.TraceReferenceSpace):




    def __init__(self, __a0: ghidra.trace.database.symbol.DBTraceReferenceManager, __a1: db.DBHandle, __a2: ghidra.program.model.address.AddressSpace, __a3: ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager.DBTraceSpaceEntry, __a4: ghidra.trace.model.thread.TraceThread): ...



    def addMemoryReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType, __a5: int) -> ghidra.trace.model.symbol.TraceReference: ...

    def addOffsetReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: bool, __a4: long, __a5: ghidra.program.model.symbol.RefType, __a6: ghidra.program.model.symbol.SourceType, __a7: int) -> ghidra.trace.database.symbol.DBTraceOffsetReference: ...

    @overload
    def addReference(self, __a0: ghidra.trace.model.symbol.TraceReference) -> ghidra.trace.database.symbol.DBTraceReference: ...

    @overload
    def addReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.symbol.Reference) -> ghidra.trace.model.symbol.TraceReference: ...

    def addRegisterReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.lang.Register, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType, __a5: int) -> ghidra.trace.model.symbol.TraceReference: ...

    def addShiftedReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: int, __a4: ghidra.program.model.symbol.RefType, __a5: ghidra.program.model.symbol.SourceType, __a6: int) -> ghidra.trace.database.symbol.DBTraceShiftedReference: ...

    def addStackReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: int, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType, __a5: int) -> ghidra.trace.model.symbol.TraceReference: ...

    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.Address) -> long: ...

    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def clearReferencesFrom(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def clearReferencesTo(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    @staticmethod
    def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

    def equals(self, __a0: object) -> bool: ...

    def explainLanguages(self, __a0: ghidra.program.model.address.AddressSpace) -> unicode: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getFlowReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getFrameLevel(self) -> int: ...

    def getPrimaryReferenceFrom(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: int) -> ghidra.trace.database.symbol.DBTraceReference: ...

    def getReference(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: int) -> ghidra.trace.database.symbol.DBTraceReference: ...

    def getReferenceCountFrom(self, __a0: long, __a1: ghidra.program.model.address.Address) -> int: ...

    def getReferenceCountTo(self, __a0: long, __a1: ghidra.program.model.address.Address) -> int: ...

    def getReferenceDestinations(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.program.model.address.AddressSetView: ...

    def getReferenceSources(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    @overload
    def getReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: int) -> java.util.Collection: ...

    def getReferencesFromRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getReferencesTo(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getReferencesToRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hasFlowReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def hasReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def hasReferencesFrom(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: int) -> bool: ...

    def hasReferencesTo(self, __a0: long, __a1: ghidra.program.model.address.Address) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def isMySpace(self, __a0: ghidra.program.model.address.AddressSpace) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def toOverlay(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def frameLevel(self) -> int: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...