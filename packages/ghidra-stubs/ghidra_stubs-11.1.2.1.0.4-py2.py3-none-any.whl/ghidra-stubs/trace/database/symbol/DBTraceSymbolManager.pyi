from typing import List
from typing import overload
import db
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import ghidra.trace.database
import ghidra.trace.database.map
import ghidra.trace.database.symbol
import ghidra.trace.model
import ghidra.trace.model.symbol
import ghidra.util
import ghidra.util.database
import ghidra.util.database.spatial
import ghidra.util.database.spatial.rect
import java.io
import java.lang
import java.util


class DBTraceSymbolManager(object, ghidra.trace.model.symbol.TraceSymbolManager, ghidra.trace.database.DBTraceManager):
    PRIMALITY_COMPARATOR: java.util.Comparator




    class DBTraceSymbolIDEntry(ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.AbstractDBTraceAddressSnapRangePropertyMapData):




        def __init__(self, __a0: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

        @overload
        def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

        @overload
        def contains(self, __a0: ghidra.util.database.spatial.rect.Point2D) -> bool: ...

        @overload
        def contains(self, __a0: object, __a1: object) -> bool: ...

        def description(self) -> unicode: ...

        def doEquals(self, __a0: object) -> bool: ...

        def doHashCode(self) -> int: ...

        def enclosedBy(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def encloses(self, __a0: ghidra.util.database.spatial.BoundingShape) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def getArea(self) -> float: ...

        def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

        def getCenter(self) -> ghidra.util.database.spatial.rect.Point2D: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

        def getMargin(self) -> float: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getParentKey(self) -> long: ...

        def getRange(self) -> ghidra.program.model.address.AddressRange: ...

        def getShape(self) -> ghidra.util.database.spatial.BoundedShape: ...

        def getSpace(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

        def getTableName(self) -> unicode: ...

        def getX1(self) -> object: ...

        def getX2(self) -> object: ...

        def getY1(self) -> object: ...

        def getY2(self) -> object: ...

        def hashCode(self) -> int: ...

        @overload
        def immutable(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.model.TraceAddressSnapRange: ...

        @overload
        def immutable(self, __a0: object, __a1: object, __a2: object, __a3: object) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        def intersects(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def setParentKey(self, __a0: long) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

        @overload
        def setShape(self, __a0: ghidra.util.database.spatial.BoundedShape) -> None: ...

        @overload
        def shapeEquals(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

        @overload
        def shapeEquals(self, __a0: ghidra.util.database.spatial.BoundedShape) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

        @overload
        def unionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> ghidra.util.database.spatial.BoundingShape: ...

        @staticmethod
        def unionIterable(__a0: java.lang.Iterable) -> ghidra.util.database.spatial.BoundingShape: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DBTraceVariableStorageEntry(ghidra.util.database.DBAnnotatedObject):




        def __init__(self, __a0: ghidra.trace.database.symbol.DBTraceSymbolManager, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getKey(self) -> long: ...

        def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

        def getProgram(self) -> ghidra.program.model.listing.Program: ...

        def getStorage(self) -> ghidra.program.model.listing.VariableStorage: ...

        def getTableName(self) -> unicode: ...

        def hashCode(self) -> int: ...

        @overload
        def isDeleted(self) -> bool: ...

        @overload
        def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setInvalid(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def program(self) -> ghidra.program.model.listing.Program: ...

        @property
        def storage(self) -> ghidra.program.model.listing.VariableStorage: ...




    class MySymbolTypes(java.lang.Enum):
        CLASS: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        GLOBAL_VAR: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        LABEL: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        NAMESPACE: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        NO_LIBRARY: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        NO_NULL: ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes
        VALUES: List[object]







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.database.symbol.DBTraceSymbolManager.MySymbolTypes]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class VariableStorageDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.program.model.listing.VariableStorage, __a1: db.StringField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: db.DBHandle, __a1: ghidra.framework.data.OpenMode, __a2: java.util.concurrent.locks.ReadWriteLock, __a3: ghidra.util.task.TaskMonitor, __a4: ghidra.program.model.lang.Language, __a5: ghidra.trace.database.DBTrace, __a6: ghidra.trace.database.thread.DBTraceThreadManager, __a7: ghidra.trace.database.data.DBTraceDataTypeManager, __a8: ghidra.trace.database.address.DBTraceOverlaySpaceAdapter): ...



    def allNamespaces(self) -> ghidra.trace.model.symbol.TraceSymbolView: ...

    def allSymbols(self) -> ghidra.trace.model.symbol.TraceSymbolView: ...

    @overload
    def assertIsMine(self, __a0: ghidra.program.model.symbol.Namespace) -> ghidra.trace.database.symbol.DBTraceNamespaceSymbol: ...

    @overload
    def assertIsMine(self, __a0: ghidra.program.model.symbol.Symbol) -> ghidra.trace.database.symbol.AbstractDBTraceSymbol: ...

    @overload
    def checkIsMine(self, __a0: ghidra.program.model.symbol.Namespace) -> ghidra.trace.database.symbol.DBTraceNamespaceSymbol: ...

    @overload
    def checkIsMine(self, __a0: ghidra.program.model.symbol.Symbol) -> ghidra.trace.database.symbol.AbstractDBTraceSymbol: ...

    def classes(self) -> ghidra.trace.model.symbol.TraceClassSymbolView: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getGlobalNamespace(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbol: ...

    def getIDsAdded(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getIDsRemoved(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getSymbolByID(self, __a0: long) -> ghidra.trace.model.symbol.TraceSymbol: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self, __a0: bool) -> None: ...

    def labels(self) -> ghidra.trace.model.symbol.TraceLabelSymbolView: ...

    def namespaces(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbolView: ...

    def notLabels(self) -> ghidra.trace.model.symbol.TraceSymbolNoDuplicatesView: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def replaceDataTypes(self, __a0: java.util.Map) -> None: ...

    def toString(self) -> unicode: ...

    def uniqueNamespaces(self) -> ghidra.trace.model.symbol.TraceSymbolNoDuplicatesView: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def globalNamespace(self) -> ghidra.trace.database.symbol.DBTraceNamespaceSymbol: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...