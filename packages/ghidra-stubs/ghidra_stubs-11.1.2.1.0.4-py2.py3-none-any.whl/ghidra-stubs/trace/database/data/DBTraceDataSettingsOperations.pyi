from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.data
import ghidra.trace.model
import ghidra.trace.model.map
import ghidra.util.database.spatial
import java.lang
import java.util
import java.util.concurrent.locks
import java.util.function


class DBTraceDataSettingsOperations(ghidra.trace.model.map.TraceAddressSnapRangePropertyMapOperations, object):
    EMPTY_MAP: ghidra.util.database.spatial.SpatialMap







    @staticmethod
    def assertKnownType(__a0: object) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode) -> None: ...

    def deleteValue(self, __a0: object) -> None: ...

    def doExactOrNew(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode) -> ghidra.trace.database.data.DBTraceDataSettingsAdapter.DBTraceSettingsEntry: ...

    def doGetEntry(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode) -> ghidra.trace.database.data.DBTraceDataSettingsAdapter.DBTraceSettingsEntry: ...

    def doGetExactEntry(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode) -> ghidra.trace.database.data.DBTraceDataSettingsAdapter.DBTraceSettingsEntry: ...

    def doMakeWay(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode) -> None: ...

    @staticmethod
    def emptyMap() -> ghidra.util.database.spatial.SpatialMap: ...

    def entries(self) -> java.util.Collection: ...

    def equals(self, __a0: object) -> bool: ...

    def firstEntry(self) -> java.util.Map.Entry: ...

    def firstKey(self) -> ghidra.util.database.spatial.BoundedShape: ...

    def firstValue(self) -> object: ...

    @overload
    def getAddressSetView(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressSetView(self, __a0: ghidra.trace.model.Lifespan, __a1: java.util.function.Predicate) -> ghidra.program.model.address.AddressSetView: ...

    def getClass(self) -> java.lang.Class: ...

    def getLock(self) -> java.util.concurrent.locks.ReadWriteLock: ...

    def getLong(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode) -> long: ...

    def getSettingNames(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getString(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode) -> unicode: ...

    def getValue(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: unicode) -> object: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address) -> bool: ...

    def keys(self) -> java.util.Collection: ...

    def makeWay(self, __a0: ghidra.trace.database.data.DBTraceDataSettingsAdapter.DBTraceSettingsEntry, __a1: ghidra.trace.model.Lifespan) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def orderedEntries(self) -> java.util.Collection: ...

    def orderedKeys(self) -> java.util.Collection: ...

    def orderedValues(self) -> java.util.Collection: ...

    @overload
    def put(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.trace.model.Lifespan, __a2: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.AddressRange, __a1: ghidra.trace.model.Lifespan, __a2: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: object) -> object: ...

    @overload
    def put(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long, __a4: object) -> object: ...

    def reduce(self, __a0: object) -> ghidra.util.database.spatial.SpatialMap: ...

    @overload
    def remove(self, __a0: java.util.Map.Entry) -> bool: ...

    @overload
    def remove(self, __a0: ghidra.util.database.spatial.BoundedShape, __a1: object) -> bool: ...

    def setLong(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode, __a3: long) -> None: ...

    def setString(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode, __a3: unicode) -> None: ...

    def setValue(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: unicode, __a3: object) -> None: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    def values(self) -> java.util.Collection: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def lock(self) -> java.util.concurrent.locks.ReadWriteLock: ...