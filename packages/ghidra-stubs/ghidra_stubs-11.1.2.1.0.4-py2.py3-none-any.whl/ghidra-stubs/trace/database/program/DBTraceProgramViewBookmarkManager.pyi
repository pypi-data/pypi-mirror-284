from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.trace.model.program
import ghidra.util.task
import java.awt
import java.lang
import java.util
import javax.swing


class DBTraceProgramViewBookmarkManager(object, ghidra.trace.model.program.TraceProgramViewBookmarkManager):
    OLD_BOOKMARK_PROPERTY_OBJECT_CLASS1: unicode = u'ghidra.app.plugin.bookmark.BookmarkInfo'
    OLD_BOOKMARK_PROPERTY_OBJECT_CLASS2: unicode = u'ghidra.program.util.Bookmark'



    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView): ...



    def defineType(self, __a0: unicode, __a1: javax.swing.Icon, __a2: java.awt.Color, __a3: int) -> ghidra.program.model.listing.BookmarkType: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def getBookmark(self, __a0: long) -> ghidra.program.model.listing.Bookmark: ...

    @overload
    def getBookmark(self, __a0: ghidra.program.model.address.Address, __a1: unicode, __a2: unicode) -> ghidra.program.model.listing.Bookmark: ...

    def getBookmarkAddresses(self, __a0: unicode) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getBookmarkCount(self) -> int: ...

    @overload
    def getBookmarkCount(self, __a0: unicode) -> int: ...

    def getBookmarkType(self, __a0: unicode) -> ghidra.program.model.listing.BookmarkType: ...

    def getBookmarkTypes(self) -> List[ghidra.program.model.listing.BookmarkType]: ...

    @overload
    def getBookmarks(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.listing.Bookmark]: ...

    @overload
    def getBookmarks(self, __a0: ghidra.program.model.address.Address, __a1: unicode) -> List[ghidra.program.model.listing.Bookmark]: ...

    @overload
    def getBookmarksIterator(self) -> java.util.Iterator: ...

    @overload
    def getBookmarksIterator(self, __a0: unicode) -> java.util.Iterator: ...

    @overload
    def getBookmarksIterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> java.util.Iterator: ...

    def getCategories(self, __a0: unicode) -> List[unicode]: ...

    def getClass(self) -> java.lang.Class: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getSnap(self) -> long: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hasBookmarks(self, __a0: unicode) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeBookmark(self, __a0: ghidra.program.model.listing.Bookmark) -> None: ...

    @overload
    def removeBookmarks(self, __a0: unicode) -> None: ...

    @overload
    def removeBookmarks(self, __a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def removeBookmarks(self, __a0: unicode, __a1: unicode, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def removeBookmarks(self, __a0: ghidra.program.model.address.AddressSetView, __a1: unicode, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def removeBookmarks(self, __a0: ghidra.program.model.address.AddressSetView, __a1: unicode, __a2: unicode, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def setBookmark(self, __a0: ghidra.program.model.address.Address, __a1: unicode, __a2: unicode, __a3: unicode) -> ghidra.program.model.listing.Bookmark: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bookmarkCount(self) -> int: ...

    @property
    def bookmarkTypes(self) -> List[ghidra.program.model.listing.BookmarkType]: ...

    @property
    def bookmarksIterator(self) -> java.util.Iterator: ...

    @property
    def program(self) -> ghidra.trace.model.program.TraceProgramView: ...

    @property
    def snap(self) -> long: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...