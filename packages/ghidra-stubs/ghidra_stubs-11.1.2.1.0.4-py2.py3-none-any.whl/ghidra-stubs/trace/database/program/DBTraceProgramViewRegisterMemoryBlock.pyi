from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.mem
import java.io
import java.lang


class DBTraceProgramViewRegisterMemoryBlock(object, ghidra.program.model.mem.MemoryBlock):
    ARTIFICIAL: int = 16
    EXECUTE: int = 1
    EXTERNAL_BLOCK_NAME: unicode = u'EXTERNAL'
    READ: int = 4
    REGS_BLOCK_NAME: unicode = u'regs'
    VOLATILE: int = 8
    WRITE: int = 2



    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView, __a1: ghidra.trace.database.memory.DBTraceMemorySpace): ...



    @overload
    def compareTo(self, __a0: ghidra.program.model.mem.MemoryBlock) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def contains(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getByte(self, __a0: ghidra.program.model.address.Address) -> int: ...

    @overload
    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> int: ...

    @overload
    def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getData(self) -> java.io.InputStream: ...

    def getEnd(self) -> ghidra.program.model.address.Address: ...

    def getFlags(self) -> int: ...

    def getName(self) -> unicode: ...

    def getSize(self) -> long: ...

    def getSizeAsBigInteger(self) -> long: ...

    def getSourceInfos(self) -> List[object]: ...

    def getSourceName(self) -> unicode: ...

    def getStart(self) -> ghidra.program.model.address.Address: ...

    def getType(self) -> ghidra.program.model.mem.MemoryBlockType: ...

    def hashCode(self) -> int: ...

    def isArtificial(self) -> bool: ...

    def isExecute(self) -> bool: ...

    def isExternalBlock(self) -> bool: ...

    def isInitialized(self) -> bool: ...

    def isLoaded(self) -> bool: ...

    def isMapped(self) -> bool: ...

    def isOverlay(self) -> bool: ...

    def isRead(self) -> bool: ...

    def isVolatile(self) -> bool: ...

    def isWrite(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def putByte(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> int: ...

    @overload
    def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

    def setArtificial(self, __a0: bool) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setExecute(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setPermissions(self, __a0: bool, __a1: bool, __a2: bool) -> None: ...

    def setRead(self, __a0: bool) -> None: ...

    def setSourceName(self, __a0: unicode) -> None: ...

    def setVolatile(self, __a0: bool) -> None: ...

    def setWrite(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressRange(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def artificial(self) -> bool: ...

    @artificial.setter
    def artificial(self, value: bool) -> None: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def data(self) -> java.io.InputStream: ...

    @property
    def end(self) -> ghidra.program.model.address.Address: ...

    @property
    def execute(self) -> bool: ...

    @execute.setter
    def execute(self, value: bool) -> None: ...

    @property
    def externalBlock(self) -> bool: ...

    @property
    def flags(self) -> int: ...

    @property
    def initialized(self) -> bool: ...

    @property
    def loaded(self) -> bool: ...

    @property
    def mapped(self) -> bool: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def overlay(self) -> bool: ...

    @property
    def read(self) -> bool: ...

    @read.setter
    def read(self, value: bool) -> None: ...

    @property
    def size(self) -> long: ...

    @property
    def sizeAsBigInteger(self) -> long: ...

    @property
    def sourceInfos(self) -> List[object]: ...

    @property
    def sourceName(self) -> unicode: ...

    @sourceName.setter
    def sourceName(self, value: unicode) -> None: ...

    @property
    def start(self) -> ghidra.program.model.address.Address: ...

    @property
    def type(self) -> ghidra.program.model.mem.MemoryBlockType: ...

    @property
    def volatile(self) -> bool: ...

    @volatile.setter
    def volatile(self, value: bool) -> None: ...

    @property
    def write(self) -> bool: ...

    @write.setter
    def write(self, value: bool) -> None: ...