from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import java.lang
import java.util


class DBTraceProgramViewSymbolTable(object, ghidra.program.model.symbol.SymbolTable):




    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView): ...



    def addExternalEntryPoint(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def convertNamespaceToClass(self, __a0: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.listing.GhidraClass: ...

    def createClass(self, __a0: ghidra.program.model.symbol.Namespace, __a1: unicode, __a2: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.GhidraClass: ...

    def createExternalLibrary(self, __a0: unicode, __a1: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Library: ...

    @overload
    def createLabel(self, __a0: ghidra.program.model.address.Address, __a1: unicode, __a2: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def createLabel(self, __a0: ghidra.program.model.address.Address, __a1: unicode, __a2: ghidra.program.model.symbol.Namespace, __a3: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Symbol: ...

    def createNameSpace(self, __a0: ghidra.program.model.symbol.Namespace, __a1: unicode, __a2: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Namespace: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllSymbols(self, __a0: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getChildren(self, __a0: ghidra.program.model.symbol.Symbol) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getClass(self) -> java.lang.Class: ...

    def getClassNamespaces(self) -> java.util.Iterator: ...

    def getClassSymbol(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Symbol: ...

    def getDefinedSymbols(self) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getDynamicSymbolID(self, __a0: ghidra.program.model.address.Address) -> long: ...

    def getExternalEntryPointIterator(self) -> ghidra.program.model.address.AddressIterator: ...

    def getExternalSymbol(self, __a0: unicode) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getExternalSymbols(self) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getExternalSymbols(self, __a0: unicode) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getGlobalSymbol(self, __a0: unicode, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.Symbol: ...

    def getGlobalSymbols(self, __a0: unicode) -> List[object]: ...

    @overload
    def getLabelHistory(self) -> java.util.Iterator: ...

    @overload
    def getLabelHistory(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.symbol.LabelHistory]: ...

    def getLabelOrFunctionSymbols(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> List[object]: ...

    def getLibrarySymbol(self, __a0: unicode) -> ghidra.program.model.symbol.Symbol: ...

    def getLocalVariableSymbol(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getNamespace(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.Namespace: ...

    @overload
    def getNamespace(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Namespace: ...

    def getNamespaceSymbol(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Symbol: ...

    def getNumSymbols(self) -> int: ...

    def getOrCreateNameSpace(self, __a0: ghidra.program.model.symbol.Namespace, __a1: unicode, __a2: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Namespace: ...

    def getParameterSymbol(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Symbol: ...

    def getPrimarySymbol(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getPrimarySymbolIterator(self, __a0: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getPrimarySymbolIterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getPrimarySymbolIterator(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbol(self, __a0: long) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getSymbol(self, __a0: ghidra.program.model.symbol.Reference) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getSymbol(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.Symbol: ...

    @overload
    def getSymbolIterator(self) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbolIterator(self, __a0: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbolIterator(self, __a0: unicode, __a1: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbolIterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbols(self, __a0: long) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbols(self, __a0: unicode) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbols(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.symbol.Symbol]: ...

    @overload
    def getSymbols(self, __a0: ghidra.program.model.symbol.Namespace) -> ghidra.program.model.symbol.SymbolIterator: ...

    @overload
    def getSymbols(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace) -> List[object]: ...

    @overload
    def getSymbols(self, __a0: ghidra.program.model.address.AddressSetView, __a1: ghidra.program.model.symbol.SymbolType, __a2: bool) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getSymbolsAsIterator(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.SymbolIterator: ...

    def getUserSymbols(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.symbol.Symbol]: ...

    def getVariableSymbol(self, __a0: unicode, __a1: ghidra.program.model.listing.Function) -> ghidra.program.model.symbol.Symbol: ...

    def hasLabelHistory(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def hasSymbol(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def hashCode(self) -> int: ...

    def isExternalEntryPoint(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeExternalEntryPoint(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def removeSymbolSpecial(self, __a0: ghidra.program.model.symbol.Symbol) -> bool: ...

    def scanSymbolsByName(self, __a0: unicode) -> ghidra.program.model.symbol.SymbolIterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def classNamespaces(self) -> java.util.Iterator: ...

    @property
    def definedSymbols(self) -> ghidra.program.model.symbol.SymbolIterator: ...

    @property
    def externalEntryPointIterator(self) -> ghidra.program.model.address.AddressIterator: ...

    @property
    def externalSymbols(self) -> ghidra.program.model.symbol.SymbolIterator: ...

    @property
    def labelHistory(self) -> java.util.Iterator: ...

    @property
    def numSymbols(self) -> int: ...

    @property
    def symbolIterator(self) -> ghidra.program.model.symbol.SymbolIterator: ...