from typing import overload
import ghidra.program.model.address
import ghidra.program.model.util
import ghidra.util.task
import java.lang
import java.util


class DBTraceProgramViewPropertyMapManager(object, ghidra.program.model.util.PropertyMapManager):




    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView): ...



    def createIntPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.IntPropertyMap: ...

    def createLongPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.LongPropertyMap: ...

    def createObjectPropertyMap(self, __a0: unicode, __a1: java.lang.Class) -> ghidra.program.model.util.ObjectPropertyMap: ...

    def createStringPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.StringPropertyMap: ...

    def createVoidPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.VoidPropertyMap: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getIntPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.IntPropertyMap: ...

    def getLongPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.LongPropertyMap: ...

    def getObjectPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.ObjectPropertyMap: ...

    def getPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.PropertyMap: ...

    def getStringPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.StringPropertyMap: ...

    def getVoidPropertyMap(self, __a0: unicode) -> ghidra.program.model.util.VoidPropertyMap: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def propertyManagers(self) -> java.util.Iterator: ...

    @overload
    def removeAll(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def removeAll(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def removePropertyMap(self, __a0: unicode) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

