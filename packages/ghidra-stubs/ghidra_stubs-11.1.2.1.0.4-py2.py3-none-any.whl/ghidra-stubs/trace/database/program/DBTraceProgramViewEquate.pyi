from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.symbol
import ghidra.util
import java.lang


class DBTraceProgramViewEquate(object, ghidra.program.model.symbol.Equate):




    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView, __a1: ghidra.trace.database.symbol.DBTraceEquate): ...



    @overload
    def addReference(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def addReference(self, __a0: long, __a1: ghidra.program.model.address.Address) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisplayName(self) -> unicode: ...

    def getDisplayValue(self) -> unicode: ...

    def getEnumUUID(self) -> ghidra.util.UniversalID: ...

    def getName(self) -> unicode: ...

    def getReferenceCount(self) -> int: ...

    @overload
    def getReferences(self) -> List[ghidra.program.model.symbol.EquateReference]: ...

    @overload
    def getReferences(self, __a0: ghidra.program.model.address.Address) -> List[object]: ...

    def getValue(self) -> long: ...

    def hashCode(self) -> int: ...

    def isEnumBased(self) -> bool: ...

    def isValidUUID(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def removeReference(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

    @overload
    def removeReference(self, __a0: long, __a1: ghidra.program.model.address.Address) -> None: ...

    def renameEquate(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def displayName(self) -> unicode: ...

    @property
    def displayValue(self) -> unicode: ...

    @property
    def enumBased(self) -> bool: ...

    @property
    def enumUUID(self) -> ghidra.util.UniversalID: ...

    @property
    def name(self) -> unicode: ...

    @property
    def referenceCount(self) -> int: ...

    @property
    def references(self) -> List[ghidra.program.model.symbol.EquateReference]: ...

    @property
    def validUUID(self) -> bool: ...

    @property
    def value(self) -> long: ...