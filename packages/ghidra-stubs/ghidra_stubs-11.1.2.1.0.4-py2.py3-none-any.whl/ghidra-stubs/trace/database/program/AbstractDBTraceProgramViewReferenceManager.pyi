from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.symbol
import java.lang


class AbstractDBTraceProgramViewReferenceManager(object, ghidra.program.model.symbol.ReferenceManager):
    MNEMONIC: int = -1



    def __init__(self, __a0: ghidra.trace.database.program.DBTraceProgramView): ...



    @overload
    def addExternalReference(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: ghidra.program.model.symbol.ExternalLocation, __a3: ghidra.program.model.symbol.SourceType, __a4: ghidra.program.model.symbol.RefType) -> ghidra.program.model.symbol.Reference: ...

    @overload
    def addExternalReference(self, __a0: ghidra.program.model.address.Address, __a1: unicode, __a2: unicode, __a3: ghidra.program.model.address.Address, __a4: ghidra.program.model.symbol.SourceType, __a5: int, __a6: ghidra.program.model.symbol.RefType) -> ghidra.program.model.symbol.Reference: ...

    @overload
    def addExternalReference(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.symbol.Namespace, __a2: unicode, __a3: ghidra.program.model.address.Address, __a4: ghidra.program.model.symbol.SourceType, __a5: int, __a6: ghidra.program.model.symbol.RefType) -> ghidra.program.model.symbol.Reference: ...

    def addMemoryReference(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.symbol.RefType, __a3: ghidra.program.model.symbol.SourceType, __a4: int) -> ghidra.program.model.symbol.Reference: ...

    def addOffsetMemReference(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: bool, __a3: long, __a4: ghidra.program.model.symbol.RefType, __a5: ghidra.program.model.symbol.SourceType, __a6: int) -> ghidra.program.model.symbol.Reference: ...

    def addReference(self, __a0: ghidra.program.model.symbol.Reference) -> ghidra.program.model.symbol.Reference: ...

    def addRegisterReference(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: ghidra.program.model.lang.Register, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Reference: ...

    def addShiftedMemReference(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: int, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType, __a5: int) -> ghidra.program.model.symbol.Reference: ...

    def addStackReference(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: int, __a3: ghidra.program.model.symbol.RefType, __a4: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.symbol.Reference: ...

    def delete(self, __a0: ghidra.program.model.symbol.Reference) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getExternalReferences(self) -> ghidra.program.model.symbol.ReferenceIterator: ...

    def getFlowReferencesFrom(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.symbol.Reference]: ...

    def getPrimaryReferenceFrom(self, __a0: ghidra.program.model.address.Address, __a1: int) -> ghidra.program.model.symbol.Reference: ...

    @staticmethod
    def getRefLevel(__a0: ghidra.program.model.symbol.RefType) -> int: ...

    def getReference(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: int) -> ghidra.program.model.symbol.Reference: ...

    def getReferenceCountFrom(self, __a0: ghidra.program.model.address.Address) -> int: ...

    def getReferenceCountTo(self, __a0: ghidra.program.model.address.Address) -> int: ...

    def getReferenceDestinationCount(self) -> int: ...

    @overload
    def getReferenceDestinationIterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.address.AddressIterator: ...

    @overload
    def getReferenceDestinationIterator(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.address.AddressIterator: ...

    def getReferenceIterator(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.ReferenceIterator: ...

    def getReferenceLevel(self, __a0: ghidra.program.model.address.Address) -> int: ...

    def getReferenceSourceCount(self) -> int: ...

    @overload
    def getReferenceSourceIterator(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> ghidra.program.model.address.AddressIterator: ...

    @overload
    def getReferenceSourceIterator(self, __a0: ghidra.program.model.address.AddressSetView, __a1: bool) -> ghidra.program.model.address.AddressIterator: ...

    def getReferencedVariable(self, __a0: ghidra.program.model.symbol.Reference) -> ghidra.program.model.listing.Variable: ...

    @overload
    def getReferencesFrom(self, __a0: ghidra.program.model.address.Address) -> List[ghidra.program.model.symbol.Reference]: ...

    @overload
    def getReferencesFrom(self, __a0: ghidra.program.model.address.Address, __a1: int) -> List[ghidra.program.model.symbol.Reference]: ...

    @overload
    def getReferencesTo(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.symbol.ReferenceIterator: ...

    @overload
    def getReferencesTo(self, __a0: ghidra.program.model.listing.Variable) -> List[ghidra.program.model.symbol.Reference]: ...

    def hasFlowReferencesFrom(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def hasReferencesFrom(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def hasReferencesFrom(self, __a0: ghidra.program.model.address.Address, __a1: int) -> bool: ...

    def hasReferencesTo(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def removeAllReferencesFrom(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def removeAllReferencesFrom(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address) -> None: ...

    def removeAllReferencesTo(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def removeAssociation(self, __a0: ghidra.program.model.symbol.Reference) -> None: ...

    def setAssociation(self, __a0: ghidra.program.model.symbol.Symbol, __a1: ghidra.program.model.symbol.Reference) -> None: ...

    def setPrimary(self, __a0: ghidra.program.model.symbol.Reference, __a1: bool) -> None: ...

    def toString(self) -> unicode: ...

    def updateRefType(self, __a0: ghidra.program.model.symbol.Reference, __a1: ghidra.program.model.symbol.RefType) -> ghidra.program.model.symbol.Reference: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def externalReferences(self) -> ghidra.program.model.symbol.ReferenceIterator: ...

    @property
    def referenceDestinationCount(self) -> int: ...

    @property
    def referenceSourceCount(self) -> int: ...