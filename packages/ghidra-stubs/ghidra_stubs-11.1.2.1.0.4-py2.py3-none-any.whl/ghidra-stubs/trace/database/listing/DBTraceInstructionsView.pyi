from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.trace.database.listing
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.thread
import ghidra.util.task
import java.lang


class DBTraceInstructionsView(ghidra.trace.database.listing.AbstractBaseDBTraceDefinedUnitsView, ghidra.trace.model.listing.TraceInstructionsView, ghidra.trace.database.listing.InternalTraceBaseDefinedUnitsView):




    def __init__(self, __a0: ghidra.trace.database.listing.DBTraceCodeSpace): ...



    @overload
    def addInstructionSet(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.lang.InstructionSet, __a2: bool) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def addInstructionSet(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.guest.TracePlatform, __a2: ghidra.program.model.lang.InstructionSet, __a3: bool) -> ghidra.program.model.address.AddressSetView: ...

    def clear(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange, __a2: bool, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def containsAddress(self, __a0: long, __a1: ghidra.program.model.address.Address) -> bool: ...

    @overload
    def coversRange(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

    @overload
    def coversRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> bool: ...

    @overload
    def create(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.lang.InstructionPrototype, __a3: ghidra.program.model.lang.ProcessorContextView, __a4: int) -> ghidra.trace.model.listing.TraceInstruction: ...

    @overload
    def create(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.Address, __a2: ghidra.trace.model.guest.TracePlatform, __a3: ghidra.program.model.lang.InstructionPrototype, __a4: ghidra.program.model.lang.ProcessorContextView, __a5: int) -> ghidra.trace.model.listing.TraceInstruction: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def get(self, __a0: long, __a1: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.AddressRange, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.AddressSetView, __a2: bool) -> java.lang.Iterable: ...

    @overload
    def get(self, __a0: long, __a1: ghidra.program.model.address.Address, __a2: ghidra.program.model.address.Address, __a3: bool) -> java.lang.Iterable: ...

    @overload
    def getAddressSetView(self, __a0: long) -> ghidra.program.model.address.AddressSetView: ...

    @overload
    def getAddressSetView(self, __a0: long, __a1: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressSetView: ...

    def getAfter(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.AbstractDBTraceCodeUnit: ...

    def getBefore(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    def getCeiling(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.AbstractDBTraceCodeUnit: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getContaining(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.DBTraceCodeUnitAdapter: ...

    @overload
    def getContaining(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    @overload
    def getContaining(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    def getFloor(self, __a0: long, __a1: ghidra.program.model.address.Address) -> ghidra.trace.database.listing.AbstractDBTraceCodeUnit: ...

    @overload
    def getForRegister(self, __a0: long, __a1: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    @overload
    def getForRegister(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: long, __a2: ghidra.program.model.lang.Register) -> ghidra.trace.model.listing.TraceCodeUnit: ...

    def getFrameLevel(self) -> int: ...

    def getIntersecting(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> java.lang.Iterable: ...

    def getSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    @overload
    def intersectsRange(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

    @overload
    def intersectsRange(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> bool: ...

    def invalidateCache(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

