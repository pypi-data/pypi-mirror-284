from typing import overload
import ghidra.program.model.address
import ghidra.trace.database.breakpoint
import ghidra.trace.database.space
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang
import java.util


class DBTraceBreakpointSpace(object, ghidra.trace.database.space.DBTraceSpaceBased):




    def __init__(self, __a0: ghidra.trace.database.breakpoint.DBTraceBreakpointManager, __a1: db.DBHandle, __a2: ghidra.program.model.address.AddressSpace, __a3: ghidra.trace.database.space.AbstractDBTraceSpaceBasedManager.DBTraceSpaceEntry): ...



    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.Address) -> long: ...

    @overload
    def assertInSpace(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    @staticmethod
    def create(__a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.trace.model.thread.TraceThread, __a2: int) -> ghidra.trace.database.space.DBTraceSpaceKey: ...

    def deleteBreakpoint(self, __a0: ghidra.trace.database.breakpoint.DBTraceBreakpoint) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def explainLanguages(self, __a0: ghidra.program.model.address.AddressSpace) -> unicode: ...

    def getAddressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def getAllBreakpoints(self) -> java.util.Collection: ...

    def getBreakpointsAt(self, __a0: long, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getBreakpointsByPath(self, __a0: unicode) -> java.util.Collection: ...

    def getBreakpointsIntersecting(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.program.model.address.AddressRange) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getFrameLevel(self) -> int: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def isMySpace(self, __a0: ghidra.program.model.address.AddressSpace) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toAddress(self, __a0: long) -> ghidra.program.model.address.Address: ...

    def toOverlay(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @property
    def allBreakpoints(self) -> java.util.Collection: ...

    @property
    def frameLevel(self) -> int: ...

    @property
    def thread(self) -> ghidra.trace.database.thread.DBTraceThread: ...