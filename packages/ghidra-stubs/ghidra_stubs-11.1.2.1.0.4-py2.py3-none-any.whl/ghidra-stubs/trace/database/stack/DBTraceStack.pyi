from typing import List
from typing import overload
import db
import ghidra.trace.database.stack
import ghidra.trace.model.stack
import ghidra.trace.model.thread
import ghidra.util
import ghidra.util.database
import java.lang


class DBTraceStack(ghidra.util.database.DBAnnotatedObject, ghidra.trace.model.stack.TraceStack):
    TABLE_NAME: unicode = u'Stacks'




    class ThreadSnapDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.trace.database.stack.DBTraceStack.ThreadSnap, __a1: db.BinaryField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ThreadSnap(object):




        @overload
        def __init__(self): ...

        @overload
        def __init__(self, __a0: long, __a1: long): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.trace.database.stack.DBTraceStackManager, __a1: ghidra.util.database.DBCachedObjectStore, __a2: db.DBRecord): ...



    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDepth(self) -> int: ...

    def getFrame(self, __a0: int, __a1: bool) -> ghidra.trace.model.stack.TraceStackFrame: ...

    def getFrames(self, __a0: long) -> List[object]: ...

    def getKey(self) -> long: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getSnap(self) -> long: ...

    def getTableName(self) -> unicode: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def hasFixedFrames(self) -> bool: ...

    def hashCode(self) -> int: ...

    @overload
    def isDeleted(self) -> bool: ...

    @overload
    def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDepth(self, __a0: int, __a1: bool) -> None: ...

    def setInvalid(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def depth(self) -> int: ...

    @property
    def snap(self) -> long: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...