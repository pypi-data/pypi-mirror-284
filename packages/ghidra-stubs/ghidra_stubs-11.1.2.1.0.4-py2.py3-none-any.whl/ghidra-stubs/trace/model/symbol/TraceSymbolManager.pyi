from typing import overload
import ghidra.trace.model
import ghidra.trace.model.symbol
import java.lang
import java.util


class TraceSymbolManager(object):
    PRIMALITY_COMPARATOR: java.util.Comparator







    def allNamespaces(self) -> ghidra.trace.model.symbol.TraceSymbolView: ...

    def allSymbols(self) -> ghidra.trace.model.symbol.TraceSymbolView: ...

    def classes(self) -> ghidra.trace.model.symbol.TraceClassSymbolView: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getGlobalNamespace(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbol: ...

    def getIDsAdded(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getIDsRemoved(self, __a0: long, __a1: long) -> java.util.Collection: ...

    def getSymbolByID(self, __a0: long) -> ghidra.trace.model.symbol.TraceSymbol: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def labels(self) -> ghidra.trace.model.symbol.TraceLabelSymbolView: ...

    def namespaces(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbolView: ...

    def notLabels(self) -> ghidra.trace.model.symbol.TraceSymbolNoDuplicatesView: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def globalNamespace(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbol: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...