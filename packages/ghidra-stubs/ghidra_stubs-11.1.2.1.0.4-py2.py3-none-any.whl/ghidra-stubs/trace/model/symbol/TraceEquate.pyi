from typing import overload
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.pcode
import ghidra.trace.model
import ghidra.trace.model.symbol
import ghidra.trace.model.thread
import java.lang
import java.util


class TraceEquate(object):








    @overload
    def addReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.program.model.address.Address, __a3: int) -> ghidra.trace.model.symbol.TraceEquateReference: ...

    @overload
    def addReference(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.pcode.Varnode) -> ghidra.trace.model.symbol.TraceEquateReference: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisplayName(self) -> unicode: ...

    def getDisplayValue(self) -> unicode: ...

    def getEnum(self) -> ghidra.program.model.data.Enum: ...

    def getName(self) -> unicode: ...

    @overload
    def getReference(self, __a0: long, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.program.model.address.Address, __a3: int) -> ghidra.trace.model.symbol.TraceEquateReference: ...

    @overload
    def getReference(self, __a0: long, __a1: ghidra.trace.model.thread.TraceThread, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.pcode.Varnode) -> ghidra.trace.model.symbol.TraceEquateReference: ...

    def getReferenceCount(self) -> int: ...

    def getReferences(self) -> java.util.Collection: ...

    def getValue(self) -> long: ...

    def hasValidEnum(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isEnumBased(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def displayName(self) -> unicode: ...

    @property
    def displayValue(self) -> unicode: ...

    @property
    def enum(self) -> ghidra.program.model.data.Enum: ...

    @property
    def enumBased(self) -> bool: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def referenceCount(self) -> int: ...

    @property
    def references(self) -> java.util.Collection: ...

    @property
    def value(self) -> long: ...