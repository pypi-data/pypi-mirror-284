from typing import List
from typing import overload
import ghidra.pcode.emu
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import ghidra.util.task
import java.lang
import java.util


class TraceSchedule(object, java.lang.Comparable):
    ZERO: ghidra.trace.model.time.schedule.TraceSchedule



    def __init__(self, __a0: long, __a1: ghidra.trace.model.time.schedule.Sequence, __a2: ghidra.trace.model.time.schedule.Sequence): ...



    def advanced(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def compareSchedule(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.trace.model.time.schedule.CompareResult: ...

    @overload
    def compareTo(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def execute(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.pcode.emu.PcodeMachine, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def finish(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.pcode.emu.PcodeMachine, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getEventThread(self, __a0: ghidra.trace.model.Trace) -> ghidra.trace.model.thread.TraceThread: ...

    def getLastThread(self, __a0: ghidra.trace.model.Trace) -> ghidra.trace.model.thread.TraceThread: ...

    def getLastThreadKey(self) -> long: ...

    def getSnap(self) -> long: ...

    def getThreads(self, __a0: ghidra.trace.model.Trace) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def isSnapOnly(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pPatchCount(self) -> long: ...

    def pTickCount(self) -> long: ...

    @staticmethod
    def parse(__a0: unicode) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def patchCount(self) -> long: ...

    @overload
    def patched(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: ghidra.program.model.lang.Language, __a2: unicode) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    @overload
    def patched(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: ghidra.program.model.lang.Language, __a2: List[object]) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def skippedForward(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: long) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def skippedPcodeForward(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    @staticmethod
    def snap(__a0: long) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def steppedBackward(self, __a0: ghidra.trace.model.Trace, __a1: long) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def steppedForward(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: long) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def steppedPcodeBackward(self, __a0: int) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def steppedPcodeForward(self, __a0: ghidra.trace.model.thread.TraceThread, __a1: int) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def tickCount(self) -> long: ...

    def toString(self) -> unicode: ...

    def totalPatchCount(self) -> long: ...

    def totalTickCount(self) -> long: ...

    def validate(self, __a0: ghidra.trace.model.Trace) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def lastThreadKey(self) -> long: ...

    @property
    def snapOnly(self) -> bool: ...