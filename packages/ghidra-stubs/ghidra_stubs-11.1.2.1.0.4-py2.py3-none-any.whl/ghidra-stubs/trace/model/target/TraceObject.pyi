from typing import List
from typing import overload
import ghidra.dbg.target
import ghidra.dbg.target.schema
import ghidra.dbg.util
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.util.database
import java.lang
import java.util
import java.util.stream


class TraceObject(ghidra.trace.model.TraceUniqueObject, object):
    EXTRA_INTERFACES_ATTRIBUTE_NAME: unicode = u'_extra_ifs'




    class ConflictResolution(java.lang.Enum):
        ADJUST: ghidra.trace.model.target.TraceObject.ConflictResolution
        DENY: ghidra.trace.model.target.TraceObject.ConflictResolution
        TRUNCATE: ghidra.trace.model.target.TraceObject.ConflictResolution







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.trace.model.target.TraceObject.ConflictResolution: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.trace.model.target.TraceObject.ConflictResolution]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllPaths(self, __a0: ghidra.trace.model.Lifespan) -> java.util.stream.Stream: ...

    def getAncestors(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def getAncestorsRoot(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def getAttribute(self, __a0: long, __a1: unicode) -> ghidra.trace.model.target.TraceObjectValue: ...

    def getAttributes(self, __a0: ghidra.trace.model.Lifespan) -> java.util.Collection: ...

    def getCanonicalParent(self, __a0: long) -> ghidra.trace.model.target.TraceObjectValue: ...

    def getCanonicalParents(self, __a0: ghidra.trace.model.Lifespan) -> java.util.stream.Stream: ...

    def getCanonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def getCanonicalSuccessors(self, __a0: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getElement(self, __a0: long, __a1: long) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def getElement(self, __a0: long, __a1: unicode) -> ghidra.trace.model.target.TraceObjectValue: ...

    def getElements(self, __a0: ghidra.trace.model.Lifespan) -> java.util.Collection: ...

    def getExecutionState(self, __a0: long) -> ghidra.dbg.target.TargetExecutionStateful.TargetExecutionState: ...

    def getInterfaces(self) -> java.util.Collection: ...

    def getKey(self) -> long: ...

    def getLife(self) -> ghidra.trace.model.Lifespan.LifeSet: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getOrderedSuccessors(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObjectKeyPath, __a2: bool) -> java.util.stream.Stream: ...

    def getOrderedValues(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: bool) -> java.util.stream.Stream: ...

    def getParents(self, __a0: ghidra.trace.model.Lifespan) -> java.util.Collection: ...

    def getRoot(self) -> ghidra.trace.model.target.TraceObject: ...

    def getSuccessors(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def getTargetSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getValue(self, __a0: long, __a1: unicode) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def getValues(self, __a0: ghidra.trace.model.Lifespan) -> java.util.Collection: ...

    @overload
    def getValues(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def insert(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObject.ConflictResolution) -> ghidra.trace.model.target.TraceObjectValPath: ...

    def isDeleted(self) -> bool: ...

    def isMethod(self, __a0: long) -> bool: ...

    def isRoot(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def queryAncestorsInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class) -> java.util.stream.Stream: ...

    def queryAncestorsTargetInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class) -> java.util.stream.Stream: ...

    def queryCanonicalAncestorsInterface(self, __a0: java.lang.Class) -> java.util.stream.Stream: ...

    def queryCanonicalAncestorsTargetInterface(self, __a0: java.lang.Class) -> java.util.stream.Stream: ...

    def queryInterface(self, __a0: java.lang.Class) -> ghidra.trace.model.target.TraceObjectInterface: ...

    def queryRegisterContainer(self, __a0: int) -> ghidra.trace.model.target.TraceObject: ...

    def querySuccessorsInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class, __a2: bool) -> java.util.stream.Stream: ...

    def querySuccessorsTargetInterface(self, __a0: ghidra.trace.model.Lifespan, __a1: java.lang.Class, __a2: bool) -> java.util.stream.Stream: ...

    def querySuitableSchema(self, __a0: ghidra.dbg.target.schema.TargetObjectSchema) -> ghidra.trace.model.target.TraceObject: ...

    def querySuitableTargetInterface(self, __a0: java.lang.Class) -> ghidra.trace.model.target.TraceObject: ...

    def remove(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def removeTree(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def setAttribute(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: object) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def setElement(self, __a0: ghidra.trace.model.Lifespan, __a1: long, __a2: object) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def setElement(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: object) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def setValue(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: object) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def setValue(self, __a0: ghidra.trace.model.Lifespan, __a1: unicode, __a2: object, __a3: ghidra.trace.model.target.TraceObject.ConflictResolution) -> ghidra.trace.model.target.TraceObjectValue: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def canonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def interfaces(self) -> java.util.Collection: ...

    @property
    def key(self) -> long: ...

    @property
    def life(self) -> ghidra.trace.model.Lifespan.LifeSet: ...

    @property
    def objectKey(self) -> ghidra.util.database.ObjectKey: ...

    @property
    def root(self) -> bool: ...

    @property
    def targetSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...