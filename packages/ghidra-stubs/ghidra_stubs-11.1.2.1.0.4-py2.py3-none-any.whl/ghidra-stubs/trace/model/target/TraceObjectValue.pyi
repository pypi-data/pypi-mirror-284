from typing import overload
import ghidra.dbg.target.schema
import ghidra.trace.model
import ghidra.trace.model.target
import java.lang


class TraceObjectValue(object):








    def castValue(self) -> object: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getCanonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def getChild(self) -> ghidra.trace.model.target.TraceObject: ...

    def getClass(self) -> java.lang.Class: ...

    def getEntryKey(self) -> unicode: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getMaxSnap(self) -> long: ...

    def getMinSnap(self) -> long: ...

    def getParent(self) -> ghidra.trace.model.target.TraceObject: ...

    def getTargetSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getValue(self) -> object: ...

    def hasEntryKey(self, __a0: unicode) -> bool: ...

    def hashCode(self) -> int: ...

    def isCanonical(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isHidden(self) -> bool: ...

    def isObject(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    @overload
    def setLifespan(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObject.ConflictResolution) -> None: ...

    def setMaxSnap(self, __a0: long) -> None: ...

    def setMinSnap(self, __a0: long) -> None: ...

    def toString(self) -> unicode: ...

    def truncateOrDelete(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def canonical(self) -> bool: ...

    @property
    def canonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @property
    def child(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def entryKey(self) -> unicode: ...

    @property
    def hidden(self) -> bool: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @lifespan.setter
    def lifespan(self, value: ghidra.trace.model.Lifespan) -> None: ...

    @property
    def maxSnap(self) -> long: ...

    @maxSnap.setter
    def maxSnap(self, value: long) -> None: ...

    @property
    def minSnap(self) -> long: ...

    @minSnap.setter
    def minSnap(self, value: long) -> None: ...

    @property
    def object(self) -> bool: ...

    @property
    def parent(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def targetSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def value(self) -> object: ...