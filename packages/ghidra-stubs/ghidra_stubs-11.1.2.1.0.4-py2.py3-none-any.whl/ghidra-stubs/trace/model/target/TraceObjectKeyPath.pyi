from typing import List
from typing import overload
import ghidra.dbg.util
import ghidra.trace.model.target
import java.lang
import java.util.stream


class TraceObjectKeyPath(object, java.lang.Comparable):








    @overload
    def compareTo(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def extend(self, __a0: List[unicode]) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @overload
    def extend(self, __a0: List[object]) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def getClass(self) -> java.lang.Class: ...

    def getKeyList(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    @overload
    def index(self) -> unicode: ...

    @overload
    def index(self, __a0: long) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @overload
    def index(self, __a0: unicode) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def isAncestor(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> bool: ...

    def isRoot(self) -> bool: ...

    @overload
    def key(self) -> unicode: ...

    @overload
    def key(self, __a0: unicode) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of(__a0: List[unicode]) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @overload
    @staticmethod
    def of(__a0: List[object]) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def parent(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @staticmethod
    def parse(__a0: unicode) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def relativize(self, __a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def streamMatchingAncestry(self, __a0: ghidra.dbg.util.PathPredicates) -> java.util.stream.Stream: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def keyList(self) -> List[object]: ...

    @property
    def root(self) -> bool: ...