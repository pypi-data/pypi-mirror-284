from typing import Iterator
from typing import List
from typing import overload
import ghidra.trace.model.breakpoint
import java.lang
import java.util
import java.util.function
import java.util.stream
import org.apache.commons.collections4.set


class TraceBreakpointKind(java.lang.Enum):
    COUNT: int = 4
    HW_EXECUTE: ghidra.trace.model.breakpoint.TraceBreakpointKind
    READ: ghidra.trace.model.breakpoint.TraceBreakpointKind
    SW_EXECUTE: ghidra.trace.model.breakpoint.TraceBreakpointKind
    WRITE: ghidra.trace.model.breakpoint.TraceBreakpointKind




    class TraceBreakpointKindSet(org.apache.commons.collections4.set.AbstractSetDecorator):
        ACCESS: ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet
        HW_EXECUTE: ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet
        READ: ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet
        SW_EXECUTE: ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet
        WRITE: ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet



        def __init__(self, __a0: java.util.Set): ...

        def __iter__(self): ...

        def add(self, __a0: object) -> bool: ...

        def addAll(self, __a0: java.util.Collection) -> bool: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet: ...

        @staticmethod
        def decode(__a0: unicode, __a1: bool) -> ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet: ...

        @staticmethod
        def encode(__a0: java.util.Collection) -> unicode: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def of(__a0: List[ghidra.trace.model.breakpoint.TraceBreakpointKind]) -> ghidra.trace.model.breakpoint.TraceBreakpointKind.TraceBreakpointKindSet: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    def getBits(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.trace.model.breakpoint.TraceBreakpointKind: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.trace.model.breakpoint.TraceBreakpointKind]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bits(self) -> int: ...