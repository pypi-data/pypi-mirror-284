from typing import overload
import ghidra.program.model.address
import ghidra.trace.model.guest
import ghidra.util.task
import java.lang


class TraceGuestPlatformMappedRange(object):








    def delete(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getGuestPlatform(self) -> ghidra.trace.model.guest.TraceGuestPlatform: ...

    def getGuestRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getHostPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    def getHostRange(self) -> ghidra.program.model.address.AddressRange: ...

    def hashCode(self) -> int: ...

    @overload
    def mapGuestToHost(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def mapGuestToHost(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressRange: ...

    @overload
    def mapHostToGuest(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    @overload
    def mapHostToGuest(self, __a0: ghidra.program.model.address.AddressRange) -> ghidra.program.model.address.AddressRange: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def guestPlatform(self) -> ghidra.trace.model.guest.TraceGuestPlatform: ...

    @property
    def guestRange(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def hostPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    @property
    def hostRange(self) -> ghidra.program.model.address.AddressRange: ...