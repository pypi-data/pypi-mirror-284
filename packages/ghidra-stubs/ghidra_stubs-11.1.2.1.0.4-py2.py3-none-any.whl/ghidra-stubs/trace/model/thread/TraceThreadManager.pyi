from typing import overload
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang
import java.util


class TraceThreadManager(object):








    @overload
    def addThread(self, __a0: unicode, __a1: ghidra.trace.model.Lifespan) -> ghidra.trace.model.thread.TraceThread: ...

    @overload
    def addThread(self, __a0: unicode, __a1: unicode, __a2: ghidra.trace.model.Lifespan) -> ghidra.trace.model.thread.TraceThread: ...

    @overload
    def createThread(self, __a0: unicode, __a1: long) -> ghidra.trace.model.thread.TraceThread: ...

    @overload
    def createThread(self, __a0: unicode, __a1: unicode, __a2: long) -> ghidra.trace.model.thread.TraceThread: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllThreads(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getLiveThreadByPath(self, __a0: long, __a1: unicode) -> ghidra.trace.model.thread.TraceThread: ...

    def getLiveThreads(self, __a0: long) -> java.util.Collection: ...

    def getThread(self, __a0: long) -> ghidra.trace.model.thread.TraceThread: ...

    def getThreadsByPath(self, __a0: unicode) -> java.util.Collection: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allThreads(self) -> java.util.Collection: ...