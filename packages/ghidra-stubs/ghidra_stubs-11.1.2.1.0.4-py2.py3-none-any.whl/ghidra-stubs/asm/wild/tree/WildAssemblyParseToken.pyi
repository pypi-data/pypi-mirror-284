from typing import List
from typing import overload
import ghidra.app.plugin.assembler.sleigh.grammars
import ghidra.app.plugin.assembler.sleigh.symbol
import ghidra.app.plugin.assembler.sleigh.tree
import ghidra.asm.wild.tree
import java.io
import java.lang
import java.util.regex
import java.util.stream


class WildAssemblyParseToken(ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken):
    wild: ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard




    class RangesWildcard(java.lang.Record, ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard):
        PATTERN: java.util.regex.Pattern



        def __init__(self, __a0: unicode, __a1: List[object]): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def get(__a0: java.util.regex.Matcher) -> ghidra.asm.wild.tree.WildAssemblyParseToken.RangesWildcard: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard: ...

        @staticmethod
        def parseRanges(__a0: unicode) -> List[object]: ...

        def ranges(self) -> List[object]: ...

        def stream(self) -> java.util.stream.LongStream: ...

        def test(self, __a0: object) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class NumericWildcard(java.lang.Record, ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard):




        def __init__(self, __a0: unicode): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def get(__a0: java.util.regex.Matcher) -> ghidra.asm.wild.tree.WildAssemblyParseToken.NumericWildcard: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard: ...

        def test(self, __a0: object) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Wildcard(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard: ...

        def test(self, __a0: object) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class FreeWildcard(java.lang.Record, ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard):




        def __init__(self, __a0: unicode): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard: ...

        def test(self, __a0: object) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class WildRange(java.lang.Record, java.lang.Comparable):




        def __init__(self, __a0: long, __a1: long): ...



        @overload
        def compareTo(self, __a0: ghidra.asm.wild.tree.WildAssemblyParseToken.WildRange) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def max(self) -> long: ...

        def min(self) -> long: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.WildRange: ...

        def stream(self) -> java.util.stream.LongStream: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RegexWildcard(java.lang.Record, ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard):




        def __init__(self, __a0: unicode, __a1: java.util.regex.Pattern): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def get(__a0: java.util.regex.Matcher) -> ghidra.asm.wild.tree.WildAssemblyParseToken.RegexWildcard: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse(__a0: unicode) -> ghidra.asm.wild.tree.WildAssemblyParseToken.Wildcard: ...

        def pat(self) -> java.util.regex.Pattern: ...

        def test(self, __a0: object) -> bool: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar, __a1: ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal, __a2: unicode, __a3: unicode): ...



    def equals(self, __a0: object) -> bool: ...

    def generateString(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getGrammar(self) -> ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar: ...

    def getParent(self) -> ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseBranch: ...

    def getString(self) -> unicode: ...

    def getSym(self) -> ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def print(self, __a0: java.io.PrintStream) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def wildcardName(self) -> unicode: ...

