from typing import List
from typing import overload
import ghidra.app.plugin.assembler.sleigh.sem
import ghidra.app.plugin.assembler.sleigh.symbol
import ghidra.app.plugin.processors.sleigh.symbol
import java.lang


class WildAssemblyOperandState(ghidra.app.plugin.assembler.sleigh.sem.AssemblyOperandState):








    def computeHash(self) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> int: ...

    def getOperandSymbol(self) -> ghidra.app.plugin.processors.sleigh.symbol.OperandSymbol: ...

    def getPath(self) -> List[object]: ...

    def getResolver(self) -> ghidra.app.plugin.assembler.sleigh.sem.AbstractAssemblyTreeResolver: ...

    def getShift(self) -> int: ...

    def getTerminal(self) -> ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal: ...

    def getValue(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

