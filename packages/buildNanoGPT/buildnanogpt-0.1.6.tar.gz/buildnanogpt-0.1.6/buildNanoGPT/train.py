# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/nanoGPT_P2_PyPI/03_train.ipynb.

# %% auto 0
__all__ = ['DDPConfig', 'TrainingConfig', 'get_lr', 'create_log_file', 'validate', 'hellaswag_eval', 'generate_text',
           'train_step', 'train_GPT', 'create_model', 'set_random_seed']

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 6
import math
from dataclasses import dataclass, field
import torch
from torch.nn import functional as F
import numpy as np
import tiktoken
import matplotlib.pyplot as plt
import time
import os

# import from buildNanoGPT
from .data import render_example, iterate_examples, get_most_likely_row
from .model import GPT, GPTConfig, DataLoaderLite

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 7
from torch.distributed import init_process_group, destroy_process_group
from torch.nn.parallel import DistributedDataParallel as DDP
import torch.distributed as dist

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 9
@dataclass
class DDPConfig:
    """Distribution Data Parallel Configuration. This is a dataclass that sets up DDP for training."""
    ddp: bool = field(default_factory=lambda: int(os.environ.get('RANK', -1)) != -1)
    rank: int = 0
    local_rank: int = 0
    world_size: int = 1
    master_process: bool = True
    device: str = "cpu"
    device_type: str = "cpu"
    use_compile: bool = False
    training_precision: str = "high"

    def __post_init__(self):
        if self.ddp:
            assert torch.cuda.is_available(), "for now i think we need CUDA for DDP"
            from torch.distributed import init_process_group
            init_process_group(backend='nccl')
            self.rank = int(os.environ['RANK'])
            self.local_rank = int(os.environ['LOCAL_RANK'])
            self.world_size = int(os.environ['WORLD_SIZE'])
            self.device = f'cuda:{self.ddp_local_rank}'
            torch.cuda.set_device(self.device)
            self.master_process = self.ddp_rank == 0
        else:
            self.detect_device()
        self.device_type = "cuda" if self.device.startswith("cuda") else "cpu"

    def detect_device(self):
        if torch.cuda.is_available():
            self.device = "cuda"
        elif hasattr(torch.backends, "mps") and torch.backends.mps.is_available():
            self.device = "mps"
        else:
            self.device = "cpu"
        print(f"using device: {self.device}")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 15
@dataclass
class TrainingConfig:
    """Training Configuration. This is a dataclass that sets up the training configuration."""
    total_batch_size: int = 524288  # Default values as placeholders
    B: int = 16
    T: int = 1024
    max_lr: float = 6e-4
    warmup_steps: int = 10
    max_steps: int = 20
    val_check_steps: int = 250
    checkpoint_steps: int = 5000
    grad_accum_steps: int = field(init=False)
    min_lr: float = field(init=False)
    
    def __post_init__(self):
        ddp_cf = DDPConfig()
        assert self.total_batch_size % (self.B * self.T * ddp_cf.world_size) == 0, \
            "make sure total_batch_size is divisible by B * T * ddp_world_size"
        self.grad_accum_steps = self.total_batch_size // (self.B * self.T * ddp_cf.world_size)
        self.min_lr = self.max_lr * 0.1

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 18
def get_lr(it, train_cf):
    """Cosine learning rate schedule with warmup"""
    # 1) linear warmup for warmup_iters steps
    if it < train_cf.warmup_steps:
        return train_cf.max_lr * (it+1) / train_cf.warmup_steps
    # 2) if it > lr_decay_iters, return min learning rate
    if it > train_cf.max_steps:
        return train_cf.min_lr
    # 3) in between, use cosine decay down to min learning rate
    decay_ratio = (it - train_cf.warmup_steps) / (train_cf.max_steps - train_cf.warmup_steps)
    assert 0 <= decay_ratio <= 1
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0
    return train_cf.min_lr + coeff * (train_cf.max_lr - train_cf.min_lr)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 20
def create_log_file(log_dir = "log", log_file="log.txt"):
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, log_file)
    with open(log_file, "w") as f: # open for writing to clear the file
        pass
    return log_dir, log_file

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 22
def validate(model, val_loader, step, log_dir, log_file, last_step, train_cf, ddp_cf):
    """validation loss for the model, optionally write checkpoints"""
    model.eval()
    val_loader.reset()
    with torch.no_grad():
        val_loss_accum = 0.0
        val_loss_steps = 20
        for _ in range(val_loss_steps):
            x, y = val_loader.next_batch()
            x, y = x.to(ddp_cf.device), y.to(ddp_cf.device)
            with torch.autocast(device_type=ddp_cf.device_type, dtype=torch.bfloat16):
                logits, loss = model(x, y)
            loss = loss / val_loss_steps
            val_loss_accum += loss.detach()
    if ddp_cf.ddp:
        dist.all_reduce(val_loss_accum, op=dist.ReduceOp.AVG)
    if ddp_cf.master_process:
        print(f"validation loss: {val_loss_accum.item():.4f}")
        with open(log_file, "a") as f:
            f.write(f"{step} val {val_loss_accum.item():.4f}\n")
        if step > 0 and (step % train_cf.checkpoint_steps == 0 or last_step):
            # optionally write model checkpoints
            checkpoint_path = os.path.join(log_dir, f"model_{step:05d}.pt")
            checkpoint = {
                'model': model.state_dict(),
                'config': model.config,
                'step': step,
                'val_loss': val_loss_accum.item()
            }
            # you might also want to add optimizer.state_dict() and
            # rng seeds etc., if you wanted to more exactly resume training
            torch.save(checkpoint, checkpoint_path)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 23
def hellaswag_eval(model, step, log_file, ddp_cf):
    """HellaSwag evaluation for the model. This is a separate evaluation from the validation loss."""
    num_correct_norm = 0
    num_total = 0
    model.eval()
    for i, example in enumerate(iterate_examples("val")):
        # only process examples where i % ddp_world_size == ddp_rank
        if i % ddp_cf.world_size != ddp_cf.rank:
            continue
        # render the example into tokens and labels
        _, tokens, mask, label = render_example(example)
        tokens = tokens.to(ddp_cf.device)
        mask = mask.to(ddp_cf.device)
        # get the logits
        with torch.no_grad():
            with torch.autocast(device_type=ddp_cf.device_type, dtype=torch.bfloat16):
                logits, loss = model(tokens)
            pred_norm = get_most_likely_row(tokens, mask, logits)
        num_total += 1
        num_correct_norm += int(pred_norm == label)
    # reduce the stats across all processes
    if ddp_cf.ddp:
        num_total = torch.tensor(num_total, dtype=torch.long, device=ddp_cf.device)
        num_correct_norm = torch.tensor(num_correct_norm, dtype=torch.long, device=ddp_cf.device)
        dist.all_reduce(num_total, op=dist.ReduceOp.SUM)
        dist.all_reduce(num_correct_norm, op=dist.ReduceOp.SUM)
        num_total = num_total.item()
        num_correct_norm = num_correct_norm.item()
    acc_norm = num_correct_norm / num_total
    if ddp_cf.master_process:
        print(f"HellaSwag accuracy: {num_correct_norm}/{num_total}={acc_norm:.4f}")
        with open(log_file, "a") as f:
            f.write(f"{step} hella {acc_norm:.4f}\n")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 24
def generate_text(model, enc, ddp_cf):
    """generate some text from the model, using top-k sampling."""
    model.eval()
    num_return_sequences = 4
    max_length = 32
    tokens = enc.encode("Hello, I'm a language model,")
    tokens = torch.tensor(tokens, dtype=torch.long)
    tokens = tokens.unsqueeze(0).repeat(num_return_sequences, 1)
    xgen = tokens.to(ddp_cf.device)
    sample_rng = torch.Generator(device=ddp_cf.device)
    sample_rng.manual_seed(42 + ddp_cf.rank)
    while xgen.size(1) < max_length:
        # forward the model to get the logits
        with torch.no_grad():
            # logits, loss = model(xgen) # (B, T, vocab_size)
            with torch.autocast(device_type=ddp_cf.device_type, dtype=torch.bfloat16):
                logits, loss = model(xgen) # (B, T, vocab_size)
            # take the logits at the last position
            logits = logits[:, -1, :] # (B, vocab_size)
            # get the probabilities
            probs = F.softmax(logits, dim=-1)
            # do top-k sampling of 50 (huggingface pipeline default)
            # topk_probs here becomes (5, 50), topk_indices is (5, 50)
            topk_probs, topk_indices = torch.topk(probs, 50, dim=-1)
            # select a token from the top-k probabilities
            # note: multinomial does not demand the input to sum to 1
            ix = torch.multinomial(topk_probs, 1, generator=sample_rng) # (B, 1)
            # gather the corresponding indices
            xcol = torch.gather(topk_indices, -1, ix) # (B, 1)
            # append to the sequence
            xgen = torch.cat((xgen, xcol), dim=1)
    # print the generated text
    for i in range(num_return_sequences):
        tokens = xgen[i, :max_length].tolist()
        decoded = enc.decode(tokens)
        print(f"rank {ddp_cf.rank} sample {i}: {decoded}")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 25
def train_step(model, optimizer, train_loader, lr, step, t_start, log_file, train_cf, ddp_cf):
    model.train()
    optimizer.zero_grad() # reset the gradients FOUND THE BUG - should zero grad here
    loss_accum = 0.0
    for micro_step in range(train_cf.grad_accum_steps):
        x, y = train_loader.next_batch()
        x, y = x.to(ddp_cf.device), y.to(ddp_cf.device)
        # added after video, this field is also used by the forward pass.
        if ddp_cf.ddp:
            model.require_backward_grad_sync = (micro_step == train_cf.grad_accum_steps - 1)
        with torch.autocast(device_type=ddp_cf.device_type, dtype=torch.bfloat16):
            logits, loss = model(x, y)
        # we have to scale the loss to account for gradient accumulation,
        # because the gradients just add on each successive backward().
        # addition of gradients corresponds to a SUM in the objective, but
        # instead of a SUM we want MEAN. Scale the loss here so it comes out right
        loss = loss / train_cf.grad_accum_steps
        loss_accum += loss.detach()
        loss.backward()
    if ddp_cf.ddp:
        dist.all_reduce(loss_accum, op=dist.ReduceOp.AVG)
    # added gradient clipping
    norm = torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
    
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr
    optimizer.step()
    if ddp_cf.device_type == "cuda":
        torch.cuda.synchronize() # wait for the GPU to finish work
    t1 = time.time()
    dt = t1 - t_start # time difference in seconds
    tokens_processed = train_loader.B * train_loader.T * train_cf.grad_accum_steps * ddp_cf.world_size
    tokens_per_sec = tokens_processed / dt
    
    if ddp_cf.master_process:
        print(f"step {step:5d} | loss: {loss_accum.item():.6f} | lr {lr:.4e} | norm: {norm.item():.4f} | dt: {dt*1000:.2f}ms | tok/sec: {tokens_per_sec:.2f}")
        with open(log_file, "a") as f:
            f.write(f"{step} train {loss_accum.item():.6f}\n")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 26
def train_GPT(model, train_loader, val_loader, train_cf, ddp_cf, log_dir="log", log_file="log.txt",):
    """"Training GPT"""
    if ddp_cf.master_process:
        print(f"total desired batch size: {train_cf.total_batch_size}")
        print(f"=> calculated gradient accumulation steps: {train_cf.grad_accum_steps}")
    
    enc = tiktoken.get_encoding('gpt2')
    log_dir, log_file = create_log_file(log_dir=log_dir, log_file=log_file)
    optimizer = model.configure_optimizers(weight_decay=0.1, learning_rate=6e-4, device_type=ddp_cf.device_type)
    for step in range(train_cf.max_steps):
        t_start = time.time()
        last_step = (step == train_cf.max_steps - 1)
        # once in a while evaluate our validation loss
        if step % train_cf.val_check_steps == 0 or last_step:
            validate(model, val_loader, step, log_dir, log_file, last_step, train_cf, ddp_cf)

        # once in a while evaluate hellaswag
        if (step % train_cf.val_check_steps == 0 or last_step) and (not ddp_cf.use_compile):
            hellaswag_eval(model, step, log_file, ddp_cf)

        # once in a while generate from the model (except step 0, which is noise)
        # disabled because torch.compile throws a scary error i can't solve rn
        # if you disable torch.compile, this code works fine
        if ((step > 0 and step % train_cf.val_check_steps == 0) or last_step) and (not ddp_cf.use_compile):
            generate_text(model, enc, ddp_cf)
        # determine and set the learning rate for this iteration
        lr = get_lr(step, train_cf)
        # training loop
        train_step(model, optimizer, train_loader, lr, step, t_start, log_file, train_cf, ddp_cf)

    if ddp_cf.ddp:
        destroy_process_group()

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 27
def create_model(ddp_cf, pre_trained=False):
    """create the GPT model"""
    # the default precision is 'float32' for training
    # use tf32 precision for training, that will accelerate training
    torch.set_float32_matmul_precision(ddp_cf.training_precision)
    if pre_trained:
        model = GPT.from_pretrained("gpt2", ddp_cf.master_process)
    else:
        model = GPT(master_process=ddp_cf.master_process, config=GPTConfig(vocab_size=50304))
    model.to(ddp_cf.device)
    # adding torch.compile. It costs compilation time but the training is faster
    ddp_cf.use_compile = False # torch.compile interferes with HellaSwag eval and Generation. TODO fix
    if ddp_cf.use_compile:
        model = torch.compile(model)
    if ddp_cf.ddp:
        model = DDP(model, device_ids=[ddp_cf.local_rank])
    raw_model = model.module if ddp_cf.ddp else model # always contains the "raw" unwrapped model
    return raw_model

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 28
def set_random_seed(seed=1337):
    """set random seed for reproducibility"""
    torch.manual_seed(1337)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(1337)
