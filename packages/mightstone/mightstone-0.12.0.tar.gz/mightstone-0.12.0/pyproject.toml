[tool.poetry]
name = "mightstone"
version = "0.12.0"
description = "A library manage all things Magic The Gathering related in python"
authors = ["Guillaume Boddaert"]
# Use identifier from https://spdx.org/licenses/
license = "MIT"
readme = "README.md"
homepage = "https://github.com/guibod/mightstone"
repository = "https://github.com/guibod/mightstone"
documentation = "https://github.com/guibod/mightstone/blob/master/README.md"
classifiers = [
    # https://pypi.org/classifiers/
    "Environment :: Console",
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Board Games",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
    "Framework :: AsyncIO"
]

[tool.poetry.urls]
# If you publish you package on PyPI, these will appear in the Project Links section.
"Bug Tracker" = "https://github.com/guibod/mightstone/issues"

[tool.poetry.scripts]
mightstone = "mightstone.cli:cli"

[tool.poetry.dependencies]
python = ">=3.9.0,<=3.12"
beanie = "1.26.0"
pydantic = ">=2.7.3"
ordered-set = "^4.1.0"
python-slugify = "^8.0.0"
aiofiles = "^23.2.1"
asyncstdlib = "^3.10.5"
ijson = "^3.2.0.post0"
appdirs = "^1.4.4"
requests = "^2.28.2"
pillow = ">=9.4,<11.0"
cairosvg = "^2.6.0"
motor = "^3.1.1"
pymongo-inmemory = "^0.4.2"
mongomock-motor = "^0.0.29"
pylint-pydantic = "0.3.2"
pydantic-settings = "^2.2.1"
pydantic-extra-types = "^2.7.0"
pyyaml = "^6.0.0"
ruff = "^0.4.7"
injector = "^0.21.0"
beautifulsoup4 = "^4.12.3"
lxml = "^5.2.2"
pyparsing = "^3.1.2"
pytest = "^8.2.2"
hishel = "^0.0.27"
universalasync = "^0.3.1.2"
asyncclick = "^8.1.7.2"

[tool.poetry.group.types]
optional = true

[tool.poetry.group.types.dependencies]
types-aiofiles = "^23.2.0.0"
types-pillow = "^9.4.0.17"
types-pyyaml = "^6.0.12.8"
types-pygments = "^2.14.0.5"
types-python-slugify = "^8.0.0.1"
types-setuptools = "^67.6.0.5"
types-toml = "^0.10.8.5"
types-beautifulsoup4 = "^4.12.0.20240511"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.3.7"
autodoc_pydantic = "2.2.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^3.0.1"
pygments = "2.14"

[tool.poetry.group.release]
optional = true

[tool.poetry.group.release.dependencies]
python-semantic-release = "^7.33.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
bandit = "^1.6.2"
black = ">=23,<25"
isort= "^5.0.8"
jedi-language-server = "^0.22.0"
pylint = "^2.6.0"
pytest-cov = "^4.0"
pytest-xdist = "^2.5.0"
vulture = "^2.3"
mypy = "^1.10"
pyinstaller = ">=4.1,<6.0"
toml = "^0.10.2"
pytest-asyncio = "^0.23.0"
pixelmatch = "^0.3.0"
assertpy = "^1.1"



[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.black]
target-version = ['py39']

[tool.pylint.format]
max-line-length = "88"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["F401"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.bandit]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning:moto.*:",
    "ignore::DeprecationWarning:boto.*:",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::DeprecationWarning:mongomock.*:"
]
markers = [
    'skip_remote_api:Skips remote api calls on CI',
    'skip_remote_api_2:Skips remote api calls on CI (same thing but i donâ€™t know how to relative import)'
]

[tool.semantic_release]
version_variables = ["src/mightstone/__init__.py:__version__", "docs/source/conf.py:version"]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
build_command = "pip install poetry && make build"
upload_to_vcs_release = true

[tool.mypy]
python_version = "3.9"

[[tool.mypy.overrides]]
module = [
    "httpx_cache",
    "ijson",
    "appdirs",
    "cairosvg",
    "motor",
    "motor.motor_asyncio",
    "pymongo_inmemory",
    "pymongo_inmemory.context",
    "mongomock_motor",
    "tomli",
    "assertpy",
    "rich"
]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312

[testenv]
allowlist_externals = poetry
commands_pre =
    poetry install --no-root --sync --with=dev
commands =
    poetry run pytest tests/ --import-mode importlib
"""
