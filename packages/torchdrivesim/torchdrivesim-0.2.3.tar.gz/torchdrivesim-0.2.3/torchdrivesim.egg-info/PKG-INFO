Metadata-Version: 2.1
Name: torchdrivesim
Version: 0.2.3
Summary: TorchDriveSim is a lightweight 2D driving simulator, built entirely in PyTorch, primarily intended as a training environment for developing autonomous driving algorithms
Author-email: "Inverted AI Ltd." <info@inverted.ai>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2023 Inverted AI Ltd.
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Keywords: torch,drive,sim,torch-drive-sim,torchdrivesim,invertedai,inverted ai
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: shapely
Requires-Dist: scipy
Requires-Dist: imageio
Requires-Dist: torch>=1.10.1
Requires-Dist: invertedai
Requires-Dist: omegaconf
Requires-Dist: opencv-python
Provides-Extra: dev
Requires-Dist: gym; extra == "dev"
Provides-Extra: tests
Requires-Dist: pytest==5.4.3; extra == "tests"
Provides-Extra: docs
Requires-Dist: Sphinx; extra == "docs"
Requires-Dist: myst-parser; extra == "docs"
Requires-Dist: furo; extra == "docs"
Requires-Dist: sphinx-copybutton; extra == "docs"
Requires-Dist: sphinx_design; extra == "docs"
Requires-Dist: sphinxcontrib-applehelp; extra == "docs"
Requires-Dist: sphinxcontrib-devhelp; extra == "docs"
Requires-Dist: sphinxcontrib-htmlhelp; extra == "docs"
Requires-Dist: sphinxcontrib-jsmath; extra == "docs"
Requires-Dist: sphinxcontrib-qthelp; extra == "docs"
Requires-Dist: sphinxcontrib-serializinghtml; extra == "docs"
Requires-Dist: sphinx-autoapi; extra == "docs"
Requires-Dist: pydata-sphinx-theme; extra == "docs"
Requires-Dist: sphinx-autobuild; extra == "docs"
Requires-Dist: nbsphinx; extra == "docs"
Requires-Dist: breathe; extra == "docs"

[pypi-badge]: https://badge.fury.io/py/torchdrivesim.svg
[pypi-link]: https://pypi.org/project/torchdrivesim/  
[python-badge]: https://img.shields.io/pypi/pyversions/torchdrivesim.svg?color=%2334D058
[![CI](https://github.com/inverted-ai/torchdrivesim/actions/workflows/CI_cpu.yml/badge.svg?branch=master)](https://github.com/inverted-ai/torchdrivesim/actions/workflows/CI_cpu.yml)
[![PyPI][pypi-badge]][pypi-link]
[![python-badge]][pypi-link]
[![Documentation Status](https://readthedocs.org/projects/torchdrivesim/badge/?version=latest)](https://docs.torchdrivesim.org/en/latest/)

# TorchDriveSim
<!-- start Features-->
TorchDriveSim is a lightweight 2D driving simulator, built entirely in [PyTorch](https://pytorch.org/), primarily intended as a training
environment for developing autonomous driving algorithms. Its main features are:
1. Fully differentiable execution producing a single computation graph, including state transition (kinematic models) and observation (differentiable rendering) models.
2. First class support for batch processing, down to the lowest level.
3. Support for heterogeneous agent types (vehicles, pedestrians, cyclists, etc.), each with its own kinematic model.
4. Extensible and customizable implementation of kinematic models (unconstrained, unicycle, bicycle, etc.), rendering modes, and rendering backends.
5. Support for extensible traffic control types, including traffic lights.
6. Differentiable implementations of various infraction metrics (collisions, off-road, wrong way).
7. Modular collection of wrappers modifying the simulator's behavior.
8. Ability to ingest any map in [Lanelet2](https://github.com/fzi-forschungszentrum-informatik/Lanelet2) format out of the box.
9. Integration with [IAI API](https://docs.inverted.ai/en/latest/) for initializing agent states and providing realistic behaviors.
<!-- end Features-->
### ** Warning **
The PyPI version of torchdrivesim (which is what you get when you run `pip install torchdrivesim`) comes equipped
only with the slower OpenCV renderer. Faster renderers are available, but require either 
[`pytorch3d`](https://github.com/facebookresearch/pytorch3d/) or 
[`nvdiffrast`](https://nvlabs.github.io/nvdiffrast/)
to be installed. Their CUDA dependencies can be tricky to satisfy, so we provide a suitable Dockerfile.

<!-- start readme-->
## Simulator Architecture
The simulated world consists of the following elements:
1. Static background, by default including road (drivable surface) and lane markings, represented as a triangular mesh.
2. Control elements, represented by rectangles with internal state. The simulator does not enforce their semantics.
3. A collection of agents grouped into arbitrary types. All agents are rigid rectangles.
4. Per agent type kinematic models, defining the agents' action space and how actions translate into motion.
5. A configurable renderer, displaying the world form bird's eye view (birdview), using a customizable color map.

Each agent is described by its static attributes (length, width, and others as needed by kinematic models),
dynamic state (x, y, orientation, speed), and a flag (present mask) indicating whether a given agent is currently alive.
At each time step, the agents perform actions, which in turn determine
their next state. The simulator allows the agents to overlap, which is identified as a collision but not prohibited,
and the states of different agents do not influence each other except through the agents' actions. The simulator can
operate either in homogeneous mode (all agents are the same type and their states and actions are tensors), or in
heterogeneous mode (there are multiple agent types and their states and actions are dictionaries mapping agent
types to tensors). To support both modes, most operations are applied as functors, which lift a function acting on
a single agent type into a function acting on all agent types. However, this behavior should be transparent to users
who do not modify the simulator code.

The base simulator requires actions for all agents and does not modify their presence masks. For convenience, we provide
various wrappers modifying the simulator's behavior, such as by controlling a subset of agents (by replay or pre-defined
ontrollers), removing agents that exit the designated area, monitoring infractions, recording video, and many others.
Unless specified otherwise, the wrappers can be combined in different orders to reach desired effects.

## Behavioral Models

The hardest driving scenarios are those that require interactions with other road users. When building simulated
environments it is crucial to ensure that the other agents behave realistically, but achieving that is not easy and
TorchDriveSim is flexible in terms of how those other agents are controlled. We provide a simple heuristic that achieves
minimally sensible driving, noting that in most cases it will be unsatisfactory and requiring additional extensions.
We also facilitate log replay and demonstrate how to use recorded actions from the INTERACTION dataset. However,
such replay is not reactive, often resulting in spurious collisions.

For maximum realism and reactivity, we recommend using our (Inverted AI) API for generating realistic behaviors,
which is integrated with TorchDriveSim. This is a paid offering that requires an API key, which you can obtain by
contacting us. For academics, we may be able to offer free API keys.

## Maps and Map Formats

Several CARLA maps (`carla_Town01`, `carla_Town02`, `carla_Town03`, `carla_Town04`, `carla_Town06`, `carla_Town07`, `carla_Town10HD`)
are included in `torchdrivesim` itself and can be loaded
by name. To include other maps, place the files in the format described below somewhere in a folder referenced by the
`TDS_RESOURCE_PATH` environment variable. Generally, a map is defined by a folder with the following structure:
```
MAPNAME/
  metadata.json  # custom metadata format
  MAPNAME.osm  # road network in Lanelet2 format
  MAPNAME_mesh.json  # custom road mesh format, can be derived from the .osm file
  MAPNAME_stoplines.json  # custom format specifying traffic lights, stop signs, and yield signs, if needed
```

See the bundled maps in `torchdrivesim/resources/maps` for examples. There is currently no tooling available
for creating TorchDriveSim-compatible maps, but you can try the experimental OpenDRIVE
[converter](https://github.com/inverted-ai/map-converter).

## Scenario Definition

With maps and behavioral models available, the final hurdle is to define a suite of driving scenarios that can be
used for testing and evaluation. TorchDriveSim provides helpers for initializing the simulation state, including
by calling Inverted AI API, instantiating from a log (when available), and using some simple heuristics. It also
provides functions for identifying driving infractions, specifically collisions, going off-road, and driving wrong way.
However, it does not specify goals or rewards, leaving that to the user. Over time, we are planning to release
various scenario suites that can serve as benchmarks.

## Kinematic models

The primary kinematic model for vehicles in TorchDriveSim is the bicycle model, where the action consists of steering
and acceleration. It requires additionally specifying the rear axis offset to control the vehicle turn radius, but
it does not use the front axis offset, since that can not be fit by observing the vehicle movement from the outside,
effectively assuming the front axis is in the middle of the vehicle. Other kinematic models available are the
unconstrained model, where the action is the state delta between subsequent time steps, and the teleporting model,
where the action directly specifies the next state. We also provide different variations of those models, and it is
straightforward to implement a custom one.

## Differentiable rendering

TorchDriveSim supports three rendering backends, using cv2, pytorch3d, and nvdiffrast, respectively. The images produced
by all three look very similar and differ only in the details of how different triangles are pixelated.
The cv2 backend is the easiest to install and it is included as a required dependency. Pytorch3d and nvdiffrast
need to be installed separately, as per the instructions below. We also provide a dummy rendering backend that
returns an empty image, mostly for debugging and benchmarking purposes.

## Installation

Running `pip install torchdrivesim` only provides access to the basic OpenCV renderer. To be able to use the faster
pytorch3d renderer, make sure to first install the correct versions of `torch` and `pytorch3d` using the instructions
below. You can also install [`nvdiffrast`](https://nvlabs.github.io/nvdiffrast/#installation), which can be even faster,
but it is also subject to more restrictive license conditions.
Generally, the more images you render in parallel (either by having more ego agents or larger batches), the more
of a gain you will get from the faster renderers.

To install the correct `torch` using `pip`, go visit the
[prebuilt whls page](https://download.pytorch.org/whl/torch_stable.html) to select the right `.whl` file based on the
Python version, cuda availability and the operating system. For example, to install version `1.11.0` for `python3.8`
with `cuda` on Linux, run  
 `pip install https://download.pytorch.org/whl/cu113/torch-1.10.2%2Bcu113-cp38-cp38-linux_x86_64.whl`  
or  
`pip install torch==1.11.0+cu113 -f https://download.pytorch.org/whl/torch_stable.html`  

To install the correct `pytorch3d`, the user need to find the correct prebuilt wheel for the installed `torch` version,
more details can be found at the
[official installation page](https://github.com/facebookresearch/pytorch3d/blob/main/INSTALL.md). For example, to 
install version `0.7.2` for `python3.8` with `pip`, run  
`pip install https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1110/pytorch3d-0.7.2-cp38-cp38-linux_x86_64.whl`  
or  
`pip install pytorch3d==0.7.2 -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1110/download.html`  

Here are the summarized example steps for python3.8 and cuda 11.3:
```bazaar
1. pip install torch==1.11.0+cu113 -f https://download.pytorch.org/whl/torch_stable.html
2. pip install pytorch3d==0.7.2 -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1110/download.html
3. pip install torchdrivesim
```
## Docker

In order to use TorchDriveSim smoothly without worrying about installing dependencies, we provide a 
[Dockerfile](Dockerfile) that works either with or without gpu. In order to build the docker image,
run `docker build --target torchdrivesim -t torchdrivesim:latest . `. To run the container with GPU access,
run `docker run --runtime=nvidia -it torchdrivesim:latest /bin/bash`. To run the container without GPU access,
run `docker run -it torchdrivesim:latest /bin/bash`. For more information regarding setting up GPU runtime with Docker,
follow [this official link](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)
for the installation process.

## Citations

If you use TorchDriveSim in your research, please cite the following [paper](https://arxiv.org/abs/2104.11212),
for which an early version of TorchDriveSim  was initially developed.

```bibtex
@INPROCEEDINGS{itra2021,
  author={\'Scibior, Adam and Lioutas, Vasileios and Reda, Daniele and Bateni, Peyman and Wood, Frank},
  booktitle={2021 IEEE International Intelligent Transportation Systems Conference (ITSC)}, 
  title={Imagining The Road Ahead: Multi-Agent Trajectory Prediction via Differentiable Simulation}, 
  year={2021},
  pages={720-725},
  doi={10.1109/ITSC48978.2021.9565113}}
```
<!-- end readme-->
