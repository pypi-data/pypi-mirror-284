"use strict";(self.webpackChunk_jaredstef_headers=self.webpackChunk_jaredstef_headers||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>m});var n=o(80),a=o(902),l=o(110);function c(e,t){const o=e.currentWidget,n=null==o?void 0:o.content;if(null!=n){a.NotebookActions.insertBelow(n);const e=n.activeCell;null!=e&&e.model.sharedModel.setSource(t)}}function s(e,t,o=0){const n=e.currentWidget;if(n&&n.content.widgets.length>0){const e=n.content,a=e.activeCell;e.activate(),a&&a.editor?(a.editor.focus(),a.editor.setCursorPosition({line:t,column:o})):console.error("Cell editor is null")}}async function d(e){await new Promise((t=>setTimeout(t,e)))}const i="@jaredstef/headers",r={id:`${i}:plugin`,description:"A JupyterLab extension.",autoStart:!0,requires:[a.INotebookTracker],optional:[n.ISettingRegistry],activate:async(e,t,o)=>{console.log("JupyterLab extension headers is activated!"),o&&o.load(r.id).then((e=>{console.log("headers settings loaded:",e.composite)})).catch((e=>{console.error("Failed to load settings for headers.",e)}));const n=`${i}:createSparkCell`,a=`${i}:createExclamCell`,m=`${i}:createHashCell`,u=await(null==o?void 0:o.load(r.id)),b=null==u?void 0:u.get("sparkButtonEnabled").composite,p=null==u?void 0:u.get("exclamButtonEnabled").composite,y=null==u?void 0:u.get("percButtonEnabled").composite,C=null==u?void 0:u.get("customButtonsEnabled").composite,k=null==u?void 0:u.get("customButtons").composite;t.widgetAdded.connect(((o,r)=>{if(b){const t=new l.ToolbarButton({label:"Spark",className:"button-style",onClick:async()=>{e.commands.execute(n)},tooltip:"Create Spark Magic Cell (@)"});r.toolbar.insertItem(1,"sparkButton",t)}if(p){const t=new l.ToolbarButton({label:"!",className:"button-style",onClick:async()=>{e.commands.execute(a)},tooltip:"Create IPython ! Cell (!)"});r.toolbar.insertItem(2,"!Button",t)}if(y){const t=new l.ToolbarButton({label:"%",className:"button-style",onClick:async()=>{e.commands.execute(m)},tooltip:"Create IPython % Cell (Shift F5)"});r.toolbar.insertItem(3,"%Button",t)}k&&C&&k.forEach(((o,n)=>{const a=`${i}:createCustomCell${n}`;e.commands.addCommand(a,{label:`Insert Custom Cell ${n}`,execute:async()=>{c(t,o.contentString.replace(/\\n/g,"\n")),await d(1),s(t,o.lineNumber-1,o.characterNumber)}});const m=new l.ToolbarButton({label:o.title,className:"button-style",onClick:async()=>{e.commands.execute(a)},tooltip:`Create custom cell: ${o.title}`});r.toolbar.insertItem(4+n,`customButton${n}`,m)}))})),b&&(e.commands.addCommand(n,{label:"Insert Spark Cell",execute:async()=>{c(t,"%%spark\n\n"),await d(1),s(t,2)}}),e.commands.addKeyBinding({command:n,keys:["Accel Shift 2"],selector:".jp-Notebook"}),e.commands.addKeyBinding({command:n,keys:["Shift 2"],selector:".jp-Notebook.jp-mod-commandMode"})),p&&(e.commands.addKeyBinding({command:a,keys:["Accel Shift 1"],selector:".jp-Notebook"}),e.commands.addKeyBinding({command:a,keys:["Shift 1"],selector:".jp-Notebook.jp-mod-commandMode"}),e.commands.addCommand(a,{label:"Insert IPython ! Cell",execute:async()=>{c(t,"!"),await d(1),s(t,0,1)}})),y&&(e.commands.addKeyBinding({command:m,keys:["Accel Shift F5"],selector:".jp-Notebook"}),e.commands.addKeyBinding({command:m,keys:["Shift F5"],selector:".jp-Notebook.jp-mod-commandMode"})),e.commands.addCommand(m,{label:"Insert IPython % Cell",execute:async()=>{c(t,"%"),await d(1),s(t,0,1)}})}},m=r}}]);