- name: Install Swift controller
  hosts: controller
  become: true
  roles:
    - role: create_identity_user
      vars:
        user: swift
    - role: create_identity_service
      vars:
        service: swift
        type: object-store
        description: "OpenStack Object Storage"
        endpoint: http://{{ hostvars['controller']['ansible_default_ipv4']['address'] }}:8080/v1/AUTH_%\(project_id\)s
        admin_endpoint: http://{{ hostvars['controller']['ansible_default_ipv4']['address'] }}:8080/v1/
  tasks:
    - name: Install swift packages
      yum:
        name:
          - openstack-swift-proxy
          - python3-swiftclient
          - python3-keystoneclient
          - python3-keystonemiddleware
          - memcached
          - rsync

- name: Install Swift storage
  hosts: storage
  become: true
  tasks:
    - name: Install packages
      yum:
        name:
          - xfsprogs
          - rsync

    - name: Prepare the storage device
      shell: |
        mkfs.xfs /dev/{{ item }}
        mkdir -p /srv/node/{{ item }}
        cat << EOF >> /etc/fstab
        UUID=`blkid -s UUID -o value /dev/{{ item }}` /srv/node/{{ item }} xfs noatime 0 2
        EOF
        mount /srv/node/{{ item }}
      with_items: "{{ swift_storage_devices }}"

    - name: Install swift packages
      yum:
        name:
          - openstack-swift-account
          - openstack-swift-container
          - openstack-swift-object

    - name: Initialize swift config files
      shell: |
        sed -i "/^bind_ip/cbind_ip= {{ ansible_default_ipv4['address'] }}" /etc/swift/{{ item }}
        chown -R swift:swift /srv/node
        mkdir -p /var/cache/swift
        chown -R root:swift /var/cache/swift
        chmod -R 775 /var/cache/swift
      with_items:
        - account-server.conf
        - container-server.conf
        - object-server.conf

- name: Create the initial rings and init config file
  hosts: controller
  become: true
  tasks:
    - name: Create initial rings for cluster
      shell: |
        cd /etc/swift
        swift-ring-builder account.builder create 10 1 1
        swift-ring-builder container.builder create 10 1 1
        swift-ring-builder object.builder create 10 1 1

        swift-ring-builder account.builder add --region 1 --zone 1 --ip "{{ compute01_local_control_ip }}" --port 6202  --device {{ item }} --weight 100
        swift-ring-builder account.builder add --region 1 --zone 1 --ip "{{ compute02_local_control_ip }}" --port 6202  --device {{ item }} --weight 100
        swift-ring-builder container.builder add --region 1 --zone 1 --ip "{{ compute01_local_control_ip }}" --port 6201  --device {{ item }} --weight 100
        swift-ring-builder container.builder add --region 1 --zone 1 --ip "{{ compute02_local_control_ip }}" --port 6201  --device {{ item }} --weight 100
        swift-ring-builder object.builder add --region 1 --zone 1 --ip "{{ compute01_local_control_ip }}" --port 6200  --device {{ item }} --weight 100
        swift-ring-builder object.builder add --region 1 --zone 1 --ip "{{ compute02_local_control_ip }}" --port 6200  --device {{ item }} --weight 100

        swift-ring-builder account.builder rebalance
        swift-ring-builder container.builder rebalance
        swift-ring-builder object.builder rebalance
      with_items: "{{ swift_storage_devices }}"
      when: oos_env_type == 'cluster'

    - name: Create initial rings for all-in-one
      shell: |
        cd /etc/swift
        swift-ring-builder account.builder create 10 1 1
        swift-ring-builder container.builder create 10 1 1
        swift-ring-builder object.builder create 10 1 1

        swift-ring-builder account.builder add --region 1 --zone 1 --ip "{{ controller_local_control_ip }}" --port 6202  --device {{ item }} --weight 100
        swift-ring-builder container.builder add --region 1 --zone 1 --ip "{{ controller_local_control_ip }}" --port 6201  --device {{ item }} --weight 100
        swift-ring-builder object.builder add --region 1 --zone 1 --ip "{{ controller_local_control_ip }}" --port 6200  --device {{ item }} --weight 100

        swift-ring-builder account.builder rebalance
        swift-ring-builder container.builder rebalance
        swift-ring-builder object.builder rebalance
      with_items: "{{ swift_storage_devices }}"
      when: oos_env_type == 'all_in_one'

    - name: Init swift config file
      shell: |
        cat << EOF > /etc/swift/swift.conf
        [swift-hash]
        swift_hash_path_suffix = {{ swift_hash_path_suffix }}
        swift_hash_path_prefix = {{ swift_hash_path_prefix }}
        [storage-policy:0]
        name = Policy-0
        default = yes
        EOF

    - name: Init swift proxy config file
      shell: |
        cat << EOF > /etc/swift/proxy-server.conf
        [DEFAULT]
        bind_port = 8080
        workers = 2
        user = swift
        swift_dir = /etc/swift

        [pipeline:main]
        pipeline = catch_errors gatekeeper healthcheck proxy-logging cache container_sync bulk ratelimit authtoken formpost tempurl keystoneauth staticweb crossdomain container-quotas account-quotas slo dlo versioned_writes proxy-logging proxy-server

        [app:proxy-server]
        use = egg:swift#proxy
        account_autocreate = True

        [filter:catch_errors]
        use = egg:swift#catch_errors

        [filter:gatekeeper]
        use = egg:swift#gatekeeper

        [filter:healthcheck]
        use = egg:swift#healthcheck

        [filter:proxy-logging]
        use = egg:swift#proxy_logging

        [filter:cache]
        use = egg:swift#memcache
        memcache_servers = {{ hostvars['controller']['ansible_default_ipv4']['address'] }}:11211

        [filter:container_sync]
        use = egg:swift#container_sync

        [filter:bulk]
        use = egg:swift#bulk

        [filter:ratelimit]
        use = egg:swift#ratelimit

        [filter:authtoken]
        paste.filter_factory = keystonemiddleware.auth_token:filter_factory
        www_authenticate_uri = http://{{ hostvars['controller']['ansible_default_ipv4']['address'] }}:5000
        auth_url = http://{{ hostvars['controller']['ansible_default_ipv4']['address'] }}:5000
        memcached_servers = {{ hostvars['controller']['ansible_default_ipv4']['address'] }}:11211
        auth_type = password
        project_domain_id = default
        user_domain_id = default
        project_name = service
        username = swift
        password = {{ project_identity_password }}
        delay_auth_decision = True

        [filter:keystoneauth]
        use = egg:swift#keystoneauth
        operator_roles = admin,user,member

        [filter:container-quotas]
        use = egg:swift#container_quotas

        [filter:account-quotas]
        use = egg:swift#account_quotas

        [filter:slo]
        use = egg:swift#slo

        [filter:dlo]
        use = egg:swift#dlo

        [filter:versioned_writes]
        use = egg:swift#versioned_writes
        allow_versioned_writes=True

        [filter:staticweb]
        use = egg:swift#staticweb

        [filter:crossdomain]
        use = egg:swift#crossdomain

        [filter:tempurl]
        use = egg:swift#tempurl

        [filter:formpost]
        use = egg:swift#formpost
        EOF

    - name: ensure proper ownership of the config directory
      shell: |
        chown -R root:swift /etc/swift

- name: distribute rings and config file from controller to storage nodes
  hosts: storage
  become: true
  tasks:
    - name: copy rings from controller to storage nodes
      synchronize:
        src: /etc/swift/{{ item }}
        dest: /etc/swift/{{ item }}
        rsync_path: /usr/bin/rsync
      delegate_to: controller
      with_items:
        - swift.conf
        - account.ring.gz
        - container.ring.gz
        - object.ring.gz

    - name: ensure proper ownership of the config directory
      shell: |
        chown -R root:swift /etc/swift

- name: Start controller services
  hosts: controller
  become: true
  tasks:
    - name: Start openstack-swift-proxy service
      systemd:
        name: openstack-swift-proxy
        state: started
        enabled: True

- name: Start storage services
  hosts: storage
  become: true
  tasks:
    - name: Start swift account services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: True
      with_items:
        - openstack-swift-account.service
        - openstack-swift-account-auditor.service
        - openstack-swift-account-reaper.service
        - openstack-swift-account-replicator.service

    - name: Start swift container services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: True
      with_items:
        - openstack-swift-container.service
        - openstack-swift-container-auditor.service
        - openstack-swift-container-replicator.service
        - openstack-swift-container-updater.service

    - name: Start swift object services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: True
      with_items:
      - openstack-swift-object.service
      - openstack-swift-object-auditor.service
      - openstack-swift-object-replicator.service
      - openstack-swift-object-updater.service
