import os
from typing import Literal, Mapping, Optional 
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
from Bio import pairwise2
from Bio.SubsMat import MatrixInfo as matlist
from Bio.pairwise2 import format_alignment
import numpy as np
from uuid import uuid1
import subprocess 

dirname = os.path.dirname(__file__)

HLA_I_PSEUDO_INDEX = [6, 8, 23, 44, 58, 61, 62, 65, 66, 68, 69, 72, 73, 75, 76, 79, 80, 83, 94, 96, 98, 113, 115, 117, 142, 146, 149, 151, 155, 157, 158, 162, 166, 170]

def _get_hla_pseudo_sequence():
    hla = SeqIO.parse( os.path.join(dirname, "./hla_prot/hla_prot.fasta"), 'fasta')
    hla = dict(list(map(lambda x: (x.description.split(" ")[1], str(x.seq)), hla.records)))
    start_prefix = ['DSMR',
        'HAMR',
        'HCMR',
        'HFMR',
        'HPMR',
        'HSIR',
        'HSIS',
        'HSKR',
        'HSKR',
        'HSLR',
        'HSMG',
        'HSMK',
        'HSMM',
        'HSMR',
        'HSMS',
        'HSMT',
        'HSMW',
        'HSRR',
        'HSTK',
        'HSTR',
        'HSVK',
        'HSVR',
        'HTMR',
        'HYMR',
        'LSMR',
        'NSMR',
        'PSMR',
        'QSMR',
        'QSMS',
        'RSMR',
        'YSMR'
    ]
    def truncate_if_exists(seq):
        for i in start_prefix:
            if i in seq:
                return seq[max(0,seq.index(i)-2):]
        return False
    hla = list(filter(lambda z: z[1], map(lambda x: (x[0],truncate_if_exists(x[1])), hla.items())))
    pseudo_index = HLA_I_PSEUDO_INDEX
    hla = list(filter(lambda x: len(x[1]) >= 171, hla))
    hla_pseudo = list(map(lambda x: (x[0], dict(
        pseudosequence = ''.join([x[1][i] for i in pseudo_index]),
        fullsequence = x[1],
    )), hla))
    hla_pseudo = dict(hla_pseudo)
    hla_pseudo_alias = {}
    for k,v in hla_pseudo.items():
        if k.endswith(":01:01:01"):
            hla_pseudo_alias[k[:-6]] = v
        if k.endswith(":01:01"):
            hla_pseudo_alias[k[:-3]] = v
    hla_pseudo.update(hla_pseudo_alias)

    return hla_pseudo

class HLAPseudoSequence:
    def __init__(self):
        self._hla_seq = _get_hla_pseudo_sequence()

    def __getitem__(self, key):
        if key in self._hla_seq:
            return self._hla_seq[key]
        else:
            okey = key
            while okey not in self._hla_seq and len(okey.split(':')) > 1:
                okey = ':'.join(okey.split(':')[:-1])
            if okey in self._hla_seq:
                return self._hla_seq[okey]
            okey = key
            _suffix_count = 0
            while okey not in self._hla_seq and _suffix_count < 2:
                okey += ':01'
                _suffix_count += 1
            if okey in self._hla_seq:
                return self._hla_seq[okey]
            return None

TRAV_SEQUENCES = {
    "human": {
        'TRAV1-1': 'GQSLEQPSEVTAVEGAIVQINCTYQTSGFYGLSWYQQHDGGAPTFLSYNALDGLEETGRFSSFLSRSDSYGYLLLQELQMKDSASYFCAVR',
        'TRAV1-2': 'GQNIDQPTEMTATEGAIVQINCTYQTSGFNGLFWYQQHAGEAPTFLSYNVLDGLEEKGRFSSFLSRSKGYSYLLLKELQMKDSASYLCAVR',
        'TRAV2': 'KDQVFQPSTVASSEGAVVEIFCNHSVSNAYNFFWYLHFPGCAPRLLVKGSKPSQQGRYNMTYERFSSSLLILQVREADAAVYYCAVE',
        'TRAV3': 'AQSVAQPEDQVNVAEGNPLTVKCTYSVSGNPYLFWYVQYPNRGLQFLLKYITGDNLVKGSYGFEAEFNKSQTSFHLKKPSALVSDSALYFCAVRD',
        'TRAV4': 'LAKTTQPISMDSYEGQEVNITCSHNNIATNDYITWYQQFPSQGPRFIIQGYKTKVTNEVASLFIPADRKSSTLSLPRVSLSDTAVYYCLVGD',
        'TRAV5': 'GEDVEQSLFLSVREGDSSVINCTYTDSSSTYLYWYKQEPGAGLQLLTYIFSNMDMKQDQRLTVLLNKKDKHLSLRIADTQTGDSAIYFCAES',
        'TRAV6': 'SQKIEQNSEALNIQEGKTATLTCNYTNYSPAYLQWYRQDPGRGPVFLLLIRENEKEKRKERLKVTFDTTLKQSLFHITASQPADSATYLCALD',
        'TRAV7': 'ENQVEHSPHFLGPQQGDVASMSCTYSVSRFNNLQWYRQNTGMGPKHLLSMYSAGYEKQKGRLNATLLKNGSSLYITAVQPEDSATYFCAVD',
        'TRAV8-1': 'AQSVSQHNHHVILSEAASLELGCNYSYGGTVNLFWYVQYPGQHLQLLLKYFSGDPLVKGIKGFEAEFIKSKFSFNLRKPSVQWSDTAEYFCAVN',
        'TRAV8-2': 'AQSVTQLDSHVSVSEGTPVLLRCNYSSSYSPSLFWYVQHPNKGLQLLLKYTSAATLVKGINGFEAEFKKSETSFHLTKPSAHMSDAAEYFCVVS',
        'TRAV8-3': 'AQSVTQPDIHITVSEGASLELRCNYSYGATPYLFWYVQSPGQGLQLLLKYFSGDTLVQGIKGFEAEFKRSQSSFNLRKPSVHWSDAAEYFCAVG',
        'TRAV8-4': 'AQSVTQLGSHVSVSEGALVLLRCNYSSSVPPYLFWYVQYPNQGLQLLLKYTSAATLVKGINGFEAEFKKSETSFHLTKPSAHMSDAAEYFCAVS',
        'TRAV8-6': 'AQSVTQLDSQVPVFEEAPVELRCNYSSSVSVYLFWYVQYPNQGLQLLLKYLSGSTLVESINGFEAEFNKSQTSFHLRKPSVHISDTAEYFCAVS',
        'TRAV8-7': 'TQSVTQLDGHITVSEEAPLELKCNYSYSGVPSLFWYVQYSSQSLQLLLKDLTEATQVKGIRGFEAEFKKSETSFYLRKPSTHVSDAAEYFCAVG',
        'TRAV9-1': 'GDSVVQTEGQVLPSEGDSLIVNCSYETTQYPSLFWYVQYPGEGPQLHLKAMKANDKGRNKGFEAMYRKETTSFHLEKDSVQESDSAVYFCALS',
        'TRAV9-2': 'GNSVTQMEGPVTLSEEAFLTINCTYTATGYPSLFWYVQYPGEGLQLLLKATKADDKGSNKGFEATYRKETTSFHLEKGSVQVSDSAVYFCALS',
        'TRAV10': 'KNQVEQSPQSLIILEGKNCTLQCNYTVSPFSNLRWYKQDTGRGPVSLTIMTFSENTKSNGRYTATLDADTKQSSLHITASQLSDSASYICVVS',
        'TRAV11': 'LHTLEQSPSFLNIQEGMHAVLNCTYQERTLFNFHWFRQDPGRRLVSLTLIQSSQKEQGDKYFKELLGKEKFYSVWNIAASHLGDSATYFCAL',
        'TRAV12-1': 'RKEVEQDPGPFNVPEGATVAFNCTYSNSASQSFFWYRQDCRKEPKLLMSVYSSGNEDGRFTAQLNRASQYISLLIRDSKLSDSATYLCVVN',
        'TRAV12-2': 'QKEVEQNSGPLSVPEGAIASLNCTYSDRGSQSFFWYRQYSGKSPELIMFIYSNGDKEDGRFTAQLNKASQYVSLLIRDSQPSDSATYLCAVN',
        'TRAV12-3': 'QKEVEQDPGPLSVPEGAIVSLNCTYSNSAFQYFMWYRQYSRKGPELLMYTYSSGNKEDGRFTAQVDKSSKYISLFIRDSQPSDSATYLCAMS',
        'TRAV13-1': 'GENVEQHPSTLSVQEGDSAVIKCTYSDSASNYFPWYKQELGKGPQLIIDIRSNVGEKKDQRIAVTLNKTAKHFSLHITETQPEDSAVYFCAAS',
        'TRAV13-2': 'GESVGLHLPTLSVQEGDNSIINCAYSNSASDYFIWYKQESGKGPQFIIDIRSNMDKRQGQRVTVLLNKTVKHLSLQIAATQPGDSAVYFCAEN',
        'TRAV14DV4': 'AQKITQTQPGMFVQEKEAVTLDCTYDTSDPSYGLFWYKQPSSGEMIFLIYQGSYDQQNATEGRYSLNFQKARKSANLVISASQLGDSAMYFCAMRE',
        'TRAV16': 'AQRVTQPEKLLSVFKGAPVELKCNYSYSGSPELFWYVQYSRQRLQLLLRHISRESIKGFTADLNKGETSFHLKKPFAQEEDSAMYYCALS',
        'TRAV17': 'SQQGEEDPQALSIQEGENATMNCSYKTSINNLQWYRQNSGRGLVHLILIRSNEREKHSGRLRVTLDTSKKSSSLLITASRAADTASYFCATD',
        'TRAV18': 'GDSVTQTEGPVTLPERAALTLNCTYQSSYSTFLFWYVQYLNKEPELLLKSSENQETDSRGFQASPIKSDSSFHLEKPSVQLSDSAVYYCALR',
        'TRAV19': 'AQKVTQAQTEISVVEKEDVTLDCVYETRDTTYYLFWYKQPPSGELVFLIRRNSFDEQNEISGRYSWNFQKSTSSFNFTITASQVVDSAVYFCALSE',
        'TRAV20': 'EDQVTQSPEALRLQEGESSSLNCSYTVSGLRGLFWYRQDPGKGPEFLFTLYSAGEEKEKERLKATLTKKESFLHITAPKPEDSATYLCAVQ',
        'TRAV21': 'KQEVTQIPAALSVPEGENLVLNCSFTDSAIYNLQWFRQDPGKGLTSLLLIQSSQREQTSGRLNASLDKSSGRSTLYIAASQPGDSATYLCAVR',
        'TRAV22': 'GIQVEQSPPDLILQEGANSTLRCNFSDSVNNLQWFHQNPWGQLINLFYIPSGTKQNGRLSATTVATERYSLLYISSSQTTDSGVYFCAVE',
        'TRAV23DV6': 'QQQVKQSPQSLIVQKGGISIINCAYENTAFDYFPWYQQFPGKGPALLIAIRPDVSEKKEGRFTISFNKSAKQFSLHIMDSQPGDSATYFCAAS',
        'TRAV24': 'ILNVEQSPQSLHVQEGDSTNFTCSFPSSNFYALHWYRWETAKSPEALFVMTLNGDEKKKGRISATLNTKEGYSYLYIKGSQPEDSATYLCAF',
        'TRAV25': 'GQQVMQIPQYQHVQEGEDFTTYCNSSTTLSNIQWYKQRPGGHPVFLIQLVKSGEVKKQKRLTFQFGEAKKNSSLHITATQTTDVGTYFCAG',
        'TRAV26-1': 'DAKTTQPPSMDCAEGRAANLPCNHSTISGNEYVYWYRQIHSQGPQYIIHGLKNNETNEMASLIITEDRKSSTLILPHATLRDTAVYYCIVRV',
        'TRAV26-2': 'DAKTTQPNSMESNEEEPVHLPCNHSTISGTDYIHWYRQLPSQGPEYVIHGLTSNVNNRMASLAIAEDRKSSTLILHRATLRDAAVYYCILRD',
        'TRAV27': 'TQLLEQSPQFLSIQEGENLTVYCNSSSVFSSLQWYRQEPGEGPVLLVTVVTGGEVKKLKRLTFQFGDARKDSSLHITAAQPGDTGLYLCAG',
        'TRAV29DV5': 'DQQVKQNSPSLSVQEGRISILNCDYTNSMFDYFLWYKKYPAEGPTFLISISSIKDKNEDGRFTVFLNKSAKHLSLHIVPSQPGDSAVYFCAAS',
        'TRAV30': 'QQPVQSPQAVILREGEDAVINCSSSKALYSVHWYRQKHGEAPVFLMILLKGGEQKGHEKISASFNEKKQQSSLYLTASQLSYSGTYFCGTE',
        'TRAV34': 'SQELEQSPQSLIVQEGKNLTINCTSSKTLYGLYWYKQKYGEGLIFLMMLQKGGEEKSHEKITAKLDEKKQQSSLHITASQPSHAGIYLCGAD',
        'TRAV35': 'GQQLNQSPQSMFIQEGEDVSMNCTSSSIFNTWLWYKQEPGEGPVLLIALYKAGELTSNGRLTAQFGITRKDSFLNISASIPSDVGIYFCAGQ',
        'TRAV36DV7': 'EDKVVQSPLSLVVHEGDTVTLNCSYEVTNFRSLLWYKQEKKAPTFLFMLTSSGIEKKSGRLSSILDKKELSSILNITATQTGDSAIYLCAVE',
        'TRAV38-1': 'AQTVTQSQPEMSVQEAETVTLSCTYDTSENNYYLFWYKQPPSRQMILVIRQEAYKQQNATENRFSVNFQKAAKSFSLKISDSQLGDTAMYFCAFMK',
        'TRAV38-2DV8': 'AQTVTQSQPEMSVQEAETVTLSCTYDTSESDYYLFWYKQPPSRQMILVIRQEAYKQQNATENRFSVNFQKAAKSFSLKISDSQLGDAAMYFCAYRS',
        'TRAV39': 'ELKVEQNPLFLSMQEGKNYTIYCNYSTTSDRLYWYRQDPGKSLESLFVLLSNGAVKQEGRLMASLDTKARLSTLHITAAVHDLSATYFCAVD',
        'TRAV40': 'SNSVKQTGQITVSEGASVTMNCTYTSTGYPTLFWYVEYPSKPLQLLQRETMENSKNFGGGNIKDKNSPIVKYSVQVSDSAVYYCLLG',
        'TRAV41': 'KNEVEQSPQNLTAQEGEFITINCSYSVGISALHWLQQHPGGGIVSLFMLSSGKKKHGRLIATINIQEKHSSLHITASHPRDSAVYICAVR',
    },
    "mouse": {
        'TRAV1': 'GQGVEQPDNLMSVEGTFARVNCTYSTSGFNGLSWYQQREGHAPVFLSYVVLDGLKDSGHFSTFLSRSNGYSYLLLTELQIKDSASYLCAVR',
        'TRAV2': 'LAKTTQPPSMEAYEGQEVNVSCSHTNIATSEYIYWYRQVPHQGPQFIIQGYKDYVVNEVASLFISADRKLSTLSLPWVSLRDAAVYYCIVTD',
        'TRAV3-1': 'GEQVEQRPPHLSVREGDSAIIICTYTDSATAYFSWYKQEAGAGLQLLMSVLSNVDRKEEQGLTVLLNKKDKRLSLNLTAAHPGDSAVYFCAVS',
        'TRAV3-3': 'GEQVEQRPPHLSVREGDSAVITCTYTDPNSYYFFWYKQEPGASLQLLMKVFSSTEINEGQGFTVLLNKKDKRLSLNLTAAHPGDSAAYFCAVS',
        'TRAV3-4': 'GEQVEQRPPHLSVPEGDSAVIICTYTDSATAYFYWYKQEPGAGLQLLMSVFSNVDRKEEQGLTVLLNKKDKQLSLNLTAAHPGDSAVYFCAVS',
        'TRAV3D-3': 'GEQVEQRPPHLSVREGDSAFITCTYTDPNSYYFFWYKQEPGASLQLLMKVFSSTEINEGQGFTVLLNKKDKRLSLNLTAAHPGDSAAYFCAVS',
        'TRAV3N-3': 'GEQVEQRPPHLSVREGDSAVIICTYTDPNSYYFFWYKQEPGAGLQLLMKVFSSTEINEGQGFTVLLNKKDKQLSLNLTAAHPGDSAVYFCAVS',
        'TRAV4-2': 'GMPVEQNPPALSLYEGADSGLRCNFSTTMKSVQWFQQNHRGRLITLFYLAQGTKENGRLKSTFNSKERYSTLHIKDAQLEDSGTYFCAAE',
        'TRAV4-3': 'GDQVKQSPSALSLQEGTNSALRCNFSIATTTVQWFLQNPRGSLMNLFYLVPGTKENGRLKSTFNSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4-4DV10': 'GDQVEQSPSALSLHEGTDSALRCNFTTTMRSVQWFRQNSRGSLISLFYLASGTKENGRLKSAFDSKERRYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-2': 'GMPVEQNPPALSLYEGAESGLRCNFSTTMKGVQWFQQNHRGRFITLFYLAQGTKENGRLKSTFNS*ERYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-3': 'GDKVKQSPSALSLQEGTNSALRCNFSIAATTVQWFLQNPRGSLINLFYLVPGTKENGRLKSTFNSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4D-4': 'GDQVEQSPSALSLHEGTSSALRCNFTTTTRSVQWFRQNSRGSLINLFYLASGTKENGRLKSAFDSKELYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4N-3': 'GDKVKQSPSALSLQEGTNSALRCNFSIAATTVQWFLQNPRGSLMNLFYLVPGTKENGRLKSAFDSKESYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV4N-4': 'GDQVEQSPSALSLHEGTGSALRCNFTTTMRAVQWFRKNSRGSLINLFYLASGTKENGRLKSAFDSKERYSTLHIRDAQLEDSGTYFCAAE',
        'TRAV5-1': 'GEQVEQLPSSLIVQEGASVLINCSYTDSASVYFPWYKQEPGKRLQFIIDIRSNMERKQNQRLTLLFDKKTKHLSLHITATQPGDSAIYFCSAS',
        'TRAV5-2': 'GKQVEQLPSILRFKEGTNTLKNCIYVNNASLCFLWYKQEPGKHPTFVIDIR*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYFCAES',
        'TRAV5-4': 'GEQVEQLPSILRVQERSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQIQGLIVLLDKKAKRFSLHITDTQPADSAMYFCAAS',
        'TRAV5D-2': 'GKQVELLPSILRFKEGTNTLINCIYVNNALLCFLWYKQEPGKHLTFIIDIC*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYF*K',
        'TRAV5D-4': 'GEQVEQLPSILRVQEGSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQTQGLIVLLDKKAKRFSLHITDTQPGDSAMYFCAAS',
        'TRAV5N-2': 'GKQVELLPSILRFKEETNTLINCIYVNNALLCFLWYKQEPGKHPTFIIDIC*NMERKQSQRFIVLLNKKSKHFSLHNTDNQPQD*AMYF*K',
        'TRAV5N-4': 'GEQVEQLPSILRVQEGSSASINCTYENSASNYFPWYKQEPGENPKLIIDIRSNMERKQTQGLIVLLDKKAKRFSLHITDTQPGDSAMYFCAAS',
        'TRAV6-1': 'GDSVTQMQGQVTLSEDDFLFINCTYSTTWYPTLFWYVQYPGEGPQLLLKVTTANNKGISRGFEATYDKRTTSFHLQKASVQESDSAVYYCVLG',
        'TRAV6-2': 'GNSVTQMQGQVTLSEEEFLFINCTYSTTGYPTLFWYVQYPGEGPQLLLKVTTANNKGSSRGFEATYDKGTTSFHLQKASVQESDSAVYYCVLG',
        'TRAV6-3': 'GDSVIQMQGQVTLSENDFLFINCTYSTTGYPTLFWYVQYSGEGPQLLLQVTTANNKGSSRGFEATYDKGTTSFHLQKTSVQEIDSAVYYCAMR',
        'TRAV6-4': 'GDSVTQKQGQVTLSEDDFLFINCTYSTTTYPTLLWYVQYPGQGPQLLLKVTTANNKGISRGFEATYDKGTTSFHLQKASVQESDSAVYFCALV',
        'TRAV6-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6-6': 'GDSVTQTEGQVTVSESKSLIINCTYSTTSIAYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALG',
        'TRAV6-7DV9': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALG',
        'TRAV6D-3': 'GDSVIQMQGQVTLSENDFLFINCTYSTTGYPTLFWYVQYSGEGPQLLLQVTTANNKGSSRGFEATYDKGTTSFHLQKTSVQEIDSAVYYCAMR',
        'TRAV6D-4': 'GDSVTQKQGQVTLSEDDFLFINCTYSTTTYPTLFWYVQYPGQGPQLLLKVTTANNKGISRGFEATYDKGTTSFHLQKASVQESDSAVYFCALV',
        'TRAV6D-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSNRGFEATYNKEATSFHLQKASVQESDSAVYYCALG',
        'TRAV6D-6': 'GDSVTQTEGQVTVSESKSLIINCTYSATSIAYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKETTSFHLQKASVQESDSAVYYCALS',
        'TRAV6D-7': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6N-5': 'GDSVTQTEGPVTLSEGTSLTVNCSYETKQYPTLFWYVQYPGEGPQLLFKVPKANEKGSNRGFEATYNKEATSFHLQKASVQESDSAVYYCALG',
        'TRAV6N-6': 'GDSVTQTEGQVTVSESKSLIINCTYSATSIGYPNLFWYVRYPGEGLQLLLKVITAGQKGSSRGFEATYNKEATSFHLQKASVQESDSAVYYCALS',
        'TRAV6N-7': 'GDSVTQTEGQVALSEEDFLTIHCNYSASGYPALFWYVQYPGEGPQFLFRASRDKEKGSSRGFEATYDKGTTSFHLRKASVQESDSAVYYCALG',
        'TRAV7-1': 'QQKVQQSPESLIVPEGGMASLNCTFSDRNSQYFWWYRQHSGEGPKALMSIFSNGDKKEGRFTAHLNKASLYVSLHIKDSQPSDSALYFCAVS',
        'TRAV7-2': 'QQKVQQSPESLIVPEGGMASLNCTSSDRNVDYFWWYRQRSGKSPKMLMAIFSNGEKEEGRFTVHLNKASLHTSLHIRDSQPSDSALYFCAVS',
        'TRAV7-3': 'QQNVQQSPESLIVPEGARTSLNCTFSDSASQYFWWYRQHSGKAPKALMSIFSNGEKEEGRFTIHLNKASLHFSLHIRDSQPSDSALYLCAVS',
        'TRAV7-4': 'QQKVQQSPESLSVPEGGMASFNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAASE',
        'TRAV7-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDGTSDNFRWYRQHSGKGLEVLVSIFSDGEKEEGRFTAHLNRASLHVSLHIREPQPSDSAVYLCAMS',
        'TRAV7-6': 'QEKVQQSPESLIVPEGAMASLNCTFSNSASQSIWWYQQHPGKGPEALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSQPTDSAIYLCAVS',
        'TRAV7D-2': 'QQKVQQSPESLIVPEGGMASLNCTSSDRNVDYFWWYRQHSGKSPKMLMSIFSNGEKEEGRFTVHLNKASLHTSLHIRDSQPSDSALYLCAAS',
        'TRAV7D-3': 'QQKVQQSPESLIVPEGAMTSLNCTFSDSASQYFAWYRQHSGKAPKALMSIFSNGEKEEGRFTIHLNKASLHFSLHIRDSQPSDSALYLCAVS',
        'TRAV7D-4': 'QQKVQQSPESLSVPEGGMASLNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAASE',
        'TRAV7D-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDGTSDNFRWYRQHSGKGLEMLVSIFSDGEKEEGRFTAHLNRASLHVSLHIREPQPSDSAVYLCAVS',
        'TRAV7D-6': 'QEKVQQSPESLTVPEGAMASLNCTISDSASQSIWWYQQNPGKGPKALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSHPSDSAVYLCAAS',
        'TRAV7N-4': 'QQKVQQSPESLSVPEGGMASLNCTSSDRNFQYFWWYRQHSGEGPKALMSIFSDGDKKEGRFTAHLNKASLHVSLHIRDSQPSDSALYFCAVSE',
        'TRAV7N-5': 'QQKVQQSPESLTVSEGAMASLNCTFSDRSSDNFRWYRQHSGKGLEVLVSIFSDGEKEEGSFTAHLNRASLHVFLHIREPQPSDSALYLCAVS',
        'TRAV7N-6': 'QEKVQQSPESLIVPEGAMSSLNCTFSNSASQSIWWYQQHPGKGPEALISIFSNGNKKEGRLTVYLNRASLHVSLHIRDSQPSDSAVYLCAVS',
        'TRAV8-1': 'SQLAEENPWALSVHEGESVTVNCSYKTSITALQWYRQKSGEGPAQLILIRSNEREKRNGRLRATLDTSSQSSSLSITATRCEDTAVYFCATD',
        'TRAV8-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVHWYRQDSGRGPALIILIRSNEREKRSGRLRATLDTSSQSSSLSITAAQCEDTAVYFCATD',
        'TRAV8D-1': 'SQLAEENLWALSVHEGESVTVNCSYKTSITALQWYRQKSGEGPAQLILIRSNEREKRNGRLRATLDTSSQSSSLSITATRCEDTAVYFCATD',
        'TRAV8D-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVQWYRQKSGKGPALIILIRSNEREKRSGRLRATLDTSSQSSSLSITGTLATDTAVYFCATD',
        'TRAV8N-2': 'SQWGEENLQALSIQEGEDVTMNCSYKTYTTVVQWYRQKSGKGPAQLILIRSNEREKRSGRLRATLDTSSQSSSLSITGTLATDTAVYFCATD',
        'TRAV9-1': 'TQTVSQSDAHVTVFEGDSVELRCNYSYGGSIYLSWYIQHHGRGLQFLLKYYSGNPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9-2': 'AQSVTQPDARVTVSEGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAAS',
        'TRAV9-3': 'AQSVTQPDARVTVSEGASLQLRCKYSSSVTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9D-1': 'TQTVSQSDAHVTVFEGDSVELRCNYSYGGSIYLSWYIQHHGRGLQFLLKYYSGNPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAAS',
        'TRAV9D-2': 'AQSVTQPDARVTVSQGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHPRKASVHWSDSAVYFCAVS',
        'TRAV9D-3': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQMLLKYYSGDPVVQGVNGFEAEFSKSDSSFHLRKASVHWSDSAVYFCAVS',
        'TRAV9D-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCALS',
        'TRAV9N-2': 'AQSVTQPDARVTVSEGASLQLRCKYSSSGTPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDSAVYFCVLS',
        'TRAV9N-3': 'AQSVTQPDARVTVSEGASLQLRCKYSYFGTPYLFWYVQYPRQGLQLLLKYYPGDPVVQGVNGFEAEFSKSNSSFHLRKASVHWSDWAVYFCAVS',
        'TRAV9N-4': 'AQSVTQPDARVTVSEGASLQLRCKYSYSATPYLFWYVQYPRQGLQLLLKYYSGDPVVQGVNSFEAEFSKSNSSFHLQKASVHWSDSAVYFCALS',
        'TRAV10': 'GEKVEQHESTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKGLHFVIDIRSNVDRKQSQRLIVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV10D': 'GEKVEQHQSTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKSLHFVIDIRSNVDRKQSQRLTVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV10N': 'GEKVEQHESTLSVREGDSAVINCTYTDTASSYFPWYKQEAGKSLHFVIDIRSNVDRKQSQRLTVLLDKKAKRFSLHITATQPEDSAIYFCAAS',
        'TRAV11': 'KTQVEQSPQSLVVRQGENCVLQCNYSVTPDNHLRWFKQDTGKGLVSLTVLVHENDKTSNGRYSATLDKDAKHSTLHITATLLDDTATYICVVG',
        'TRAV11D': 'KTQVEQSPQSLVVRQGENCVLQCNYSVTPDNHLRWFKQDTGKGLVSLTVLVHENDKTSNGRYSATLDKDAKHSTLHITATLLDDTATYICVVG',
        'TRAV11N': 'KTQVEQSPQSLVVRQGENCVLQCN*SVTPDNHLRWFKQDTGKGLVSLTVLVHQKDKTSNGRYSATLDRDAKHSTLHITATLLDDTATYICVVG',
        'TRAV12-1': 'GDSVTQTEGLVTVTEGLPVMLNCTYQTAYSDVAFFWYVQYLNEAPKLLLRSSTDNKRTEHQGFHATLHKSSSSFHLQKSSVQLSDSALYYCALS',
        'TRAV12-2': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTAYSTFLFWYVQHLNEAPKLLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12-3': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTIYSNPFLFWYVHYLNESPRLLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-1': 'GDSVTQTEGLVTVTEGLPVKLNCTYQTTYLTIAFFWYVQYLNEAPQVLLKSSTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-2': 'GDSVTQTEGLVTLTEGLPVMLNCTYQSTYSPFLFWYVQHLNEAPKLLLKSFTDNKRPEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV12D-3': 'DSVTQTEGLVTLTEGLPVMLNSTYQTIYSNPYLFWYVQHLNESPRLLLKNFTDNKRTEHQGFHATLHKSSSSSHLQKSSAQLSDSALYCCALS',
        'TRAV12N-1': 'GDSVTQTEGLVTVTEGLPVMLNCTYQTAYSDVAFFWYVQYLNEAPKLLLRSSTDNKRTEHQGFHATLHKSSSSFHLQKSSVQLSDSALYYCALS',
        'TRAV12N-2': 'GDSVTQTEGLVTLTKGLPVMLNCTYQTTYSPFLFWYVQHLNEAPKLLLKSSTDNKRTEHQGFYATLHKSSSSFHLQKSSVQLSDSALYFCALS',
        'TRAV12N-3': 'GDSVTQTEGLVTLTEGLPVMLNCTYQTIYSNPFLFWYVQHLNESPRLLLKSFTDNKRTEHQGFHATLHKSSSSFHLQKSSAQLSDSALYYCALS',
        'TRAV13-1': 'GQQVQQSPASLVLQEGENAELQCNFSTSLNSMQWFYQRPEGSLVSLFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13-2': 'GQQVQQSPSSLVLQEGENAELQCNFSSTATQLQWFYQSPGGSLVSLLSNPSGTKHTGRLTSTTVTKERRSSLHISSSQTTDSGTYLCAID',
        'TRAV13-3': 'GQQVQQSPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13-4DV7': 'GQQVQQSPASLVLQEGENAELQCNFSSTATQLQWFYQRPGGSLVSLLYNPSGTKHTGRLTSTTVTKERRSSLHISSSQITDSGTYFCAME',
        'TRAV13-5': 'GQQVQQSPASLVLQEGENAELQCSFSISTNQVQWFYQRPGGRLIGLSYIPGMKPTGKQTSSTVTKGRHSSLTISSSQTTDSGTYFCVLS',
        'TRAV13D-1': 'GQQVQQSPASLVLQEGENAELQCNFSTSLNSMQWFYQRPGGSLVSLFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQTTDSGTYLCAME',
        'TRAV13D-2': 'GQQVQQSPASLVLQEGENAELQCNFSSTATRLQWFYQHPGGRLVSLFYNPSGTKHTGRLTSTTVTNERRGSLHISSSQTTDSGTYFCAID',
        'TRAV13D-3': 'GQQVEQSPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13D-4': 'EQQVQQSPASLVLQEGENAELQCSFSIFTNQVQWFYQRPGGRLVSLLYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-1': 'GQQVQQSPTSLVLQEGENAELQCNFSTSLNSMQWFYQRPGGSLISVFYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-2': 'GQQVQQSPASLVLQEGENAELQCNFSSTATQLQWFYQSPGGSLVSLLSNPSGTKHTGRLTSTTVTKERRSSLHISSSQTTDSGTYLCAID',
        'TRAV13N-3': 'GQQVQQSPPASLVLQEGENAELQCTYSTTLNSMQWFYQRPGGRLVSLLYSPSWAEQRGGRLTSSAASNESRSSLHISSSQITDSGTYLCAME',
        'TRAV13N-4': 'EQQVQQSPASLVLQEAENAELQCSFSIFTNQVQWFYQRPGGRLVSLLYNPSGTKQSGRLTSTTVIKERRSSLHISSSQITDSGTYLCAME',
        'TRAV14-1': 'QQQVRQSPQSLTVWEGGTTVLTCSYEDSTFNYFPWYQQFPGEGPALLISILSVSDKKEDGRFTTFFNKREKKLSLHIIDSQPGDSATYFCAAS',
        'TRAV14-2': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFDYFPWYWQFPRESPALLIAIRPVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14-3': 'QQQVRQSPQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLISILSVSDKKEDGRFTIFFNKREKKLSLHIADSQPGDSATYFCAAS',
        'TRAV14D-1': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFNYFPWYQQFPGEGPALLISIRSVSDKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14D-2': 'QQQVRQSPQSLTVWEGETTILNCSYEDSTFDYFPWYRQFPGKSPALLIAISLVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14D-3DV8': 'QQQVRQSSQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLIAIRSVSDKKEDGRFTIFFNKREKNLSLHIKDSQPGDSATYFCAAS',
        'TRAV14N-1': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFNYFPWYQQFPGEGPALLISIRSVSDKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14N-2': 'QQQVRQSPQSLTVWEGETAILNCSYEDSTFDYFPWYWQFPRESPALLIAIRPVSNKKEDGRFTIFFNKREKKLSLHITDSQPGDSATYFCAAS',
        'TRAV14N-3': 'QQQVRQSSQSLTVWEGETAILNCSYENSAFDYFPWYQQFPGEGPALLIAIRSVSDKKEDGRFTIFFNKREKNLSLHIKDSQPGDSATYFCAAS',
        'TRAV15-1DV6-1': 'AQKVIQVWSTTSRQEGEKLTLDCSYKTSQVLYHLFWYKHLLSGEMVLLIRQMPSTIAIERSGRYSVVFQKSRKSISLVISTLQPDDSGKYFCALWEL',
        'TRAV15-2DV6-2': 'AQKVTQVQSTGSSQWGEVTLHCSYETSEYFYVILWYKQLFSGEMVFLIYQTSFDTQNQRNSRYSVVFQKSLKSISLVISASQPEDSGTYFCALSEL',
        'TRAV15D-1DV6D-1': 'AQKVIQVWSTPSRQEGEELTLDCSYETSQVLYHLFWYKHLLSGEMVFLIRQMSSSTAKERSGRYSVVFQKSLKSISLVISALQPDDSGKYFCALWEL',
        'TRAV15D-2DV6D_2': 'AQRVTQVQPTGSSQWGEEVTLDCSYETSEYFYCIIWYRQLFSGEMVFLIYQTSFDTQNQRNGRYSVVFQKSLKSISLVISASQPEDSGTYFCALSEL',
        'TRAV15N-1': 'AEKVIQVWSTASRQEGEELTLDCSYETSQVLYHLFWYKHLLSGEMVFLIRQTSSSTAKERSGRYSVVFQKSLKSISLIISALQPDDSGKYFCALWEL',
        'TRAV15N-2': 'AQRVTQVQPTGSSQWGEEVTLDCSYETSEYFYRIFWYRQLFSGEMVFLIYQPSFDTQNQRSGRYSVVFQKSFKSISLVISASQPEDSGTYFCALSEL',
        'TRAV16': 'AQKVTQTQTSISVMEKTTVTMDCVYETQDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV16DDV11': 'AQKVTQTQTSISVMEKTTVTMDCVYETQDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV16N': 'AQKVTQTQTSISVVEKTTVTMDCVYETRDSSYFLFWYKQTASGEIVFLIRQDSYKKENATVGHYSLNFQKPKSSIGLIITATQIEDSAVYFCAMRE',
        'TRAV17': 'AQSVDQPDAHVTLYEGASLELRCSYSYSAAPYLFWYVQYPGQSLQFLLKYITGDAVVKGTKGFEAEFRKSNSSFNLKKSPAHWSDSAKYFCALE',
        'TRAV18': 'TQRLEQSPRFLSIQEGQDFTARCSSSTTFPQLYWYRQVPREGPVILVTLVKSGEVKEQKRMTAKFGEARKNSSLFIARAQPGDAGIYFCAG',
        'TRAV19': 'GQQVKQSSPSLTVQEGGILILNCDYENDMFDYFAWYKKYPDNSPTLLISVRSNVDKREDGRFTVFLNKSGKHFSLHITASQPEDTAVYLCAAG',
        'TRAV20': 'QTL*CRALPS*MSGKKETALINCSYTNAATNYFPWYKKEEQKVFTLLIDIRSNVNRKKEGRFEVILDRNVKRVSLHITAARTEDSALYLCAPG',
        'TRAV21DV12': 'DAKTTQPDSMESTEGETVHLPCSHATISGNEYIYWYRQVPLQGPEYVTHGLQQNTTNSMAFLAIASDRKSSTLILTHVSLRDAAVYHCILRV'
    }
}

TRBV_SEQUENCES = {
    "human": {
        'TRBV1': 'DTGITQTPKYLVTAMGSKRTMKREHLGHDSMYWYRQKAKKSLEFMFYYNCKEFIENKTVPNHFTPECPDSSRLYLHVVALQQEDSAAYLCTSSQ',
        'TRBV2': 'EPEVTQTPSHQVTQMGQEVILRCVPISNHLYFYWYRQILGQKVEFLVSFYNNEISEKSEIFDDQFSVERPDGSNFTLKIRSTKLEDSAMYFCASSE',
        'TRBV3-1': 'DTAVSQTPKYLVTQMGNDKSIKCEQNLGHDTMYWYKQDSKKFLKIMFSYNNKELIINETVPNRFSPKSPDKAHLNLHINSLELGDSAVYFCASSQ',
        'TRBV3-2': 'DTAVSQTPKYLVTQMGKKESLK_EQNLGHNAMYWYKQDSKKFLKTMFIYSNKEPILNETVPNRFSPDSPDKAHLNLHINSLELGDSAVYFCASSQ',
        'TRBV4-1': 'DTEVTQTPKHLVMGMTNKKSLKCEQHMGHRAMYWYKQKAKKPPELMFVYSYEKLSINESVPSRFSPECPNSSLLNLHLHALQPEDSALYLCASSQ',
        'TRBV4-2': 'ETGVTQTPRHLVMGMTNKKSLKCEQHLGHNAMYWYKQSAKKPLELMFVYNFKEQTENNSVPSRFSPECPNSSHLFLHLHTLQPEDSALYLCASSQ',
        'TRBV4-3': 'ETGVTQTPRHLVMGMTNKKSLKCEQHLGHNAMYWYKQSAKKPLELMFVYSLEERVENNSVPSRFSPECPNSSHLFLHLHTLQPEDSALYLCASSQ',
        'TRBV5-1': 'KAGVTQTPRYLIKTRGQQVTLSCSPISGHRSVSWYQQTPGQGLQFLFEYFSETQRNKGNFPGRFSGRQFSNSRSEMNVSTLELGDSALYLCASSL',
        'TRBV5-3': 'EAGVTQSPTHLIKTRGQQVTLRCSPISGHSSVSWYQQAPGQGPQFIFEYANELRRSEGNFPNRFSGRQFHDCCSEMNVSALELGDSALYLCARSL',
        'TRBV5-4': 'ETGVTQSPTHLIKTRGQQVTLRCSSQSGHNTVSWYQQALGQGPQFIFQYYREEENGRGNFPPRFSGLQFPNYSSELNVNALELDDSALYLCASSL',
        'TRBV5-5': 'DAGVTQSPTHLIKTRGQQVTLRCSPISGHKSVSWYQQVLGQGPQFIFQYYEKEERGRGNFPDRFSARQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-6': 'DAGVTQSPTHLIKTRGQQVTLRCSPKSGHDTVSWYQQALGQGPQFIFQYYEEEERQRGNFPDRFSGHQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-7': 'DAGVTQSPTHLIKTRGQHVTLRCSPISGHTSVSSYQQALGQGPQFIFQYYEKEERGRGNFPDQFSGHQFPNYSSELNVNALLLGDSALYLCASSL',
        'TRBV5-8': 'EAGVTQSPTHLIKTRGQQATLRCSPISGHTSVYWYQQALGLGLQFLLWYDEGEERNRGNFPPRFSGRQFPNYSSELNVNALELEDSALYLCASSL',
        'TRBV6-1': 'NAGVTQTPKFQVLKTGQSMTLQCAQDMNHNSMYWYRQDPGMGLRLIYYSASEGTTDKGEVPNGYNVSRLNKREFSLRLESAAPSQTSVYFCASSE',
        'TRBV6-2': 'NAGVTQTPKFRVLKTGQSMTLLCAQDMNHEYMYWYRQDPGMGLRLIHYSVGEGTTAKGEVPDGYNVSRLKKQNFLLGLESAAPSQTSVYFCASSY',
        'TRBV6-3': 'NAGVTQTPKFRVLKTGQSMTLLCAQDMNHEYMYWYRQDPGMGLRLIHYSVGEGTTAKGEVPDGYNVSRLKKQNFLLGLESAAPSQTSVYFCASSY',
        'TRBV6-4': 'IAGITQAPTSQILAAGRRMTLRCTQDMRHNAMYWYRQDLGLGLRLIHYSNTAGTTGKGEVPDGYSVSRANTDDFPLTLASAVPSQTSVYFCASSD',
        'TRBV6-5': 'NAGVTQTPKFQVLKTGQSMTLQCAQDMNHEYMSWYRQDPGMGLRLIHYSVGAGITDQGEVPNGYNVSRSTTEDFPLRLLSAAPSQTSVYFCASSY',
        'TRBV6-6': 'NAGVTQTPKFRILKIGQSMTLQCTQDMNHNYMYWYRQDPGMGLKLIYYSVGAGITDKGEVPNGYNVSRSTTEDFPLRLELAAPSQTSVYFCASSY',
        'TRBV6-7': 'NAGVTQTPKFHVLKTGQSMTLLCAQDMNHEYMYRYRQDPGKGLRLIYYSVAAALTDKGEVPNGYNVSRSNTEDFPLKLESAAPSQTSVYFCASSY',
        'TRBV6-8': 'NAGVTQTPKFHILKTGQSMTLQCAQDMNHGYMSWYRQDPGMGLRLIYYSAAAGTTDKEVPNGYNVSRLNTEDFPLRLVSAAPSQTSVYLCASSY',
        'TRBV6-9': 'NAGVTQTPKFHILKTGQSMTLQCAQDMNHGYLSWYRQDPGMGLRRIHYSVAAGITDKGEVPDGYNVSRSNTEDFPLRLESAAPSQTSVYFCASSY',
        'TRBV7-1': 'GAGVSQSLRHKVAKKGKDVALRYDPISGHNALYWYRQSLGQGLEFPIYFQGKDAADKSGLPRDRFSAQRSEGSISTLKFQRTQQGDLAVYLCASSS',
        'TRBV7-2': 'GAGVSQSPSNKVTEKGKDVELRCDPISGHTALYWYRQSLGQGLEFLIYFQGNSAPDKSGLPSDRFSAERTGGSVSTLTIQRTQQEDSAVYLCASSL',
        'TRBV7-3': 'GAGVSQTPSNKVTEKGKYVELRCDPISGHTALYWYRQSLGQGPEFLIYFQGTGAADDSGLPNDRFFAVRPEGSVSTLKIQRTERGDSAVYLCASSL',
        'TRBV7-4': 'GAGVSQSPRYKVAKRGRDVALRCDSISGHVTLYWYRQTLGQGSEVLTYSQSDAQRDKSGRPSGRFSAERPERSVSTLKIQRTEQGDSAVYLCASSL',
        'TRBV7-6': 'GAGVSQSPRYKVTKRGQDVALRCDPISGHVSLYWYRQALGQGPEFLTYFNYEAQQDKSGLPNDRFSAERPEGSISTLTIQRTEQRDSAMYRCASSL',
        'TRBV7-7': 'GAGVSQSPRYKVTKRGQDVTLRCDPISSHATLYWYQQALGQGPEFLTYFNYEAQPDKSGLPSDRFSAERPEGSISTLTIQRTEQRDSAMYRCASSL',
        'TRBV7-8': 'GAGVSQSPRYKVAKRGQDVALRCDPISGHVSLFWYQQALGQGPEFLTYFQNEAQLDKSGLPSDRFFAERPEGSVSTLKIQRTQQEDSAVYLCASSL',
        'TRBV7-9': 'DTGVSQNPRHKITKRGQNVTFRCDPISEHNRLYWYRQTLGQGPEFLTYFQNEAQLEKSRLLSDRFSAERPKGSFSTLEIQRTEQGDSAMYLCASSL',
        'TRBV9': 'DSGVTQTPKHLITATGQRVTLRCSPRSGDLSVYWYQQSLDQGLQFLIQYYNGEERAKGNILERFSAQQFPDLHSELNLSSLELGDSALYFCASSV',
        'TRBV10-1': 'DAEITQSPRHKITETGRQVTLACHQTWNHNNMFWYRQDLGHGLRLIHYSYGVQDTNKGEVSDGYSVSRSNTEDLPLTLESAASSQTSVYFCASSE',
        'TRBV10-2': 'DAGITQSPRYKITETGRQVTLMCHQTWSHSYMFWYRQDLGHGLRLIYYSAAADITDKGEVPDGYVVSRSKTENFPLTLESATRSQTSVYFCASSE',
        'TRBV10-3': 'DAGITQSPRHKVTETGTPVTLRCHQTENHRYMYWYRQDPGHGLRLIHYSYGVKDTDKGEVSDGYSVSRSKTEDFLLTLESATSSQTSVYFCAISE',
        'TRBV11-1': 'EAEVAQSPRYKITEKSQAVAFWCDPISGHATLYWYRQILGQGPELLVQFQDESVVDDSQLPKDRFSAERLKGVDSTLKIQPAELGDSAMYLCASSL',
        'TRBV11-2': 'EAGVAQSPRYKIIEKRQSVAFWCNPISGHATLYWYQQILGQGPKLLIQFQNNGVVDDSQLPKDRFSAERLKGVDSTLKIQPAKLEDSAVYLCASSL',
        'TRBV11-3': 'EAGVVQSPRYKIIEKKQPVAFWCNPISGHNTLYWYLQNLGQGPELLIRYENEEAVDDSQLPKDRFSAERLKGVDSTLKIQPAELGDSAVYLCASSL',
        'TRBV12-1': 'DAGVIQSPRHKVTEMGQSVTLRCEPISGHNDLLWYRQTFVQGLELLNYFCSWTLVDDSGVSKD_FSAQMPDVSFSTLRIQPMEPRDLGLYFCASSF',
        'TRBV12-2': 'DAGIIQSPKHEVTEMGQTVTLRCEPIFGHNFLFWYRDTFVQGLELLSYFRS_SIIDNAGMPTERFSAERPDGSFSTLKIQPAEQGDSAVYVCASRL',
        'TRBV12-3': 'DAGVIQSPRHEVTEMGQEVTLRCKPISGHNSLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL',
        'TRBV12-4': 'DAGVIQSPRHEVTEMGQEVTLRCKPISGHDYLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL',
        'TRBV12-5': 'DARVTQTPRHKVTEMGQEVTMRCQPILGHNTVFWYRQTMMQGLELLAYFRNRAPLDDSGMPKDRFSAEMPDATLATLKIQPSEPRDSAVYFCASGL',
        'TRBV13': 'AAGVIQSPRHLIKEKRETATLKCYPIPRHDTVYWYQQGPGQDPQFLISFYEKMQSDKGSIPDRFSAQQFSDYHSELNMSSLELGDSALYFCASSL',
        'TRBV14': 'EAGVTQFPSHSVIEKGQTVTLRCDPISGHDNLYWYRRVMGKEIKFLLHFVKESKQDESGMPNNRFLAERTGGTYSTLKVQPAELEDSGVYFCASSQ',
        'TRBV15': 'DAMVIQNPRYQVTQFGKPVTLSCSQTLNHNVMYWYQQKSSQAPKLLFHYYDKDFNNEADTPDNFQSRRPNTSFCFLDIRSPGLGDTAMYLCATSR',
        'TRBV16': 'GEEVAQTPKHLVRGEGQKAKLYCAPIKGHSYVFWYQQVLKNEFKFLISFQNENVFDETGMPKERFSAKCLPNSPCSLEIQATKLEDSAVYFCASSQ',
        'TRBV17': 'EPGVSQTPRHKVTNMGQEVILRCDPSSGHMFVHWYRQNLRQEMKLLISFQYQNIAVDSGMPKERFTAERPNGTSSTLKIHPAEPRDSAVYLYSSG',
        'TRBV18': 'NAGVMQNPRHLVRRRGQEARLRCSPMKGHSHVYWYRQLPEEGLKFMVYLQKENIIDESGMPKERFSAEFPKEGPSILRIQQVVRGDSAAYFCASSP',
        'TRBV19': 'DGGITQSPKYLFRKEGQNVTLSCEQNLNHDAMYWYRQDPGQGLRLIYYSQIVNDFQKGDIAEGYSVSREKKESFPLTVTSAQKNPTAFYLCASSI',
        'TRBV20-1': 'GAVVSQHPSWVICKSGTSVKIECRSLDFQATTMFWYRQFPKQSLMLMATSNEGSKATYEQGVEKDKFLINHASLTLSTLTVTSAHPEDSSFYICSAR',
        'TRBV21-1': 'DTKVTQRPRLLVKASEQKAKMDCVPIKAHSYVYWYRKKLEEELKFLVYFQNEELIQKAEIINERFLAQCSKNSSCTLEIQSTESGDTALYFCASSK',
        'TRBV23-1': 'HAKVTQTPGHLVKGKGQKTKMDCTPEKGHTFVYWYQQNQNKEFMLLISFQNEQVLQETEMHKKRFSSQCPKNAPCSLAILSSEPGDTALYLCASSQ',
        'TRBV24-1': 'DADVTQTPRNRITKTGKRIMLECSQTKGHDRMYWYRQDPGLGLRLIYYSFDVKDINKGEISDGYSVSRQAQAKFSLSLESAIPNQTALYFCATSDL',
        'TRBV25-1': 'EADIYQTPRYLVIGTGKKITLECSQTMGHDKMYWYQQDPGMELHLIHYSYGVNSTEKGDLSSESTVSRIRTEHFPLTLESARPSHTSQYLCASSE',
        'TRBV26': 'DAVVTQFPRHRIIGTGKEFILQCSQNMNHVTMYWYRQDPGLGLKLVYYSPGTGSTEKGDISEGYHVS_NTIASFPLTLKSASTNQTSVYLYASSS',
        'TRBV27': 'EAQVTQNPRYLITVTGKKLTVTCSQNMNHEYMSWYRQDPGLGLRQIYYSMNVEVTDKGDVPEGYKVSRKEKRNFPLILESPSPNQTSLYFCASSL',
        'TRBV28': 'DVKVTQSSRYLVKRTGEKVFLECVQDMDHENMFWYRQDPGLGLRLIYFSYDVKMKEKGDIPEGYSVSREKKERFSLILESASTNQTSMYLCASSL',
        'TRBV29-1': 'SAVISQKPSRDICQRGTSLTIQCQVDSQVTMMFWYRQQPGQSLTLIATANQGSEATYESGFVIDKFPISRPNLTFSTLTVSNMSPEDSSIYLCSVE',
        'TRBV30': 'SQTIHQWPATLVQPVGSPLSLECTVEGTSNPNLYWYRQAAGRGLQLLFYSVGIGQISSEVPQNLSASRPQDRQFILSSKKLLLSDSGFYLCAWS'
    },
    'mouse': {
        'TRBV1': 'VTLLEQNPRWRLVPRGQAVNLRCILKNSQYPWMSWYQQDLQKQLQWLFTLRSPGDKEVKSLPGADYLATRVTDTELRLQVANMSQGRTLYCTCSA',
        'TRBV2': 'DPKIIQKPKYLVAVTGSEKILICEQYLGHNAMYWYRQSAKKPLEFMFSYSYQKLMDNQTASSRFQPQSSKKNHLDLQITALKPDDSATYFCASSQ',
        'TRBV3': 'GPKVLQIPSHQIIDMGQMVTLNCDPVSNHLYFYWYKQILGQQMEFLVNFYNGKVMEKSKLFKDQFSVERPDGSYFTLKIQPTALEDSAVYFCASSL',
        'TRBV4': 'ETAVFQTPNYHVTQVGNEVSFNCKQTLGHDTMYWYKQDSKKLLKIMFSYNNKQLIVNETVPRRFSPQSSDKAHLNLRIKSVEPEDSAVYLCASS*',
        'TRBV5': 'NTKITQSPRYLILGRANKSLECEQHLGHNAMYWYKQSAEKPPELMFLYNLKQLIRNETVPSRFIPECPDSSKLLLHISAVDPEDSAVYFCASSQ',
        'TRBV8': 'SAGIIQTPKSLILKAGQHVTIKCTQDMKHDSMLWYRQDPWLELRVI*YSYDAGIIDKEEVSKGYNVSRSCTEDFTFTVELASPSQTSVYFGASSS',
        'TRBV9': 'SAEFSQYPMYRVTKRG*DVVIKCDTISGPTGLYCY*QNSR*GPVFLVNFQGEFISTKSGMPSDHFSAVRPEGSFSMLKSQSTHQEDLGIYLCARSL',
        'TRBV10': 'DGGITQTPRYWITQTSRKIILNYSQDMNHYRMFWYQQDAGQGLKLIHYSVGTDRTTKSDVPEGYSAFRNEIQSFPLTLESTSSNQTSMYFWASSEQ',
        'TRBV12-1': 'DSGVVQSPRHIIKEKGGRSVLTCIPISGHSNVVWYQQTLGKELKFLIQHYEKVERDKGFLPSRFSVQQFDDYHSEMNMSALELEDSAMYFCASSL',
        'TRBV12-2': 'NSGVVQSPRYIIKGKGERSILKCIPISGHLSVAWYQQTQGQELKFFIQHYDKMERDKGNLPSRFSVQQFDDYHSEMNMSALELEDSAVYFCASSL',
        'TRBV13-1': 'EAAVTQSPRNKVTVTGGNVTLSCRQTNSHNYMYWYRQDTGHGLRLIHYSYGAGNLRIGDVPDGYKATRTTQEDFFLLLELASPSQTSLYFCASSD',
        'TRBV13-2': 'EAAVTQSPRNKVAVTGGKVTLSCNQTNNHNNMYWYRQDTGHGLRLIHYSYGAGSTEKGDIPDGYKASRPSQENFSLILELATPSQTSVYFCASGD',
        'TRBV13-3': 'EAAVTQSPRSKVAVTGGKVTLSCHQTNNHDYMYWYRQDTGHGLRLIHYSYVADSTEKGDIPDGYKASRPSQENFSLILELASLSQTAVYFCASSD',
        'TRBV14': 'EAGVTQSPRYAVLQEGQAVSFWCDPISGHDTLYWYQQPRDQGPQLLVYFRDEAVIDNSQLPSDRFSAVRPKGTNSTLKIQSAKQGDTATYLCASSF',
        'TRBV15': 'DAGVTQTPRHEVAEKGQTIILKCEPVSGHNDLFWYRQTKIQGLELLSYFRSKSLMEDGGAFKDRFKAEMLNSSFSTLKIQPTEPKDSAVYLCASSL',
        'TRBV16': 'NAGVIQTPRHKVTGKGQEATLWCEPISGHSAVFWYRQTIVQGLEFLTYFRNQAPIDDSGMPKERFSAQMPNQSHSTLKIQSTQPQDSAVYLCASSL',
        'TRBV17': 'DTTVKQNPRYKLARVGKPVNLICSQTMNHDTMYWYQKKPNQAPKLLLFYYDKILNREADTFEKFQSSRPNNSFCSLYIGSAGLEYSAMYLCASSR',
        'TRBV19': 'GGIITQTPKFLIGQEGQKLTLKCQQNFNHDTMYWYRQDSGKGLRLIYYSITENDLQKGDLSEGYDASREKKSSFSLTVTSAQKNEMAVFLCASSI',
        'TRBV20': 'GALVYQYPRRTICKSGTSMRMECQAVGFQATSVAWYRQSPQKTFELIALSTVNSAIKYEQNFTQEKFPISHPNLSFSSMTVLNAYLEDRGLYLCGAR',
        'TRBV21': 'DSGVVQNPRHLVKGKEQKAKMDCTPINGHSYVYWYYKKPGEELKFLVYFQNEDIIDKIDMIGKNISAKCPAKKPCTIEIQSSKLTDSAVYFCASSQ',
        'TRBV23': 'DAAVTQKPRYLIKMKGQEAEMKCIPEKGHTAVFWYQQKQSKELKFLIYFQNQQPLDQIDMVKERFSAVCPSSSLCSLGIRTCEAEDSALYLCSSSQ',
        'TRBV24': 'VAGVTQTPRYLVKEKGQKAHMSCSPEKGHTAFYWYQQNQKQELTFLISFRNEEIMEQTDLVKKRFSAKCSSNSRCILEILSSEEDDSALYLCASSL',
        'TRBV26': 'NSKVIQTPRYLVKGQGQKAKMRCIPEKGHPVVFWYQQNKNNEFKFLINFQNQEVLQQIDMTEKRFSAECPSNSPCSLEIQSSEAGDSALYLCASSL',
        'TRBV29': 'DMKVTQMPRYLIKRMGENVLLECGQDMSHETMYWYRQDPGLGLQLIYISYDVDSNSEGDIPKGYRVSRKKREHFSLILDSAKTNQTSVYFCASSL',
        'TRBV30': 'SVLLYQKPNRDICQSGTSLKIQCVADSQVVSMFWYQQFQEQSLMLMATANEGSEATYESGFTKDKFPISRPNLTFSTLTVNNARPGDSSIYFCSSR',
        'TRBV31': 'AQTIHQWPVAEIKAVGSPLSLGCTIKGKSSPNLYWYWQATGGTLQQLFYSITVGQVESVVQLNLSASRPKDDQFILSTEKLLLSHSGFYLCAWS'
    }
    
}

J_MOTIFS = ['LQF', 'DKLTF', 'SKIIF', 'NKLIF', 'RALTF', 'YIPTF', 'NRLAF', 'NTGF', 'NTGGF', 'NKLTF', 'STLTF', 'YKLIF', 'QKVTF', 'IYSTF', 'TALIF', 'QKLLF', 'NKLTF', 'GRLYF', 'YQRF', 'YKLSF', 'YNF', 'RQLTF', 'GKLIF', 'SWGKF', 'EGQGF', 'YGQNF', 'GKSTF', 'YQLTF', 'TPLVF', 'DKIIF', 'ARLMF', 'NKLIF', 'QLIW', 'DKLIF', 'IGF', 'ANNLF', 'GKLIF', 'KLIW', 'NMLTF', 'YKYIF', 'YALNF', 'GNLIF', 'NDMRF', 'SKLTF', 'DGLTF', 'DKLTF', 'NKLVF', 'SNF', 'TGNQF', 'DKVIF', 'EKLIF', 'GKLTF', 'YKLTF', 'QKLVF', 'KCW', 'SKLTF', 'EKLVF', 'SRLTF', 'GNRKF', 'TMLNF', 'RKLTF', 'GKLTF', 'KLIF', 'LSGSF', 'GQLTF', 'YKPTF', 'RLTL', 'YKLTF', 'NKLTF', 'YKVVF', 'TYQRF', 'RALIF', 'QKLVF', 'NKLTF', 'GRLHF', 'IYRGF', 'NYKL', 'NVLYF', 'WQLIF', 'GKLIF', 'GKLQF', 'VSSVF', 'QGLTF', 'GKLTF', 'NRLTF', 'ELVL', 'YKVIF', 'NNRIF', 'NKLIF', 'QLIW', 'DKVVF', 'QTGF', 'KKKL', 'GKLIF', 'KLIW', 'AKLTF', 'YKYVF', 'SSML', 'AKLTF', 'NAPRF', 'KLTL', 'DRLTF', 'RHAGF', 'ICGL', 'EKITF', 'GYQNF', 'ASSSF', 'GKLTF', 'YKLTF', 'KRPGF', 'NKLTF', 'AKLIF', 'SKLSF', 'DKATF', 'KDLYF', 'EIGIF', 'NTEAF', 'YGYTF', 'NTIYF', 'NEKLF', 'QPQHF', 'SPLHF', 'YNEQF', 'TGELF', 'DTQYF', 'NIQYF', 'ETQYF', 'NVLTF', 'YEQYF', 'TEVF', 'DYTF', 'TLYF', 'ERLF', 'APLF', 'PLYF', 'DHGL', 'AEQF', 'QLYF', 'TLYF', 'TLYF', 'TQYF', 'LTDW', 'EQYF']

TRAJ_SEQUENCES = {
    "human": {
        'TRAJ1': 'YESITSQLQFGKGTRVSTSP',
        'TRAJ2': 'NTGGTIDKLTFGKGTHVFIIS',
        'TRAJ3': 'GYSSASKIIFGSGTRLSIRP',
        'TRAJ4': 'FSGGYNKLIFGAGTRLAVHP',
        'TRAJ5': 'DTGRRALTFGSGTRLQVQP',
        'TRAJ6': 'ASGGSYIPTFGRGTSLIVHP',
        'TRAJ7': 'DYGNNRLAFGKGNQVVVIP',
        'TRAJ8': 'NTGFQKLVFGTGTRLLVSP',
        'TRAJ9': 'GNTGGFKTIFGAGTRLFVKA',
        'TRAJ10': 'ILTGGGNKLTFGTGTQLKVEL',
        'TRAJ11': 'NSGYSTLTFGKGTMLLVSP',
        'TRAJ12': 'MDSSYKLIFGSGTRLLVRP',
        'TRAJ13': 'NSGGYQKVTFGIGTKLQVIP',
        'TRAJ14': 'IYSTFIFGSGTRLSVKP',
        'TRAJ15': 'NQAGTALIFGKGTTLSVSS',
        'TRAJ16': 'FSDGQKLLFARGTMLKVDL',
        'TRAJ17': 'IKAAGNKLTFGGGTRVLVKP',
        'TRAJ18': 'DRGSTLGRLYFGRGTQLTVWP',
        'TRAJ19': 'YQRFYNFTFGKGSKHNVTP',
        'TRAJ20': 'SNDYKLSFGAGTTVTVRA',
        'TRAJ21': 'YNFNKFYFGSGTKLNVKP',
        'TRAJ22': 'SSGSARQLTFGSGTQLTVLP',
        'TRAJ23': 'IYNQGGKLIFGQGTELSVKP',
        'TRAJ24': 'TTDSWGKFEFGAGTQVVVTP',
        'TRAJ25': 'EGQGFSFIFGKGTRLLVKP',
        'TRAJ26': 'DNYGQNFVFGPGTRLSVLP',
        'TRAJ27': 'NTNAGKSTFGDGTTLTVKP',
        'TRAJ28': 'YSGAGSYQLTFGKGTKLSVIP',
        'TRAJ29': 'NSGNTPLVFGKGTRLSVIA',
        'TRAJ30': 'NRDDKIIFGKGTRLHILP',
        'TRAJ31': 'NNNARLMFGDGTQLVVKP',
        'TRAJ32': 'NYGGATNKLIFGTGTLLAVQP',
        'TRAJ33': 'DSNYQLIWGAGTKLIIKP',
        'TRAJ34': 'SYNTDKLIF',
        'TRAJ35': 'IGFGNVLHCGSGTQVIVLP',
        'TRAJ36': 'QTGANNLFFGTGTRLTVIP',
        'TRAJ37': 'GSGNTGKLIFGQGTTLQVKP',
        'TRAJ38': 'NAGNNRKLIWGLGTSLAVNP',
        'TRAJ39': 'NNNAGNMLTFGGGTRLMVKP',
        'TRAJ40': 'TTSGTYKYIFGTGTRLKVLA',
        'TRAJ41': 'NSNSGYALNFGKGTSLLVTP',
        'TRAJ42': 'NYGGSQGNLIFGKGTKLSVKP',
        'TRAJ43': 'NNNDMRFGAGTRLTVKP',
        'TRAJ44': 'NTGTASKLTFGTGTRLQVTL',
        'TRAJ45': 'YSGGGADGLTFGKGTHLIIQP',
        'TRAJ46': 'KKSSGDKLTFGTGTRLAVRP',
        'TRAJ47': 'EYGNKLVFGAGTILRVKS',
        'TRAJ48': 'SNFGNEKLTFGTGTRLTIIPN',
        'TRAJ49': 'NTGNQFYFGTGTSLTVIP',
        'TRAJ50': 'KTSYDKVIFGPGTSLSVIP',
        'TRAJ51': 'MRDSYEKLIFGKETLTVKP',
        'TRAJ52': 'NAGGTSYGKLTFGQGTILTVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVNP',
        'TRAJ54': 'IQGAQKLVFGQGTRLTINP',
        'TRAJ55': 'KCW*CSCWGKGMSTKINP',
        'TRAJ56': 'YTGANSKLTFGKGITLSVRP',
        'TRAJ57': 'TQGGSEKLVFGKGTKLTVNP',
        'TRAJ58': 'ETSGSRLTFGEGTQLTVNP',
        'TRAJ59': 'KEGNRKFTFGMGTQVRVKL',
        'TRAJ60': 'KITMLNFGKGTELIVSL',
        'TRAJ61': 'YRVNRKLTFGANTRGIMKL'
    },
    'mouse': {
        'TRAJ2': 'NTGGLSGKLTFGEGTQVTVIS',
        'TRAJ3': 'EFSYSSKLIFGAETKLRNPP',
        'TRAJ4': 'LSGSFNKLTFGAGTRLLCAH',
        'TRAJ5': 'GTQVVGQLTFGRGTRLQVYA',
        'TRAJ6': 'TSGGNYKPTFGKGTSLVVHP',
        'TRAJ7': 'DYSNNRLTLGKGTQVVVLP',
        'TRAJ9': 'RNMGYKLTFGTGTSLLVDP',
        'TRAJ11': 'DSGYNKLTFGKGTVLLVSP',
        'TRAJ12': 'GTGGYKVVFGSGTRLLVSP',
        'TRAJ13': 'NSGTYQRFGTGTKLQVVP',
        'TRAJ15': 'YQGGRALIFGTGTTVSVSP',
        'TRAJ16': 'ATSSGQKLVFGQGTILKVYL',
        'TRAJ17': 'TNSAGNKLTFGIGTRVLVRP',
        'TRAJ18': 'DRGSALGRLHFGAGTQLIVIP',
        'TRAJ19': 'IYRGFHKFSSGIESKHNVSP',
        'TRAJ20': 'SGNYKLGVESVTMMSVRA',
        'TRAJ21': 'SNYNVLYFGSGTKLTVEP',
        'TRAJ22': 'SSGSWQLIFGSGTQLTVMP',
        'TRAJ23': 'NYNQGKLIFGQGTKLSIKP',
        'TRAJ24': 'ELASLGKLQFGTGTQVVVTP',
        'TRAJ25': 'RTKVSSVFGTWRRLLVKP',
        'TRAJ26': 'NNYAQGLTFGLGTRVSVFP',
        'TRAJ27': 'NTNTGKLTFGDGTVLTVKP',
        'TRAJ28': 'LPGTGSNRLTFGKGTKFSLIP',
        'TRAJ29': 'NSGSRELVLGREARLSMIE',
        'TRAJ30': 'DTNAYKVIFGKGTHLHVLP',
        'TRAJ31': 'NSNNRIFFGDGTQLVVKP',
        'TRAJ32': 'NYGSSGNKLIFGIGTLLSVKP',
        'TRAJ33': 'DSNYQLIWGSGTKLIIKP',
        'TRAJ34': 'SSNTDKVVFGTGTRLQVSP',
        'TRAJ35': 'QTGFASALTFGSGTKVIPCLP',
        'TRAJ36': 'NI*GKKKLVSGTRTRLTIIP',
        'TRAJ37': 'TGNTGKLIFGLGTTLQVQP',
        'TRAJ38': 'NVGDNSKLIWGLGTSLVVNP',
        'TRAJ39': 'NNNAGAKLTFGGGTRLTVRP',
        'TRAJ40': 'VNTGNYKYVFGAGTRLKVIA',
        'TRAJ41': 'VSNTSSMLAEAPHYWSHP',
        'TRAJ42': 'NSGGSNAKLTFGKGTKLSVKS',
        'TRAJ43': 'NNNNAPRFGAGTKLSVKP',
        'TRAJ44': 'VTGSGGKLTLGAGTRLQVNL',
        'TRAJ45': 'NTEGADRLTFGKGTQLIIQP',
        'TRAJ46': 'RRQQCRHAGFGDGDELGVST',
        'TRAJ47': 'HYANKMICGLGTILRVRP',
        'TRAJ48': 'ANYGNEKITFGAGTKLTIKP',
        'TRAJ49': 'NTGYQNFYFGKGTSLTVIP',
        'TRAJ50': 'ASSSFSKLVFGQGTSLSVVP',
        'TRAJ52': 'NTGANTGKLTFGHGTILRVHP',
        'TRAJ53': 'NSGGSNYKLTFGKGTLLTVTP',
        'TRAJ54': 'KRPGF*KLVFGQGTG*P',
        'TRAJ56': 'ATGGNNKLTFGQGTVLSVIP',
        'TRAJ57': 'NQGGSAKLIFGEGTKLTVSS',
        'TRAJ58': 'QQGTGSKLSFGKGAKLTVSP',
        'TRAJ59': 'LLKREDKATFATGGYEAEED',
        'TRAJ60': 'RSTKDLYFR*ELSSSSA',
        'TRAJ61': 'VQNEIGIFFFGAMTGRLMKLS'
    }
}
TRBJ_SEQUENCES = {
    'human': {
        'TRBJ1-1': 'NTEAFFGQGTRLTVV',
        'TRBJ1-2': 'NYGYTFGSGTRLTVV',
        'TRBJ1-3': 'SGNTIYFGEGSWLTVV',
        'TRBJ1-4': 'TNEKLFFGSGTQLSVL',
        'TRBJ1-5': 'SNQPQHFGDGTRLSIL',
        'TRBJ1-6': 'SYNSPLHFGNGTRLTVT',
        'TRBJ2-1': 'SYNEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGELFFGEGSRLTVL',
        'TRBJ2-3': 'STDTQYFGPGTRLTVL',
        'TRBJ2-4': 'AKTNIQYFGAGTRLSVL',
        'TRBJ2-5': 'QETQYFGPGTRLLVL',
        'TRBJ2-6': 'SGANVLTFGAGSRLTVL',
        'TRBJ2-7': 'SYEQYFGPGTRLTVT'
    },
    'mouse': {
        'TRBJ1-1': 'NTEVFFGKGTRLTVV',
        'TRBJ1-2': 'NSDYTFGSGTRLLVI',
        'TRBJ1-3': 'SGNTLYFGEGSRLIVV',
        'TRBJ1-4': 'SNERLFFGHGTKLSVL',
        'TRBJ1-5': 'NNQAPLFGEGTRLSVL',
        'TRBJ1-6': 'SYNSPLYFAAGTRLTVT',
        'TRBJ1-7': 'PVLDDHGLGKELRYK',
        'TRBJ2-1': 'NYAEQFFGPGTRLTVL',
        'TRBJ2-2': 'NTGQLYFGEGSKLTVL',
        'TRBJ2-3': 'SAETLYFGSGTRLTVL',
        'TRBJ2-4': 'SQNTLYFGAGTRLSVL',
        'TRBJ2-5': 'NQDTQYFGPGTRLLVL',
        'TRBJ2-6': 'ALALTDWQPIEQPMR',
        'TRBJ2-7': 'SYEQYFGPGTRLTVL'
    }
}


CDR1a = [
    'TSGFYG',
    'TSGFNG',
    'VSNAYN',
    'VSGNPY',
    'NIATNDY',
    'DSSSTY',
    'NYSPAY',
    'VSRFNN',
    'YGGTVN',
    'SSYSPS',
    'YGATPY',
    'SSVPPY',
    'SSVSVY',
    'YSGVPS',
    'TTQYPS',
    'ATGYPS',
    'VSPFSN',
    'ERTLFN',
    'NSASQS',
    'DRGSQS',
    'NSAFQY',
    'DSASNY',
    'NSASDY',
    'TSDPSYG',
    'YSGSPE',
    'TSINN',
    'SSYSTF',
    'TRDTTYY',
    'VSGLRG',
    'DSAIYN',
    'DSVNN',
    'NTAFDY',
    'SSNFYA',
    'TTLSN',
    'TISGNEY',
    'TISGTDY',
    'SVFSS',
    'NSMFDY',
    'KALYS',
    'KTLYG',
    'SIFNT',
    'VTNFRS',
    'TSENNYY',
    'TSESDYY',
    'TTSDR',
    'STGYPT',
    'VGISA'
]

CDR2a = ['NALDGL',
'NVLDGL',
'GSKP',
'YITGDNLV',
'GYKTK',
'IFSNMDM',
'IRENEKE',
'MYSAGYE',
'YFSGDPLV',
'YTSAATLV',
'YFSGDTLV',
'YTSAATLV',
'YLSGSTLV',
'DLTEATQV',
'AMKANDK',
'ATKADDK',
'MTFSENT',
'IQSSQKE',
'VYSSGN',
'IYSNGD',
'TYSSGN',
'IRSNVGE',
'IRSNMDK',
'QGSYDQQN',
'HISR',
'IRSNERE',
'SSENQE',
'RNSFDEQN',
'LYSAGEE',
'IQSSQRE',
'IPSGT',
'IRPDVSE',
'MTLNGDE',
'LVKSGEV',
'GLKNN',
'GLTSN',
'VVTGGEV',
'ISSIKDK',
'LLKGGEQ',
'LQKGGEE',
'LYKAGEL',
'LTSSGIE',
'QEAYKQQN',
'QEAYKQQN',
'LLSNGAV',
'ETME',
'LSSGK']

CDR1b = ['GHDS',
'SNHLY',
'LGHDT',
'LGHNA',
'MGHRA',
'LGHNA',
'LGHNA',
'SGHRS',
'SGHSS',
'SGHNT',
'SGHKS',
'SGHDT',
'SGHTS',
'SGHTS',
'MNHNS',
'MNHEY',
'MNHEY',
'MRHNA',
'MNHEY',
'MNHNY',
'MNHEY',
'MNHGY',
'MNHGY',
'SGHNA',
'SGHTA',
'SGHTA',
'SGHVT',
'SGHVS',
'SSHAT',
'SGHVS',
'SEHNR',
'SGDLS',
'WNHNN',
'WSHSY',
'ENHRY',
'SGHAT',
'SGHAT',
'SGHNT',
'SGHND',
'FGHNF',
'SGHNS',
'SGHDY',
'LGHNT',
'PRHDT',
'SGHDN',
'LNHNV',
'KGHSY',
'SGHMF',
'KGHSH',
'LNHDA',
'DFQATT',
'KAHSY',
'KGHTF',
'KGHDR',
'MGHDK',
'MNHVT',
'MNHEY',
'MDHEN',
'SQVTM',
'GTSNPN']

CDR2b = ['YNCKEF',
'FYNNEI',
'YNNKEL',
'YSNKEP',
'YSYEKL',
'YNFKEQ',
'YSLEER',
'YFSETQ',
'YANELR',
'YYREEE',
'YYEKEE',
'YYEEEE',
'YYEKEE',
'YDEGEE',
'SASEGT',
'SVGEGT',
'SVGEGT',
'SNTAGT',
'SVGAGI',
'SVGAGI',
'SVAAAL',
'SAAAGT',
'SVAAGI',
'FQGKDA',
'FQGNSA',
'FQGTGA',
'SQSDAQ',
'FNYEAQ',
'FNYEAQ',
'FQNEAQ',
'FQNEAQ',
'YYNGEE',
'SYGVQD',
'SAAADI',
'SYGVKD',
'FQDESV',
'FQNNGV',
'YENEEA',
'FCSWTL',
'FRS*SI',
'FNNNVP',
'FNNNVP',
'FRNRAP',
'FYEKMQ',
'FVKESK',
'YYDKDF',
'FQNENV',
'FQYQNI',
'LQKENI',
'SQIVND',
'SNEGSKA',
'FQNEEL',
'FQNEQV',
'SFDVKD',
'SYGVNS',
'SPGTGS',
'SMNVEV',
'SYDVKM',
'ANQGSEA',
'SVGIG']

TRAV_KEYS = ['TRAV1-1',
'TRAV1-2',
'TRAV2',
'TRAV3',
'TRAV4',
'TRAV5',
'TRAV6',
'TRAV7',
'TRAV8-1',
'TRAV8-2',
'TRAV8-3',
'TRAV8-4',
'TRAV8-6',
'TRAV8-7',
'TRAV9-1',
'TRAV9-2',
'TRAV10',
'TRAV11',
'TRAV12-1',
'TRAV12-2',
'TRAV12-3',
'TRAV13-1',
'TRAV13-2',
'TRAV14DV4',
'TRAV16',
'TRAV17',
'TRAV18',
'TRAV19',
'TRAV20',
'TRAV21',
'TRAV22',
'TRAV23DV6',
'TRAV24',
'TRAV25',
'TRAV26-1',
'TRAV26-2',
'TRAV27',
'TRAV29DV5',
'TRAV30',
'TRAV34',
'TRAV35',
'TRAV36DV7',
'TRAV38-1',
'TRAV38-2DV8',
'TRAV39',
'TRAV40',
'TRAV41',]

TRBV_KEYS = ['TRBV1',
'TRBV2',
'TRBV3-1',
'TRBV3-2',
'TRBV4-1',
'TRBV4-2',
'TRBV4-3',
'TRBV5-1',
'TRBV5-3',
'TRBV5-4',
'TRBV5-5',
'TRBV5-6',
'TRBV5-7',
'TRBV5-8',
'TRBV6-1',
'TRBV6-2',
'TRBV6-3',
'TRBV6-4',
'TRBV6-5',
'TRBV6-6',
'TRBV6-7',
'TRBV6-8',
'TRBV6-9',
'TRBV7-1',
'TRBV7-2',
'TRBV7-3',
'TRBV7-4',
'TRBV7-6',
'TRBV7-7',
'TRBV7-8',
'TRBV7-9',
'TRBV9',
'TRBV10-1',
'TRBV10-2',
'TRBV10-3',
'TRBV11-1',
'TRBV11-2',
'TRBV11-3',
'TRBV12-1',
'TRBV12-2',
'TRBV12-3',
'TRBV12-4',
'TRBV12-5',
'TRBV13',
'TRBV14',
'TRBV15',
'TRBV16',
'TRBV17',
'TRBV18',
'TRBV19',
'TRBV20-1',
'TRBV21-1',
'TRBV23-1',
'TRBV24-1',
'TRBV25-1',
'TRBV26',
'TRBV27',
'TRBV28',
'TRBV29-1',
'TRBV30',]

TRAV2CDR1a = dict(zip(TRAV_KEYS, CDR1a))
TRAV2CDR2a = dict(zip(TRAV_KEYS, CDR2a))
TRBV2CDR1b = dict(zip(TRBV_KEYS, CDR1b))
TRBV2CDR2b = dict(zip(TRBV_KEYS, CDR2b))


blosum62 = {'AA': 4.0,
 'AR': -1.0,
 'AN': -2.0,
 'AD': -2.0,
 'AC': 0.0,
 'AQ': -1.0,
 'AE': -1.0,
 'AG': 0.0,
 'AH': -2.0,
 'AI': -1.0,
 'AL': -1.0,
 'AK': -1.0,
 'AM': -1.0,
 'AF': -2.0,
 'AP': -1.0,
 'AS': 1.0,
 'AT': 0.0,
 'AW': -3.0,
 'AY': -2.0,
 'AV': 0.0,
 'AB': -2.0,
 'AJ': -1.0,
 'AZ': -1.0,
 'AX': -1.0,
 'A*': -4.0,
 'RA': -1.0,
 'RR': 5.0,
 'RN': 0.0,
 'RD': -2.0,
 'RC': -3.0,
 'RQ': 1.0,
 'RE': 0.0,
 'RG': -2.0,
 'RH': 0.0,
 'RI': -3.0,
 'RL': -2.0,
 'RK': 2.0,
 'RM': -1.0,
 'RF': -3.0,
 'RP': -2.0,
 'RS': -1.0,
 'RT': -1.0,
 'RW': -3.0,
 'RY': -2.0,
 'RV': -3.0,
 'RB': -1.0,
 'RJ': -2.0,
 'RZ': 0.0,
 'RX': -1.0,
 'R*': -4.0,
 'NA': -2.0,
 'NR': 0.0,
 'NN': 6.0,
 'ND': 1.0,
 'NC': -3.0,
 'NQ': 0.0,
 'NE': 0.0,
 'NG': 0.0,
 'NH': 1.0,
 'NI': -3.0,
 'NL': -3.0,
 'NK': 0.0,
 'NM': -2.0,
 'NF': -3.0,
 'NP': -2.0,
 'NS': 1.0,
 'NT': 0.0,
 'NW': -4.0,
 'NY': -2.0,
 'NV': -3.0,
 'NB': 4.0,
 'NJ': -3.0,
 'NZ': 0.0,
 'NX': -1.0,
 'N*': -4.0,
 'DA': -2.0,
 'DR': -2.0,
 'DN': 1.0,
 'DD': 6.0,
 'DC': -3.0,
 'DQ': 0.0,
 'DE': 2.0,
 'DG': -1.0,
 'DH': -1.0,
 'DI': -3.0,
 'DL': -4.0,
 'DK': -1.0,
 'DM': -3.0,
 'DF': -3.0,
 'DP': -1.0,
 'DS': 0.0,
 'DT': -1.0,
 'DW': -4.0,
 'DY': -3.0,
 'DV': -3.0,
 'DB': 4.0,
 'DJ': -3.0,
 'DZ': 1.0,
 'DX': -1.0,
 'D*': -4.0,
 'CA': 0.0,
 'CR': -3.0,
 'CN': -3.0,
 'CD': -3.0,
 'CC': 9.0,
 'CQ': -3.0,
 'CE': -4.0,
 'CG': -3.0,
 'CH': -3.0,
 'CI': -1.0,
 'CL': -1.0,
 'CK': -3.0,
 'CM': -1.0,
 'CF': -2.0,
 'CP': -3.0,
 'CS': -1.0,
 'CT': -1.0,
 'CW': -2.0,
 'CY': -2.0,
 'CV': -1.0,
 'CB': -3.0,
 'CJ': -1.0,
 'CZ': -3.0,
 'CX': -1.0,
 'C*': -4.0,
 'QA': -1.0,
 'QR': 1.0,
 'QN': 0.0,
 'QD': 0.0,
 'QC': -3.0,
 'QQ': 5.0,
 'QE': 2.0,
 'QG': -2.0,
 'QH': 0.0,
 'QI': -3.0,
 'QL': -2.0,
 'QK': 1.0,
 'QM': 0.0,
 'QF': -3.0,
 'QP': -1.0,
 'QS': 0.0,
 'QT': -1.0,
 'QW': -2.0,
 'QY': -1.0,
 'QV': -2.0,
 'QB': 0.0,
 'QJ': -2.0,
 'QZ': 4.0,
 'QX': -1.0,
 'Q*': -4.0,
 'EA': -1.0,
 'ER': 0.0,
 'EN': 0.0,
 'ED': 2.0,
 'EC': -4.0,
 'EQ': 2.0,
 'EE': 5.0,
 'EG': -2.0,
 'EH': 0.0,
 'EI': -3.0,
 'EL': -3.0,
 'EK': 1.0,
 'EM': -2.0,
 'EF': -3.0,
 'EP': -1.0,
 'ES': 0.0,
 'ET': -1.0,
 'EW': -3.0,
 'EY': -2.0,
 'EV': -2.0,
 'EB': 1.0,
 'EJ': -3.0,
 'EZ': 4.0,
 'EX': -1.0,
 'E*': -4.0,
 'GA': 0.0,
 'GR': -2.0,
 'GN': 0.0,
 'GD': -1.0,
 'GC': -3.0,
 'GQ': -2.0,
 'GE': -2.0,
 'GG': 6.0,
 'GH': -2.0,
 'GI': -4.0,
 'GL': -4.0,
 'GK': -2.0,
 'GM': -3.0,
 'GF': -3.0,
 'GP': -2.0,
 'GS': 0.0,
 'GT': -2.0,
 'GW': -2.0,
 'GY': -3.0,
 'GV': -3.0,
 'GB': -1.0,
 'GJ': -4.0,
 'GZ': -2.0,
 'GX': -1.0,
 'G*': -4.0,
 'HA': -2.0,
 'HR': 0.0,
 'HN': 1.0,
 'HD': -1.0,
 'HC': -3.0,
 'HQ': 0.0,
 'HE': 0.0,
 'HG': -2.0,
 'HH': 8.0,
 'HI': -3.0,
 'HL': -3.0,
 'HK': -1.0,
 'HM': -2.0,
 'HF': -1.0,
 'HP': -2.0,
 'HS': -1.0,
 'HT': -2.0,
 'HW': -2.0,
 'HY': 2.0,
 'HV': -3.0,
 'HB': 0.0,
 'HJ': -3.0,
 'HZ': 0.0,
 'HX': -1.0,
 'H*': -4.0,
 'IA': -1.0,
 'IR': -3.0,
 'IN': -3.0,
 'ID': -3.0,
 'IC': -1.0,
 'IQ': -3.0,
 'IE': -3.0,
 'IG': -4.0,
 'IH': -3.0,
 'II': 4.0,
 'IL': 2.0,
 'IK': -3.0,
 'IM': 1.0,
 'IF': 0.0,
 'IP': -3.0,
 'IS': -2.0,
 'IT': -1.0,
 'IW': -3.0,
 'IY': -1.0,
 'IV': 3.0,
 'IB': -3.0,
 'IJ': 3.0,
 'IZ': -3.0,
 'IX': -1.0,
 'I*': -4.0,
 'LA': -1.0,
 'LR': -2.0,
 'LN': -3.0,
 'LD': -4.0,
 'LC': -1.0,
 'LQ': -2.0,
 'LE': -3.0,
 'LG': -4.0,
 'LH': -3.0,
 'LI': 2.0,
 'LL': 4.0,
 'LK': -2.0,
 'LM': 2.0,
 'LF': 0.0,
 'LP': -3.0,
 'LS': -2.0,
 'LT': -1.0,
 'LW': -2.0,
 'LY': -1.0,
 'LV': 1.0,
 'LB': -4.0,
 'LJ': 3.0,
 'LZ': -3.0,
 'LX': -1.0,
 'L*': -4.0,
 'KA': -1.0,
 'KR': 2.0,
 'KN': 0.0,
 'KD': -1.0,
 'KC': -3.0,
 'KQ': 1.0,
 'KE': 1.0,
 'KG': -2.0,
 'KH': -1.0,
 'KI': -3.0,
 'KL': -2.0,
 'KK': 5.0,
 'KM': -1.0,
 'KF': -3.0,
 'KP': -1.0,
 'KS': 0.0,
 'KT': -1.0,
 'KW': -3.0,
 'KY': -2.0,
 'KV': -2.0,
 'KB': 0.0,
 'KJ': -3.0,
 'KZ': 1.0,
 'KX': -1.0,
 'K*': -4.0,
 'MA': -1.0,
 'MR': -1.0,
 'MN': -2.0,
 'MD': -3.0,
 'MC': -1.0,
 'MQ': 0.0,
 'ME': -2.0,
 'MG': -3.0,
 'MH': -2.0,
 'MI': 1.0,
 'ML': 2.0,
 'MK': -1.0,
 'MM': 5.0,
 'MF': 0.0,
 'MP': -2.0,
 'MS': -1.0,
 'MT': -1.0,
 'MW': -1.0,
 'MY': -1.0,
 'MV': 1.0,
 'MB': -3.0,
 'MJ': 2.0,
 'MZ': -1.0,
 'MX': -1.0,
 'M*': -4.0,
 'FA': -2.0,
 'FR': -3.0,
 'FN': -3.0,
 'FD': -3.0,
 'FC': -2.0,
 'FQ': -3.0,
 'FE': -3.0,
 'FG': -3.0,
 'FH': -1.0,
 'FI': 0.0,
 'FL': 0.0,
 'FK': -3.0,
 'FM': 0.0,
 'FF': 6.0,
 'FP': -4.0,
 'FS': -2.0,
 'FT': -2.0,
 'FW': 1.0,
 'FY': 3.0,
 'FV': -1.0,
 'FB': -3.0,
 'FJ': 0.0,
 'FZ': -3.0,
 'FX': -1.0,
 'F*': -4.0,
 'PA': -1.0,
 'PR': -2.0,
 'PN': -2.0,
 'PD': -1.0,
 'PC': -3.0,
 'PQ': -1.0,
 'PE': -1.0,
 'PG': -2.0,
 'PH': -2.0,
 'PI': -3.0,
 'PL': -3.0,
 'PK': -1.0,
 'PM': -2.0,
 'PF': -4.0,
 'PP': 7.0,
 'PS': -1.0,
 'PT': -1.0,
 'PW': -4.0,
 'PY': -3.0,
 'PV': -2.0,
 'PB': -2.0,
 'PJ': -3.0,
 'PZ': -1.0,
 'PX': -1.0,
 'P*': -4.0,
 'SA': 1.0,
 'SR': -1.0,
 'SN': 1.0,
 'SD': 0.0,
 'SC': -1.0,
 'SQ': 0.0,
 'SE': 0.0,
 'SG': 0.0,
 'SH': -1.0,
 'SI': -2.0,
 'SL': -2.0,
 'SK': 0.0,
 'SM': -1.0,
 'SF': -2.0,
 'SP': -1.0,
 'SS': 4.0,
 'ST': 1.0,
 'SW': -3.0,
 'SY': -2.0,
 'SV': -2.0,
 'SB': 0.0,
 'SJ': -2.0,
 'SZ': 0.0,
 'SX': -1.0,
 'S*': -4.0,
 'TA': 0.0,
 'TR': -1.0,
 'TN': 0.0,
 'TD': -1.0,
 'TC': -1.0,
 'TQ': -1.0,
 'TE': -1.0,
 'TG': -2.0,
 'TH': -2.0,
 'TI': -1.0,
 'TL': -1.0,
 'TK': -1.0,
 'TM': -1.0,
 'TF': -2.0,
 'TP': -1.0,
 'TS': 1.0,
 'TT': 5.0,
 'TW': -2.0,
 'TY': -2.0,
 'TV': 0.0,
 'TB': -1.0,
 'TJ': -1.0,
 'TZ': -1.0,
 'TX': -1.0,
 'T*': -4.0,
 'WA': -3.0,
 'WR': -3.0,
 'WN': -4.0,
 'WD': -4.0,
 'WC': -2.0,
 'WQ': -2.0,
 'WE': -3.0,
 'WG': -2.0,
 'WH': -2.0,
 'WI': -3.0,
 'WL': -2.0,
 'WK': -3.0,
 'WM': -1.0,
 'WF': 1.0,
 'WP': -4.0,
 'WS': -3.0,
 'WT': -2.0,
 'WW': 11.0,
 'WY': 2.0,
 'WV': -3.0,
 'WB': -4.0,
 'WJ': -2.0,
 'WZ': -2.0,
 'WX': -1.0,
 'W*': -4.0,
 'YA': -2.0,
 'YR': -2.0,
 'YN': -2.0,
 'YD': -3.0,
 'YC': -2.0,
 'YQ': -1.0,
 'YE': -2.0,
 'YG': -3.0,
 'YH': 2.0,
 'YI': -1.0,
 'YL': -1.0,
 'YK': -2.0,
 'YM': -1.0,
 'YF': 3.0,
 'YP': -3.0,
 'YS': -2.0,
 'YT': -2.0,
 'YW': 2.0,
 'YY': 7.0,
 'YV': -1.0,
 'YB': -3.0,
 'YJ': -1.0,
 'YZ': -2.0,
 'YX': -1.0,
 'Y*': -4.0,
 'VA': 0.0,
 'VR': -3.0,
 'VN': -3.0,
 'VD': -3.0,
 'VC': -1.0,
 'VQ': -2.0,
 'VE': -2.0,
 'VG': -3.0,
 'VH': -3.0,
 'VI': 3.0,
 'VL': 1.0,
 'VK': -2.0,
 'VM': 1.0,
 'VF': -1.0,
 'VP': -2.0,
 'VS': -2.0,
 'VT': 0.0,
 'VW': -3.0,
 'VY': -1.0,
 'VV': 4.0,
 'VB': -3.0,
 'VJ': 2.0,
 'VZ': -2.0,
 'VX': -1.0,
 'V*': -4.0,
 'BA': -2.0,
 'BR': -1.0,
 'BN': 4.0,
 'BD': 4.0,
 'BC': -3.0,
 'BQ': 0.0,
 'BE': 1.0,
 'BG': -1.0,
 'BH': 0.0,
 'BI': -3.0,
 'BL': -4.0,
 'BK': 0.0,
 'BM': -3.0,
 'BF': -3.0,
 'BP': -2.0,
 'BS': 0.0,
 'BT': -1.0,
 'BW': -4.0,
 'BY': -3.0,
 'BV': -3.0,
 'BB': 4.0,
 'BJ': -3.0,
 'BZ': 0.0,
 'BX': -1.0,
 'B*': -4.0,
 'JA': -1.0,
 'JR': -2.0,
 'JN': -3.0,
 'JD': -3.0,
 'JC': -1.0,
 'JQ': -2.0,
 'JE': -3.0,
 'JG': -4.0,
 'JH': -3.0,
 'JI': 3.0,
 'JL': 3.0,
 'JK': -3.0,
 'JM': 2.0,
 'JF': 0.0,
 'JP': -3.0,
 'JS': -2.0,
 'JT': -1.0,
 'JW': -2.0,
 'JY': -1.0,
 'JV': 2.0,
 'JB': -3.0,
 'JJ': 3.0,
 'JZ': -3.0,
 'JX': -1.0,
 'J*': -4.0,
 'ZA': -1.0,
 'ZR': 0.0,
 'ZN': 0.0,
 'ZD': 1.0,
 'ZC': -3.0,
 'ZQ': 4.0,
 'ZE': 4.0,
 'ZG': -2.0,
 'ZH': 0.0,
 'ZI': -3.0,
 'ZL': -3.0,
 'ZK': 1.0,
 'ZM': -1.0,
 'ZF': -3.0,
 'ZP': -1.0,
 'ZS': 0.0,
 'ZT': -1.0,
 'ZW': -2.0,
 'ZY': -2.0,
 'ZV': -2.0,
 'ZB': 0.0,
 'ZJ': -3.0,
 'ZZ': 4.0,
 'ZX': -1.0,
 'Z*': -4.0,
 'XA': -1.0,
 'XR': -1.0,
 'XN': -1.0,
 'XD': -1.0,
 'XC': -1.0,
 'XQ': -1.0,
 'XE': -1.0,
 'XG': -1.0,
 'XH': -1.0,
 'XI': -1.0,
 'XL': -1.0,
 'XK': -1.0,
 'XM': -1.0,
 'XF': -1.0,
 'XP': -1.0,
 'XS': -1.0,
 'XT': -1.0,
 'XW': -1.0,
 'XY': -1.0,
 'XV': -1.0,
 'XB': -1.0,
 'XJ': -1.0,
 'XZ': -1.0,
 'XX': -1.0,
 'X*': -4.0,
 '*A': -4.0,
 '*R': -4.0,
 '*N': -4.0,
 '*D': -4.0,
 '*C': -4.0,
 '*Q': -4.0,
 '*E': -4.0,
 '*G': -4.0,
 '*H': -4.0,
 '*I': -4.0,
 '*L': -4.0,
 '*K': -4.0,
 '*M': -4.0,
 '*F': -4.0,
 '*P': -4.0,
 '*S': -4.0,
 '*T': -4.0,
 '*W': -4.0,
 '*Y': -4.0,
 '*V': -4.0,
 '*B': -4.0,
 '*J': -4.0,
 '*Z': -4.0,
 '*X': -4.0,
 '**': 1.0}

def blosum_align(
        seq1,
        seq2,
        gap_open=-11, # https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3848038/
        gap_extend=-1,
        global_align=False,
        verbose=False,
):
    scorematrix = matlist.blosum62

    if global_align:
        alignments = pairwise2.align.globalds(
            seq1, seq2, scorematrix, gap_open, gap_extend)
    else:
        alignments = pairwise2.align.localds(
            seq1, seq2, scorematrix, gap_open, gap_extend)
    # this is annoying, BioPython 1.76 these are vanilla tuples and 1.79 they are named
    try:
        alignment = max(alignments, key=lambda x:x.score)
    except AttributeError:
        assert len(alignments[0]) == 5 # seqA, seqB, score, start, end
        alignment = max(alignments, key=lambda x:x[2])
    alseq1, alseq2, score, begin, end = alignment

    if verbose:
        print(format_alignment(*alignment))

    assert alseq1.replace('-','') == seq1
    assert alseq2.replace('-','') == seq2

    align = {}
    for i,(a,b) in enumerate(zip(alseq1, alseq2)):
        if a!= '-' and b!='-':
            #assert begin <= i <= end
            pos1 = i-alseq1[:i].count('-')
            pos2 = i-alseq2[:i].count('-')
            align[pos1] = pos2
    return align



def blosum62_distance(a,b):
    if a == '-' or b == '-':
        return -4
    else:
        return blosum62[a+b]
    

def calculate_blosum62_distance(a,b):
    return sum(list(map(lambda x: blosum62_distance(x[0],x[1]), zip(a,b))))

class TCR:
    def __init__(
        self, 
        alpha_sequence: Optional[str] = None, 
        beta_sequence: Optional[str] = None,
        species: Literal['human','mouse'] = 'human',
        alpha_cdr3: Optional[str] = None,
        beta_cdr3: Optional[str] = None,
        alpha_v_gene: Optional[str] = None,
        alpha_j_gene: Optional[str] = None,
        beta_v_gene: Optional[str] = None,
        beta_j_gene: Optional[str] = None,
        kalign_binary_path: str = None,
        alpha_mmcif_feature_dict: Optional[Mapping[str, np.ndarray]] = None,
        beta_mmcif_feature_dict: Optional[Mapping[str, np.ndarray]] = None
    ):
        """
        TCR class for aligning alpha and beta chains and extracting features

        :param alpha_sequence: alpha chain amino acid sequence
        :param beta_sequence: beta chain amino acid sequence
        :param species: species of TCR
        :param alpha_cdr3: alpha chain CDR3 amino acid sequence
        :param beta_cdr3: beta chain CDR3 amino acid sequence
        :param alpha_v_gene: alpha chain V gene name
        :param alpha_j_gene: alpha chain J gene name
        :param beta_v_gene: beta chain V gene name
        :param beta_j_gene: beta chain J gene name
        :param alignment_args: arguments for aligning alpha and beta chains
        :param alpha_mmcif_feature_dict: dictionary of alpha chain features
        :param beta_mmcif_feature_dict: dictionary of beta chain features
        """
        self.alpha_sequence = alpha_sequence
        self.beta_sequence = beta_sequence
        self.alpha_cdr3 = alpha_cdr3 
        self.beta_cdr3 = beta_cdr3
        self.alpha_v_gene = alpha_v_gene
        self.alpha_j_gene = alpha_j_gene
        self.beta_v_gene = beta_v_gene
        self.beta_j_gene = beta_j_gene
        self.species = species
        self.alpha_mmcif_feature_dict = alpha_mmcif_feature_dict
        self.beta_mmcif_feature_dict = beta_mmcif_feature_dict

        if self.alpha_sequence and self.beta_sequence:
            self.impute_j_gene()
        
        if self.alpha_sequence:
            self.alpha_cdr3 = self.fetch_cdr3a(self.alpha_sequence)
        if self.beta_sequence:
            self.beta_cdr3 = self.fetch_cdr3b(self.beta_sequence)
        
        self.align_v_genes(kalign_binary_path = kalign_binary_path)

        if self.alpha_cdr3:
            self.alpha_sequence = self.fill_up_cdr3(
                self.alpha_cdr3,
                TRAV_SEQUENCES[self.species][self.alpha_v_gene],
                TRAJ_SEQUENCES[self.species][self.alpha_j_gene]
            )
        if self.beta_cdr3:
            self.beta_sequence = self.fill_up_cdr3(
                self.beta_cdr3,
                TRBV_SEQUENCES[self.species][self.beta_v_gene],
                TRBJ_SEQUENCES[self.species][self.beta_j_gene]
            )
        
            # self.align_v_genes(kalign_binary_path = kalign_binary_path)

    def fill_up_cdr3(self, cdr3: str, v_gene: str, j_gene: str):
        """
        Fill up CDR3 sequence with V and J gene sequences

        :param cdr3: CDR3 amino acid sequence
        :param v_gene: V gene amino acid sequence
        :param j_gene: J gene amino acid sequence
        """
        overlap = ''
        fl = False
        for n in range(len(j_gene)):
            if fl:
                break
            for i in range(1,n):
                if cdr3.endswith(j_gene[i:n+1]):
                    overlap = j_gene[i-1:n+1]
                    fl = True
                    break
        cdr3 = cdr3 + j_gene[j_gene.index(overlap)+len(overlap):]
        fl = False
        for n in range(len(v_gene), -1, -1):
            if fl:
                break
            for i in range(1,n):
                if cdr3.startswith(v_gene[n-i:n]):
                    overlap = v_gene[n-i:n]
                    fl = True
                    break
                
        cdr3 = v_gene[:v_gene.index(overlap)] + cdr3
        return cdr3
    
    def fetch_cdr3a(self, seq):
        seq = seq[:seq.index(self.alpha_j_motif)+len(self.alpha_j_motif)]
        seq = seq[::-1]
        cdr3 = ''
        fl = False
        for e,i in enumerate(seq):
            if not fl and i == 'F' or i == 'W' or i == 'L':
                fl = True
            if fl and i == 'F' and e < len(self.beta_j_motif):
                cdr3 = ''
            if fl and i == 'C':
                fl = False
                cdr3 = f'C{cdr3}'
                break
            if fl:
                cdr3 = i + cdr3
        return cdr3

    def fetch_cdr3b(self, seq):
        seq = seq[:seq.index(self.beta_j_motif)+len(self.beta_j_motif)]
        seq = seq[::-1]
        cdr3 = ''
        fl = False
        for e,i in enumerate(seq):
            if not fl and i == 'F' or i == 'W' or i == 'L':
                fl = True
            if fl and i == 'F' and e < len(self.beta_j_motif):
                cdr3 = ''
            if fl and i == 'C':
                fl = False
                cdr3 = f'C{cdr3}'
                break
            if fl:
                cdr3 = i + cdr3
        return cdr3
    

    @classmethod 
    def from_tcr_string(cls, tcr_string: str):
        """
        Create TCR object from string

        :param tcr_string: string of TCR. Example "human TRA:TRAV21=CAVSNF=TRAJ21 TRB:TRBV9=CASSVATYSTDTQYF=TRBJ2-3"
        """
        if 'TRA:' in tcr_string and 'TRB:' in tcr_string:
            beta = tcr_string.split(" ")[-1].split('TRB:')[1]
            alpha = tcr_string.split(" ")[1].split('TRA:')[1]
            species = tcr_string.split(" ")[0]
            alpha_v_gene, alpha_cdr3, alpha_j_gene = alpha.split('=')
            beta_v_gene, beta_cdr3, beta_j_gene = beta.split('=')
        elif 'TRA:' in tcr_string:
            alpha = tcr_string.split(" ")[1].split('TRA:')[1]
            species = tcr_string.split(" ")[0]
            alpha_v_gene, alpha_cdr3, alpha_j_gene = alpha.split('=')
            beta_v_gene, beta_cdr3, beta_j_gene = None, None, None
        elif 'TRB:' in tcr_string:
            beta = tcr_string.split(" ")[-1].split('TRB:')[1]
            species = tcr_string.split(" ")[0]
            beta_v_gene, beta_cdr3, beta_j_gene = beta.split('=')
            alpha_v_gene, alpha_cdr3, alpha_j_gene = None, None, None
        else:
            raise ValueError("Invalid TCR string")
        
        return cls(
            alpha_sequence = None,
            beta_sequence = None,
            species = species,
            alpha_cdr3 = alpha_cdr3,
            beta_cdr3 = beta_cdr3,
            alpha_v_gene = alpha_v_gene,
            alpha_j_gene = alpha_j_gene,
            beta_v_gene = beta_v_gene,
            beta_j_gene = beta_j_gene,
        )
    

    def pseudo_sequence(self, place_trb_before_tra: bool = False):
        """
        Get pseudo sequence of TCR
        """
        if place_trb_before_tra:
            return ':'.join([
                TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                self.beta_cdr3 if self.beta_cdr3 else '',
                TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                self.alpha_cdr3 if self.alpha_cdr3 else '',
            ])
        else:
            return ':'.join([
                TRAV2CDR1a[self.alpha_v_gene] if self.alpha_v_gene else '',
                TRAV2CDR2a[self.alpha_v_gene] if self.alpha_v_gene else '',
                self.alpha_cdr3 if self.alpha_cdr3 else '',
                TRBV2CDR1b[self.beta_v_gene] if self.beta_v_gene else '',
                TRBV2CDR2b[self.beta_v_gene] if self.beta_v_gene else '',
                self.beta_cdr3 if self.beta_cdr3 else ''
            ])
    
    def align_v_genes(self, kalign_binary_path):
        if self.alpha_sequence is not None:
            v_sequences = TRAV_SEQUENCES[self.species]
            uid = str(uuid1())
            tmp_fasta = os.path.join("/tmp", f'{uid}.fasta')
            with open(tmp_fasta, "w+") as f:
                f.write('>query\n' + self.alpha_sequence + '\n')
                for k,v in v_sequences.items():
                    f.write(f'>{k}\n{v}\n')

            cmd = [
                    kalign_binary_path,
                    "-i",
                    tmp_fasta,
                    "-o",
                    tmp_fasta.replace('fasta','kaln'),
                    "-format",
                    "fasta",
            ]
            process = subprocess.Popen(
                cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            stdout, stderr = process.communicate()
            retcode = process.wait()
            alignment = SeqIO.parse(tmp_fasta.replace('fasta','kaln'), 'fasta')
            alignment = list(map(lambda x: (x.description, str(x.seq)), alignment))
            alpha_sequence = alignment[0][1]
            alignment = sorted(list(map(lambda x: (x[0],x[1], calculate_blosum62_distance(alpha_sequence, x[1])), alignment[1:])), key=lambda x: -x[-1])
            most_likely_alpha_v_gene = alignment[0][0]
            most_likely_alpha_v_sequence = alignment[0][1]

            self.alpha_v_gene = most_likely_alpha_v_gene
            self._alpha_aligned_sequence = alpha_sequence
            self._alpha_v_sequence = most_likely_alpha_v_sequence

            _alpha_alignment = list(
                filter(
                    lambda x: x[0] != '-' or x[1] != '-',
                    zip(self._alpha_v_sequence, self._alpha_aligned_sequence),
                )
            )
            self._alpha_v_sequence = ''.join(list(map(lambda x: x[0], _alpha_alignment)))
            self._alpha_aligned_sequence = ''.join(list(map(lambda x: x[1], _alpha_alignment)))

        if self.beta_sequence is not None:
            v_sequences = TRBV_SEQUENCES[self.species]
            os.system(f"rm {tmp_fasta}")
            uid = str(uuid1())
            tmp_fasta = os.path.join("/tmp", f'{uid}.fasta')
            with open(tmp_fasta, "w+") as f:
                f.write('>query\n' + self.beta_sequence + '\n')
                for k,v in v_sequences.items():
                    f.write(f'>{k}\n{v}\n')
            cmd = [
                    kalign_binary_path,
                    "-i",
                    tmp_fasta,
                    "-o",
                    tmp_fasta.replace('fasta','kaln'),
                    "-format",
                    "fasta",
            ]
            process = subprocess.Popen(
                cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            stdout, stderr = process.communicate()
            retcode = process.wait()
            alignment = SeqIO.parse(tmp_fasta.replace('fasta','kaln'), 'fasta')
            alignment = list(map(lambda x: (x.description, str(x.seq)), alignment))
            beta_sequence = alignment[0][1]
            alignment = sorted(list(map(lambda x: (x[0],x[1], calculate_blosum62_distance(beta_sequence, x[1])), alignment[1:])), key=lambda x: -x[-1])
            os.system(f"rm {tmp_fasta}")
            most_likely_beta_v_gene = alignment[0][0]
            most_likely_beta_v_sequence = alignment[0][1]
        
        
            self.beta_v_gene = most_likely_beta_v_gene
            self._beta_aligned_sequence = beta_sequence
            self._beta_v_sequence = most_likely_beta_v_sequence

            _beta_alignment = list(
                filter(
                    lambda x: x[0] != '-' or x[1] != '-',
                    zip(self._beta_v_sequence, self._beta_aligned_sequence),
                )
            )
            self._beta_v_sequence = ''.join(list(map(lambda x: x[0], _beta_alignment)))
            self._beta_aligned_sequence = ''.join(list(map(lambda x: x[1], _beta_alignment)))
        
    def impute_j_gene(self):
        def get_overlap(s1, s2):
            import difflib
            s = difflib.SequenceMatcher(None, s1, s2)
            pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
            return s1[pos_a:pos_a+size]
        l = 0
        if self.alpha_sequence is not None:
            for k,v in TRAJ_SEQUENCES[self.species].items():
                overlap = get_overlap(self.alpha_sequence, v)
                if len(overlap) > l:
                    l = len(overlap)
                    self.alpha_j_gene = k
                    self.alpha_j_motif = overlap
        l = 0
        if self.beta_sequence is not None:
            for k,v in TRBJ_SEQUENCES[self.species].items():
                overlap = get_overlap(self.beta_sequence, v)
                if len(overlap) > l:
                    l = len(overlap)
                    self.beta_j_gene = k
                    self.beta_j_motif = overlap

    def to_string(self):
        return f'{self.species} TRA:{self.alpha_v_gene}={self.alpha_cdr3}={self.alpha_j_gene} TRB:{self.beta_v_gene}={self.beta_cdr3}={self.beta_j_gene}'

    def __repr__(self) -> str:
        return f"TCR object from {self.species}\n" + \
            f"    TRAV: {self.alpha_v_gene}\n" + \
            f"    CDR3a: {self.alpha_cdr3}\n" + \
            f"    TRAJ: {self.alpha_j_gene}\n" + \
            f"    TRBV: {self.beta_v_gene}\n" + \
            f"    CDR3b: {self.beta_cdr3}\n" + \
            f"    TRBJ: {self.beta_j_gene}\n"
    
