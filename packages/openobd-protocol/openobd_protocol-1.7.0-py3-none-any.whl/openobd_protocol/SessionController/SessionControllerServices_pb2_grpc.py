# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2
from openobd_protocol.SessionController.Messages import Session_pb2 as openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2


class sessionControllerStub(object):
    """
    The sessionController can be used to start an openOBD session.
    ``` mermaid
    sequenceDiagram
    Client->>Server: getSessionToken
    Server->>Client: SessionToken
    Client->>Server: startSessionOnTicket
    Server->>Client: SessionInfo
    Note over Client,Server: openOBD session<br/>
    ```
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSessionToken = channel.unary_unary(
                '/openOBD.v1.sessionController/getSessionToken',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.Authenticate.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionToken.FromString,
                )
        self.startSessionOnTicket = channel.unary_unary(
                '/openOBD.v1.sessionController/startSessionOnTicket',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.TicketId.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
                )
        self.startSessionOnConnector = channel.unary_unary(
                '/openOBD.v1.sessionController/startSessionOnConnector',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.ConnectorId.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
                )
        self.getSession = channel.unary_unary(
                '/openOBD.v1.sessionController/getSession',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
                )
        self.deleteSession = channel.unary_unary(
                '/openOBD.v1.sessionController/deleteSession',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
                )
        self.getSessionList = channel.unary_unary(
                '/openOBD.v1.sessionController/getSessionList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfoList.FromString,
                )


class sessionControllerServicer(object):
    """
    The sessionController can be used to start an openOBD session.
    ``` mermaid
    sequenceDiagram
    Client->>Server: getSessionToken
    Server->>Client: SessionToken
    Client->>Server: startSessionOnTicket
    Server->>Client: SessionInfo
    Note over Client,Server: openOBD session<br/>
    ```
    """

    def getSessionToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSessionOnTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSessionOnConnector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSessionList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_sessionControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSessionToken': grpc.unary_unary_rpc_method_handler(
                    servicer.getSessionToken,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.Authenticate.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionToken.SerializeToString,
            ),
            'startSessionOnTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.startSessionOnTicket,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.TicketId.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.SerializeToString,
            ),
            'startSessionOnConnector': grpc.unary_unary_rpc_method_handler(
                    servicer.startSessionOnConnector,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.ConnectorId.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.SerializeToString,
            ),
            'getSession': grpc.unary_unary_rpc_method_handler(
                    servicer.getSession,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.SerializeToString,
            ),
            'deleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSession,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.SerializeToString,
            ),
            'getSessionList': grpc.unary_unary_rpc_method_handler(
                    servicer.getSessionList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfoList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.sessionController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class sessionController(object):
    """
    The sessionController can be used to start an openOBD session.
    ``` mermaid
    sequenceDiagram
    Client->>Server: getSessionToken
    Server->>Client: SessionToken
    Client->>Server: startSessionOnTicket
    Server->>Client: SessionInfo
    Note over Client,Server: openOBD session<br/>
    ```
    """

    @staticmethod
    def getSessionToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/getSessionToken',
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.Authenticate.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSessionOnTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/startSessionOnTicket',
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.TicketId.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSessionOnConnector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/startSessionOnConnector',
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.ConnectorId.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/getSession',
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/deleteSession',
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionId.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSessionList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.sessionController/getSessionList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_SessionController_dot_Messages_dot_Session__pb2.SessionInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
