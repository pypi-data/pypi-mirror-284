"use strict";(self.webpackChunkjupyterpidaq_menu=self.webpackChunkjupyterpidaq_menu||[]).push([[509],{509:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var a=t(179),l=t(858),o=t(902);const c={id:"jupyterpidaq-menu:plugin",description:"Convenience menu for JupyterPiDAQ that runs in Jupyter Lab and Notebook >=7.",autoStart:!0,requires:[a.IMainMenu,o.INotebookTracker,o.INotebookTools],activate:(e,n,t,a)=>{const{commands:c}=e;async function u(e){const n=t.currentWidget;if(n){const t=n.content;if(t){const n=t.activeCellIndex;await o.NotebookActions.insertBelow(t),t.activeCellIndex=n+1;const l=a.activeCell;l&&(await l.ready,console.log("selected cell index:"+n),console.log("index set to:"+t.activeCellIndex),console.log("cell:",l),function(e,n){const t=e.editor;if(t){const e={column:0,line:0},a=t.lineCount-1;let l={column:0,line:a};const o=t.getLine(a);o&&(l.column=o.length),t.setSelection({start:e,end:l}),t.replaceSelection&&t.replaceSelection(n)}}(l,e))}else console.log("No cell found at index to insert into.")}}const d="InsertNewRun:jupyterpidaq-menu:mainmenu",i="Insert new run after selected cell",s="Create a new cell and insert skeleton code to create a new run.";c.addCommand(d,{label:i,caption:s,execute:async()=>{let e="# Insert the name you want for the run (eg. Trial_1).\n";e+="# Then execute this cell to setup and start data collection.\n",e+='Run("REPLACE_WITH_DESCRIPTIVE_RUN_NAME")',u('# Insert the name you want for the run (eg. Trial_1).\n# Then execute this cell to setup and start data collection.\nRun("REPLACE_WITH_DESCRIPTIVE_RUN_NAME")'),console.log("Inserted New Run Code Cell.")}});const r="ShowDataInTable:jupyterpidaq-menu:mainmenu",m="Select data to show in a table...",p="Create a new cell and GUI to select data to display in table.";c.addCommand(r,{label:m,caption:p,execute:async()=>{await u("showDataTable()"),c.execute("notebook:run-cell"),console.log("ShowData Cell run.")}});const w="newCalculatedColumn:jupyterpidaq-menu:mainmenu",C="Calculate new column...",I="Create a new cell and GUI to calculate a new column.";c.addCommand(w,{label:C,caption:I,execute:async()=>{await u("newCalculatedColumn()"),c.execute("notebook:run-cell"),console.log("newCalculatedColumn Cell run.")}});const b="newPlot:jupyterpidaq-menu:mainmenu",g="Insert new plot after selected cell",y="Create a new cell and GUI to create a new plot.";c.addCommand(b,{label:g,caption:y,execute:async()=>{await u("newPlot()"),c.execute("notebook:run-cell"),console.log("newPlot Cell run.")}});const x="newFit:jupyterpidaq-menu:mainmenu",f="Insert new fit after selected cell",h="Create a new cell and GUI to create a new fit.";c.addCommand(x,{label:f,caption:h,execute:async()=>{await u("newFit()"),c.execute("notebook:run-cell"),console.log("newPlot Cell run.")}});const k=new l.MenuSvg({commands:c});k.title.label="DAQ Commands",k.addClass("jp-jupyterpidaq-menu"),k.addItem({command:d,args:{label:i,caption:s}}),k.addItem({command:r,args:{label:m,caption:p}}),k.addItem({command:w,args:{label:C,caption:I}}),k.addItem({command:b,args:{label:g,caption:y}}),k.addItem({command:x,args:{label:f,caption:h}}),n.addMenu(k),console.log("DAQ Commands menu creation complete."),console.log("JupyterLab extension jupyterpidaq-menu is activated!")}}}}]);