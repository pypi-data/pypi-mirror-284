[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "Auto-Sklong"
description = "A package for automated machine learning based on scikit-learn and sklong to tackle the longitudinal machine learning classificationt tasks."
readme = "README.md"
authors = [
    { name = "Pieter Gijsbers", email = "p.gijsbers@tue.nl" },
    { name = "Provost Simon", email = "s.g.provost@kent.ac.uk" },
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.9,<3.10"
dependencies = [
    "numpy==1.23.3",
    "scipy>=1.5.0",
    "pandas<2.0.0,>=1.5.3",
    "stopit>=1.1.2",
    "liac-arff>=2.2.2",
    "category-encoders>=1.2.8",
    "black>=23.10.1",
    "psutil",
    "configspace<1.0.0,>=0.7.1",
    "smac==2.1.0",
    "Scikit-longitudinal>=0.0.5",
]
version = "0.0.2"

[project.license]
text = "MIT"

[project.scripts]
gama = "gama.utilities.cli:main"

[urls]
github = "https://github.com/simonprovost/Auto-Sklong"
documentation = "https://simonprovost.github.io/Auto-Sklong/"
"bug tracker" = "https://github.com/simonprovost/Auto-Sklong/issues"

[tool.pdm]
distribution = true

[tool.pdm.resolution]
respect-source-order = true
excludes = [
    "scikit-learn",
]

[tool.pdm.dev-dependencies]
test = [
    "pre-commit==3.2.2",
    "pytest>=4.4.0",
    "pytest-mock",
    "pytest-xdist",
    "codecov",
    "pytest-cov",
]
experiments = [
    "seaborn==0.13.2",
]
doc = [
    "mkdocs==1.6.0",
    "mkdocs-get-deps==0.2.0",
    "mkdocs-material==9.5.27",
    "mkdocs-material[imaging]",
    "mkdocs-material-extensions==1.3.1",
    "mkdocs-minify-plugin==0.8.0",
]

[tool.pdm.scripts._set_pdm_use_venv]
cmd = "pdm use --venv ${PDM_IN_ENV}"

[tool.pdm.scripts._use_python39]
shell = "pdm use \"${AUTOSKLONG_PYTHON_PATH}\""
env_file = ".env"

[tool.pdm.scripts._create_env]
shell = "pdm venv create --with-pip ${AUTOSKLONG_PYTHON_VERSION}"
env_file = ".env"

[tool.pdm.scripts._check_sklong_vars]
shell = "echo 'Make sure to set the AUTOSKLONG_PYTHON_PATH and AUTOSKLONG_PYTHON_VERSION environment variables'"

[tool.pdm.scripts._set_env_var]
shell = "echo 'could you please run `export PDM_IN_ENV=in-project`'"

[tool.pdm.scripts._activate_env]
cmd = "echo 'could you please activate the environment via `eval $(pdm venv activate (dollar-sign)PDM_IN_ENV)`'"

[tool.pdm.scripts.setup_autosklong]
composite = [
    "_check_sklong_vars",
    "_create_env",
    "_set_env_var",
    "_activate_env",
]

[tool.pdm.scripts.remove_env]
cmd = "pdm venv remove ${PDM_IN_ENV}"

[tool.pdm.scripts._clean_project]
cmd = "echo could you please deactivate the environment via `conda deactivate` then run `pdm run remove_env`"

[tool.pdm.scripts.clean]
composite = [
    "_check_pdm_vars",
    "_clean_project",
]

[tool.pdm.scripts._install_deps]
cmd = "pdm install --venv ${PDM_IN_ENV} --prod"

[tool.pdm.scripts._install_deps.env_file]
override = ".env"

[tool.pdm.scripts._check_pdm_vars]
call = "scripts.pdm.pdm_pre_install:check_pdm_variables"

[tool.pdm.scripts._risky_clean]
shell = "rm -rf pdm.lock __pypackages__"

[tool.pdm.scripts.install_prod]
composite = [
    "_check_pdm_vars",
    "_set_pdm_use_venv",
    "_install_deps",
]

[tool.pdm.scripts.view_env]
cmd = "pdm venv list"

[tool.pdm.scripts.build_dist]
cmd = "pdm build"

[tool.pdm.scripts.update_lock]
cmd = "pdm lock"

[tool.pdm.scripts.update_lock.env_file]
override = ".env"

[tool.pdm.scripts.update_lock_dev]
cmd = "pdm lock -d"

[tool.pdm.scripts.update_lock_dev.env_file]
override = ".env"

[tool.pdm.scripts._install_dev]
cmd = "pdm install -G experiments -G test -G doc --no-default"

[tool.pdm.scripts._install_dev.env_file]
override = ".env"

[tool.pdm.scripts.install_dev]
composite = [
    "_set_pdm_use_venv",
    "_install_dev",
]

[tool.pdm.scripts.clean_cache]
shell = "rm -rf htmlcov .pytest_cache .*_cache && find . -type d -name '__pycache__' -exec rm -r {} +"

[tool.pdm.scripts.tests_unit]
cmd = "pytest -sv tests/unit"

[tool.pdm.scripts.tests_system]
cmd = "pytest -sv tests/system"

[tool.pdm.scripts.tests]
composite = [
    "tests_unit",
    "tests_system",
]

[tool.pdm.scripts.pre_commit]
cmd = "pre-commit run --all-files"

[tool.pdm.scripts.docs]
shell = "mkdocs serve"

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::sklearn.exceptions.ConvergenceWarning",
    "ignore::RuntimeWarning",
    "ignore:.*mode.*:FutureWarning",
    "default::PendingDeprecationWarning",
    "default::DeprecationWarning",
    "default::FutureWarning",
    "ignore:::category_encoders.target_encoder",
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",
]
"bayesian_optimisation.py" = [
    "E501",
]

[tool.mypy]
python_version = 3.1
show_column_numbers = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
ignore_missing_imports = true
warn_no_return = true
