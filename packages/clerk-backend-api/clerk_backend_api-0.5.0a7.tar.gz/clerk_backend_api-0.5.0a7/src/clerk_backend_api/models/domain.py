"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .cnametarget import CNameTarget, CNameTargetTypedDict
from clerk_backend_api.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class DomainObject(str, Enum):
    DOMAIN = "domain"


class DomainTypedDict(TypedDict):
    object: DomainObject
    id: str
    name: str
    is_satellite: bool
    frontend_api_url: str
    development_origin: str
    accounts_portal_url: NotRequired[Nullable[str]]
    r"""Null for satellite domains.

    """
    proxy_url: NotRequired[Nullable[str]]
    cname_targets: NotRequired[Nullable[List[CNameTargetTypedDict]]]
    

class Domain(BaseModel):
    object: DomainObject
    id: str
    name: str
    is_satellite: bool
    frontend_api_url: str
    development_origin: str
    accounts_portal_url: Optional[Nullable[str]] = None
    r"""Null for satellite domains.

    """
    proxy_url: Optional[Nullable[str]] = None
    cname_targets: Optional[Nullable[List[CNameTarget]]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["accounts_portal_url", "proxy_url", "cname_targets"]
        nullable_fields = ["accounts_portal_url", "proxy_url", "cname_targets"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
