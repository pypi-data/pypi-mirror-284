"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class UpdateInstanceAuthConfigRequestBodyTypedDict(TypedDict):
    restricted_to_allowlist: NotRequired[Nullable[bool]]
    r"""Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist."""
    from_email_address: NotRequired[Nullable[str]]
    r"""The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent.
    Only alphanumeric values are allowed.
    Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).
    """
    progressive_sign_up: NotRequired[Nullable[bool]]
    r"""Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info."""
    session_token_template: NotRequired[Nullable[str]]
    r"""The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string."""
    enhanced_email_deliverability: NotRequired[Nullable[bool]]
    r"""The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain.
    This can be helpful if you do not have a high domain reputation.
    """
    test_mode: NotRequired[Nullable[bool]]
    r"""Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.
    Defaults to true for development instances.
    """
    

class UpdateInstanceAuthConfigRequestBody(BaseModel):
    restricted_to_allowlist: Optional[Nullable[bool]] = False
    r"""Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist."""
    from_email_address: Optional[Nullable[str]] = None
    r"""The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent.
    Only alphanumeric values are allowed.
    Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).
    """
    progressive_sign_up: Optional[Nullable[bool]] = None
    r"""Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info."""
    session_token_template: Optional[Nullable[str]] = None
    r"""The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string."""
    enhanced_email_deliverability: Optional[Nullable[bool]] = None
    r"""The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain.
    This can be helpful if you do not have a high domain reputation.
    """
    test_mode: Optional[Nullable[bool]] = None
    r"""Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.
    Defaults to true for development instances.
    """
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["restricted_to_allowlist", "from_email_address", "progressive_sign_up", "session_token_template", "enhanced_email_deliverability", "test_mode"]
        nullable_fields = ["restricted_to_allowlist", "from_email_address", "progressive_sign_up", "session_token_template", "enhanced_email_deliverability", "test_mode"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
