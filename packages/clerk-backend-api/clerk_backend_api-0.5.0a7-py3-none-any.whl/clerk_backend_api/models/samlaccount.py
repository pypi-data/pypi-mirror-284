"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict, Union
from typing_extensions import NotRequired


class SAMLAccountObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    SAML_ACCOUNT = "saml_account"


class SAMLAccountPublicMetadataTypedDict(TypedDict):
    pass
    

class SAMLAccountPublicMetadata(BaseModel):
    pass
    

class TicketVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    EXPIRED = "expired"


class TicketVerificationStrategy(str, Enum):
    TICKET = "ticket"


class TicketTypedDict(TypedDict):
    status: TicketVerificationStatus
    strategy: TicketVerificationStrategy
    attempts: NotRequired[Nullable[int]]
    expire_at: NotRequired[Nullable[int]]
    

class Ticket(BaseModel):
    status: TicketVerificationStatus
    strategy: TicketVerificationStrategy
    attempts: Optional[Nullable[int]] = None
    expire_at: Optional[Nullable[int]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["attempts", "expire_at"]
        nullable_fields = ["attempts", "expire_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class SAMLVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"
    TRANSFERABLE = "transferable"


class SAMLVerificationStrategy(str, Enum):
    SAML = "saml"


class ClerkErrorErrorMetaTypedDict(TypedDict):
    pass
    

class ClerkErrorErrorMeta(BaseModel):
    pass
    

class SAMLErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ClerkErrorErrorMetaTypedDict]
    clerk_trace_id: NotRequired[str]
    

class SAMLErrorClerkError(BaseModel):
    message: str
    long_message: str
    code: str
    meta: Optional[ClerkErrorErrorMeta] = None
    clerk_trace_id: Optional[str] = None
    

class SamlTypedDict(TypedDict):
    status: SAMLVerificationStatus
    strategy: SAMLVerificationStrategy
    external_verification_redirect_url: Nullable[str]
    expire_at: int
    error: NotRequired[Nullable[VerificationErrorTypedDict]]
    attempts: NotRequired[Nullable[int]]
    

class Saml(BaseModel):
    status: SAMLVerificationStatus
    strategy: SAMLVerificationStrategy
    external_verification_redirect_url: Nullable[str]
    expire_at: int
    error: Optional[Nullable[VerificationError]] = None
    attempts: Optional[Nullable[int]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["error", "attempts"]
        nullable_fields = ["external_verification_redirect_url", "error", "attempts"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class SAMLAccountTypedDict(TypedDict):
    id: str
    object: SAMLAccountObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    provider: str
    active: bool
    email_address: str
    verification: Nullable[SAMLAccountVerificationTypedDict]
    first_name: NotRequired[Nullable[str]]
    last_name: NotRequired[Nullable[str]]
    provider_user_id: NotRequired[Nullable[str]]
    public_metadata: NotRequired[SAMLAccountPublicMetadataTypedDict]
    

class SAMLAccount(BaseModel):
    id: str
    object: SAMLAccountObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    provider: str
    active: bool
    email_address: str
    verification: Nullable[SAMLAccountVerification]
    first_name: Optional[Nullable[str]] = None
    last_name: Optional[Nullable[str]] = None
    provider_user_id: Optional[Nullable[str]] = None
    public_metadata: Optional[SAMLAccountPublicMetadata] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["first_name", "last_name", "provider_user_id", "public_metadata"]
        nullable_fields = ["verification", "first_name", "last_name", "provider_user_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

VerificationErrorTypedDict = Union[SAMLErrorClerkErrorTypedDict]


VerificationError = Union[SAMLErrorClerkError]


SAMLAccountVerificationTypedDict = Union[TicketTypedDict, SamlTypedDict]


SAMLAccountVerification = Union[Ticket, Saml]

