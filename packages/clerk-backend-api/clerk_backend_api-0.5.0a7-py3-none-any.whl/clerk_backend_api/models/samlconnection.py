"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class SAMLConnectionObject(str, Enum):
    SAML_CONNECTION = "saml_connection"


class AttributeMappingTypedDict(TypedDict):
    user_id: NotRequired[str]
    email_address: NotRequired[str]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    

class AttributeMapping(BaseModel):
    user_id: Optional[str] = None
    email_address: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    

class SAMLConnectionTypedDict(TypedDict):
    object: SAMLConnectionObject
    id: str
    name: str
    domain: str
    idp_entity_id: Nullable[str]
    idp_sso_url: Nullable[str]
    idp_certificate: Nullable[str]
    acs_url: str
    sp_entity_id: str
    sp_metadata_url: str
    active: bool
    provider: str
    user_count: int
    sync_user_attributes: bool
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    idp_metadata_url: NotRequired[Nullable[str]]
    idp_metadata: NotRequired[Nullable[str]]
    attribute_mapping: NotRequired[AttributeMappingTypedDict]
    allow_subdomains: NotRequired[bool]
    allow_idp_initiated: NotRequired[bool]
    

class SAMLConnection(BaseModel):
    object: SAMLConnectionObject
    id: str
    name: str
    domain: str
    idp_entity_id: Nullable[str]
    idp_sso_url: Nullable[str]
    idp_certificate: Nullable[str]
    acs_url: str
    sp_entity_id: str
    sp_metadata_url: str
    active: bool
    provider: str
    user_count: int
    sync_user_attributes: bool
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    idp_metadata_url: Optional[Nullable[str]] = None
    idp_metadata: Optional[Nullable[str]] = None
    attribute_mapping: Optional[AttributeMapping] = None
    allow_subdomains: Optional[bool] = None
    allow_idp_initiated: Optional[bool] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["idp_metadata_url", "idp_metadata", "attribute_mapping", "allow_subdomains", "allow_idp_initiated"]
        nullable_fields = ["idp_entity_id", "idp_sso_url", "idp_certificate", "idp_metadata_url", "idp_metadata"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
