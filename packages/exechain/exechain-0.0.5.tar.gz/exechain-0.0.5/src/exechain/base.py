"""
Copyright (c) 2024 Leonov Artur (depish.eskry@yandex.ru)

Permission is hereby granted to use, copy, modify, and distribute this code in any form, provided that the above copyright notice and this permission notice appear in all copies.

DISCLAIMER:
This source code is provided "as is", without any warranty of any kind, express or implied, including but not limited to the implied warranties of merchantability and fitness for a particular purpose. The entire risk as to the quality and performance of the code is with you.



Copyright (c) 2024 –õ–µ–æ–Ω–æ–≤ –ê—Ä—Ç—É—Ä (depish.eskry@yandex.ru)

–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ª—é–±–æ–º –≤–∏–¥–µ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:
–≠—Ç–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å" –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π, —è–≤–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã—Ö, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã–º–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏ —Ç–æ–≤–∞—Ä–Ω–æ–π –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ª–µ–∂–∏—Ç –Ω–∞ –≤–∞—Å.
"""


import os
import fnmatch
import subprocess
from pathlib import Path
from jinja2 import Template

from exechain.internal import (
    _get_path, 
    file1_newer_file2, 
    exit_with_message, 
    jn_format_with_global,
    JnString
)


_TARGET_POOL: dict = {}


def get_target_by_name(name: str ):
    return _TARGET_POOL[name]


def get_target_names() -> list[str]:
    return list(_TARGET_POOL.keys())


def exec_target(name: str):
    if name not in _TARGET_POOL:
        raise Exception(f"error target '{name}': not found")
    return _TARGET_POOL[name]._invoke(None)


def target_pool() -> dict:
    return _TARGET_POOL


class BaseTool:
    """–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å–ª—É–∂–∏—Ç –º–µ—Ç–∫–æ–π –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - —ç—Ç–æ callable –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É –∫–ª–∞—Å—Å–∞ Target –∏ –µ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤.
    """
    def __init__(self) -> None:
        pass
    
    def _invoke(self, vars: dict = None):
        pass


class Target:
    """
    Target class –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è target. (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–æ–º—É –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–µ–ª–∏ –≤ Makefile).
    
    –ö–∞–∫ –∏ —É make - —É –∫–ª–∞—Å—Å–∞ Target —Ü–µ–ª—å—é —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞. –ò –¥–∞–ª—å—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏.
    –ï—Å–ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–∞–Ω–Ω–∞—è —Ü–µ–ª—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
    –ï—Å–ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–∞–ø —Å–±–æ—Ä–∫–∏ —ç—Ç–æ–π —Ü–µ–ª–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.
    
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É–ª–ª —Ü–µ–ª–µ–π.
    
    Attributes
    ----------
    target : Path | str
        –§–∞–π–ª/–ø–∞–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è —Ü–µ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
        –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É,
        —Å–ø–µ—Ä–≤–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ dependecies –∑–∞—Ç–µ–º recept.
    
    dependencies : list[&quot;callable&quot;]
        –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (recept) –¥–ª—è —Å–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ target.
        –î–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É –¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ (recept).
        
    recept : list[&quot;callable&quot;]
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ target.
    
    target_run_lock : bool
        –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ü–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    
    user_vars : dict
        –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ __init__ –∫–∞–∫ vars.
        
    target_vars : dict
        –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–µ–ª–∏. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ "–∏–º—è —Ü–µ–ª–∏".
    """
    def __init__(self, 
                 target, 
                 dependencies: list["Target"] = None, 
                 recept = None,
                 vars: dict = None) -> None:
        self.target: JnString = JnString(target)
        
        if self.target.raw_string in _TARGET_POOL:
            raise Exception(f"error [target {self.target.raw_string}: already exists]")
        
        self.recept = recept if recept else []
        self.dependencies: list["Target"] = dependencies if dependencies else []
        self.target_run_lock = False
        
        self.user_vars: dict = vars if vars else {}
        self.target_vars = {
            'target': {
                'name': self.target.raw_string
            }
        }
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–ª–µ–π –≤ –ø—É–ª–µ
        _TARGET_POOL[self.target.raw_string] = self
    
    
    def __str__(self) -> str:
        return self.target.raw_string
    
    
    def _is_file(self) -> bool:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≥–æ, —Å—Ç–æ–∏—Ç –ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å —Ü–µ–ª—å—é –∫–∞–∫ —Å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø–∞–ø–∫–æ–π.

        Returns:
            bool: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø–∞–ø–∫–æ–π
        """ 
        return True

    
    def _prepare_invoke_environment(self, parent):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö.
        
        –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–æ _invoke –∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ _invoke –Ω–æ –¥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è.

        Args:
            parent (Target): –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            restore_cache (bool, optional): –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–∫–Ω—Ü–∏–∏. Defaults to False.
        """
        vars_merged: dict = {}
        if parent:
            vars_merged = parent.user_vars.copy()
        vars_merged.update(self.user_vars)
        vars_merged.update(self.target_vars)

        resolved_target_name = self.target.precessed_string(vars_merged)
        
        return {
            'vars_merged': vars_merged,
            'resolved_target_name': resolved_target_name
        }
        
    
    def _invoke(self, parent):
        # TODO: –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —á—Ç–æ —Ü–µ–ª—å –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        environment = self._prepare_invoke_environment(parent)
        vars_merged = environment['vars_merged']
        
        if self.target_run_lock:
            print(f"‚ùï –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ {parent.target.raw_string if parent else '_'} -> {environment['resolved_target_name']}")
            return

        self.target_run_lock = True
        # try:
        def _run_recept():
            print(f"üîπ target [{environment['resolved_target_name']} ({self.target.raw_string})]")
            for cmd in self.recept:
                if isinstance(cmd, BaseTool):
                    if not cmd._invoke(vars_merged):
                        exit_with_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(cmd)}", -1)
                else: 
                    if not cmd(vars_merged):
                        exit_with_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(cmd)}", -1)
        
        def _run_dependencies(dependency_list):
            for dependency in dependency_list:
                dependency._invoke(self)
        
        need_exec, dep_list = self.need_exec_target(environment=environment)
        if need_exec:
            _run_dependencies(dep_list)
            _run_recept()
            
        # except Exception as e:
        #     exit_with_message(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}",  -2)
        self.target_run_lock = False

    
    def need_exec_target(self, parent = None, environment: dict = None):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ü–µ–ª—å –∞ —Ç–∞–∫ –∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

        –í–ê–ñ–ù–û! –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ª–µ–¥—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - parent –ª–∏–±–æ environment. –¢–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –±—É–¥–µ—Ç environment. 
        
        Args:
            parent (Target, optional): –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç. Defaults to None.
            environment (dict, optional): –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É. Defaults to None.

        Returns:
            list: –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞—é—â–µ–µ –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—É—é —Ü–µ–ª—å. 
                –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
        """
        env = None
        if environment:
            env = environment
        else:
            env = self._prepare_invoke_environment(parent)
        
        resolved_target_path = _get_path(env['resolved_target_name'])
        # –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–ª—è –µ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
        if not resolved_target_path.exists():
            return (True, self.dependencies)
        else:
            dependencies_to_run = []
            for dep in self.dependencies:
                dep_env = dep._prepare_invoke_environment(self)
                need_add, _ = dep.need_exec_target(environment=dep_env)
                if need_add:
                    dependencies_to_run.append(dep)
                elif dep._is_file():
                    if file1_newer_file2(dep_env['resolved_target_name'], env['resolved_target_name']):
                        dependencies_to_run.append(dep)
            
            if dependencies_to_run:
                return (True, dependencies_to_run)
        return (False, [])
    

class TargetRef:
    """–ö–ª–∞—Å—Å TargetRef —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ü–µ–ª–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø—É–ª–µ —Ü–µ–ª–µ–π (_TARGET_POOL).
    """
    def __init__(self, target) -> None:
        self.target: JnString = JnString(target)


    def _invoke(self, parent: Target):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏.

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        KeyError
            –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É–ª–µ —Ü–µ–ª–µ–π (_TARGET_POOL), –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        """
        # NOTE: –ï—Å–ª–∏ —Ä–µ–∑–æ–ª–≤–∏—Ç—å –∑–¥–µ—Å—å –∏–º–µ–Ω–∞ —Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 
        # env = {'vars_merged': {}}
        # if parent:
        #     env = parent._prepare_invoke_environment(parent)
            
        # target = self.target.precessed_string(env['vars_merged'])
            
        # if target not in _TARGET_POOL:
        #     raise KeyError(f"not found target '{target}' for TargetRef class")
        
        # TODO: –°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–µ —á–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ª–æ–≤–∞—Ä—é
        return _TARGET_POOL[self.target.raw_string]._invoke(parent)


class ConditionalTarget:
    def __init__(self, condition, callable_if_true = None, callable_if_false = None):
        self.callable_if_true = callable_if_true
        self.callable_if_false = callable_if_false
        self.condition = condition

    def _invoke(self, parent):
        res = None
        if isinstance(self.condition, callable):
            res = self.condition()
        else:
            res = self.condition
        
        def _invoker(obj):
            if callable(obj):
                if parent:
                    obj(parent.vars_merged)
                else:
                    obj(parent)
            else:
                obj._invoke(parent)
        
        if res:
            if self.callable_if_true is not None:
                _invoker(self.callable_if_true)
        else:
            if self.callable_if_false is not None:
                _invoker(self.callable_if_false)
        
        return True


class TargetShellContains(Target):
    def __init__(self, 
                 target: Path, 
                 check_command: str, 
                 dependencies: list = None, 
                 recept: list = None, 
                 _not: bool = False) -> None:
        super().__init__(target, dependencies, recept)
        self.check_command: JnString = JnString(check_command)
        self._not = _not
    
    
    def _is_file(self) -> bool:
        return False
    

    def need_exec_target(self, parent = None, environment: dict = None) -> bool:
        env = None
        if environment:
            env = environment
        else:
            env = self._prepare_invoke_environment(parent)
        
        check_command = self.check_command.precessed_string(env['vars_merged'])
        result = subprocess.run(
            check_command, 
            shell=True,
            check=True,
            text=True,
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE
        )
        output_contains_target =  env['resolved_target_name'] not in result.stdout
        if self._not:
            output_contains_target = not output_contains_target
        
        if not output_contains_target:
            return (True, self.dependencies)
        
        deep_to_update = []
        for dep in self.dependencies:
            if dep.need_exec_target(parent=self):
                deep_to_update.append(dep)
        
        if not dep:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ –∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —ç—Ç—É —Ü–µ–ª—å (—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
            self.exec_cond_cache = (False, [])
        else:
            self.exec_cond_cache = (True, deep_to_update)

        return self.exec_cond_cache


class TargetFileWithLine(Target):
    def __init__(self, target: Path, search_line: str, dependencies: list = [], recept: list = []) -> None:
        super().__init__(target, dependencies, recept)
        self.search_line: JnString = JnString(search_line)
        
    def need_exec_target(self, parent = None, environment: dict = None) -> bool:
        env = None
        if environment:
            env = environment
        else:
            env = self._prepare_invoke_environment(parent)
        
        search_line = self.search_line._processed_cache(env['vars_merged'])
        
        with open(env['resolved_target_name'], 'r', encoding='utf-8') as file:
            for line in file:
                if search_line in line:
                    return True
        return False


def make_targets_for_files(root_folder, pattern: str, max_depth: int = -1):
    root_folder = jn_format_with_global(root_folder, {})
    pattern = jn_format_with_global(pattern, {})
    
    target_list = []
    
    def recursive_search(current_folder, current_depth):
        if current_depth > max_depth and max_depth > 0:
            return
        
        for entry in os.listdir(current_folder):
            path = os.path.join(current_folder, entry)
            
            if os.path.isdir(path):
                recursive_search(path, current_depth + 1)
            elif os.path.isfile(path) and fnmatch.fnmatch(entry, pattern):
                # target = path
                target_list.append(Target(path))
    
    recursive_search(root_folder, 0)
    return target_list


# class GlobTarget:
#     def __init__(self, 
#                  target, 
#                  file_pattern,
#                  depth: int = -1,
#                  dependency: list["callable"] =[], 
#                  recept: list["callable"] = [],
#                  first_detect_checking: bool = True) -> None:
        
#         self.target = _get_path(target)
#         self.pattern = file_pattern
#         self.dependency = dependency
#         self.recept = recept

#         self._invoke(None)
        
    
#     def _invoke(self, parent: Target):
#         target = jn_format_with_global(self.target, parent.vars_merged)
        
#         fpath = str(self.target / self.pattern)
#         files = glob.glob(fpath)
#         if not files:
#             raise Exception(f"error target '{str(self.target)}' pattern '{fpath}' ({self.pattern}): not found files")

#         if self.suffix:
#             suffixed = []
#             for file in files:
#                 suffixed.append(
#                     Target(f"{file}{self.suffix}", dependencies=[
#                         Target(file, dependencies=self.dependency, recept=self.recept)
#                     ])
#                 )
                
#             Target(self.target, dependencies=suffixed)
#         else:
#             Target(self.target, dependencies=[Target(file if not self.suffix else f"{file}{self.suffix}", dependencies=self.dependency, recept=self.recept) for file in files])


def add_folder_to_path(folder):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PATH. 
    
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PATH –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π folder. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç –ª–∏—à—å —Ç–∏–ø dict:
    –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∏–ø–∞ dict –æ–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–º–µ—Ç—Ä —Å –∫–ª—é—á–µ–º 'target@name',
    –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø—É—Ç—å.
    
    Args:
        folder (Path | str | dict | list): –ü—É—Ç—å –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å
    
    Raises:
        Exception: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    """
    folders_list = []
    if isinstance(folder, str) or isinstance(folder, Path):
        folders_list = [str(folder)]
    elif isinstance(folder, list):
        folders_list = [str(f) for f in folder]
    else:
        raise Exception(f"Unsupported type on variable 'folder': {folder}")
    
    tmp_path = os.environ.get("PATH")
    for folder in folders_list:
        if folder in tmp_path:
            continue
        tmp_path = f"{folder}{os.pathsep}{tmp_path}"

    os.environ["PATH"] = tmp_path
