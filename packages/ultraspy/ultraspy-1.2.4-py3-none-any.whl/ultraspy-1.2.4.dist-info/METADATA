Metadata-Version: 2.1
Name: ultraspy
Version: 1.2.4
Summary: Ultrasound toolbox for GPU
Home-page: https://gitlab.com/pecarlat/ultraspy
Author: Pierre Ecarlat, Fabien Millioz
Author-email: pierre.ecarlat@gmail.com, fabien.millioz@univ-lyon1.fr
Project-URL: Documentation, https://ultraspy.readthedocs.io/en/latest/
Project-URL: Bug Tracker, https://gitlab.com/pecarlat/ultraspy/-/issues/
Keywords: ultrasound,python,beamforming,doppler
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: scipy >=1.10.1
Requires-Dist: matplotlib >=3.6.3
Requires-Dist: easydict >=1.10
Requires-Dist: numba >=0.56.4
Requires-Dist: h5py >=3.8.0
Requires-Dist: py7zr >=0.20.5

What is ultraspy?
-----------------
Ultraspy is a package designed to efficiently manipulate ultrasound data using
GPU. The most common beamforming or Doppler methods are implemented (such as
DAS, RF to I/Qs, Color/Power Doppler, ...), along with some state-of-the-art
methods (Capon beamforming, Vector Doppler, alias-free Doppler velocity, ...).
A set of metrics (PSL, FWHM, SNR) is also provided so anyone can validate the
quality of their ultrasound data and beamforming operations.

The package is designed to work with both RF and I/Q signals, in 2D or 3D, and
with any type of probe (linear, convex, or matrix). The core code can run both
on CPU and GPU, making it ideal for any real-time application. All beamforming
parameters (f-number, compounding, apodizationâ€¦) can be freely customized at
any time for research purposes.

The package has been thought to be as flexible as possible, so that anyone
could eventually clone it and add its own research methods and test it in real
time. A set of tutorials is provided to facilitate user learning and adoption,
along with some instruction on how to contribute to the lib if you feel like
your research method should be added to help the community.


Features
========
- General beamforming methods, flexible to Radio-Frequency or In-phase
  Quadrature data, working on CPU and GPU. Mainly DAS and FDMAS for the
  plane-wave imaging, but also TFM for Beam Focusing imaging

- Advanced beamforming methods (p-DAS or Capon), with a dedicated tutorial to
  understand how these are implemented and how to implement your own methods

- Basic Doppler methods (Color and Power maps), and their dedicated utilities
  functions (matched filtering, RF to I/Qs conversion)

- Advanced Doppler methods, such as a proposition for alias-free alias-free
  Doppler velocities (using dual-wavelength method). This still lacks of
  methods, and should include Vector Doppler or so in future releases

- Basic metrics for evaluation of the data quality (SNR), or of our beamforming
  algorithms (FWHM, PSL, CNR)


Documentation
=============
Full documentation can be found in the 'docs' folder, and is also available at
https://ultraspy.readthedocs.io/en/latest. You will find there all the detailed
information about how to install ultraspy and how to use it.


Installation
============
Installation can be easily done using pypi:

.. code-block:: console

    $ pip install ultraspy

Also, if you want to run it on GPU, you need to install the proper version of
`cupy` based on your CUDA version:

.. code-block:: console

    $ pip install cupy-cudaXXx


Contribute
==========

- Issue Tracker: https://gitlab.com/pecarlat/ultraspy/-/issues/

- Source Code: https://gitlab.com/pecarlat/ultraspy

- Documentation: https://ultraspy.readthedocs.io/en/latest


License
=======
The project is under the MIT license.
