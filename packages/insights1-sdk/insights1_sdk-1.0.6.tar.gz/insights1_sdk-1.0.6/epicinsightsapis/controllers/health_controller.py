# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.configuration import Server
from epicinsightsapis.controllers.base_controller import BaseController
from epicinsightsapis.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from epicinsightsapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from epicinsightsapis.exceptions.api_exception import APIException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_devices_health_401_error_exception import InsightsApiV1OrgsDevicesHealth401ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_devices_health_403_error_exception import InsightsApiV1OrgsDevicesHealth403ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_devices_health_404_error_exception import InsightsApiV1OrgsDevicesHealth404ErrorException


class HealthController(BaseController):

    """A Controller to access Endpoints in the epicinsightsapis API."""
    def __init__(self, config):
        super(HealthController, self).__init__(config)

    def returns_a_device_s_health_details(self,
                                          device_id,
                                          org_id,
                                          mtype):
        """Does a GET request to /insights/api/v1/orgs/{org_id}/devices/{device_id}/health.

        Return health status based on the type (hardware, interface or
        routing)

        Args:
            device_id (str): MAC Address of the device
            org_id (str): `org-id` of the device
            mtype (str): Specifies the domain (hardware, interface or routing)
                for which health needs to retrieved for the device. By default
                health of all domains are retrieved.

        Returns:
            Hardware | Interface | Routing: Response from the API. Returns the
                health of the device based on the type set in query
                parameters

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/devices/{device_id}/health')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('ReturnsADeviceSHealthDetailsResponse'), value))
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsDevicesHealth401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsDevicesHealth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsDevicesHealth404ErrorException)
        ).execute()
