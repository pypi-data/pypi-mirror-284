# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.configuration import Server
from epicinsightsapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from epicinsightsapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from epicinsightsapis.models.alerts_response import AlertsResponse
from epicinsightsapis.models.alert_response import AlertResponse
from epicinsightsapis.models.alert_action_response import AlertActionResponse
from epicinsightsapis.models.alert_count import AlertCount
from epicinsightsapis.exceptions.api_exception import APIException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_401_error_exception import InsightsApiV1OrgsHealthAlerts401ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_403_error_exception import InsightsApiV1OrgsHealthAlerts403ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_404_error_exception import InsightsApiV1OrgsHealthAlerts404ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_401_error_exception import InsightsApiV1OrgsHealthAlert401ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_403_error_exception import InsightsApiV1OrgsHealthAlert403ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_404_error_exception import InsightsApiV1OrgsHealthAlert404ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_action_401_error_exception import InsightsApiV1OrgsHealthAlertAction401ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_action_403_error_exception import InsightsApiV1OrgsHealthAlertAction403ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alert_action_404_error_exception import InsightsApiV1OrgsHealthAlertAction404ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_count_401_error_exception import InsightsApiV1OrgsHealthAlertsCount401ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_count_403_error_exception import InsightsApiV1OrgsHealthAlertsCount403ErrorException
from epicinsightsapis.exceptions.insights_api_v_1_orgs_health_alerts_count_404_error_exception import InsightsApiV1OrgsHealthAlertsCount404ErrorException


class AlertaController(BaseController):

    """A Controller to access Endpoints in the epicinsightsapis API."""
    def __init__(self, config):
        super(AlertaController, self).__init__(config)

    def returns_a_list_of_alerts_per_org(self,
                                         org_id,
                                         event=None,
                                         from_date=None,
                                         to_date=None,
                                         resource=None,
                                         severity=None,
                                         status=None,
                                         text=None):
        """Does a GET request to /insights/api/v1/orgs/{org_id}/health/alerts.

        The API returns a list of all alerts for the specified org. The API
        also supports pagination to fetch a specific number of alerts per
        request

        Args:
            org_id (str): `org-id` to fetch the alerts for the org
            event (str, optional): Event name, can be used to fetch alerts by
                wildcard(~) of Rule, Trigger etc.
            from_date (str, optional): The datetime (ISO 8601 format) from
                when the alerts need to be fetched
            to_date (str, optional): The datetime (ISO 8601 format) until when
                the alerts need to be fetched
            resource (str, optional): Resource under alert
            severity (SeverityEnum, optional): Severity of alert
            status (Status1Enum, optional): Status of alert
            text (str, optional): Text describing alert

        Returns:
            AlertsResponse: Response from the API. Returns the list of alerts
                for a specific org

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/health/alerts')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('event')
                         .value(event))
            .query_param(Parameter()
                         .key('from-date')
                         .value(from_date))
            .query_param(Parameter()
                         .key('to-date')
                         .value(to_date))
            .query_param(Parameter()
                         .key('resource')
                         .value(resource))
            .query_param(Parameter()
                         .key('severity')
                         .value(severity))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('text')
                         .value(text))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlertsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsHealthAlerts401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsHealthAlerts403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsHealthAlerts404ErrorException)
        ).execute()

    def returns_alert_with_provided_alert_id(self,
                                             org_id,
                                             alert_id):
        """Does a GET request to /insights/api/v1/orgs/{org_id}/health/alert/{alert_id}.

        Fetches the details of a particular alert with the provided alert ID

        Args:
            org_id (str): `org-id` to fetch the alerts for the org
            alert_id (str): `alert-id` of the alert

        Returns:
            AlertResponse: Response from the API. Alert details for the given
                alert ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/health/alert/{alert_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('alert_id')
                            .value(alert_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlertResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsHealthAlert401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsHealthAlert403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsHealthAlert404ErrorException)
        ).execute()

    def deletes_the_alert_with_provided_alert_id(self,
                                                 org_id,
                                                 alert_id):
        """Does a DELETE request to /insights/api/v1/orgs/{org_id}/health/alert/{alert_id}.

        Deletes the alert with the provided alert ID for a specific org

        Args:
            org_id (str): `org-id` to fetch the alerts for the org
            alert_id (str): `alert-id` of the alert

        Returns:
            AlertActionResponse: Response from the API. Deletes the alert with
                provided alert ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/health/alert/{alert_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('alert_id')
                            .value(alert_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlertActionResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsHealthAlert401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsHealthAlert403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsHealthAlert404ErrorException)
        ).execute()

    def update_alert_to_change_the_status_to_open_close_shelve_or_ack(self,
                                                                      org_id,
                                                                      alert_id,
                                                                      body):
        """Does a PUT request to /insights/api/v1/orgs/{org_id}/health/alert/{alert_id}/action.

        This API allows the use to update the alert and change the alert
        status to open, close, shelve, ack, or unack.

        Args:
            org_id (str): `org-id` to fetch the alerts for the org
            alert_id (str): `alert-id` of the alert
            body (AlertActionPostBody): Alert action request body

        Returns:
            AlertActionResponse: Response from the API. Returns the status of
                the query for open, close, shelve, ack or unack

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/health/alert/{alert_id}/action')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('alert_id')
                            .value(alert_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlertActionResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsHealthAlertAction401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsHealthAlertAction403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsHealthAlertAction404ErrorException)
        ).execute()

    def returns_the_count_of_alerts_in_the_org(self,
                                               org_id,
                                               event=None,
                                               from_date=None,
                                               to_date=None,
                                               resource=None,
                                               severity=None,
                                               status=None,
                                               text=None):
        """Does a GET request to /insights/api/v1/orgs/{org_id}/health/alerts/count.

        This API returns the total count of alerts in the specified org along
        with details for each category such as critical, minor or normal.

        Args:
            org_id (str): `org-id` of device
            event (str, optional): Event name, can be used to fetch alerts by
                wildcard(~) of Rule, Trigger etc.
            from_date (str, optional): The datetime (ISO 8601 format) from
                when the alerts need to be fetched
            to_date (str, optional): The datetime (ISO 8601 format) until when
                the alerts need to be fetched
            resource (str, optional): Resource under alert
            severity (SeverityEnum, optional): Severity of alert
            status (Status1Enum, optional): Status of alert
            text (str, optional): Text describing alert

        Returns:
            AlertCount: Response from the API. Returns the count of alerts for
                the org

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/api/v1/orgs/{org_id}/health/alerts/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('event')
                         .value(event))
            .query_param(Parameter()
                         .key('from-date')
                         .value(from_date))
            .query_param(Parameter()
                         .key('to-date')
                         .value(to_date))
            .query_param(Parameter()
                         .key('resource')
                         .value(resource))
            .query_param(Parameter()
                         .key('severity')
                         .value(severity))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('text')
                         .value(text))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlertCount.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', InsightsApiV1OrgsHealthAlertsCount401ErrorException)
            .local_error('403', 'Permission Denied', InsightsApiV1OrgsHealthAlertsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', InsightsApiV1OrgsHealthAlertsCount404ErrorException)
        ).execute()
