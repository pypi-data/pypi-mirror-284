# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.result import Result


class Data(object):

    """Implementation of the 'Data' model.

    Response data for the query.

    Attributes:
        result_type (ResultTypeEnum): Type of the result. It can only be
            `matrix`.
        result (List[Result]): List of response data, one per series.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "result_type": 'resultType',
        "result": 'result'
    }

    _optionals = [
        'result_type',
        'result',
    ]

    def __init__(self,
                 result_type=APIHelper.SKIP,
                 result=APIHelper.SKIP):
        """Constructor for the Data class"""

        # Initialize members of the class
        if result_type is not APIHelper.SKIP:
            self.result_type = result_type 
        if result is not APIHelper.SKIP:
            self.result = result 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        result_type = dictionary.get("resultType") if dictionary.get("resultType") else APIHelper.SKIP
        result = None
        if dictionary.get('result') is not None:
            result = [Result.from_dictionary(x) for x in dictionary.get('result')]
        else:
            result = APIHelper.SKIP
        # Return an object of this model
        return cls(result_type,
                   result)
