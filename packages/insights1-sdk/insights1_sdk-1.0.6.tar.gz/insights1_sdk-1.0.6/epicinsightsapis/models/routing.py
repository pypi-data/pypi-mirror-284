# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.bgp import Bgp
from epicinsightsapis.models.fib import Fib
from epicinsightsapis.models.igp import Igp
from epicinsightsapis.models.ldp import Ldp
from epicinsightsapis.models.lsp import Lsp
from epicinsightsapis.models.rib import Rib
from epicinsightsapis.models.rsvp import Rsvp


class Routing(object):

    """Implementation of the 'routing' model.

    TODO: type model description here.

    Attributes:
        bgp (Bgp): TODO: type description here.
        igp (Igp): TODO: type description here.
        rsvp (Rsvp): TODO: type description here.
        ldp (Ldp): TODO: type description here.
        lsp (Lsp): TODO: type description here.
        rib (Rib): TODO: type description here.
        fib (Fib): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bgp": 'bgp',
        "igp": 'igp',
        "rsvp": 'rsvp',
        "ldp": 'ldp',
        "lsp": 'lsp',
        "rib": 'rib',
        "fib": 'fib'
    }

    _optionals = [
        'bgp',
        'igp',
        'rsvp',
        'ldp',
        'lsp',
        'rib',
        'fib',
    ]

    def __init__(self,
                 bgp=APIHelper.SKIP,
                 igp=APIHelper.SKIP,
                 rsvp=APIHelper.SKIP,
                 ldp=APIHelper.SKIP,
                 lsp=APIHelper.SKIP,
                 rib=APIHelper.SKIP,
                 fib=APIHelper.SKIP):
        """Constructor for the Routing class"""

        # Initialize members of the class
        if bgp is not APIHelper.SKIP:
            self.bgp = bgp 
        if igp is not APIHelper.SKIP:
            self.igp = igp 
        if rsvp is not APIHelper.SKIP:
            self.rsvp = rsvp 
        if ldp is not APIHelper.SKIP:
            self.ldp = ldp 
        if lsp is not APIHelper.SKIP:
            self.lsp = lsp 
        if rib is not APIHelper.SKIP:
            self.rib = rib 
        if fib is not APIHelper.SKIP:
            self.fib = fib 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bgp = Bgp.from_dictionary(dictionary.get('bgp')) if 'bgp' in dictionary.keys() else APIHelper.SKIP
        igp = Igp.from_dictionary(dictionary.get('igp')) if 'igp' in dictionary.keys() else APIHelper.SKIP
        rsvp = Rsvp.from_dictionary(dictionary.get('rsvp')) if 'rsvp' in dictionary.keys() else APIHelper.SKIP
        ldp = Ldp.from_dictionary(dictionary.get('ldp')) if 'ldp' in dictionary.keys() else APIHelper.SKIP
        lsp = Lsp.from_dictionary(dictionary.get('lsp')) if 'lsp' in dictionary.keys() else APIHelper.SKIP
        rib = Rib.from_dictionary(dictionary.get('rib')) if 'rib' in dictionary.keys() else APIHelper.SKIP
        fib = Fib.from_dictionary(dictionary.get('fib')) if 'fib' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bgp,
                   igp,
                   rsvp,
                   ldp,
                   lsp,
                   rib,
                   fib)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
