# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.alert import Alert
from epicinsightsapis.models.severity_counts import SeverityCounts
from epicinsightsapis.models.status_counts import StatusCounts


class AlertsResponse(object):

    """Implementation of the 'alertsResponse' model.

    TODO: type model description here.

    Attributes:
        alerts (List[Alert]): TODO: type description here.
        auto_refresh (bool): TODO: type description here.
        last_time (datetime): TODO: type description here.
        more (bool): TODO: type description here.
        page (int): TODO: type description here.
        page_size (int): TODO: type description here.
        pages (int): TODO: type description here.
        severity_counts (SeverityCounts): TODO: type description here.
        status (str): TODO: type description here.
        status_counts (StatusCounts): TODO: type description here.
        total (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alerts": 'alerts',
        "auto_refresh": 'autoRefresh',
        "last_time": 'lastTime',
        "more": 'more',
        "page": 'page',
        "page_size": 'pageSize',
        "pages": 'pages',
        "severity_counts": 'severityCounts',
        "status": 'status',
        "status_counts": 'statusCounts',
        "total": 'total'
    }

    _optionals = [
        'alerts',
        'auto_refresh',
        'last_time',
        'more',
        'page',
        'page_size',
        'pages',
        'severity_counts',
        'status',
        'status_counts',
        'total',
    ]

    def __init__(self,
                 alerts=APIHelper.SKIP,
                 auto_refresh=APIHelper.SKIP,
                 last_time=APIHelper.SKIP,
                 more=APIHelper.SKIP,
                 page=APIHelper.SKIP,
                 page_size=APIHelper.SKIP,
                 pages=APIHelper.SKIP,
                 severity_counts=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_counts=APIHelper.SKIP,
                 total=APIHelper.SKIP):
        """Constructor for the AlertsResponse class"""

        # Initialize members of the class
        if alerts is not APIHelper.SKIP:
            self.alerts = alerts 
        if auto_refresh is not APIHelper.SKIP:
            self.auto_refresh = auto_refresh 
        if last_time is not APIHelper.SKIP:
            self.last_time = APIHelper.apply_datetime_converter(last_time, APIHelper.RFC3339DateTime) if last_time else None 
        if more is not APIHelper.SKIP:
            self.more = more 
        if page is not APIHelper.SKIP:
            self.page = page 
        if page_size is not APIHelper.SKIP:
            self.page_size = page_size 
        if pages is not APIHelper.SKIP:
            self.pages = pages 
        if severity_counts is not APIHelper.SKIP:
            self.severity_counts = severity_counts 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_counts is not APIHelper.SKIP:
            self.status_counts = status_counts 
        if total is not APIHelper.SKIP:
            self.total = total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        alerts = None
        if dictionary.get('alerts') is not None:
            alerts = [Alert.from_dictionary(x) for x in dictionary.get('alerts')]
        else:
            alerts = APIHelper.SKIP
        auto_refresh = dictionary.get("autoRefresh") if "autoRefresh" in dictionary.keys() else APIHelper.SKIP
        last_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastTime")).datetime if dictionary.get("lastTime") else APIHelper.SKIP
        more = dictionary.get("more") if "more" in dictionary.keys() else APIHelper.SKIP
        page = dictionary.get("page") if dictionary.get("page") else APIHelper.SKIP
        page_size = dictionary.get("pageSize") if dictionary.get("pageSize") else APIHelper.SKIP
        pages = dictionary.get("pages") if dictionary.get("pages") else APIHelper.SKIP
        severity_counts = SeverityCounts.from_dictionary(dictionary.get('severityCounts')) if 'severityCounts' in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_counts = StatusCounts.from_dictionary(dictionary.get('statusCounts')) if 'statusCounts' in dictionary.keys() else APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        # Return an object of this model
        return cls(alerts,
                   auto_refresh,
                   last_time,
                   more,
                   page,
                   page_size,
                   pages,
                   severity_counts,
                   status,
                   status_counts,
                   total)
