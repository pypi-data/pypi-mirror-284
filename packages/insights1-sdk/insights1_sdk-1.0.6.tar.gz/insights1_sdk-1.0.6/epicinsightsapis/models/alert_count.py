# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.severity_counts_1 import SeverityCounts1
from epicinsightsapis.models.status_counts_1 import StatusCounts1


class AlertCount(object):

    """Implementation of the 'alertCount' model.

    TODO: type model description here.

    Attributes:
        severity_counts (SeverityCounts1): Provides the count of alerts per
            severity level
        status (str): Provides the status of the query
        status_counts (StatusCounts1): TODO: type description here.
        total (int): total count

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "severity_counts": 'severityCounts',
        "status": 'status',
        "status_counts": 'statusCounts',
        "total": 'total'
    }

    _optionals = [
        'severity_counts',
        'status',
        'status_counts',
        'total',
    ]

    def __init__(self,
                 severity_counts=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_counts=APIHelper.SKIP,
                 total=APIHelper.SKIP):
        """Constructor for the AlertCount class"""

        # Initialize members of the class
        if severity_counts is not APIHelper.SKIP:
            self.severity_counts = severity_counts 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_counts is not APIHelper.SKIP:
            self.status_counts = status_counts 
        if total is not APIHelper.SKIP:
            self.total = total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        severity_counts = SeverityCounts1.from_dictionary(dictionary.get('severityCounts')) if 'severityCounts' in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_counts = StatusCounts1.from_dictionary(dictionary.get('statusCounts')) if 'statusCounts' in dictionary.keys() else APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        # Return an object of this model
        return cls(severity_counts,
                   status,
                   status_counts,
                   total)
