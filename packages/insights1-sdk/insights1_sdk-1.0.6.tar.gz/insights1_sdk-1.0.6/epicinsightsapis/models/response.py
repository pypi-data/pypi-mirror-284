# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.data import Data


class Response(object):

    """Implementation of the 'Response' model.

    TODO: type model description here.

    Attributes:
        status (StatusEnum): Status of the query.
        is_partial (bool): Whether the response contains only partial data.
        error (str): Error string.
        error_type (str): Error status code.
        data (Data): Response data for the query.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "is_partial": 'isPartial',
        "error": 'error',
        "error_type": 'errorType',
        "data": 'data'
    }

    _optionals = [
        'status',
        'is_partial',
        'error',
        'error_type',
        'data',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 is_partial=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 error_type=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the Response class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if is_partial is not APIHelper.SKIP:
            self.is_partial = is_partial 
        if error is not APIHelper.SKIP:
            self.error = error 
        if error_type is not APIHelper.SKIP:
            self.error_type = error_type 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        is_partial = dictionary.get("isPartial") if "isPartial" in dictionary.keys() else APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        error_type = dictionary.get("errorType") if dictionary.get("errorType") else APIHelper.SKIP
        data = Data.from_dictionary(dictionary.get('data')) if 'data' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   is_partial,
                   error,
                   error_type,
                   data)
