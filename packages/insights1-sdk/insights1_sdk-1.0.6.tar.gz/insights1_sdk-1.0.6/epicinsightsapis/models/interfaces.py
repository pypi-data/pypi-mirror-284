# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper


class Interfaces(object):

    """Implementation of the 'Interfaces' model.

    TODO: type model description here.

    Attributes:
        available (int): available devices
        flapping (int): flapping devices
        down_units (List[str]): names of down devices
        down (int): down devices
        flapping_units (List[str]): names of flapping components
        no_data (bool): flag to indicate the presence of data
        flapping_severity_data (object): TODO: type description here.
        flapping_trigger_severity (object): TODO: type description here.
        down_severity_data (object): TODO: type description here.
        down_trigger_severity (object): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "available": 'available',
        "flapping": 'flapping',
        "down_units": 'down_units',
        "down": 'down',
        "flapping_units": 'flapping_units',
        "no_data": 'no_data',
        "flapping_severity_data": 'flapping_severity_data',
        "flapping_trigger_severity": 'flapping_trigger_severity',
        "down_severity_data": 'down_severity_data',
        "down_trigger_severity": 'down_trigger_severity'
    }

    _optionals = [
        'available',
        'flapping',
        'down_units',
        'down',
        'flapping_units',
        'no_data',
        'flapping_severity_data',
        'flapping_trigger_severity',
        'down_severity_data',
        'down_trigger_severity',
    ]

    def __init__(self,
                 available=APIHelper.SKIP,
                 flapping=APIHelper.SKIP,
                 down_units=APIHelper.SKIP,
                 down=APIHelper.SKIP,
                 flapping_units=APIHelper.SKIP,
                 no_data=APIHelper.SKIP,
                 flapping_severity_data=APIHelper.SKIP,
                 flapping_trigger_severity=APIHelper.SKIP,
                 down_severity_data=APIHelper.SKIP,
                 down_trigger_severity=APIHelper.SKIP):
        """Constructor for the Interfaces class"""

        # Initialize members of the class
        if available is not APIHelper.SKIP:
            self.available = available 
        if flapping is not APIHelper.SKIP:
            self.flapping = flapping 
        if down_units is not APIHelper.SKIP:
            self.down_units = down_units 
        if down is not APIHelper.SKIP:
            self.down = down 
        if flapping_units is not APIHelper.SKIP:
            self.flapping_units = flapping_units 
        if no_data is not APIHelper.SKIP:
            self.no_data = no_data 
        if flapping_severity_data is not APIHelper.SKIP:
            self.flapping_severity_data = flapping_severity_data 
        if flapping_trigger_severity is not APIHelper.SKIP:
            self.flapping_trigger_severity = flapping_trigger_severity 
        if down_severity_data is not APIHelper.SKIP:
            self.down_severity_data = down_severity_data 
        if down_trigger_severity is not APIHelper.SKIP:
            self.down_trigger_severity = down_trigger_severity 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        available = dictionary.get("available") if dictionary.get("available") else APIHelper.SKIP
        flapping = dictionary.get("flapping") if dictionary.get("flapping") else APIHelper.SKIP
        down_units = dictionary.get("down_units") if dictionary.get("down_units") else APIHelper.SKIP
        down = dictionary.get("down") if dictionary.get("down") else APIHelper.SKIP
        flapping_units = dictionary.get("flapping_units") if dictionary.get("flapping_units") else APIHelper.SKIP
        no_data = dictionary.get("no_data") if "no_data" in dictionary.keys() else APIHelper.SKIP
        flapping_severity_data = dictionary.get("flapping_severity_data") if dictionary.get("flapping_severity_data") else APIHelper.SKIP
        flapping_trigger_severity = dictionary.get("flapping_trigger_severity") if dictionary.get("flapping_trigger_severity") else APIHelper.SKIP
        down_severity_data = dictionary.get("down_severity_data") if dictionary.get("down_severity_data") else APIHelper.SKIP
        down_trigger_severity = dictionary.get("down_trigger_severity") if dictionary.get("down_trigger_severity") else APIHelper.SKIP
        # Return an object of this model
        return cls(available,
                   flapping,
                   down_units,
                   down,
                   flapping_units,
                   no_data,
                   flapping_severity_data,
                   flapping_trigger_severity,
                   down_severity_data,
                   down_trigger_severity)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
