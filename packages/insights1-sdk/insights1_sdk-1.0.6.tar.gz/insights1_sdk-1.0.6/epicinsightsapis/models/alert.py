# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.attributes import Attributes
from epicinsightsapis.models.history import History


class Alert(object):

    """Implementation of the 'Alert' model.

    TODO: type model description here.

    Attributes:
        attributes (Attributes): TODO: type description here.
        correlate (List[object]): TODO: type description here.
        create_time (datetime): TODO: type description here.
        customer (str): TODO: type description here.
        duplicate_count (int): TODO: type description here.
        environment (str): TODO: type description here.
        event (str): TODO: type description here.
        group (str): TODO: type description here.
        history (List[History]): TODO: type description here.
        href (str): TODO: type description here.
        id (str): TODO: type description here.
        last_receive_id (str): TODO: type description here.
        last_receive_time (datetime): TODO: type description here.
        origin (str): TODO: type description here.
        previous_severity (str): TODO: type description here.
        raw_data (str): TODO: type description here.
        receive_time (datetime): TODO: type description here.
        repeat (bool): TODO: type description here.
        resource (str): TODO: type description here.
        service (List[str]): TODO: type description here.
        severity (str): TODO: type description here.
        status (str): TODO: type description here.
        tags (List[object]): TODO: type description here.
        text (str): TODO: type description here.
        timeout (int): TODO: type description here.
        trend_indication (str): TODO: type description here.
        mtype (str): TODO: type description here.
        value (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "attributes": 'attributes',
        "correlate": 'correlate',
        "create_time": 'createTime',
        "customer": 'customer',
        "duplicate_count": 'duplicateCount',
        "environment": 'environment',
        "event": 'event',
        "group": 'group',
        "history": 'history',
        "href": 'href',
        "id": 'id',
        "last_receive_id": 'lastReceiveId',
        "last_receive_time": 'lastReceiveTime',
        "origin": 'origin',
        "previous_severity": 'previousSeverity',
        "raw_data": 'rawData',
        "receive_time": 'receiveTime',
        "repeat": 'repeat',
        "resource": 'resource',
        "service": 'service',
        "severity": 'severity',
        "status": 'status',
        "tags": 'tags',
        "text": 'text',
        "timeout": 'timeout',
        "trend_indication": 'trendIndication',
        "mtype": 'type',
        "value": 'value'
    }

    _optionals = [
        'attributes',
        'correlate',
        'create_time',
        'customer',
        'duplicate_count',
        'environment',
        'event',
        'group',
        'history',
        'href',
        'id',
        'last_receive_id',
        'last_receive_time',
        'origin',
        'previous_severity',
        'raw_data',
        'receive_time',
        'repeat',
        'resource',
        'service',
        'severity',
        'status',
        'tags',
        'text',
        'timeout',
        'trend_indication',
        'mtype',
        'value',
    ]

    def __init__(self,
                 attributes=APIHelper.SKIP,
                 correlate=APIHelper.SKIP,
                 create_time=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 duplicate_count=APIHelper.SKIP,
                 environment=APIHelper.SKIP,
                 event=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 history=APIHelper.SKIP,
                 href=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 last_receive_id=APIHelper.SKIP,
                 last_receive_time=APIHelper.SKIP,
                 origin=APIHelper.SKIP,
                 previous_severity=APIHelper.SKIP,
                 raw_data=APIHelper.SKIP,
                 receive_time=APIHelper.SKIP,
                 repeat=APIHelper.SKIP,
                 resource=APIHelper.SKIP,
                 service=APIHelper.SKIP,
                 severity=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 tags=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 timeout=APIHelper.SKIP,
                 trend_indication=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 value=APIHelper.SKIP):
        """Constructor for the Alert class"""

        # Initialize members of the class
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 
        if correlate is not APIHelper.SKIP:
            self.correlate = correlate 
        if create_time is not APIHelper.SKIP:
            self.create_time = APIHelper.apply_datetime_converter(create_time, APIHelper.RFC3339DateTime) if create_time else None 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        if duplicate_count is not APIHelper.SKIP:
            self.duplicate_count = duplicate_count 
        if environment is not APIHelper.SKIP:
            self.environment = environment 
        if event is not APIHelper.SKIP:
            self.event = event 
        if group is not APIHelper.SKIP:
            self.group = group 
        if history is not APIHelper.SKIP:
            self.history = history 
        if href is not APIHelper.SKIP:
            self.href = href 
        if id is not APIHelper.SKIP:
            self.id = id 
        if last_receive_id is not APIHelper.SKIP:
            self.last_receive_id = last_receive_id 
        if last_receive_time is not APIHelper.SKIP:
            self.last_receive_time = APIHelper.apply_datetime_converter(last_receive_time, APIHelper.RFC3339DateTime) if last_receive_time else None 
        if origin is not APIHelper.SKIP:
            self.origin = origin 
        if previous_severity is not APIHelper.SKIP:
            self.previous_severity = previous_severity 
        if raw_data is not APIHelper.SKIP:
            self.raw_data = raw_data 
        if receive_time is not APIHelper.SKIP:
            self.receive_time = APIHelper.apply_datetime_converter(receive_time, APIHelper.RFC3339DateTime) if receive_time else None 
        if repeat is not APIHelper.SKIP:
            self.repeat = repeat 
        if resource is not APIHelper.SKIP:
            self.resource = resource 
        if service is not APIHelper.SKIP:
            self.service = service 
        if severity is not APIHelper.SKIP:
            self.severity = severity 
        if status is not APIHelper.SKIP:
            self.status = status 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        if text is not APIHelper.SKIP:
            self.text = text 
        if timeout is not APIHelper.SKIP:
            self.timeout = timeout 
        if trend_indication is not APIHelper.SKIP:
            self.trend_indication = trend_indication 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if value is not APIHelper.SKIP:
            self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        attributes = Attributes.from_dictionary(dictionary.get('attributes')) if 'attributes' in dictionary.keys() else APIHelper.SKIP
        correlate = dictionary.get("correlate") if dictionary.get("correlate") else APIHelper.SKIP
        create_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("createTime")).datetime if dictionary.get("createTime") else APIHelper.SKIP
        customer = dictionary.get("customer") if dictionary.get("customer") else APIHelper.SKIP
        duplicate_count = dictionary.get("duplicateCount") if dictionary.get("duplicateCount") else APIHelper.SKIP
        environment = dictionary.get("environment") if dictionary.get("environment") else APIHelper.SKIP
        event = dictionary.get("event") if dictionary.get("event") else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        history = None
        if dictionary.get('history') is not None:
            history = [History.from_dictionary(x) for x in dictionary.get('history')]
        else:
            history = APIHelper.SKIP
        href = dictionary.get("href") if dictionary.get("href") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        last_receive_id = dictionary.get("lastReceiveId") if dictionary.get("lastReceiveId") else APIHelper.SKIP
        last_receive_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastReceiveTime")).datetime if dictionary.get("lastReceiveTime") else APIHelper.SKIP
        origin = dictionary.get("origin") if dictionary.get("origin") else APIHelper.SKIP
        previous_severity = dictionary.get("previousSeverity") if dictionary.get("previousSeverity") else APIHelper.SKIP
        raw_data = dictionary.get("rawData") if dictionary.get("rawData") else APIHelper.SKIP
        receive_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("receiveTime")).datetime if dictionary.get("receiveTime") else APIHelper.SKIP
        repeat = dictionary.get("repeat") if "repeat" in dictionary.keys() else APIHelper.SKIP
        resource = dictionary.get("resource") if dictionary.get("resource") else APIHelper.SKIP
        service = dictionary.get("service") if dictionary.get("service") else APIHelper.SKIP
        severity = dictionary.get("severity") if dictionary.get("severity") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else APIHelper.SKIP
        trend_indication = dictionary.get("trendIndication") if dictionary.get("trendIndication") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        # Return an object of this model
        return cls(attributes,
                   correlate,
                   create_time,
                   customer,
                   duplicate_count,
                   environment,
                   event,
                   group,
                   history,
                   href,
                   id,
                   last_receive_id,
                   last_receive_time,
                   origin,
                   previous_severity,
                   raw_data,
                   receive_time,
                   repeat,
                   resource,
                   service,
                   severity,
                   status,
                   tags,
                   text,
                   timeout,
                   trend_indication,
                   mtype,
                   value)
