# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper


class History(object):

    """Implementation of the 'History' model.

    TODO: type model description here.

    Attributes:
        event (str): TODO: type description here.
        href (str): TODO: type description here.
        id (str): TODO: type description here.
        severity (str): TODO: type description here.
        status (str): TODO: type description here.
        text (str): TODO: type description here.
        mtype (str): TODO: type description here.
        update_time (datetime): TODO: type description here.
        value (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "event": 'event',
        "href": 'href',
        "id": 'id',
        "severity": 'severity',
        "status": 'status',
        "text": 'text',
        "mtype": 'type',
        "update_time": 'updateTime',
        "value": 'value'
    }

    _optionals = [
        'event',
        'href',
        'id',
        'severity',
        'status',
        'text',
        'mtype',
        'update_time',
        'value',
    ]

    def __init__(self,
                 event=APIHelper.SKIP,
                 href=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 severity=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 update_time=APIHelper.SKIP,
                 value=APIHelper.SKIP):
        """Constructor for the History class"""

        # Initialize members of the class
        if event is not APIHelper.SKIP:
            self.event = event 
        if href is not APIHelper.SKIP:
            self.href = href 
        if id is not APIHelper.SKIP:
            self.id = id 
        if severity is not APIHelper.SKIP:
            self.severity = severity 
        if status is not APIHelper.SKIP:
            self.status = status 
        if text is not APIHelper.SKIP:
            self.text = text 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if update_time is not APIHelper.SKIP:
            self.update_time = APIHelper.apply_datetime_converter(update_time, APIHelper.RFC3339DateTime) if update_time else None 
        if value is not APIHelper.SKIP:
            self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        event = dictionary.get("event") if dictionary.get("event") else APIHelper.SKIP
        href = dictionary.get("href") if dictionary.get("href") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        severity = dictionary.get("severity") if dictionary.get("severity") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        update_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("updateTime")).datetime if dictionary.get("updateTime") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        # Return an object of this model
        return cls(event,
                   href,
                   id,
                   severity,
                   status,
                   text,
                   mtype,
                   update_time,
                   value)
