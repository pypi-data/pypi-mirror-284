# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper


class TsdbPostBody(object):

    """Implementation of the 'tsdb_post_body' model.

    TSDB Post Body

    Attributes:
        query_name (str): Name of the query object. Optional. Not used for
            now
        device (str): Name of the device. If networkGroup is specified, this
            config will not be considered
        network_group (str): VPN id. If specified device key is not used.
        topic (str): Name of Healthbot topic.
        rule (str): Name of Healthbot rule.
        trigger (str): Name of Healthbot trigger.
        where (str): Where clause filters data based on fields, tags, and/or
            timestamps. Only `AND` is supported when combining multiple
            condition, `OR` is not supported yet.  Supported logical operators
            are  1. Less than (`<`) 2. Less than or equal (`<=`) 3. Equal
            (`=`) 4. Not equal (`!=`) 5. Greater than or equal (`>=`) 6.
            Greater than (`>`)
        fields (List[str]): TODO: type description here.
        group_by (List[str]): Group results based on time, it can be specified
            in the format `time(<duration>)` which will result in the points
            to be grouped by `<duration>`. s(second), m(minute), h(hour),
            d(day), w(week) can be used as the unit for the duration.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "query_name": 'queryName',
        "device": 'device',
        "network_group": 'networkGroup',
        "topic": 'topic',
        "rule": 'rule',
        "trigger": 'trigger',
        "where": 'where',
        "fields": 'fields',
        "group_by": 'groupBy'
    }

    _optionals = [
        'query_name',
        'device',
        'network_group',
        'topic',
        'rule',
        'trigger',
        'where',
        'fields',
        'group_by',
    ]

    def __init__(self,
                 query_name=APIHelper.SKIP,
                 device=APIHelper.SKIP,
                 network_group=APIHelper.SKIP,
                 topic=APIHelper.SKIP,
                 rule=APIHelper.SKIP,
                 trigger=APIHelper.SKIP,
                 where=APIHelper.SKIP,
                 fields=APIHelper.SKIP,
                 group_by=APIHelper.SKIP):
        """Constructor for the TsdbPostBody class"""

        # Initialize members of the class
        if query_name is not APIHelper.SKIP:
            self.query_name = query_name 
        if device is not APIHelper.SKIP:
            self.device = device 
        if network_group is not APIHelper.SKIP:
            self.network_group = network_group 
        if topic is not APIHelper.SKIP:
            self.topic = topic 
        if rule is not APIHelper.SKIP:
            self.rule = rule 
        if trigger is not APIHelper.SKIP:
            self.trigger = trigger 
        if where is not APIHelper.SKIP:
            self.where = where 
        if fields is not APIHelper.SKIP:
            self.fields = fields 
        if group_by is not APIHelper.SKIP:
            self.group_by = group_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        query_name = dictionary.get("queryName") if dictionary.get("queryName") else APIHelper.SKIP
        device = dictionary.get("device") if dictionary.get("device") else APIHelper.SKIP
        network_group = dictionary.get("networkGroup") if dictionary.get("networkGroup") else APIHelper.SKIP
        topic = dictionary.get("topic") if dictionary.get("topic") else APIHelper.SKIP
        rule = dictionary.get("rule") if dictionary.get("rule") else APIHelper.SKIP
        trigger = dictionary.get("trigger") if dictionary.get("trigger") else APIHelper.SKIP
        where = dictionary.get("where") if dictionary.get("where") else APIHelper.SKIP
        fields = dictionary.get("fields") if dictionary.get("fields") else APIHelper.SKIP
        group_by = dictionary.get("groupBy") if dictionary.get("groupBy") else APIHelper.SKIP
        # Return an object of this model
        return cls(query_name,
                   device,
                   network_group,
                   topic,
                   rule,
                   trigger,
                   where,
                   fields,
                   group_by)
