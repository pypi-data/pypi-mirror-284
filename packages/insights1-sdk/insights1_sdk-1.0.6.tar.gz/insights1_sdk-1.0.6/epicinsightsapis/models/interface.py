# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper
from epicinsightsapis.models.input_traffic import InputTraffic
from epicinsightsapis.models.interfaces import Interfaces
from epicinsightsapis.models.output_traffic import OutputTraffic
from epicinsightsapis.models.pluggables import Pluggables


class Interface(object):

    """Implementation of the 'interface' model.

    TODO: type model description here.

    Attributes:
        pluggables (Pluggables): TODO: type description here.
        input_traffic (InputTraffic): TODO: type description here.
        output_traffic (OutputTraffic): TODO: type description here.
        interfaces (Interfaces): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pluggables": 'pluggables',
        "input_traffic": 'input_traffic',
        "output_traffic": 'output_traffic',
        "interfaces": 'interfaces'
    }

    _optionals = [
        'pluggables',
        'input_traffic',
        'output_traffic',
        'interfaces',
    ]

    def __init__(self,
                 pluggables=APIHelper.SKIP,
                 input_traffic=APIHelper.SKIP,
                 output_traffic=APIHelper.SKIP,
                 interfaces=APIHelper.SKIP):
        """Constructor for the Interface class"""

        # Initialize members of the class
        if pluggables is not APIHelper.SKIP:
            self.pluggables = pluggables 
        if input_traffic is not APIHelper.SKIP:
            self.input_traffic = input_traffic 
        if output_traffic is not APIHelper.SKIP:
            self.output_traffic = output_traffic 
        if interfaces is not APIHelper.SKIP:
            self.interfaces = interfaces 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        pluggables = Pluggables.from_dictionary(dictionary.get('pluggables')) if 'pluggables' in dictionary.keys() else APIHelper.SKIP
        input_traffic = InputTraffic.from_dictionary(dictionary.get('input_traffic')) if 'input_traffic' in dictionary.keys() else APIHelper.SKIP
        output_traffic = OutputTraffic.from_dictionary(dictionary.get('output_traffic')) if 'output_traffic' in dictionary.keys() else APIHelper.SKIP
        interfaces = Interfaces.from_dictionary(dictionary.get('interfaces')) if 'interfaces' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(pluggables,
                   input_traffic,
                   output_traffic,
                   interfaces)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
