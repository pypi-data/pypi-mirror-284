# -*- coding: utf-8 -*-

"""
epicinsightsapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from epicinsightsapis.api_helper import APIHelper


class Fans(object):

    """Implementation of the 'Fans' model.

    TODO: type model description here.

    Attributes:
        available (int): available fan devices
        healthy (int): healthy fan devices
        healthy_units (List[str]): name of healthy fan devices
        unhealthy (int): unhealthy fan devices
        unhealthy_units (List[str]): name of unhealthy fan devices
        no_data (bool): flag to indicate the presence of data
        severity_data (object): TODO: type description here.
        trigger_severity (object): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "available": 'available',
        "healthy": 'healthy',
        "healthy_units": 'healthy_units',
        "unhealthy": 'unhealthy',
        "unhealthy_units": 'unhealthy_units',
        "no_data": 'no_data',
        "severity_data": 'severity_data',
        "trigger_severity": 'trigger_severity'
    }

    _optionals = [
        'available',
        'healthy',
        'healthy_units',
        'unhealthy',
        'unhealthy_units',
        'no_data',
        'severity_data',
        'trigger_severity',
    ]

    def __init__(self,
                 available=APIHelper.SKIP,
                 healthy=APIHelper.SKIP,
                 healthy_units=APIHelper.SKIP,
                 unhealthy=APIHelper.SKIP,
                 unhealthy_units=APIHelper.SKIP,
                 no_data=APIHelper.SKIP,
                 severity_data=APIHelper.SKIP,
                 trigger_severity=APIHelper.SKIP):
        """Constructor for the Fans class"""

        # Initialize members of the class
        if available is not APIHelper.SKIP:
            self.available = available 
        if healthy is not APIHelper.SKIP:
            self.healthy = healthy 
        if healthy_units is not APIHelper.SKIP:
            self.healthy_units = healthy_units 
        if unhealthy is not APIHelper.SKIP:
            self.unhealthy = unhealthy 
        if unhealthy_units is not APIHelper.SKIP:
            self.unhealthy_units = unhealthy_units 
        if no_data is not APIHelper.SKIP:
            self.no_data = no_data 
        if severity_data is not APIHelper.SKIP:
            self.severity_data = severity_data 
        if trigger_severity is not APIHelper.SKIP:
            self.trigger_severity = trigger_severity 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        available = dictionary.get("available") if dictionary.get("available") else APIHelper.SKIP
        healthy = dictionary.get("healthy") if dictionary.get("healthy") else APIHelper.SKIP
        healthy_units = dictionary.get("healthy_units") if dictionary.get("healthy_units") else APIHelper.SKIP
        unhealthy = dictionary.get("unhealthy") if dictionary.get("unhealthy") else APIHelper.SKIP
        unhealthy_units = dictionary.get("unhealthy_units") if dictionary.get("unhealthy_units") else APIHelper.SKIP
        no_data = dictionary.get("no_data") if "no_data" in dictionary.keys() else APIHelper.SKIP
        severity_data = dictionary.get("severity_data") if dictionary.get("severity_data") else APIHelper.SKIP
        trigger_severity = dictionary.get("trigger_severity") if dictionary.get("trigger_severity") else APIHelper.SKIP
        # Return an object of this model
        return cls(available,
                   healthy,
                   healthy_units,
                   unhealthy,
                   unhealthy_units,
                   no_data,
                   severity_data,
                   trigger_severity)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
