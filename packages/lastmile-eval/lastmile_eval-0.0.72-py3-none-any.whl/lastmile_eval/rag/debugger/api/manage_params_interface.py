"""
This file defines the OpinionatedParamsInterface, which is an interface for defining RAG-specific parameters.

The LastMileTracer class in the lastmile_tracer.py file inherits from the OpinionatedParamsImpl class,
which is the implementation of the OpinionatedParamsInterface defined in the opinionated_params_impl.py file.

The LastMileTracer API in the tracing.py file inherits from this OpinionatedParamsInterface.

This structure allows for a clear separation of the interface and its implementation, while providing
a convenient way to access the RAG-specific parameters through the LastMileTracer API.
"""

import abc
from typing import Any, Optional
from copy import deepcopy

from opentelemetry.trace.span import Span


class ManageParamsInterface(abc.ABC):
    """
    Interface for defining the RAG-specific Params.
    """

    def register_document_preprocess_params(
        self,
        chunk_size: Optional[int] = None,
        chunk_strategy: Optional[str] = None,
        extras: Optional[dict[str, Any]] = None,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the configuration of the document preprocessing step, like chunking.

        @param chunk_size (int): Chunk size
        @param chunk_strategy (str): Chunking algorithm (e.g. "sliding window")
        @param extras (dict[str, Any]): Any other params to also register
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        params = {}
        if chunk_size is not None:
            params["chunk_size"] = chunk_size
        if chunk_strategy is not None:
            params["chunk_strategy"] = chunk_strategy
        if extras is not None:
            params.update(extras)
        self.register_params(
            params,
            should_also_save_in_span=should_also_save_in_span,
            span=span,
        )

    def register_embedding_params(
        self,
        embedding_model: Optional[str] = None,
        embedding_dimensions: Optional[int] = None,
        extras: Optional[dict[str, Any]] = None,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the configuration of the embedding step.

        @params embedding_model: Embedding model
        @params embedding_dimensions: Cardinality of the embedding
        @param extras (dict[str, Any]): Any other params to also register
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        params = {}
        if embedding_model is not None:
            params["embedding_model"] = embedding_model
        if embedding_dimensions is not None:
            params["embedding_dimensions"] = embedding_dimensions
        if extras is not None:
            params.update(extras)
        self.register_params(
            params,
            should_also_save_in_span=should_also_save_in_span,
            span=span,
        )

    def register_query_processing_params(
        self,
        embedding_model: Optional[str] = None,
        embedding_dimensions: Optional[int] = None,
        decomposition_strategy: Optional[str] = None,
        extras: Optional[dict[str, Any]] = None,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the configuration of the query processing step,
        such as query decomposition, embedding the query, etc.

        @param embedding_model (str): Embedding model used for the query
        @param embedding_dimensions (int): Cardinality of the embedding used for the query
        @param decomposition_strategy: Algorithm for how a query is processed
            (e.g. "generate subquestions", "query expansion", etc.)
        @param extras: Any other params to also register
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        params = {}
        if embedding_model is not None:
            params["embedding_model"] = embedding_model
        if embedding_dimensions is not None:
            params["embedding_dimensions"] = embedding_dimensions
        if decomposition_strategy is not None:
            params["decomposition_strategy"] = decomposition_strategy
        if extras is not None:
            params.update(extras)
        self.register_params(
            params,
            should_also_save_in_span=should_also_save_in_span,
            span=span,
        )

    def register_retrieval_params(
        self,
        top_k: Optional[int] = None,
        reranking_model: Optional[str] = None,
        extras: Optional[dict[str, Any]] = None,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the configuration of the retrieval step, such as top_k, etc.

        @param top_k (int): Number of embeddings to retrieve
        @param reranking_model (str): The model used for reranking results
        @param extras: Any other params to also register
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        params = {}
        if top_k is not None:
            params["top_k"] = top_k
        if reranking_model is not None:
            params["reranking_model"] = reranking_model
        if extras is not None:
            params.update(extras)
        self.register_params(
            params,
            should_also_save_in_span=should_also_save_in_span,
            span=span,
        )

    def register_generation_params(
        self,
        model_params: dict[str, Any],
        extras: Optional[dict[str, Any]] = None,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the LLM settings like model, temperature, context_length used for the
        LLM generation phase of the RAG flow.

        Args:
        @param model_params (dict[str, Any]): The dictionary of model settings. Values must
            be JSON-serializable
            NOTE: It is strongly recommended for this dictionary to comply with the OpenAI API spec. The params will automatically exclude messages from the ParamSet.
        @param extras: Any other params to also register
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        params = deepcopy(model_params)
        if extras is not None:
            params.update(extras)
        self.register_params(
            params,
            should_also_save_in_span=should_also_save_in_span,
            span=span,
        )

    @abc.abstractmethod
    def register_query_model(
        self,
        value: str,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the model used by the query for the current trace instance.

        Args:
            value (str): The value of the query model parameter.
            should_also_save_in_span (bool): Flag indicating if the parameter should also be saved in the span. Defaults to True.
            span (Optional[Span]): The span to associate with the parameter. Defaults to None.

        Example:
            >>> tracer.register_query_model("gpt-4")
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def register_query_temperature(
        self,
        value: float,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the query temperature for the current trace instance.

        Args:
            value (float): The value of the query temperature.
            should_also_save_in_span (bool): Flag indicating if the parameter should also be saved in the span. Defaults to True.
            span (Optional[Span]): The span to associate with the parameter. Defaults to None.

        Example:
            >>> tracer.register_query_temperature(0.7)
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def register_query_top_p(
        self,
        value: float,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the query top_p value for the current trace instance.

        Args:
            value (float): The value of the query top_p parameter.
            should_also_save_in_span (bool): Flag indicating if the parameter should also be saved in the span. Defaults to True.
            span (Optional[Span]): The span to associate with the parameter. Defaults to None.

        Example:
            >>> tracer.register_query_top_p(0.9)
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def register_ingestion_chunk_size(
        self,
        value: int,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the ingestion chunk size for the current trace instance.

        Args:
            value (int): The value of the ingestion chunk size.
            should_also_save_in_span (bool): Flag indicating if the parameter should also be saved in the span. Defaults to True.
            span (Optional[Span]): The span to associate with the parameter. Defaults to None.

        Example:
            >>> tracer.register_ingestion_chunk_size(100)
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def register_retrieval_top_k(
        self,
        value: int,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Register the retrieval top_k value for the current trace instance.

        Args:
            value (int): The value of the retrieval top_k parameter.
            should_also_save_in_span (bool): Flag indicating if the parameter should also be saved in the span. Defaults to True.
            span (Optional[Span]): The span to associate with the parameter. Defaults to None.

        Example:
            >>> tracer.register_retrieval_top_k(10)
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def get_params(self) -> dict[str, Any]:
        """
        Returns the params_dict that contains all the parameters that have been
        registered with a trace so far.

        If this is called outside of an active trace, it will return the
        global params dict that contains K-V pairs that will be common in all
        future traces (if they haven't been cleared via `clear_params()`)
        """
        raise NotImplementedError("Not implemented directly, this is an API")

    @abc.abstractmethod
    def register_param(
        self,
        key: str,
        value: Any,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Define the parameter K-V pair to save for the current trace instance.

        If this is called outside of an active trace, it will save this into
        a global params dict that contains K-V pairs that will be common in all
        future traces (if they haven't been cleared via `clear_params()`)

        @param key (str): The name of the parameter to be saved
        @param value (Any): The value of the parameter to be saved
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span
        """
        raise NotImplementedError("Not implemented directly, this is an API")

    @abc.abstractmethod
    def register_params(
        self,
        params: dict[str, Any],
        should_overwrite: bool = False,
        should_also_save_in_span: bool = True,
        span: Optional[Span] = None,
    ) -> None:
        """
        Helper function for individually calling `register_param`, with the
        added capability of clearing existing parameters if they exist.

        If this is called outside of an active trace, it will save these into
        a global params dict that contains K-V pairs that will be common in all
        future traces (if they haven't been cleared via `clear_params()`)

        @param params dict[str, Any]: The parameter K-V pairs to save
        @param should_also_save_in_span (bool): Whether to also save this K-V
            pair in the current span attributes data. Defaults to true
        @param should_overwrite (bool): Whether to clear existing parameters
            if they already exist. Defaults to false.
        @param span Optional(Span): The span to save the K-V pair in
            addition to regular paramSet. This can be helpful for debugging
            when going through the trace. Only has an effect if
            should_also_save_in_span is true. Defaults to
            `trace_api.get_current_span()` which is the most recent span
            generated by calling tracer.start_as_current_span

        Define the parameter K-V pair to save for the current trace instance
        """
        raise NotImplementedError("Not implemented directly, this is an API")

    @abc.abstractmethod
    def clear_params(
        self,
        should_clear_global_params: bool = False,
    ) -> None:
        """
        Clearing all existing parameters for the current trace instance.

        If this is called outside of an active trace, it will only clear the
        global params dict if `should_clear_global_params` is set to True.

        @param should_clear_global_params (bool): Whether to clear the global
        K-V pairs in addition to the current trace params. Defaults to false
        """
        raise NotImplementedError("Not implemented directly, this is an API")
