# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from seerep.pb import header_pb2 as header__pb2
from seerep.pb import point_pb2 as point__pb2
from seerep.pb import pose_pb2 as pose__pb2
from seerep.pb import pose_stamped_pb2 as pose__stamped__pb2
from seerep.pb import quaternion_pb2 as quaternion__pb2
from seerep.pb import server_response_pb2 as server__response__pb2


class TransferSensorMsgsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransferHeader = channel.unary_unary(
                '/seerep.pb.TransferSensorMsgs/TransferHeader',
                request_serializer=header__pb2.Header.SerializeToString,
                response_deserializer=server__response__pb2.ServerResponse.FromString,
                )
        self.TransferPoint = channel.unary_unary(
                '/seerep.pb.TransferSensorMsgs/TransferPoint',
                request_serializer=point__pb2.Point.SerializeToString,
                response_deserializer=server__response__pb2.ServerResponse.FromString,
                )
        self.TransferQuaternion = channel.unary_unary(
                '/seerep.pb.TransferSensorMsgs/TransferQuaternion',
                request_serializer=quaternion__pb2.Quaternion.SerializeToString,
                response_deserializer=server__response__pb2.ServerResponse.FromString,
                )
        self.TransferPose = channel.unary_unary(
                '/seerep.pb.TransferSensorMsgs/TransferPose',
                request_serializer=pose__pb2.Pose.SerializeToString,
                response_deserializer=server__response__pb2.ServerResponse.FromString,
                )
        self.TransferPoseStamped = channel.unary_unary(
                '/seerep.pb.TransferSensorMsgs/TransferPoseStamped',
                request_serializer=pose__stamped__pb2.PoseStamped.SerializeToString,
                response_deserializer=server__response__pb2.ServerResponse.FromString,
                )


class TransferSensorMsgsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TransferHeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferPoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferQuaternion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferPoseStamped(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransferSensorMsgsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransferHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferHeader,
                    request_deserializer=header__pb2.Header.FromString,
                    response_serializer=server__response__pb2.ServerResponse.SerializeToString,
            ),
            'TransferPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferPoint,
                    request_deserializer=point__pb2.Point.FromString,
                    response_serializer=server__response__pb2.ServerResponse.SerializeToString,
            ),
            'TransferQuaternion': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferQuaternion,
                    request_deserializer=quaternion__pb2.Quaternion.FromString,
                    response_serializer=server__response__pb2.ServerResponse.SerializeToString,
            ),
            'TransferPose': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferPose,
                    request_deserializer=pose__pb2.Pose.FromString,
                    response_serializer=server__response__pb2.ServerResponse.SerializeToString,
            ),
            'TransferPoseStamped': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferPoseStamped,
                    request_deserializer=pose__stamped__pb2.PoseStamped.FromString,
                    response_serializer=server__response__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'seerep.pb.TransferSensorMsgs', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransferSensorMsgs(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TransferHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seerep.pb.TransferSensorMsgs/TransferHeader',
            header__pb2.Header.SerializeToString,
            server__response__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seerep.pb.TransferSensorMsgs/TransferPoint',
            point__pb2.Point.SerializeToString,
            server__response__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferQuaternion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seerep.pb.TransferSensorMsgs/TransferQuaternion',
            quaternion__pb2.Quaternion.SerializeToString,
            server__response__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seerep.pb.TransferSensorMsgs/TransferPose',
            pose__pb2.Pose.SerializeToString,
            server__response__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferPoseStamped(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seerep.pb.TransferSensorMsgs/TransferPoseStamped',
            pose__stamped__pb2.PoseStamped.SerializeToString,
            server__response__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
