# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Label(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Label()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLabel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Label
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Label
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Label
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(2)
def LabelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddLabel(builder, label): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)
def LabelAddLabel(builder, label):
    """This method is deprecated. Please switch to AddLabel."""
    return AddLabel(builder, label)
def AddConfidence(builder, confidence): builder.PrependFloat32Slot(1, confidence, 0.0)
def LabelAddConfidence(builder, confidence):
    """This method is deprecated. Please switch to AddConfidence."""
    return AddConfidence(builder, confidence)
def End(builder): return builder.EndObject()
def LabelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)