
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import Enum
from ._ods_common import _cext as _ods_cext
_ods_ir = _ods_cext.ir

# Convenience decorator for registering user-friendly Attribute builders.
def _register_attribute_builder(kind):
    def decorator_builder(func):
        _ods_ir.AttrBuilder.insert(kind, func)
        return func

    return decorator_builder

class FailurePropagationMode(Enum):
    """Silenceable error propagation policy"""

    PROPAGATE = 1
    SUPPRESS = 2

    def _as_int(self):
        if self is FailurePropagationMode.PROPAGATE:
            return 1
        if self is FailurePropagationMode.SUPPRESS:
            return 2
        assert False, "Unknown FailurePropagationMode enum entry."


@_register_attribute_builder("FailurePropagationMode")
def _failure_propagation_mode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

class MatchCmpIPredicate(Enum):
    """allowed 32-bit signless integer cases: 0, 1, 2, 3, 4, 5"""

    EQ = 0
    NE = 1
    LT = 2
    LE = 3
    GT = 4
    GE = 5

    def _as_int(self):
        if self is MatchCmpIPredicate.EQ:
            return 0
        if self is MatchCmpIPredicate.NE:
            return 1
        if self is MatchCmpIPredicate.LT:
            return 2
        if self is MatchCmpIPredicate.LE:
            return 3
        if self is MatchCmpIPredicate.GT:
            return 4
        if self is MatchCmpIPredicate.GE:
            return 5
        assert False, "Unknown MatchCmpIPredicate enum entry."


@_register_attribute_builder("MatchCmpIPredicateAttr")
def _match_cmp_i_predicate_attr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

