
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import Enum
from ._ods_common import _cext as _ods_cext
_ods_ir = _ods_cext.ir

# Convenience decorator for registering user-friendly Attribute builders.
def _register_attribute_builder(kind):
    def decorator_builder(func):
        _ods_ir.AttrBuilder.insert(kind, func)
        return func

    return decorator_builder

class VectorContractLowering(Enum):
    """control the lowering of `vector.contract` operations."""

    DOT = 0
    MATMUL = 1
    OUTER_PRODUCT = 2
    PARALLEL_ARITH = 3

    def _as_int(self):
        if self is VectorContractLowering.DOT:
            return 0
        if self is VectorContractLowering.MATMUL:
            return 1
        if self is VectorContractLowering.OUTER_PRODUCT:
            return 2
        if self is VectorContractLowering.PARALLEL_ARITH:
            return 3
        assert False, "Unknown VectorContractLowering enum entry."


@_register_attribute_builder("VectorContractLoweringAttr")
def _vector_contract_lowering_attr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

class VectorMultiReductionLowering(Enum):
    """control the lowering of `vector.multi_reduction`."""

    INNER_PARALLEL = 0
    INNER_REDUCTION = 1

    def _as_int(self):
        if self is VectorMultiReductionLowering.INNER_PARALLEL:
            return 0
        if self is VectorMultiReductionLowering.INNER_REDUCTION:
            return 1
        assert False, "Unknown VectorMultiReductionLowering enum entry."


@_register_attribute_builder("VectorMultiReductionLoweringAttr")
def _vector_multi_reduction_lowering_attr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

class VectorTransferSplit(Enum):
    """control the splitting of `vector.transfer` operations into in-bounds and out-of-bounds variants."""

    NONE = 0
    VECTOR_TRANSFER = 1
    LINALG_COPY = 2
    FORCE_IN_BOUNDS = 3

    def _as_int(self):
        if self is VectorTransferSplit.NONE:
            return 0
        if self is VectorTransferSplit.VECTOR_TRANSFER:
            return 1
        if self is VectorTransferSplit.LINALG_COPY:
            return 2
        if self is VectorTransferSplit.FORCE_IN_BOUNDS:
            return 3
        assert False, "Unknown VectorTransferSplit enum entry."


@_register_attribute_builder("VectorTransferSplitAttr")
def _vector_transfer_split_attr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

class VectorTransposeLowering(Enum):
    """control the lowering of `vector.transpose` operations."""

    ELT_WISE = 0
    FLAT = 1
    SHUFFLE1_D = 2
    SHUFFLE16X16 = 3

    def _as_int(self):
        if self is VectorTransposeLowering.ELT_WISE:
            return 0
        if self is VectorTransposeLowering.FLAT:
            return 1
        if self is VectorTransposeLowering.SHUFFLE1_D:
            return 2
        if self is VectorTransposeLowering.SHUFFLE16X16:
            return 3
        assert False, "Unknown VectorTransposeLowering enum entry."


@_register_attribute_builder("VectorTransposeLoweringAttr")
def _vector_transpose_lowering_attr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), x._as_int())

