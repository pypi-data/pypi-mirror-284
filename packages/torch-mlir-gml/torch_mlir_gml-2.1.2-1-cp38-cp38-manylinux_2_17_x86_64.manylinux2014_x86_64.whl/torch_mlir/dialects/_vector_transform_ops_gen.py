
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _vector_transform_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyCastAwayVectorLeadingOneDimPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.cast_away_vector_leading_one_dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyFoldArithExtensionPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.fold_arith_extension"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerBroadcastPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_broadcast"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerContractionPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_contraction"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, lowering_strategy=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if lowering_strategy is not None: attributes["lowering_strategy"] = (lowering_strategy if (
        issubclass(type(lowering_strategy), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('VectorContractLoweringAttr')) else
          _ods_ir.AttrBuilder.get('VectorContractLoweringAttr')(lowering_strategy, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lowering_strategy(self):
    return self.operation.attributes["lowering_strategy"]

  @lowering_strategy.setter
  def lowering_strategy(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lowering_strategy"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerGatherPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_gather"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerMaskedTransfersPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_masked_transfers"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerMasksPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_masks"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerMultiReductionPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_multi_reduction"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, lowering_strategy=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if lowering_strategy is not None: attributes["lowering_strategy"] = (lowering_strategy if (
        issubclass(type(lowering_strategy), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('VectorMultiReductionLoweringAttr')) else
          _ods_ir.AttrBuilder.get('VectorMultiReductionLoweringAttr')(lowering_strategy, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lowering_strategy(self):
    return self.operation.attributes["lowering_strategy"]

  @lowering_strategy.setter
  def lowering_strategy(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lowering_strategy"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerOuterProductPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_outerproduct"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerScanPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_scan"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerShapeCastPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_shape_cast"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerTransferPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_transfer"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, max_transfer_rank=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if max_transfer_rank is not None: attributes["max_transfer_rank"] = (max_transfer_rank if (
        issubclass(type(max_transfer_rank), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(max_transfer_rank, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def max_transfer_rank(self):
    return self.operation.attributes["max_transfer_rank"]

  @max_transfer_rank.setter
  def max_transfer_rank(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["max_transfer_rank"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyLowerTransposePatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.lower_transpose"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, lowering_strategy=None, avx2_lowering_strategy=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if lowering_strategy is not None: attributes["lowering_strategy"] = (lowering_strategy if (
        issubclass(type(lowering_strategy), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('VectorTransposeLoweringAttr')) else
          _ods_ir.AttrBuilder.get('VectorTransposeLoweringAttr')(lowering_strategy, context=_ods_context))
    if avx2_lowering_strategy is not None: attributes["avx2_lowering_strategy"] = (avx2_lowering_strategy if (
        issubclass(type(avx2_lowering_strategy), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(avx2_lowering_strategy, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lowering_strategy(self):
    return self.operation.attributes["lowering_strategy"]

  @lowering_strategy.setter
  def lowering_strategy(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lowering_strategy"] = value

  @builtins.property
  def avx2_lowering_strategy(self):
    return self.operation.attributes["avx2_lowering_strategy"]

  @avx2_lowering_strategy.setter
  def avx2_lowering_strategy(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["avx2_lowering_strategy"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyMaterializeMasksPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.materialize_masks"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyRankReducingSubviewPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.rank_reducing_subview_patterns"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplySplitTransferFullPartialPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.split_transfer_full_partial"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, split_transfer_strategy=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if split_transfer_strategy is not None: attributes["split_transfer_strategy"] = (split_transfer_strategy if (
        issubclass(type(split_transfer_strategy), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('VectorTransferSplitAttr')) else
          _ods_ir.AttrBuilder.get('VectorTransferSplitAttr')(split_transfer_strategy, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def split_transfer_strategy(self):
    return self.operation.attributes["split_transfer_strategy"]

  @split_transfer_strategy.setter
  def split_transfer_strategy(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["split_transfer_strategy"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyTransferPermutationPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.transfer_permutation_patterns"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyTransferToScfPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.transfer_to_scf"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, max_transfer_rank=None, full_unroll=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if max_transfer_rank is not None: attributes["max_transfer_rank"] = (max_transfer_rank if (
        issubclass(type(max_transfer_rank), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(max_transfer_rank, context=_ods_context))
    if full_unroll is not None: attributes["full_unroll"] = (full_unroll if (
        issubclass(type(full_unroll), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(full_unroll, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def max_transfer_rank(self):
    return self.operation.attributes["max_transfer_rank"]

  @max_transfer_rank.setter
  def max_transfer_rank(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["max_transfer_rank"] = value

  @builtins.property
  def full_unroll(self):
    return self.operation.attributes["full_unroll"]

  @full_unroll.setter
  def full_unroll(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["full_unroll"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyVectorReductionToContractPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.vector.reduction_to_contract"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyVectorToLLVMConversionPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_conversion_patterns.vector.vector_to_llvm"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, reassociate_fp_reductions=None, force_32bit_vector_indices=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if reassociate_fp_reductions is not None: attributes["reassociate_fp_reductions"] = (reassociate_fp_reductions if (
        issubclass(type(reassociate_fp_reductions), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(reassociate_fp_reductions, context=_ods_context))
    if force_32bit_vector_indices is not None: attributes["force_32bit_vector_indices"] = (force_32bit_vector_indices if (
        issubclass(type(force_32bit_vector_indices), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(force_32bit_vector_indices, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def reassociate_fp_reductions(self):
    return self.operation.attributes["reassociate_fp_reductions"]

  @reassociate_fp_reductions.setter
  def reassociate_fp_reductions(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["reassociate_fp_reductions"] = value

  @builtins.property
  def force_32bit_vector_indices(self):
    return self.operation.attributes["force_32bit_vector_indices"]

  @force_32bit_vector_indices.setter
  def force_32bit_vector_indices(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["force_32bit_vector_indices"] = value
