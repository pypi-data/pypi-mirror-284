
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _torch_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "torch"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAbsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.abs"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAbs_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.abs_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAdaptiveAvgPool1dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.adaptive_avg_pool1d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, output_size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(output_size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def output_size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAdaptiveAvgPool2dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.adaptive_avg_pool2d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, output_size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(output_size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def output_size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddFloatIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.float_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAdd_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAdd_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.add_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddcdivOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.addcdiv"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, tensor1, tensor2, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(tensor1))
    operands.append(_get_op_result_or_value(tensor2))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def tensor1(self):
    return self.operation.operands[1]

  @builtins.property
  def tensor2(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddcdiv_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.addcdiv_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, tensor1, tensor2, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(tensor1))
    operands.append(_get_op_result_or_value(tensor2))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def tensor1(self):
    return self.operation.operands[1]

  @builtins.property
  def tensor2(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddcmulOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.addcmul"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, tensor1, tensor2, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(tensor1))
    operands.append(_get_op_result_or_value(tensor2))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def tensor1(self):
    return self.operation.operands[1]

  @builtins.property
  def tensor2(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddcmul_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.addcmul_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, tensor1, tensor2, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(tensor1))
    operands.append(_get_op_result_or_value(tensor2))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def tensor1(self):
    return self.operation.operands[1]

  @builtins.property
  def tensor2(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAddmmOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.addmm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mat1, mat2, beta, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mat1))
    operands.append(_get_op_result_or_value(mat2))
    operands.append(_get_op_result_or_value(beta))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mat1(self):
    return self.operation.operands[1]

  @builtins.property
  def mat2(self):
    return self.operation.operands[2]

  @builtins.property
  def beta(self):
    return self.operation.operands[3]

  @builtins.property
  def alpha(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAliasCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.alias_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAliasOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.alias"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAllBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.all.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAllDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.all.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAllOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.all"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.amax"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAminOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.amin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAnyBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.any.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAnyDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.any.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAnyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.any"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAppendTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.append.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, el, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(el))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def el(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArangeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.arange"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, end, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def end(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArangeStartOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.arange.start"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, start, end, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def start(self):
    return self.operation.operands[0]

  @builtins.property
  def end(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArangeStartOutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.arange.start_out"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, start, end, step, out, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    operands.append(_get_op_result_or_value(out))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def start(self):
    return self.operation.operands[0]

  @builtins.property
  def end(self):
    return self.operation.operands[1]

  @builtins.property
  def step(self):
    return self.operation.operands[2]

  @builtins.property
  def out(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArangeStartStepOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.arange.start_step"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, start, end, step, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def start(self):
    return self.operation.operands[0]

  @builtins.property
  def end(self):
    return self.operation.operands[1]

  @builtins.property
  def step(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def layout(self):
    return self.operation.operands[4]

  @builtins.property
  def device(self):
    return self.operation.operands[5]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArgmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.argmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenArgminOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.argmin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAsStridedCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.as_strided_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, stride, storage_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(storage_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def storage_offset(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAsStridedScatterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.as_strided_scatter"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, size, stride, storage_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(storage_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def size(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def storage_offset(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAtan2Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.atan2"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAtan2_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.atan2_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAtanOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.atan"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAtan_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.atan_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAvgPool1dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.avg_pool1d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, kernel_size, stride, padding, ceil_mode, count_include_pad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(ceil_mode))
    operands.append(_get_op_result_or_value(count_include_pad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[4]

  @builtins.property
  def count_include_pad(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenAvgPool2dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.avg_pool2d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(ceil_mode))
    operands.append(_get_op_result_or_value(count_include_pad))
    operands.append(_get_op_result_or_value(divisor_override))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[4]

  @builtins.property
  def count_include_pad(self):
    return self.operation.operands[5]

  @builtins.property
  def divisor_override(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBaddbmmOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.baddbmm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, batch1, batch2, beta, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(batch1))
    operands.append(_get_op_result_or_value(batch2))
    operands.append(_get_op_result_or_value(beta))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def batch1(self):
    return self.operation.operands[1]

  @builtins.property
  def batch2(self):
    return self.operation.operands[2]

  @builtins.property
  def beta(self):
    return self.operation.operands[3]

  @builtins.property
  def alpha(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBaddbmm_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.baddbmm_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, batch1, batch2, beta, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(batch1))
    operands.append(_get_op_result_or_value(batch2))
    operands.append(_get_op_result_or_value(beta))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def batch1(self):
    return self.operation.operands[1]

  @builtins.property
  def batch2(self):
    return self.operation.operands[2]

  @builtins.property
  def beta(self):
    return self.operation.operands[3]

  @builtins.property
  def alpha(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBatchNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.batch_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(running_mean))
    operands.append(_get_op_result_or_value(running_var))
    operands.append(_get_op_result_or_value(training))
    operands.append(_get_op_result_or_value(momentum))
    operands.append(_get_op_result_or_value(eps))
    operands.append(_get_op_result_or_value(cudnn_enabled))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def running_mean(self):
    return self.operation.operands[3]

  @builtins.property
  def running_var(self):
    return self.operation.operands[4]

  @builtins.property
  def training(self):
    return self.operation.operands[5]

  @builtins.property
  def momentum(self):
    return self.operation.operands[6]

  @builtins.property
  def eps(self):
    return self.operation.operands[7]

  @builtins.property
  def cudnn_enabled(self):
    return self.operation.operands[8]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBernoulliOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bernoulli"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def generator(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBernoulliPOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bernoulli.p"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def generator(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBernoulliTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bernoulli.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def generator(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBernoulli_FloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bernoulli_.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def generator(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBernoulli_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bernoulli_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def generator(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBinaryCrossEntropyBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.binary_cross_entropy_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, target, weight, reduction, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def weight(self):
    return self.operation.operands[3]

  @builtins.property
  def reduction(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBinaryCrossEntropyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.binary_cross_entropy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, target, weight, reduction, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def reduction(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBincountOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bincount"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, weights, minlength, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(weights))
    operands.append(_get_op_result_or_value(minlength))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def weights(self):
    return self.operation.operands[1]

  @builtins.property
  def minlength(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseAndTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_and.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseAnd_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_and_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseNotOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_not"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseNot_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_not_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseOrTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_or.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseOr_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_or_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseXorTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_xor.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBitwiseXor_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bitwise_xor_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBmmOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bmm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mat2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mat2))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mat2(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBoolFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Bool.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBoolIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Bool.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBoolTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Bool.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBroadcastToOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.broadcast_to"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenBucketizeTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.bucketize.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, boundaries, out_int32, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(boundaries))
    operands.append(_get_op_result_or_value(out_int32))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def boundaries(self):
    return self.operation.operands[1]

  @builtins.property
  def out_int32(self):
    return self.operation.operands[2]

  @builtins.property
  def right(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cat"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, tensors, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(tensors))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tensors(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCeilFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ceil.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCeilOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ceil"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCeilScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ceil.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCeil_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ceil_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenChunkOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.chunk"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, chunks, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(chunks))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def chunks(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_max"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def max(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMaxTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_max.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def max(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMax_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_max_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def max(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMax_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_max_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def max(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_min"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMinTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_min.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMin_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_min_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampMin_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_min_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def max(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClampTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def max(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClamp_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def max(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenClamp_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clamp_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min, max, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min))
    operands.append(_get_op_result_or_value(max))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min(self):
    return self.operation.operands[1]

  @builtins.property
  def max(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCloneOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.clone"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConstantPadNdOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.constant_pad_nd"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, pad, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(pad))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def pad(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenContiguousOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.contiguous"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConv2dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.conv2d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, dilation, groups, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(groups))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def groups(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConvTranspose1dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.conv_transpose1d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, output_padding, groups, dilation, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(dilation))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[5]

  @builtins.property
  def groups(self):
    return self.operation.operands[6]

  @builtins.property
  def dilation(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConvTranspose2dInputOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.conv_transpose2d.input"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, output_padding, groups, dilation, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(dilation))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[5]

  @builtins.property
  def groups(self):
    return self.operation.operands[6]

  @builtins.property
  def dilation(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConvTranspose3dInputOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.conv_transpose3d.input"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, output_padding, groups, dilation, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(dilation))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[5]

  @builtins.property
  def groups(self):
    return self.operation.operands[6]

  @builtins.property
  def dilation(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConvolutionBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.convolution_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, grad_output, input, weight, bias_sizes, stride, padding, dilation, transposed, output_padding, groups, output_mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias_sizes))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(transposed))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(output_mask))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def input(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def bias_sizes(self):
    return self.operation.operands[3]

  @builtins.property
  def stride(self):
    return self.operation.operands[4]

  @builtins.property
  def padding(self):
    return self.operation.operands[5]

  @builtins.property
  def dilation(self):
    return self.operation.operands[6]

  @builtins.property
  def transposed(self):
    return self.operation.operands[7]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[8]

  @builtins.property
  def groups(self):
    return self.operation.operands[9]

  @builtins.property
  def output_mask(self):
    return self.operation.operands[10]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenConvolutionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.convolution"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(transposed))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def transposed(self):
    return self.operation.operands[6]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[7]

  @builtins.property
  def groups(self):
    return self.operation.operands[8]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, non_blocking, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(non_blocking))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCopy_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.copy_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, non_blocking, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(non_blocking))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCosOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cos"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCos_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cos_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCosineEmbeddingLossOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cosine_embedding_loss"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input1, input2, target, margin, reduction, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input1))
    operands.append(_get_op_result_or_value(input2))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(margin))
    operands.append(_get_op_result_or_value(reduction))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input1(self):
    return self.operation.operands[0]

  @builtins.property
  def input2(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def margin(self):
    return self.operation.operands[3]

  @builtins.property
  def reduction(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCpuOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cpu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCrossEntropyLossOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cross_entropy_loss"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, target, weight, reduction, ignore_index, label_smoothing, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    operands.append(_get_op_result_or_value(ignore_index))
    operands.append(_get_op_result_or_value(label_smoothing))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def reduction(self):
    return self.operation.operands[3]

  @builtins.property
  def ignore_index(self):
    return self.operation.operands[4]

  @builtins.property
  def label_smoothing(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCudaOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cuda"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenCumsumOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.cumsum"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDeleteDictStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Delete.Dict_str"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, key, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(key))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def key(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDetachCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.detach_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDetachOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.detach"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDeviceWithIndexOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.device.with_index"

  _ODS_REGIONS = (0, True)

  def __init__(self, type_, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(type_))
    operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def type_(self):
    return self.operation.operands[0]

  @builtins.property
  def index(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDiagonalCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.diagonal_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, offset, dim1, dim2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(dim1))
    operands.append(_get_op_result_or_value(dim2))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def dim1(self):
    return self.operation.operands[2]

  @builtins.property
  def dim2(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDiagonalScatterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.diagonal_scatter"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, offset, dim1, dim2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(dim1))
    operands.append(_get_op_result_or_value(dim2))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def dim1(self):
    return self.operation.operands[3]

  @builtins.property
  def dim2(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivTensorModeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div.Tensor_mode"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, rounding_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(rounding_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def rounding_mode(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDivTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDiv_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDiv_TensorModeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div_.Tensor_mode"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, rounding_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(rounding_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def rounding_mode(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDiv_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.div_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDropoutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.dropout"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, p, train, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(train))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def train(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenDropout_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.dropout_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, train, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(train))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def train(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEluBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.elu_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, alpha, scale, input_scale, is_result, self_or_result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(alpha))
    operands.append(_get_op_result_or_value(scale))
    operands.append(_get_op_result_or_value(input_scale))
    operands.append(_get_op_result_or_value(is_result))
    operands.append(_get_op_result_or_value(self_or_result))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def alpha(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def input_scale(self):
    return self.operation.operands[3]

  @builtins.property
  def is_result(self):
    return self.operation.operands[4]

  @builtins.property
  def self_or_result(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.elu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, alpha, scale, input_scale, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(alpha))
    operands.append(_get_op_result_or_value(scale))
    operands.append(_get_op_result_or_value(input_scale))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def alpha(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def input_scale(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenElu_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.elu_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, alpha, scale, input_scale, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(alpha))
    operands.append(_get_op_result_or_value(scale))
    operands.append(_get_op_result_or_value(input_scale))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def alpha(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def input_scale(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEmbeddingBagPaddingIdxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.embedding_bag.padding_idx"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, result3, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(offsets))
    operands.append(_get_op_result_or_value(scale_grad_by_freq))
    operands.append(_get_op_result_or_value(mode))
    operands.append(_get_op_result_or_value(sparse))
    operands.append(_get_op_result_or_value(per_sample_weights))
    operands.append(_get_op_result_or_value(include_last_offset))
    operands.append(_get_op_result_or_value(padding_idx))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    results.append(result3)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def weight(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def offsets(self):
    return self.operation.operands[2]

  @builtins.property
  def scale_grad_by_freq(self):
    return self.operation.operands[3]

  @builtins.property
  def mode(self):
    return self.operation.operands[4]

  @builtins.property
  def sparse(self):
    return self.operation.operands[5]

  @builtins.property
  def per_sample_weights(self):
    return self.operation.operands[6]

  @builtins.property
  def include_last_offset(self):
    return self.operation.operands[7]

  @builtins.property
  def padding_idx(self):
    return self.operation.operands[8]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

  @builtins.property
  def result3(self):
    return self.operation.results[3]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEmbeddingDenseBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.embedding_dense_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, indices, num_weights, padding_idx, scale_grad_by_freq, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(num_weights))
    operands.append(_get_op_result_or_value(padding_idx))
    operands.append(_get_op_result_or_value(scale_grad_by_freq))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def num_weights(self):
    return self.operation.operands[2]

  @builtins.property
  def padding_idx(self):
    return self.operation.operands[3]

  @builtins.property
  def scale_grad_by_freq(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEmbeddingOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.embedding"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, weight, indices, padding_idx, scale_grad_by_freq, sparse, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(padding_idx))
    operands.append(_get_op_result_or_value(scale_grad_by_freq))
    operands.append(_get_op_result_or_value(sparse))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def weight(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def padding_idx(self):
    return self.operation.operands[2]

  @builtins.property
  def scale_grad_by_freq(self):
    return self.operation.operands[3]

  @builtins.property
  def sparse(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEmptyLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.empty_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEmptyMemoryFormatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.empty.memory_format"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.device"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqIntListOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.int_list"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEqTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEq_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEq_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eq_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenErfOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.erf"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenErf_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.erf_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenErfinvOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.erfinv"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenErfinv_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.erfinv_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.exp"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExp_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.exp_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpandAsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.expand_as"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpandCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.expand_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, implicit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(implicit))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def implicit(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpandOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.expand"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, implicit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(implicit))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def implicit(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpm1Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.expm1"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenExpm1_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.expm1_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEyeMOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eye.m"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, n, m, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(n))
    operands.append(_get_op_result_or_value(m))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def n(self):
    return self.operation.operands[0]

  @builtins.property
  def m(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenEyeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.eye"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, n, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(n))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def n(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFftFftOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fft_fft"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, n, dim, norm, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(n))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(norm))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def n(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def norm(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFillScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fill.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFillTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fill.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFill_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fill_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFill_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fill_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFlattenUsingIntsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.flatten.using_ints"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, start_dim, end_dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(start_dim))
    operands.append(_get_op_result_or_value(end_dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def start_dim(self):
    return self.operation.operands[1]

  @builtins.property
  def end_dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFlipOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.flip"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloatImplicitOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.FloatImplicit"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloatScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Float.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloatStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Float.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloatTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Float.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloorDivideOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.floor_divide"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloorDivideScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.floor_divide.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.floor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloor_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.floor_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFloordivIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.floordiv.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFmodScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fmod.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFmodTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fmod.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFmod_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.fmod_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFormatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.format"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFrobeniusNormDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.frobenius_norm.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFullLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.full_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, fill_value, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(fill_value))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def fill_value(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenFullOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.full"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, fill_value, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(fill_value))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def fill_value(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGatherOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gather"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, sparse_grad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(sparse_grad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def sparse_grad(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeFloatIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge.float_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGe_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGe_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ge_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeluBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gelu_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, approximate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(approximate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def approximate(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGeluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gelu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, approximate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(approximate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def approximate(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGetDefaultStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.get.default_str"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, key, default_value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(key))
    operands.append(_get_op_result_or_value(default_value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def key(self):
    return self.operation.operands[1]

  @builtins.property
  def default_value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGtFloatIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt.float_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGtFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGtIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGtScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGtTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGt_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenGt_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.gt_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardsigmoidOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardsigmoid"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardsigmoid_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardsigmoid_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardswishOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardswish"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardswish_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardswish_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardtanhBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardtanh_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, min_val, max_val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min_val))
    operands.append(_get_op_result_or_value(max_val))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def min_val(self):
    return self.operation.operands[2]

  @builtins.property
  def max_val(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardtanhOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardtanh"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min_val, max_val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min_val))
    operands.append(_get_op_result_or_value(max_val))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min_val(self):
    return self.operation.operands[1]

  @builtins.property
  def max_val(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenHardtanh_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.hardtanh_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, min_val, max_val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(min_val))
    operands.append(_get_op_result_or_value(max_val))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def min_val(self):
    return self.operation.operands[1]

  @builtins.property
  def max_val(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIm2colOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.im2col"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, kernel_size, dilation, padding, stride, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(stride))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def dilation(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def stride(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenImagOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.imag"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexPutHackedTwinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index_put.hacked_twin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexPutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index_put"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexPut_HackedTwinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index_put_.hacked_twin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexPut_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index_put_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexSelectOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index_select"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexTensorHackedTwinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index.Tensor_hacked_twin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIndexTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.index.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenInsertTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.insert.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, idx, el, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(idx))
    operands.append(_get_op_result_or_value(el))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def el(self):
    return self.operation.operands[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIntBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Int.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIntFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Int.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIntImplicitOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.IntImplicit"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIntScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Int.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIntTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.Int.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIsFloatingPointOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.is_floating_point"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenIsnanOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.isnan"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenItemOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.item"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.join"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(values))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def values(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenKeysStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.keys.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLayerNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.layer_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, normalized_shape, weight, bias, eps, cudnn_enable, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(normalized_shape))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(eps))
    operands.append(_get_op_result_or_value(cudnn_enable))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def normalized_shape(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def bias(self):
    return self.operation.operands[3]

  @builtins.property
  def eps(self):
    return self.operation.operands[4]

  @builtins.property
  def cudnn_enable(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.le.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.le.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.le.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLe_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.le_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLe_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.le_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeakyReluBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.leaky_relu_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, negative_slope, self_is_result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(negative_slope))
    operands.append(_get_op_result_or_value(self_is_result))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def negative_slope(self):
    return self.operation.operands[2]

  @builtins.property
  def self_is_result(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeakyReluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.leaky_relu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, negative_slope, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(negative_slope))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def negative_slope(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLeakyRelu_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.leaky_relu_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, negative_slope, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(negative_slope))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def negative_slope(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLenStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.len.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, s, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(s))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def s(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLenTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.len.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLenTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.len.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, t, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(t))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def t(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLerpTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lerp.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, end, weight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(weight))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def end(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLerp_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lerp_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, end, weight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(weight))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def end(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLiftFreshCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lift_fresh_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLinalgQrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.linalg_qr"

  _ODS_REGIONS = (0, True)

  def __init__(self, Q, R, A, mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(A))
    operands.append(_get_op_result_or_value(mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(Q)
    results.append(R)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def A(self):
    return self.operation.operands[0]

  @builtins.property
  def mode(self):
    return self.operation.operands[1]

  @builtins.property
  def Q(self):
    return self.operation.results[0]

  @builtins.property
  def R(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLinalgVectorNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.linalg_vector_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, ord, dim, keepdim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(ord))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def ord(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def dtype(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLinearOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.linear"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenListTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.list.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, l, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(l))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def l(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLog1pOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log1p"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLog1p_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log1p_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLog2Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log2"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLog2_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log2_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogSigmoidBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log_sigmoid_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def buffer(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogSigmoidForwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log_sigmoid_forward"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, buffer, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    results.append(buffer)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def buffer(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogSoftmaxIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log_softmax.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLog_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.log_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalAndOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_and"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalAnd_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_and_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalNotOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_not"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalNot_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_not_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalOrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_or"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalOr_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_or_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalXorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_xor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogicalXor_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logical_xor_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLogsumexpOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.logsumexp"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLtFloatIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt.float_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLtFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLtIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLtScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLtTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLt_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenLt_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.lt_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedFillScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_fill.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedFillTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_fill.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedFill_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_fill_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedFill_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_fill_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedScatterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_scatter"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, source, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(source))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def source(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedScatter_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_scatter_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, source, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(source))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def source(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaskedSelectOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.masked_select"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mask))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMatmulOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.matmul"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, values, indices, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(values)
    results.append(indices)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def values(self):
    return self.operation.results[0]

  @builtins.property
  def indices(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxOtherOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max.other"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool2dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool2d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, kernel_size, stride, padding, dilation, ceil_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def dilation(self):
    return self.operation.operands[4]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool2dWithIndicesBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool2d_with_indices_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, kernel_size, stride, padding, dilation, ceil_mode, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    operands.append(_get_op_result_or_value(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[6]

  @builtins.property
  def indices(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool2dWithIndicesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool2d_with_indices"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, self_, kernel_size, stride, padding, dilation, ceil_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def dilation(self):
    return self.operation.operands[4]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[5]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool3dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool3d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, kernel_size, stride, padding, dilation, ceil_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def dilation(self):
    return self.operation.operands[4]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool3dWithIndicesBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool3d_with_indices_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, kernel_size, stride, padding, dilation, ceil_mode, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    operands.append(_get_op_result_or_value(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[6]

  @builtins.property
  def indices(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaxPool3dWithIndicesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.max_pool3d_with_indices"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, self_, kernel_size, stride, padding, dilation, ceil_mode, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(kernel_size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(ceil_mode))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def kernel_size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def padding(self):
    return self.operation.operands[3]

  @builtins.property
  def dilation(self):
    return self.operation.operands[4]

  @builtins.property
  def ceil_mode(self):
    return self.operation.operands[5]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMaximumOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.maximum"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMeanDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mean.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMeanOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mean"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMinDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.min.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, values, indices, self_, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(values)
    results.append(indices)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def values(self):
    return self.operation.results[0]

  @builtins.property
  def indices(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.min"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMinimumOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.minimum"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMishOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mish"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMmOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mat2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mat2))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mat2(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMovedimIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.movedim.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, source, destination, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(destination))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def source(self):
    return self.operation.operands[1]

  @builtins.property
  def destination(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMseLossBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mse_loss_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, target, reduction, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(reduction))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def reduction(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMseLossOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mse_loss"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, target, reduction, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(reduction))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def reduction(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMulFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMulIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMulScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMulTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMul_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMul_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mul_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMultinomialOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.multinomial"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, num_samples, replacement, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(num_samples))
    operands.append(_get_op_result_or_value(replacement))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def num_samples(self):
    return self.operation.operands[1]

  @builtins.property
  def replacement(self):
    return self.operation.operands[2]

  @builtins.property
  def generator(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenMvOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.mv"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, vec, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(vec))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def vec(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNarrowOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.narrow"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, start, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def start(self):
    return self.operation.operands[2]

  @builtins.property
  def length(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNarrowTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.narrow.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, start, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def start(self):
    return self.operation.operands[2]

  @builtins.property
  def length(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeBatchNormBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_batch_norm_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_out))
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(running_mean))
    operands.append(_get_op_result_or_value(running_var))
    operands.append(_get_op_result_or_value(save_mean))
    operands.append(_get_op_result_or_value(save_invstd))
    operands.append(_get_op_result_or_value(train))
    operands.append(_get_op_result_or_value(eps))
    operands.append(_get_op_result_or_value(output_mask))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_out(self):
    return self.operation.operands[0]

  @builtins.property
  def input(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def running_mean(self):
    return self.operation.operands[3]

  @builtins.property
  def running_var(self):
    return self.operation.operands[4]

  @builtins.property
  def save_mean(self):
    return self.operation.operands[5]

  @builtins.property
  def save_invstd(self):
    return self.operation.operands[6]

  @builtins.property
  def train(self):
    return self.operation.operands[7]

  @builtins.property
  def eps(self):
    return self.operation.operands[8]

  @builtins.property
  def output_mask(self):
    return self.operation.operands[9]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeBatchNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_batch_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, input, weight, bias, running_mean, running_var, training, momentum, eps, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(running_mean))
    operands.append(_get_op_result_or_value(running_var))
    operands.append(_get_op_result_or_value(training))
    operands.append(_get_op_result_or_value(momentum))
    operands.append(_get_op_result_or_value(eps))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def running_mean(self):
    return self.operation.operands[3]

  @builtins.property
  def running_var(self):
    return self.operation.operands[4]

  @builtins.property
  def training(self):
    return self.operation.operands[5]

  @builtins.property
  def momentum(self):
    return self.operation.operands[6]

  @builtins.property
  def eps(self):
    return self.operation.operands[7]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeDropoutBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_dropout_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, mask, scale, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(mask))
    operands.append(_get_op_result_or_value(scale))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def mask(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeDropoutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_dropout"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, input, p, train, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(train))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def train(self):
    return self.operation.operands[2]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeGroupNormBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_group_norm_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_out))
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(mean))
    operands.append(_get_op_result_or_value(rstd))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(N))
    operands.append(_get_op_result_or_value(C))
    operands.append(_get_op_result_or_value(HxW))
    operands.append(_get_op_result_or_value(group))
    operands.append(_get_op_result_or_value(output_mask))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_out(self):
    return self.operation.operands[0]

  @builtins.property
  def input(self):
    return self.operation.operands[1]

  @builtins.property
  def mean(self):
    return self.operation.operands[2]

  @builtins.property
  def rstd(self):
    return self.operation.operands[3]

  @builtins.property
  def weight(self):
    return self.operation.operands[4]

  @builtins.property
  def N(self):
    return self.operation.operands[5]

  @builtins.property
  def C(self):
    return self.operation.operands[6]

  @builtins.property
  def HxW(self):
    return self.operation.operands[7]

  @builtins.property
  def group(self):
    return self.operation.operands[8]

  @builtins.property
  def output_mask(self):
    return self.operation.operands[9]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeGroupNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_group_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, input, weight, bias, N, C, HxW, group, eps, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(N))
    operands.append(_get_op_result_or_value(C))
    operands.append(_get_op_result_or_value(HxW))
    operands.append(_get_op_result_or_value(group))
    operands.append(_get_op_result_or_value(eps))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def N(self):
    return self.operation.operands[3]

  @builtins.property
  def C(self):
    return self.operation.operands[4]

  @builtins.property
  def HxW(self):
    return self.operation.operands[5]

  @builtins.property
  def group(self):
    return self.operation.operands[6]

  @builtins.property
  def eps(self):
    return self.operation.operands[7]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeLayerNormBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_layer_norm_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_out))
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(normalized_shape))
    operands.append(_get_op_result_or_value(mean))
    operands.append(_get_op_result_or_value(rstd))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(output_mask))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_out(self):
    return self.operation.operands[0]

  @builtins.property
  def input(self):
    return self.operation.operands[1]

  @builtins.property
  def normalized_shape(self):
    return self.operation.operands[2]

  @builtins.property
  def mean(self):
    return self.operation.operands[3]

  @builtins.property
  def rstd(self):
    return self.operation.operands[4]

  @builtins.property
  def weight(self):
    return self.operation.operands[5]

  @builtins.property
  def bias(self):
    return self.operation.operands[6]

  @builtins.property
  def output_mask(self):
    return self.operation.operands[7]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNativeLayerNormOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.native_layer_norm"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, input, normalized_shape, weight, bias, eps, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(normalized_shape))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(eps))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def normalized_shape(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def bias(self):
    return self.operation.operands[3]

  @builtins.property
  def eps(self):
    return self.operation.operands[4]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeFloatIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.float_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeIntListOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.int_list"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNe_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNe_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ne_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNegFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.neg.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNegIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.neg.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNegOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.neg"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNeg_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.neg_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNewEmptyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.new_empty"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNewEmptyStridedOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.new_empty_strided"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, stride, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def layout(self):
    return self.operation.operands[4]

  @builtins.property
  def device(self):
    return self.operation.operands[5]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNewOnesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.new_ones"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNewZerosOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.new_zeros"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNllLoss2dBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nll_loss2d_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, target, weight, reduction, ignore_index, total_weight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    operands.append(_get_op_result_or_value(ignore_index))
    operands.append(_get_op_result_or_value(total_weight))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def weight(self):
    return self.operation.operands[3]

  @builtins.property
  def reduction(self):
    return self.operation.operands[4]

  @builtins.property
  def ignore_index(self):
    return self.operation.operands[5]

  @builtins.property
  def total_weight(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNllLoss2dForwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nll_loss2d_forward"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, total_weight, self_, target, weight, reduction, ignore_index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    operands.append(_get_op_result_or_value(ignore_index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    results.append(total_weight)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def reduction(self):
    return self.operation.operands[3]

  @builtins.property
  def ignore_index(self):
    return self.operation.operands[4]

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def total_weight(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNllLossBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nll_loss_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, target, weight, reduction, ignore_index, total_weight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    operands.append(_get_op_result_or_value(ignore_index))
    operands.append(_get_op_result_or_value(total_weight))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def weight(self):
    return self.operation.operands[3]

  @builtins.property
  def reduction(self):
    return self.operation.operands[4]

  @builtins.property
  def ignore_index(self):
    return self.operation.operands[5]

  @builtins.property
  def total_weight(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNllLossForwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nll_loss_forward"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, total_weight, self_, target, weight, reduction, ignore_index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(reduction))
    operands.append(_get_op_result_or_value(ignore_index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    results.append(total_weight)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def weight(self):
    return self.operation.operands[2]

  @builtins.property
  def reduction(self):
    return self.operation.operands[3]

  @builtins.property
  def ignore_index(self):
    return self.operation.operands[4]

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def total_weight(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNonzeroNumpyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nonzero_numpy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNonzeroOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nonzero"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNonzeroStaticOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.nonzero_static"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, fill_value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(fill_value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def fill_value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNormScalarOptDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.norm.ScalarOpt_dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, dim, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNormalFunctionalOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.normal_functional"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, mean, std, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(mean))
    operands.append(_get_op_result_or_value(std))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def mean(self):
    return self.operation.operands[1]

  @builtins.property
  def std(self):
    return self.operation.operands[2]

  @builtins.property
  def generator(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNumelOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.numel"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenNumpyTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.numpy_T"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenOneHotOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.one_hot"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, num_classes, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(num_classes))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def num_classes(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenOnesLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ones_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenOnesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ones"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPadOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.pad"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, pad, mode, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(pad))
    operands.append(_get_op_result_or_value(mode))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def pad(self):
    return self.operation.operands[1]

  @builtins.property
  def mode(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPermuteCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.permute_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPermuteOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.permute"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPowIntFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.pow.int_float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPowScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.pow.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, exponent, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(exponent))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def exponent(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPowTensorScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.pow.Tensor_Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, exponent, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(exponent))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def exponent(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPowTensorTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.pow.Tensor_Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, exponent, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(exponent))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def exponent(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenPreluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.prelu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, weight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(weight))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenProdDimIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.prod.dim_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.rand_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.rand"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandintLowOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.randint.low"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, low, high, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(low))
    operands.append(_get_op_result_or_value(high))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def low(self):
    return self.operation.operands[0]

  @builtins.property
  def high(self):
    return self.operation.operands[1]

  @builtins.property
  def size(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def layout(self):
    return self.operation.operands[4]

  @builtins.property
  def device(self):
    return self.operation.operands[5]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandintOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.randint"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, high, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(high))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def high(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandnGeneratorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.randn.generator"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, generator, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(generator))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def generator(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def layout(self):
    return self.operation.operands[3]

  @builtins.property
  def device(self):
    return self.operation.operands[4]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandnLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.randn_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRandnOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.randn"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRealOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.real"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenReciprocalOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.reciprocal"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenReciprocal_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.reciprocal_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRelu6Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.relu6"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRelu6_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.relu6_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenReluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.relu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRelu_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.relu_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRemainderIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.remainder.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRemainderScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.remainder.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRemainderTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.remainder.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRepeatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.repeat"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, repeats, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(repeats))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def repeats(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenReshapeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.reshape"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, shape, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(shape))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def shape(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenResize_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.resize_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRollOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.roll"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, shifts, dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(shifts))
    operands.append(_get_op_result_or_value(dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def shifts(self):
    return self.operation.operands[1]

  @builtins.property
  def dims(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRoundOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.round"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRound_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.round_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRsqrtOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.rsqrt"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRsqrt_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.rsqrt_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenRsubScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.rsub.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScalarImplicitOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.ScalarImplicit"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScalarTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scalar_tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, s, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(s))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def s(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScaledDotProductAttentionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scaled_dot_product_attention"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, query, key, value, attn_mask, dropout_p, is_causal, scale, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(query))
    operands.append(_get_op_result_or_value(key))
    operands.append(_get_op_result_or_value(value))
    operands.append(_get_op_result_or_value(attn_mask))
    operands.append(_get_op_result_or_value(dropout_p))
    operands.append(_get_op_result_or_value(is_causal))
    operands.append(_get_op_result_or_value(scale))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def query(self):
    return self.operation.operands[0]

  @builtins.property
  def key(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def attn_mask(self):
    return self.operation.operands[3]

  @builtins.property
  def dropout_p(self):
    return self.operation.operands[4]

  @builtins.property
  def is_causal(self):
    return self.operation.operands[5]

  @builtins.property
  def scale(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterAddOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_add"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterAdd_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_add_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterReduceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter.reduce"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, reduce, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(reduce))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def reduce(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterReduceTwoOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_reduce.two"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, reduce, include_self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(reduce))
    operands.append(_get_op_result_or_value(include_self))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def reduce(self):
    return self.operation.operands[4]

  @builtins.property
  def include_self(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterReduce_TwoOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_reduce_.two"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, reduce, include_self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(reduce))
    operands.append(_get_op_result_or_value(include_self))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def reduce(self):
    return self.operation.operands[4]

  @builtins.property
  def include_self(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterSrcOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter.src"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatterValueOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter.value"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatter_SrcOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_.src"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def src(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenScatter_ValueOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.scatter_.value"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSelectCopyIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.select_copy.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSelectIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.select.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def index(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSelectScatterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.select_scatter"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, dim, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def index(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSgnOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sgn"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSgn_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sgn_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSigmoidBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sigmoid_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, output, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(output))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSigmoidOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sigmoid"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSigmoid_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sigmoid_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSignOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sign"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSign_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sign_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSiluOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.silu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSilu_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.silu_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSin_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sin_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSizeIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.size.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.size"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSliceCopyTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.slice_copy.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, start, end, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def start(self):
    return self.operation.operands[2]

  @builtins.property
  def end(self):
    return self.operation.operands[3]

  @builtins.property
  def step(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSliceScatterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.slice_scatter"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, src, dim, start, end, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def start(self):
    return self.operation.operands[3]

  @builtins.property
  def end(self):
    return self.operation.operands[4]

  @builtins.property
  def step(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSliceTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.slice.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, l, start, end, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(l))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def l(self):
    return self.operation.operands[0]

  @builtins.property
  def start(self):
    return self.operation.operands[1]

  @builtins.property
  def end(self):
    return self.operation.operands[2]

  @builtins.property
  def step(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSliceTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.slice.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, start, end, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(end))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def start(self):
    return self.operation.operands[2]

  @builtins.property
  def end(self):
    return self.operation.operands[3]

  @builtins.property
  def step(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSoftmaxIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.softmax.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSoftplusOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.softplus"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, beta, threshold, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(beta))
    operands.append(_get_op_result_or_value(threshold))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def beta(self):
    return self.operation.operands[1]

  @builtins.property
  def threshold(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSortIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sort.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, reverse, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(reverse))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def reverse(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSortOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sort"

  _ODS_REGIONS = (0, True)

  def __init__(self, values, indices, self_, dim, descending, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(descending))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(values)
    results.append(indices)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def descending(self):
    return self.operation.operands[2]

  @builtins.property
  def values(self):
    return self.operation.results[0]

  @builtins.property
  def indices(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSplitCopyTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.split_copy.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, split_size, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(split_size))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def split_size(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSplitTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.split.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, split_size, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(split_size))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def split_size(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSplitWithSizesCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.split_with_sizes_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, split_sizes, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(split_sizes))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def split_sizes(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSplitWithSizesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.split_with_sizes"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, split_sizes, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(split_sizes))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def split_sizes(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqrtIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sqrt.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqrtOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sqrt"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqrt_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sqrt_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSquareOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.square"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSquare_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.square_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqueezeCopyDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.squeeze_copy.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqueezeCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.squeeze_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqueezeDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.squeeze.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSqueezeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.squeeze"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenStackOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.stack"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, tensors, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(tensors))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tensors(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenStdCorrectionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.std.correction"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, correction, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(correction))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def correction(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenStdDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.std.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, unbiased, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(unbiased))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenStdOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.std"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, unbiased, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(unbiased))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, elem, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(elem))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def elem(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSubFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSubIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSubOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSubScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSubTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSub_ScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub_.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSub_TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sub_.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, alpha, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(alpha))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def alpha(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSumDimIntListOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sum.dim_IntList"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, keepdim, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(keepdim))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[2]

  @builtins.property
  def dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenSumOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.sum"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.t_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTanhBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tanh_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, output, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(output))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTanhOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tanh"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTanh_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tanh_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTensorBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tensor.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, t, dtype, device, requires_grad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(t))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(requires_grad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def t(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def device(self):
    return self.operation.operands[2]

  @builtins.property
  def requires_grad(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTensorFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tensor.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, t, dtype, device, requires_grad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(t))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(requires_grad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def t(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def device(self):
    return self.operation.operands[2]

  @builtins.property
  def requires_grad(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTensorIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tensor.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, t, dtype, device, requires_grad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(t))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(requires_grad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def t(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def device(self):
    return self.operation.operands[2]

  @builtins.property
  def requires_grad(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, data, dtype, device, requires_grad, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(data))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(requires_grad))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def data(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def device(self):
    return self.operation.operands[2]

  @builtins.property
  def requires_grad(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenThresholdBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.threshold_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, self_, threshold, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(threshold))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def threshold(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenThresholdOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.threshold"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, threshold, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(threshold))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def threshold(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenThreshold_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.threshold_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, threshold, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(threshold))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def threshold(self):
    return self.operation.operands[1]

  @builtins.property
  def value(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTileOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tile"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenToDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.to.device"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, device, dtype, non_blocking, copy, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(copy))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def device(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[3]

  @builtins.property
  def copy(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenToDtypeLayoutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.to.dtype_layout"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, non_blocking, copy, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(copy))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[5]

  @builtins.property
  def copy(self):
    return self.operation.operands[6]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[7]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenToDtypeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.to.dtype"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, non_blocking, copy, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(copy))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[2]

  @builtins.property
  def copy(self):
    return self.operation.operands[3]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenToOtherOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.to.other"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, non_blocking, copy, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(copy))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[2]

  @builtins.property
  def copy(self):
    return self.operation.operands[3]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenToPrimDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.to.prim_Device"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, device, dtype, non_blocking, copy, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(copy))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def device(self):
    return self.operation.operands[1]

  @builtins.property
  def dtype(self):
    return self.operation.operands[2]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[3]

  @builtins.property
  def copy(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTopkOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.topk"

  _ODS_REGIONS = (0, True)

  def __init__(self, values, indices, self_, k, dim, largest, sorted, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(k))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(largest))
    operands.append(_get_op_result_or_value(sorted))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(values)
    results.append(indices)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def k(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def largest(self):
    return self.operation.operands[3]

  @builtins.property
  def sorted(self):
    return self.operation.operands[4]

  @builtins.property
  def values(self):
    return self.operation.results[0]

  @builtins.property
  def indices(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTransposeCopyIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.transpose_copy.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim0, dim1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim0))
    operands.append(_get_op_result_or_value(dim1))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim0(self):
    return self.operation.operands[1]

  @builtins.property
  def dim1(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTransposeIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.transpose.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim0, dim1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim0))
    operands.append(_get_op_result_or_value(dim1))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim0(self):
    return self.operation.operands[1]

  @builtins.property
  def dim1(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTrilOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tril"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, diagonal, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(diagonal))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def diagonal(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTril_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.tril_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, diagonal, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(diagonal))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def diagonal(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTriuOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.triu"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, diagonal, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(diagonal))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def diagonal(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTriu_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.triu_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, diagonal, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(diagonal))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def diagonal(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenTypeAsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.type_as"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnbindCopyIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unbind_copy.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnbindIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unbind.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnfoldCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unfold_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dimension, size, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dimension))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dimension(self):
    return self.operation.operands[1]

  @builtins.property
  def size(self):
    return self.operation.operands[2]

  @builtins.property
  def step(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUniformOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.uniform"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, from_, to, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(from_))
    operands.append(_get_op_result_or_value(to))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def from_(self):
    return self.operation.operands[1]

  @builtins.property
  def to(self):
    return self.operation.operands[2]

  @builtins.property
  def generator(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUniform_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.uniform_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, from_, to, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(from_))
    operands.append(_get_op_result_or_value(to))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def from_(self):
    return self.operation.operands[1]

  @builtins.property
  def to(self):
    return self.operation.operands[2]

  @builtins.property
  def generator(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUniqueConsecutiveOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unique_consecutive"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, self_, return_inverse, return_counts, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(return_inverse))
    operands.append(_get_op_result_or_value(return_counts))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def return_inverse(self):
    return self.operation.operands[1]

  @builtins.property
  def return_counts(self):
    return self.operation.operands[2]

  @builtins.property
  def dim(self):
    return self.operation.operands[3]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnsqueezeCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unsqueeze_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnsqueezeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unsqueeze"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUnsqueeze_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.unsqueeze_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUpsampleNearest2dBackwardOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.upsample_nearest2d_backward"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, output_size, input_size, scales_h, scales_w, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(output_size))
    operands.append(_get_op_result_or_value(input_size))
    operands.append(_get_op_result_or_value(scales_h))
    operands.append(_get_op_result_or_value(scales_w))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def output_size(self):
    return self.operation.operands[1]

  @builtins.property
  def input_size(self):
    return self.operation.operands[2]

  @builtins.property
  def scales_h(self):
    return self.operation.operands[3]

  @builtins.property
  def scales_w(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenUpsampleNearest2dOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.upsample_nearest2d"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, output_size, scales_h, scales_w, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(output_size))
    operands.append(_get_op_result_or_value(scales_h))
    operands.append(_get_op_result_or_value(scales_w))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def output_size(self):
    return self.operation.operands[1]

  @builtins.property
  def scales_h(self):
    return self.operation.operands[2]

  @builtins.property
  def scales_w(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarCorrectionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var.correction"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, correction, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(correction))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def correction(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, unbiased, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(unbiased))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarMeanCorrectionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var_mean.correction"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, self_, dim, correction, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(correction))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def correction(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarMeanDimOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var_mean.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, self_, dim, unbiased, keepdim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(unbiased))
    operands.append(_get_op_result_or_value(keepdim))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[2]

  @builtins.property
  def keepdim(self):
    return self.operation.operands[3]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarMeanOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var_mean"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, self_, unbiased, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(unbiased))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[1]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenVarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.var"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, unbiased, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(unbiased))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def unbiased(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenViewAsComplexOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.view_as_complex"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenViewAsRealOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.view_as_real"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenViewCopyDtypeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.view_copy.dtype"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenViewCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.view_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenViewOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.view"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenWhereScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.where.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, condition, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def other(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenWhereScalarOtherOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.where.ScalarOther"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, condition, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def other(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenWhereScalarSelfOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.where.ScalarSelf"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, condition, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def other(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenWhereSelfOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.where.self"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, condition, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def self_(self):
    return self.operation.operands[1]

  @builtins.property
  def other(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenXlogyTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.xlogy.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenZeroOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.zero"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenZero_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.zero_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenZerosLikeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.zeros_like"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[5]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AtenZerosOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.zeros"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, size, dtype, layout, device, pin_memory, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ConvolutionDeprecatedOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._convolution.deprecated"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(transposed))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(benchmark))
    operands.append(_get_op_result_or_value(deterministic))
    operands.append(_get_op_result_or_value(cudnn_enabled))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def transposed(self):
    return self.operation.operands[6]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[7]

  @builtins.property
  def groups(self):
    return self.operation.operands[8]

  @builtins.property
  def benchmark(self):
    return self.operation.operands[9]

  @builtins.property
  def deterministic(self):
    return self.operation.operands[10]

  @builtins.property
  def cudnn_enabled(self):
    return self.operation.operands[11]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ConvolutionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._convolution"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(bias))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(padding))
    operands.append(_get_op_result_or_value(dilation))
    operands.append(_get_op_result_or_value(transposed))
    operands.append(_get_op_result_or_value(output_padding))
    operands.append(_get_op_result_or_value(groups))
    operands.append(_get_op_result_or_value(benchmark))
    operands.append(_get_op_result_or_value(deterministic))
    operands.append(_get_op_result_or_value(cudnn_enabled))
    operands.append(_get_op_result_or_value(allow_tf32))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def bias(self):
    return self.operation.operands[2]

  @builtins.property
  def stride(self):
    return self.operation.operands[3]

  @builtins.property
  def padding(self):
    return self.operation.operands[4]

  @builtins.property
  def dilation(self):
    return self.operation.operands[5]

  @builtins.property
  def transposed(self):
    return self.operation.operands[6]

  @builtins.property
  def output_padding(self):
    return self.operation.operands[7]

  @builtins.property
  def groups(self):
    return self.operation.operands[8]

  @builtins.property
  def benchmark(self):
    return self.operation.operands[9]

  @builtins.property
  def deterministic(self):
    return self.operation.operands[10]

  @builtins.property
  def cudnn_enabled(self):
    return self.operation.operands[11]

  @builtins.property
  def allow_tf32(self):
    return self.operation.operands[12]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_EmbeddingBagOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._embedding_bag"

  _ODS_REGIONS = (0, True)

  def __init__(self, result0, result1, result2, result3, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(offsets))
    operands.append(_get_op_result_or_value(scale_grad_by_freq))
    operands.append(_get_op_result_or_value(mode))
    operands.append(_get_op_result_or_value(sparse))
    operands.append(_get_op_result_or_value(per_sample_weights))
    operands.append(_get_op_result_or_value(include_last_offset))
    operands.append(_get_op_result_or_value(padding_idx))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result0)
    results.append(result1)
    results.append(result2)
    results.append(result3)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def weight(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def offsets(self):
    return self.operation.operands[2]

  @builtins.property
  def scale_grad_by_freq(self):
    return self.operation.operands[3]

  @builtins.property
  def mode(self):
    return self.operation.operands[4]

  @builtins.property
  def sparse(self):
    return self.operation.operands[5]

  @builtins.property
  def per_sample_weights(self):
    return self.operation.operands[6]

  @builtins.property
  def include_last_offset(self):
    return self.operation.operands[7]

  @builtins.property
  def padding_idx(self):
    return self.operation.operands[8]

  @builtins.property
  def result0(self):
    return self.operation.results[0]

  @builtins.property
  def result1(self):
    return self.operation.results[1]

  @builtins.property
  def result2(self):
    return self.operation.results[2]

  @builtins.property
  def result3(self):
    return self.operation.results[3]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_IndexPutImplOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._index_put_impl"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, unsafe, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    operands.append(_get_op_result_or_value(unsafe))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def unsafe(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_IndexPutImpl_Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._index_put_impl_"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, unsafe, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    operands.append(_get_op_result_or_value(unsafe))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def unsafe(self):
    return self.operation.operands[4]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_LogSoftmaxBackwardDataOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._log_softmax_backward_data"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, output, dim, input_dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(output))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(input_dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def input_dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_LogSoftmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._log_softmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, half_to_float, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(half_to_float))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def half_to_float(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ReshapeAliasCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._reshape_alias_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, stride, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(stride))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ReshapeAliasOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._reshape_alias"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, stride, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    operands.append(_get_op_result_or_value(stride))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def stride(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_SetItemStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._set_item.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, l, idx, v, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(l))
    operands.append(_get_op_result_or_value(idx))
    operands.append(_get_op_result_or_value(v))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def l(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def v(self):
    return self.operation.operands[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_SetItemTOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._set_item.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, l, idx, el, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(l))
    operands.append(_get_op_result_or_value(idx))
    operands.append(_get_op_result_or_value(el))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def l(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def el(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ShapeAsTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._shape_as_tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_SoftmaxBackwardDataOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._softmax_backward_data"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, grad_output, output, dim, input_dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(grad_output))
    operands.append(_get_op_result_or_value(output))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(input_dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def grad_output(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.operands[1]

  @builtins.property
  def dim(self):
    return self.operation.operands[2]

  @builtins.property
  def input_dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_SoftmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._softmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dim, half_to_float, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dim))
    operands.append(_get_op_result_or_value(half_to_float))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.operands[1]

  @builtins.property
  def half_to_float(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_ToCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._to_copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, dtype, layout, device, pin_memory, non_blocking, memory_format, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(dtype))
    operands.append(_get_op_result_or_value(layout))
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(pin_memory))
    operands.append(_get_op_result_or_value(non_blocking))
    operands.append(_get_op_result_or_value(memory_format))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def layout(self):
    return self.operation.operands[2]

  @builtins.property
  def device(self):
    return self.operation.operands[3]

  @builtins.property
  def pin_memory(self):
    return self.operation.operands[4]

  @builtins.property
  def non_blocking(self):
    return self.operation.operands[5]

  @builtins.property
  def memory_format(self):
    return self.operation.operands[6]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_UnsafeIndexPutHackedTwinOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._unsafe_index_put.hacked_twin"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, indices, values, accumulate, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(indices))
    operands.append(_get_op_result_or_value(values))
    operands.append(_get_op_result_or_value(accumulate))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    return self.operation.operands[2]

  @builtins.property
  def accumulate(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten_UnsafeViewOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten._unsafe_view"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__And__BoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__and__.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__And__TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__and__.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Contains__IntListOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__contains__.int_list"

  _ODS_REGIONS = (0, True)

  def __init__(self, l, item, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(l))
    operands.append(_get_op_result_or_value(item))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def l(self):
    return self.operation.operands[0]

  @builtins.property
  def item(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Contains__StrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__contains__.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, dict, key, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dict))
    operands.append(_get_op_result_or_value(key))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dict(self):
    return self.operation.operands[0]

  @builtins.property
  def key(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__DeriveIndexOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__derive_index"

  _ODS_REGIONS = (0, True)

  def __init__(self, index, start, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(start))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def index(self):
    return self.operation.operands[0]

  @builtins.property
  def start(self):
    return self.operation.operands[1]

  @builtins.property
  def step(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Getitem__DictStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__getitem__.Dict_str"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, key, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(key))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def key(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Getitem__TOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__getitem__.t"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, list, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(list))
    operands.append(_get_op_result_or_value(idx))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def list(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Is__Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__is__"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, obj, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(obj))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def obj(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Isnot__Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__isnot__"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, obj, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(obj))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def obj(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Not__Op(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__not__"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__Or__TensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__or__.Tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, other, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(other))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def other(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class Aten__RangeLengthOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.aten.__range_length"

  _ODS_REGIONS = (0, True)

  def __init__(self, lo, hi, step, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lo))
    operands.append(_get_op_result_or_value(hi))
    operands.append(_get_op_result_or_value(step))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lo(self):
    return self.operation.operands[0]

  @builtins.property
  def hi(self):
    return self.operation.operands[1]

  @builtins.property
  def step(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AttrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.attr"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, type_, *, isPrivate=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    attributes["type"] = (type_ if (
    issubclass(type(type_), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(type_, context=_ods_context))
    if bool(isPrivate): attributes["isPrivate"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def type_(self):
    return self.operation.attributes["type"]

  @type_.setter
  def type_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["type"] = value

  @builtins.property
  def isPrivate(self):
    return "isPrivate" in self.operation.attributes

  @isPrivate.setter
  def isPrivate(self, value):
    if bool(value):
      self.operation.attributes["isPrivate"] = _ods_ir.UnitAttr.get()
    elif "isPrivate" in self.operation.attributes:
      del self.operation.attributes["isPrivate"]

  @isPrivate.deleter
  def isPrivate(self):
    del self.operation.attributes["isPrivate"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ClassTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.class_type"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def region(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ClassTypeTerminatorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.class_type_terminator"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantBoolOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.bool"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I1Attr')) else
      _ods_ir.AttrBuilder.get('I1Attr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.device"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F64Attr')) else
      _ods_ir.AttrBuilder.get('F64Attr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantNoneOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.none"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantNumberOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.number"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_463')) else
      _ods_ir.AttrBuilder.get('anonymous_463')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantStrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.constant.str"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CopyToNonValueTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.copy.to_tensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CopyToValueTensorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.copy.to_vtensor"

  _ODS_REGIONS = (0, True)

  def __init__(self, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DerefineOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.derefine"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DtypeCalculateOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.dtype.calculate"

  _ODS_REGIONS = (2, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

  @builtins.property
  def calculation(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DtypeCalculateYieldDtypesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.dtype.calculate.yield.dtypes"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DtypeCalculateYieldOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.dtype.calculate.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GlobalSlotGetOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.global_slot.get"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, slot, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["slot"] = (slot if (
    issubclass(type(slot), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(slot, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def slot(self):
    return self.operation.attributes["slot"]

  @slot.setter
  def slot(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["slot"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GlobalSlotInitOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.global_slot.init"

  _ODS_REGIONS = (0, True)

  def __init__(self, initialValue, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(initialValue))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def initialValue(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GlobalSlotModuleInitializerOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.global_slot.module_initializer"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def initializer(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GlobalSlotOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.global_slot"

  _ODS_REGIONS = (0, True)

  def __init__(self, sym_name, typeBound, *, sym_visibility=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    if sym_visibility is not None: attributes["sym_visibility"] = (sym_visibility if (
        issubclass(type(sym_visibility), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(sym_visibility, context=_ods_context))
    attributes["typeBound"] = (typeBound if (
    issubclass(type(typeBound), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(typeBound, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def typeBound(self):
    return self.operation.attributes["typeBound"]

  @typeBound.setter
  def typeBound(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["typeBound"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GlobalSlotSetOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.global_slot.set"

  _ODS_REGIONS = (0, True)

  def __init__(self, slot, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["slot"] = (slot if (
    issubclass(type(slot), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(slot, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def slot(self):
    return self.operation.attributes["slot"]

  @slot.setter
  def slot(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["slot"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InitializeGlobalSlotsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.initialize.global_slots"

  _ODS_REGIONS = (0, True)

  def __init__(self, slotSymNames, initialValues, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(initialValues))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["slotSymNames"] = (slotSymNames if (
    issubclass(type(slotSymNames), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefArrayAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefArrayAttr')(slotSymNames, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def initialValues(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def slotSymNames(self):
    return self.operation.attributes["slotSymNames"]

  @slotSymNames.setter
  def slotSymNames(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["slotSymNames"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LinearParamsCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.linear_params.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, weight, *, bias=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(weight))
    if bias is not None: operands.append(_get_op_result_or_value(bias))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def weight(self):
    return self.operation.operands[0]

  @builtins.property
  def bias(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MethodOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.method"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, function, *, isPrivate=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    attributes["function"] = (function if (
    issubclass(type(function), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(function, context=_ods_context))
    if bool(isPrivate): attributes["isPrivate"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def function(self):
    return self.operation.attributes["function"]

  @function.setter
  def function(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["function"] = value

  @builtins.property
  def isPrivate(self):
    return "isPrivate" in self.operation.attributes

  @isPrivate.setter
  def isPrivate(self, value):
    if bool(value):
      self.operation.attributes["isPrivate"] = _ods_ir.UnitAttr.get()
    elif "isPrivate" in self.operation.attributes:
      del self.operation.attributes["isPrivate"]

  @isPrivate.deleter
  def isPrivate(self):
    del self.operation.attributes["isPrivate"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NnModuleOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.nn_module"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def region(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NnModuleTerminatorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.nn_module_terminator"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NonValueTensorLiteralOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.tensor.literal"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ElementsAttr')) else
      _ods_ir.AttrBuilder.get('ElementsAttr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OperatorOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.operator"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, name, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OverwriteTensorContentsOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.overwrite.tensor.contents"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, overwritten, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    operands.append(_get_op_result_or_value(overwritten))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def overwritten(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PerTensorAffineCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.per_tensor_affine.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, int_repr, scale, offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(int_repr))
    operands.append(_get_op_result_or_value(scale))
    operands.append(_get_op_result_or_value(offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def int_repr(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimAbsScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.abs.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimCallMethodOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.CallMethod"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, name, receiver, methodOperands, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(receiver))
    operands.extend(_get_op_results_or_values(methodOperands))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def receiver(self):
    return self.operation.operands[0]

  @builtins.property
  def methodOperands(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimCreateObjectOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.CreateObject"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.device"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimDictConstructOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.DictConstruct"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, keys, values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(keys))
    operands.extend(_get_op_results_or_values(values))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def keys(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 2, 0, 0)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def values(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 2, 0, 1)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimDtypeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.dtype"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimEnterOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Enter"

  _ODS_REGIONS = (0, True)

  def __init__(self, inp, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(inp))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inp(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimExitOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Exit"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, inp, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(inp))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inp(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimGetAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.GetAttr"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, name, receiver, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(receiver))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def receiver(self):
    return self.operation.operands[0]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimIfOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.If"

  _ODS_REGIONS = (2, True)

  def __init__(self, results_, condition, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def thenRegion(self):
    return self.regions[0]

  @builtins.property
  def elseRegion(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimIfYieldOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.If.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimLayoutOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.layout"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimListConstructOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.ListConstruct"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, elements, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(elements))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def elements(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimListUnpackOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.ListUnpack"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimLoopConditionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Loop.condition"

  _ODS_REGIONS = (0, True)

  def __init__(self, shouldContinue, iterArgs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(shouldContinue))
    operands.extend(_get_op_results_or_values(iterArgs))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def shouldContinue(self):
    return self.operation.operands[0]

  @builtins.property
  def iterArgs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Loop"

  _ODS_REGIONS = (1, True)

  def __init__(self, results_, maxTripCount, initialCondition, iterArgsInit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(maxTripCount))
    operands.append(_get_op_result_or_value(initialCondition))
    operands.extend(_get_op_results_or_values(iterArgsInit))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def maxTripCount(self):
    return self.operation.operands[0]

  @builtins.property
  def initialCondition(self):
    return self.operation.operands[1]

  @builtins.property
  def iterArgsInit(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def region(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimMaxIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.max.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimMaxSelfIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.max.self_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimMinIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.min.int"

  _ODS_REGIONS = (0, True)

  def __init__(self, a, b, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def b(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimMinSelfIntOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.min.self_int"

  _ODS_REGIONS = (0, True)

  def __init__(self, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimNumToTensorScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.NumToTensor.Scalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimPrintOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Print"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimRaiseExceptionOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.RaiseException"

  _ODS_REGIONS = (0, True)

  def __init__(self, msg, cls, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(msg))
    operands.append(_get_op_result_or_value(cls))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def msg(self):
    return self.operation.operands[0]

  @builtins.property
  def cls(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimSetAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.SetAttr"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, receiver, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(receiver))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def receiver(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.operands[1]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Store"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimTolistOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.tolist"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimTupleConstructOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.TupleConstruct"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, elements, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(elements))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def elements(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimTupleIndexOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.TupleIndex"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, tup, i, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(tup))
    operands.append(_get_op_result_or_value(i))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tup(self):
    return self.operation.operands[0]

  @builtins.property
  def i(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimTupleUnpackOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.TupleUnpack"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, tup, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(tup))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tup(self):
    return self.operation.operands[0]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimUncheckedCastOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.unchecked_cast"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, x, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(x))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def x(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimUninitializedOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prim.Uninitialized"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimsConvertElementTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prims.convert_element_type"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def dtype(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimsSqrtOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prims.sqrt"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimsSqueezeOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prims.squeeze"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, dimensions, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(dimensions))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def dimensions(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimsVarOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prims.var"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, inp, dims, correction, output_dtype, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(inp))
    operands.append(_get_op_result_or_value(dims))
    operands.append(_get_op_result_or_value(correction))
    operands.append(_get_op_result_or_value(output_dtype))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inp(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.operands[1]

  @builtins.property
  def correction(self):
    return self.operation.operands[2]

  @builtins.property
  def output_dtype(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrimsViewOfOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.prims.view_of"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, a, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(a))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def a(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PromoteDtypesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.promote_dtypes"

  _ODS_REGIONS = (0, True)

  def __init__(self, ranks, dtypes, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(ranks))
    operands.append(_get_op_result_or_value(dtypes))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ranks(self):
    return self.operation.operands[0]

  @builtins.property
  def dtypes(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class QuantizedLinearOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.quantized.linear"

  _ODS_REGIONS = (0, True)

  def __init__(self, Y, X, W_prepack, Y_scale_i, Y_zero_point_i, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(X))
    operands.append(_get_op_result_or_value(W_prepack))
    operands.append(_get_op_result_or_value(Y_scale_i))
    operands.append(_get_op_result_or_value(Y_zero_point_i))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(Y)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def X(self):
    return self.operation.operands[0]

  @builtins.property
  def W_prepack(self):
    return self.operation.operands[1]

  @builtins.property
  def Y_scale_i(self):
    return self.operation.operands[2]

  @builtins.property
  def Y_zero_point_i(self):
    return self.operation.operands[3]

  @builtins.property
  def Y(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RuntimeAssertOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.runtime.assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, condition, message, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(condition))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["message"] = (message if (
    issubclass(type(message), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(message, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def condition(self):
    return self.operation.operands[0]

  @builtins.property
  def message(self):
    return self.operation.attributes["message"]

  @message.setter
  def message(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["message"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShapeCalculateOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.shape.calculate"

  _ODS_REGIONS = (2, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

  @builtins.property
  def calculation(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShapeCalculateYieldOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.shape.calculate.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShapeCalculateYieldShapesOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.shape.calculate.yield.shapes"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SlotOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.slot"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    issubclass(type(name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorStaticInfoCastOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.tensor_static_info_cast"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ValsemVariantAtenBernoulliFloatOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.valsem.aten.bernoulli.float"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, self_, p, generator, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(self_))
    operands.append(_get_op_result_or_value(p))
    operands.append(_get_op_result_or_value(generator))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def self_(self):
    return self.operation.operands[0]

  @builtins.property
  def p(self):
    return self.operation.operands[1]

  @builtins.property
  def generator(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ValueTensorLiteralOp(_ods_ir.OpView):
  OPERATION_NAME = "torch.vtensor.literal"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ElementsAttr')) else
      _ods_ir.AttrBuilder.get('ElementsAttr')(value, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]
