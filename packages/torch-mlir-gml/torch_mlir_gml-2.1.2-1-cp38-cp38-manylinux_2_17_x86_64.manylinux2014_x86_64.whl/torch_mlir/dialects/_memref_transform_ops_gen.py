
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _memref_transform_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyExpandOpsPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.memref.expand_ops"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyExpandStridedMetadataPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.memref.expand_strided_metadata"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyExtractAddressComputationsPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.memref.extract_address_computations"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyFoldMemrefAliasOpsPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.memref.fold_memref_alias_ops"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyResolveRankedShapedTypeResultDimsPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.memref.resolve_ranked_shaped_type_result_dims"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MemRefMakeLoopIndependentOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.memref.make_loop_independent"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, num_loops, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["num_loops"] = (num_loops if (
    issubclass(type(num_loops), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(num_loops, context=_ods_context))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def num_loops(self):
    return self.operation.attributes["num_loops"]

  @num_loops.setter
  def num_loops(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["num_loops"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MemRefMultiBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.memref.multibuffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, factor, *, skip_analysis=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["factor"] = (factor if (
    issubclass(type(factor), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(factor, context=_ods_context))
    if bool(skip_analysis): attributes["skip_analysis"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def factor(self):
    return self.operation.attributes["factor"]

  @factor.setter
  def factor(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["factor"] = value

  @builtins.property
  def skip_analysis(self):
    return "skip_analysis" in self.operation.attributes

  @skip_analysis.setter
  def skip_analysis(self, value):
    if bool(value):
      self.operation.attributes["skip_analysis"] = _ods_ir.UnitAttr.get()
    elif "skip_analysis" in self.operation.attributes:
      del self.operation.attributes["skip_analysis"]

  @skip_analysis.deleter
  def skip_analysis(self):
    del self.operation.attributes["skip_analysis"]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MemrefToLLVMTypeConverterOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_conversion_patterns.memref.memref_to_llvm_type_converter"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, use_aligned_alloc=None, index_bitwidth=None, use_generic_functions=None, use_opaque_pointers=None, use_bare_ptr_call_conv=None, data_layout=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if use_aligned_alloc is not None: attributes["use_aligned_alloc"] = (use_aligned_alloc if (
        issubclass(type(use_aligned_alloc), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(use_aligned_alloc, context=_ods_context))
    if index_bitwidth is not None: attributes["index_bitwidth"] = (index_bitwidth if (
        issubclass(type(index_bitwidth), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(index_bitwidth, context=_ods_context))
    if use_generic_functions is not None: attributes["use_generic_functions"] = (use_generic_functions if (
        issubclass(type(use_generic_functions), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(use_generic_functions, context=_ods_context))
    if use_opaque_pointers is not None: attributes["use_opaque_pointers"] = (use_opaque_pointers if (
        issubclass(type(use_opaque_pointers), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(use_opaque_pointers, context=_ods_context))
    if use_bare_ptr_call_conv is not None: attributes["use_bare_ptr_call_conv"] = (use_bare_ptr_call_conv if (
        issubclass(type(use_bare_ptr_call_conv), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(use_bare_ptr_call_conv, context=_ods_context))
    if data_layout is not None: attributes["data_layout"] = (data_layout if (
        issubclass(type(data_layout), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(data_layout, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def use_aligned_alloc(self):
    if "use_aligned_alloc" not in self.operation.attributes:
      return None
    return self.operation.attributes["use_aligned_alloc"]

  @use_aligned_alloc.setter
  def use_aligned_alloc(self, value):
    if value is not None:
      self.operation.attributes["use_aligned_alloc"] = value
    elif "use_aligned_alloc" in self.operation.attributes:
      del self.operation.attributes["use_aligned_alloc"]

  @use_aligned_alloc.deleter
  def use_aligned_alloc(self):
    del self.operation.attributes["use_aligned_alloc"]

  @builtins.property
  def index_bitwidth(self):
    if "index_bitwidth" not in self.operation.attributes:
      return None
    return self.operation.attributes["index_bitwidth"]

  @index_bitwidth.setter
  def index_bitwidth(self, value):
    if value is not None:
      self.operation.attributes["index_bitwidth"] = value
    elif "index_bitwidth" in self.operation.attributes:
      del self.operation.attributes["index_bitwidth"]

  @index_bitwidth.deleter
  def index_bitwidth(self):
    del self.operation.attributes["index_bitwidth"]

  @builtins.property
  def use_generic_functions(self):
    if "use_generic_functions" not in self.operation.attributes:
      return None
    return self.operation.attributes["use_generic_functions"]

  @use_generic_functions.setter
  def use_generic_functions(self, value):
    if value is not None:
      self.operation.attributes["use_generic_functions"] = value
    elif "use_generic_functions" in self.operation.attributes:
      del self.operation.attributes["use_generic_functions"]

  @use_generic_functions.deleter
  def use_generic_functions(self):
    del self.operation.attributes["use_generic_functions"]

  @builtins.property
  def use_opaque_pointers(self):
    if "use_opaque_pointers" not in self.operation.attributes:
      return None
    return self.operation.attributes["use_opaque_pointers"]

  @use_opaque_pointers.setter
  def use_opaque_pointers(self, value):
    if value is not None:
      self.operation.attributes["use_opaque_pointers"] = value
    elif "use_opaque_pointers" in self.operation.attributes:
      del self.operation.attributes["use_opaque_pointers"]

  @use_opaque_pointers.deleter
  def use_opaque_pointers(self):
    del self.operation.attributes["use_opaque_pointers"]

  @builtins.property
  def use_bare_ptr_call_conv(self):
    if "use_bare_ptr_call_conv" not in self.operation.attributes:
      return None
    return self.operation.attributes["use_bare_ptr_call_conv"]

  @use_bare_ptr_call_conv.setter
  def use_bare_ptr_call_conv(self, value):
    if value is not None:
      self.operation.attributes["use_bare_ptr_call_conv"] = value
    elif "use_bare_ptr_call_conv" in self.operation.attributes:
      del self.operation.attributes["use_bare_ptr_call_conv"]

  @use_bare_ptr_call_conv.deleter
  def use_bare_ptr_call_conv(self):
    del self.operation.attributes["use_bare_ptr_call_conv"]

  @builtins.property
  def data_layout(self):
    if "data_layout" not in self.operation.attributes:
      return None
    return self.operation.attributes["data_layout"]

  @data_layout.setter
  def data_layout(self, value):
    if value is not None:
      self.operation.attributes["data_layout"] = value
    elif "data_layout" in self.operation.attributes:
      del self.operation.attributes["data_layout"]

  @data_layout.deleter
  def data_layout(self):
    del self.operation.attributes["data_layout"]
