# yapf: disable
# isort: skip_file
# ruff: noqa

# Standard imports.
from __future__ import annotations

# ATTENTION: no types in this file should be imported with their unqualified
#            name (e.g. `from typing import Any`). That would cause clashes
#            with user-defined methods that have the same name. Use
#            fully-qualified names (e.g. `typing.Any`) instead.
import asyncio
import dataclasses
import google.protobuf.descriptor
import google.protobuf.json_format
import google.protobuf.message
import grpc
import grpc_status._async as rpc_status_async
from grpc_status import rpc_status as rpc_status_sync
import json
import logging
import sys
import traceback
import uuid
import resemble
import respect.logging  # type: ignore[import]
import typing
import backoff
from abc import abstractmethod
from datetime import datetime, timedelta
from google.protobuf import empty_pb2
from google.rpc import status_pb2
import resemble.aio.call
import resemble.aio.contexts
import resemble.aio.headers
import resemble.aio.idempotency
import resemble.aio.internals.channel_manager
import resemble.aio.internals.middleware
from resemble.aio.internals.middleware import (
    maybe_run_function_twice_to_validate_effects,
)
import resemble.aio.internals.tasks_cache
import resemble.aio.internals.tasks_dispatcher
import resemble.aio.placement
import resemble.aio.servicers
import resemble.aio.state_managers
import resemble.aio.stubs
import resemble.aio.tasks
import resemble.aio.types
from resemble.aio.types import (
    assert_type,
    state_type_to_service,
)
import resemble.aio.workflows
from resemble.settings import MAX_ACTOR_ID_LENGTH
from resemble.v1alpha1 import tasks_pb2, tasks_pb2_grpc
import typing

# User defined or referenced imports.
import google.protobuf.timestamp_pb2
import resemble.integrations.mailgun.v1.mailgun_pb2
import resemble.integrations.mailgun.v1.mailgun_pb2_grpc
import resemble.v1alpha1.options_pb2
import resemble.v1alpha1.tasks_pb2
# Additionally re-export all messages and enums from the pb2 module.
from resemble.integrations.mailgun.v1.mailgun_pb2 import (
    SendRequest,
    SendResponse,
    SendTaskRequest,
    SendTaskResponse,
)

logger = respect.logging.get_logger(__name__)


def MakeLegacyGrpcServiceable(
    # A legacy gRPC servicer type can't be more specific than `type`,
    # because legacy gRPC servicers (as generated by the gRPC `protoc`
    # plugin) do not share any common base class other than `object`.
    servicer_type: type
) -> resemble.aio.servicers.Serviceable:
    raise ValueError(f"Unknown legacy gRPC servicer type '{servicer_type}'")


# For internal calls, we can use a magic token to bypass token verification and
# authorization checks. The token provides no auth information (e.g.,
# `context.auth is None`).
__internal_magic_token__: str = f'internal-{str(uuid.uuid4())}'

class MessageServicerMiddleware(resemble.aio.internals.middleware.Middleware):

    def __init__(
        self,
        *,
        servicer: MessageServicer,
        application_id: resemble.aio.types.ApplicationId,
        consensus_id: resemble.aio.types.ConsensusId,
        state_manager: resemble.aio.state_managers.StateManager,
        placement_client: resemble.aio.placement.PlacementClient,
        channel_manager: resemble.aio.internals.channel_manager._ChannelManager,
        tasks_cache: resemble.aio.internals.tasks_cache.TasksCache,
        token_verifier: typing.Optional[resemble.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: resemble.aio.contexts.EffectValidation,
        ready: asyncio.Event,
    ):
        super().__init__(
            application_id=application_id,
            consensus_id=consensus_id,
            service_name=servicer.__service_name__,
            placement_client=placement_client,
            channel_manager=channel_manager,
            effect_validation=effect_validation,
        )

        self._servicer = servicer
        self._state_manager = state_manager
        self.tasks_dispatcher = resemble.aio.internals.tasks_dispatcher.TasksDispatcher(
            application_id=application_id,
            dispatch=self.dispatch,
            tasks_cache=tasks_cache,
            ready=ready,
        )

        # Store the type of each method's request so that stored requests can be
        # deserialized into the correct type.
        self.request_type_by_method_name: dict[str, type[google.protobuf.message.Message]] = {
            'Send': resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
            'SendTask': resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        }

        # Create authorizer.
        self._authorizer: typing.Optional[resemble.aio.auth.authorizers.Authorizer] = servicer.authorizer()

        # Create token verifier.
        self._token_verifier: typing.Optional[resemble.aio.auth.token_verifiers.TokenVerifier] = (
            servicer.token_verifier() or token_verifier
        )

        if self._token_verifier is not None and self._authorizer is None:
            raise RuntimeError(
                f"'TokenVerifier' provided but no 'Authorizer' returned for "
                f"'resemble.integrations.mailgun.v1.Message'"
            )


    def add_to_server(self, server: grpc.aio.Server) -> None:
        resemble.integrations.mailgun.v1.mailgun_pb2_grpc.add_MessageInterfaceServicer_to_server(
            self, server
        )

    async def inspect(self, actor_id: resemble.aio.types.ActorId) -> typing.AsyncIterator[google.protobuf.message.Message]:
        """Implementation of `Middleware.inspect()`."""
        context = self.create_context(
            headers=resemble.aio.headers.Headers(
                application_id=self.application_id,
                service_name=self.service_name,
                actor_id=actor_id,
            ),
            context_type=resemble.aio.contexts.ReaderContext,
        )

        async with self._state_manager.streaming_reader_idempotency_key(
            context, self._servicer.__state_type__
        ) as states:
            async for (state, idempotency_key) in states:
                yield state

    async def react_query(
        self,
        grpc_context: grpc.aio.ServicerContext,
        headers: resemble.aio.headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> typing.AsyncIterator[tuple[typing.Optional[google.protobuf.message.Message], list[uuid.UUID]]]:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes' for each state
        update that creates a different response.

        # The caller (react.py) should have already ensured that this consensus
        # is authoritative for this traffic.
        assert self.placement_client.consensus_for_actor(
            headers.application_id, headers.service_name, headers.actor_id
        ) == self._consensus_id

        NOTE: only unary reader methods are supported."""
        # Need to define these up here since we can only do that once.
        last_response: typing.Optional[google.protobuf.message.Message] = None
        aggregated_idempotency_keys: list[uuid.UUID] = []
        if method == 'Send':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Message."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        elif method == 'SendTask':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Message."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        else:
            logger.warning(
                "Got a React query request with an invalid method name: "
                "Method '{method}' is invalid for servicer Message."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
            yield  # Unreachable but necessary for mypy.

    async def react_mutate(
        self,
        headers: resemble.aio.headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> google.protobuf.message.Message:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes'."""
        if method == 'Send':
            request = resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the actor), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = resemble.integrations.mailgun.v1.mailgun_pb2_grpc.MessageInterfaceStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.service_name,
                            headers.actor_id,
                        )
                    )
                )
                call = stub.Send(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except grpc.aio.AioRpcError as error:
                    if error.code() == grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await rpc_status_async.from_call(call)
                    raise Message.SendAborted.from_status(status)

        elif method == 'SendTask':
            request = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the actor), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = resemble.integrations.mailgun.v1.mailgun_pb2_grpc.MessageInterfaceStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.service_name,
                            headers.actor_id,
                        )
                    )
                )
                call = stub.SendTask(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except grpc.aio.AioRpcError as error:
                    if error.code() == grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await rpc_status_async.from_call(call)
                    raise Message.SendTaskAborted.from_status(status)

        else:
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                "Method '{method}' is invalid for servicer Message."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )

    async def dispatch(
        self,
        task: resemble.aio.tasks.TaskEffect,
        *,
        only_validate: bool = False,
    ) -> google.protobuf.message.Message | resemble.aio.tasks.Loop:
        """Dispatches the tasks to execute unless 'only_validate' is set to
        true, in which case just ensures that the task actually exists.
        Note that this function will be called *by* tasks_dispatcher; it will
        not itself call into tasks_dispatcher."""

        if 'Send' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            @maybe_run_function_twice_to_validate_effects
            async def run_Send(
                validating_effects: bool,
                context: resemble.aio.contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    response = await (MessageWorkflowStub(
                        context_or_workflow=context,
                        actor_id=context.actor_id,
                    ).Send(
                        typing.cast(resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest, task.request),
                        bearer_token=__internal_magic_token__,
                        idempotency=resemble.aio.idempotency.Idempotency(
                            alias=f'Task {task.task_id.task_uuid}',
                        ),
                    ))

                    await complete(task, response)
                    return response




            return await run_Send(
                self.create_context(
                    headers=resemble.aio.headers.Headers(
                        application_id=self.application_id,
                        service_name=self.service_name,
                        actor_id=resemble.aio.types.ActorId(task.task_id.actor_id),
                    ),
                    context_type=resemble.aio.contexts.WorkflowContext,
                    task=task,
                )
            )
        elif 'SendTask' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            @maybe_run_function_twice_to_validate_effects
            async def run_SendTask(
                validating_effects: bool,
                context: resemble.aio.contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    response = await (MessageWorkflowStub(
                        context_or_workflow=context,
                        actor_id=context.actor_id,
                    ).SendTask(
                        typing.cast(resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest, task.request),
                        bearer_token=__internal_magic_token__,
                        idempotency=resemble.aio.idempotency.Idempotency(
                            alias=f'Task {task.task_id.task_uuid}',
                        ),
                    ))

                    await complete(task, response)
                    return response




            return await run_SendTask(
                self.create_context(
                    headers=resemble.aio.headers.Headers(
                        application_id=self.application_id,
                        service_name=self.service_name,
                        actor_id=resemble.aio.types.ActorId(task.task_id.actor_id),
                    ),
                    context_type=resemble.aio.contexts.WorkflowContext,
                    task=task,
                )
            )

        # There are no tasks for this service.
        start_or_validate = "start" if not only_validate else "validate"
        raise RuntimeError(
            f"Attempted to {start_or_validate} task '{task.method_name}' "
            f"on 'Message' which does not exist"
        )

    # Message specific methods:
    async def __Send(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        *,
        validating_effects: bool,
    ) -> Message.SendEffects:
        try:
            response = (
                await self._servicer.Send(
                    context=context,
                    state=state,
                    request=request
                )
            )
            assert_type(
                response,
                [
                    resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse,
                ],
            )
            self.maybe_raise_effect_validation_retry(
                logger=logger,
                idempotency_manager=context,
                method_name='Message.Send',
                validating_effects=validating_effects,
                context=context,
            )
            return Message.SendEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except resemble.aio.contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except resemble.aio.contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except resemble.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `resemble/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: typing.Optional[type] = None
            aborted_type = Message.SendAborted
            if isinstance(aborted, resemble.aio.aborted.SystemAborted):
                if context.task is None:
                    logger.warning(
                        f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(traceback.format_exception(aborted))
                    )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(traceback.format_exception(aborted))
                        )
                    raise resemble.aio.aborted.SystemAborted(
                        resemble.v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {aborted}"
                    )

            raise
        except asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            if context.task is None:
                logger.warning(
                    f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(traceback.format_exception(exception))
                )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.Send') {type(exception).__name__}: {exception}"
            )

    async def _Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        context: resemble.aio.contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: typing.Optional[grpc.aio.ServicerContext] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__service_name__, context.actor_id
                )
            # TODO: this loads a `state` object even when we know we're calling a constructor,
            # in which case (by definition) there is no state. Can we (and is it worth
            # the effort to) change this call to avoid that overhead in that case?
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor=True,
                requires_constructor=True
            ) as (state, writer):

                await self._maybe_authorize(
                    method_name=
                    'resemble.integrations.mailgun.v1.Message.Send',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                )

                effects = await self.__Send(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                if effects.tasks is not None:
                    # NOTE: we validate tasks added as part of a
                    # transaction when we prepare.
                    if transaction is None:
                        await self.tasks_dispatcher.validate(
                            effects.tasks
                        )

                await writer.complete(effects)

                if effects.tasks is not None:
                    if transaction is None:
                        self.tasks_dispatcher.dispatch(effects.tasks)
                    else:
                        assert all(
                            task.task_id.state_type == transaction.state_type
                            for task in effects.tasks
                        ), 'Task state type does not match transaction state type'
                        transaction.tasks.extend(effects.tasks)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_Send(
        self,
        *,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        headers: resemble.aio.headers.Headers,
        grpc_context: grpc.aio.ServicerContext,
    ) -> tuple[resemble.aio.contexts.WriterContext, resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse]:
        context: resemble.aio.contexts.WriterContext = self.create_context(
            headers=headers,
            context_type=resemble.aio.contexts.WriterContext,
        )
        response = resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        resemble.aio.headers.TASK_ID_UUID,
                        str(uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__service_name__, context.actor_id
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor=True,
                requires_constructor=True
            ) as (state, writer):

                # Try to verify the token if a token verifier exists.
                context.auth = await self._maybe_verify_token(headers)

                # Check if we are allowed schedule the task.
                await self._maybe_authorize(
                    method_name=
                    'resemble.integrations.mailgun.v1.Message.Send',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                )

                task = MessageServicerTasksStub(
                    context=context,
                    actor_id=context.actor_id,
                ).Send(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = resemble.aio.state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                # NOTE: we validate tasks added as part of a
                # transaction when we prepare.
                if transaction is None:
                    await self.tasks_dispatcher.validate(effects.tasks)

                await writer.complete(effects)

                if transaction is None:
                    self.tasks_dispatcher.dispatch(effects.tasks)
                else:
                    assert task.task_id.state_type == transaction.state_type
                    transaction.tasks.extend(effects.tasks)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            resemble.aio.headers.TASK_ID_UUID,
                            str(uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        grpc_context: grpc.aio.ServicerContext,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        headers = resemble.aio.headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id, headers.service_name, headers.actor_id
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Forward to the correct one.
            correct_address = self.placement_client.address_for_consensus(authoritative_consensus)
            channel = self.channel_manager.get_channel_to(correct_address)
            stub = resemble.integrations.mailgun.v1.mailgun_pb2_grpc.MessageInterfaceStub(channel)
            call = stub.Send(
                request=request,
                metadata=grpc_context.invocation_metadata(),
            )
            response = await call
            # Make sure any trailing metadata on the response is forwarded back.
            grpc_context.set_trailing_metadata(await call.trailing_metadata())
            return response


        @maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
            context: typing.Optional[resemble.aio.contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_Send(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    context_type=resemble.aio.contexts.WriterContext,
                )
                assert context is not None

                return await self._Send(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except resemble.aio.contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except resemble.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(traceback.format_exc())
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def __SendTask(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        *,
        validating_effects: bool,
    ) -> Message.SendTaskEffects:
        try:
            response = (
                await self._servicer.SendTask(
                    context=context,
                    state=state,
                    request=request
                )
            )
            assert_type(
                response,
                [
                    resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse,
                ],
            )
            self.maybe_raise_effect_validation_retry(
                logger=logger,
                idempotency_manager=context,
                method_name='Message.SendTask',
                validating_effects=validating_effects,
                context=context,
            )
            return Message.SendTaskEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except resemble.aio.contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except resemble.aio.contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except resemble.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `resemble/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: typing.Optional[type] = None
            aborted_type = Message.SendTaskAborted
            if isinstance(aborted, resemble.aio.aborted.SystemAborted):
                if context.task is None:
                    logger.warning(
                        f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(traceback.format_exception(aborted))
                    )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(traceback.format_exception(aborted))
                        )
                    raise resemble.aio.aborted.SystemAborted(
                        resemble.v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {aborted}"
                    )

            raise
        except asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            if context.task is None:
                logger.warning(
                    f"Unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(traceback.format_exception(exception))
                )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'resemble.integrations.mailgun.v1.Message.SendTask') {type(exception).__name__}: {exception}"
            )

    async def _SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        context: resemble.aio.contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: typing.Optional[grpc.aio.ServicerContext] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__service_name__, context.actor_id
                )
            # TODO: this loads a `state` object even when we know we're calling a constructor,
            # in which case (by definition) there is no state. Can we (and is it worth
            # the effort to) change this call to avoid that overhead in that case?
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                await self._maybe_authorize(
                    method_name=
                    'resemble.integrations.mailgun.v1.Message.SendTask',
                    headers=context._headers,
                    auth=context.auth,
                    state=state,
                    request=request,
                )

                effects = await self.__SendTask(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                if effects.tasks is not None:
                    # NOTE: we validate tasks added as part of a
                    # transaction when we prepare.
                    if transaction is None:
                        await self.tasks_dispatcher.validate(
                            effects.tasks
                        )

                await writer.complete(effects)

                if effects.tasks is not None:
                    if transaction is None:
                        self.tasks_dispatcher.dispatch(effects.tasks)
                    else:
                        assert all(
                            task.task_id.state_type == transaction.state_type
                            for task in effects.tasks
                        ), 'Task state type does not match transaction state type'
                        transaction.tasks.extend(effects.tasks)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_SendTask(
        self,
        *,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        headers: resemble.aio.headers.Headers,
        grpc_context: grpc.aio.ServicerContext,
    ) -> tuple[resemble.aio.contexts.WriterContext, resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse]:
        context: resemble.aio.contexts.WriterContext = self.create_context(
            headers=headers,
            context_type=resemble.aio.contexts.WriterContext,
        )
        response = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        resemble.aio.headers.TASK_ID_UUID,
                        str(uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__service_name__, context.actor_id
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                # Try to verify the token if a token verifier exists.
                context.auth = await self._maybe_verify_token(headers)

                # Check if we are allowed schedule the task.
                await self._maybe_authorize(
                    method_name=
                    'resemble.integrations.mailgun.v1.Message.SendTask',
                    headers=context._headers,
                    auth=context.auth,
                    state=state,
                    request=request,
                )

                task = MessageServicerTasksStub(
                    context=context,
                    actor_id=context.actor_id,
                ).SendTask(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = resemble.aio.state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                # NOTE: we validate tasks added as part of a
                # transaction when we prepare.
                if transaction is None:
                    await self.tasks_dispatcher.validate(effects.tasks)

                await writer.complete(effects)

                if transaction is None:
                    self.tasks_dispatcher.dispatch(effects.tasks)
                else:
                    assert task.task_id.state_type == transaction.state_type
                    transaction.tasks.extend(effects.tasks)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            resemble.aio.headers.TASK_ID_UUID,
                            str(uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        grpc_context: grpc.aio.ServicerContext,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        headers = resemble.aio.headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id, headers.service_name, headers.actor_id
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Forward to the correct one.
            correct_address = self.placement_client.address_for_consensus(authoritative_consensus)
            channel = self.channel_manager.get_channel_to(correct_address)
            stub = resemble.integrations.mailgun.v1.mailgun_pb2_grpc.MessageInterfaceStub(channel)
            call = stub.SendTask(
                request=request,
                metadata=grpc_context.invocation_metadata(),
            )
            response = await call
            # Make sure any trailing metadata on the response is forwarded back.
            grpc_context.set_trailing_metadata(await call.trailing_metadata())
            return response


        @maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
            context: typing.Optional[resemble.aio.contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_SendTask(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    context_type=resemble.aio.contexts.WriterContext,
                )
                assert context is not None

                return await self._SendTask(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except resemble.aio.contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except resemble.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(traceback.format_exc())
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def _maybe_authorize(
        self,
        *,
        method_name: str,
        headers: resemble.aio.headers.Headers,
        auth: typing.Optional[resemble.aio.auth.Auth],
        state: typing.Optional[MessageStateType] = None,
        request: typing.Optional[MessageRequestTypes] = None,
    ) -> None:
        """Check authorization decision for the given method, using available
        information.

        Raises `PermissionDenied` in case authorizer is present but the request
        is not authorized.
        """
        # To authorize internal calls, we use an internal magic token.
        if headers.bearer_token == __internal_magic_token__:
            return

        if self._authorizer is None:
            return

        if not self._authorizer.can_authorize(method_name):
            # Better safe than sorry.
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.PermissionDenied(),
                message=
                    f"Authorizer does not support method '{method_name}'"
            )

        # If there is state, ensure that we don't accidentally mutate it.
        if state is not None:
            # TODO: If we can read-only a state object we can avoid a copy here.
            state_copy = MessageStateType()
            state_copy.CopyFrom(state)
            state = state_copy

        # Create context for the authorizer. This is a `ReaderContext`
        # independently of the calling context.
        with self.use_context(
            headers=(
                # Get headers suitable for doing authorization.
                headers.copy_for_token_verification_and_authorization()
            ),
            context_type=resemble.aio.contexts.ReaderContext,
        ) as context:
            context.auth = auth

            # Get the authorizer decision.
            authorization_decision = await self._authorizer.authorize(
                method_name=method_name,
                context=context,
                state=state,
                request=request,
            )

        # Enforce correct authorizer decision type.
        try:
            assert_type(
                authorization_decision,
                [
                    resemble.v1alpha1.errors_pb2.Ok,
                    resemble.v1alpha1.errors_pb2.Unauthenticated,
                    resemble.v1alpha1.errors_pb2.PermissionDenied,
                ]
            )
        except TypeError as e:
            # Retyping.cast the exception to provide more context.
            authorizer_type = f"{type(self._authorizer).__module__}.{type(self._authorizer).__name__}"
            raise TypeError(
                f"Authorizer '{authorizer_type}' "
                f"returned unexpected type '{type(authorization_decision).__name__}' "
                f"for method '{method_name}' on '{headers.actor_id}'"
            ) from e

        # If the decision is not `True`, raise a `SystemAborted` with either a
        # `PermissionDenied` error (in case of `False`) or an `Unauthenticated`
        # error.
        if not isinstance(authorization_decision, resemble.v1alpha1.errors_pb2.Ok):
            if isinstance(authorization_decision, resemble.v1alpha1.errors_pb2.Unauthenticated):
                logger.warning(
                    "Unauthenticated call to "
                    f"'{method_name}' on '{headers.actor_id}'"
                )

            raise resemble.aio.aborted.SystemAborted(
                authorization_decision,
                message=
                f'You are not authorized to call {method_name} on '
                f"'{headers.actor_id}'"
            )

    async def _maybe_verify_token(self, headers) -> typing.Optional[resemble.aio.auth.Auth]:
        """Verify the bearer token and if a token verifier is present.

        Returns the (optional) `resemble.aio.auth.Auth` object
        produced by the token verifier if the token can be verified.
        """
        auth: typing.Optional[resemble.aio.auth.Auth] = None

        if self._token_verifier is not None and headers.bearer_token is not None:
            if headers.bearer_token == __internal_magic_token__:
                return auth

            with self.use_context(
                headers=(
                    # Get headers suitable for doing token verification.
                    headers.copy_for_token_verification_and_authorization()
                ),
                context_type=resemble.aio.contexts.ReaderContext,
            ) as context:
                auth = await self._token_verifier.verify_token(
                    context=context,
                    token=headers.bearer_token,
                )

        return auth


class _MessageStub(resemble.aio.stubs.Stub):

    __service_name__ = resemble.aio.types.ServiceName('resemble.integrations.mailgun.v1.MessageInterface')

    def __init__(
        self,
        *,
        context_or_workflow: resemble.aio.contexts.Context | resemble.aio.workflows.Workflow,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        context: typing.Optional[resemble.aio.contexts.Context] = None

        if isinstance(context_or_workflow, resemble.aio.contexts.Context):
            context = context_or_workflow

            # ISSUE(https://github.com/reboot-dev/respect/issues/2258)
            # For now we do not explicitly pass on the bearer token here, as it
            # might have security implications to just pass on the token to any
            # service we are calling.

        elif isinstance(context_or_workflow, resemble.aio.workflows.Workflow):
            bearer_token = context_or_workflow.bearer_token

        super().__init__(
            channel_manager=context_or_workflow.channel_manager,
            idempotency_manager=context_or_workflow,
            service_name=self.__service_name__,
            actor_id=actor_id,
            context=context,
            bearer_token=bearer_token,
        )

        channel = self._channel_manager.get_channel_for(
            self.__service_name__, actor_id
        )
        self._stub = resemble.integrations.mailgun.v1.mailgun_pb2_grpc.MessageInterfaceStub(channel)


class MessageReaderStub(_MessageStub):

    def __init__(
        self,
        context_or_workflow: resemble.aio.contexts.ReaderContext | resemble.aio.contexts.WriterContext | resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        *,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        assert_type(context_or_workflow, [resemble.aio.contexts.ReaderContext, resemble.aio.contexts.WriterContext, resemble.aio.contexts.TransactionContext, resemble.aio.contexts.WorkflowContext, resemble.aio.workflows.Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # Message specific methods:




class MessageWriterStub(_MessageStub):

    def __init__(
        self,
        context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        *,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        assert_type(context_or_workflow, [resemble.aio.contexts.TransactionContext, resemble.aio.contexts.WorkflowContext, resemble.aio.workflows.Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # Message specific methods:
    async def Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='Send',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'Send',
                self._stub.Send,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse,
                aborted_type=Message.SendAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                return await call

    async def SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='SendTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'SendTask',
                self._stub.SendTask,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse,
                aborted_type=Message.SendTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                return await call


class MessageWorkflowStub(_MessageStub):

    def __init__(
        self,
        *,
        context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        assert_type(context_or_workflow, [resemble.aio.contexts.TransactionContext, resemble.aio.contexts.WorkflowContext, resemble.aio.workflows.Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # Message specific methods:
    async def Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        idempotency_key: typing.Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='Send',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'Send',
                self._stub.Send,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse,
                aborted_type=Message.SendAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                return await call

    async def SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        idempotency_key: typing.Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='SendTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'SendTask',
                self._stub.SendTask,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse,
                aborted_type=Message.SendTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                return await call



class MessageTasksStub(_MessageStub):

    def __init__(
        self,
        context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        *,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        assert_type(context_or_workflow, [resemble.aio.contexts.TransactionContext, resemble.aio.contexts.WorkflowContext, resemble.aio.workflows.Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # Message specific methods:
    async def Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> tasks_pb2.TaskId:
        idempotency_key: typing.Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='Send',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'Send',
                self._stub.Send,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse,
                aborted_type=Message.SendAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == resemble.aio.headers.TASK_ID_UUID:
                        return tasks_pb2.TaskId(
                            state_type=self._headers.state_type_name,
                            actor_id=self._headers.actor_id,
                            task_uuid=uuid.UUID(value).bytes,
                        )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )

    async def SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None,
        *,
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None,
        bearer_token: typing.Optional[str] = None,
    ) -> tasks_pb2.TaskId:
        idempotency_key: typing.Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='SendTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                'SendTask',
                self._stub.SendTask,
                request,
                unary=True,
                reader=False,
                response_type=resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse,
                aborted_type=Message.SendTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == resemble.aio.headers.TASK_ID_UUID:
                        return tasks_pb2.TaskId(
                            state_type=self._headers.state_type_name,
                            actor_id=self._headers.actor_id,
                            task_uuid=uuid.UUID(value).bytes,
                        )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )



class MessageServicerTasksStub(_MessageStub):

    _context: resemble.aio.contexts.WriterContext

    def __init__(
        self,
        context: resemble.aio.contexts.WriterContext,
        *,
        actor_id: resemble.aio.types.ActorId,
        bearer_token: typing.Optional[str] = None,
    ):
        assert_type(context, [resemble.aio.contexts.WriterContext])
        super().__init__(
            context_or_workflow=context,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

        self._context = context

    # Message specific methods:
    def Send(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
        *,
        schedule: typing.Optional[datetime | timedelta] = None,
    ) -> resemble.aio.tasks.TaskEffect:
        task = resemble.aio.tasks.TaskEffect(
            service_name=self.__service_name__,
            actor_id=self._headers.actor_id,
            method_name='Send',
            request=request,
            schedule=(datetime.now() + schedule) if isinstance(
                schedule, timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    def SendTask(
        self,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
        *,
        schedule: typing.Optional[datetime | timedelta] = None,
    ) -> resemble.aio.tasks.TaskEffect:
        task = resemble.aio.tasks.TaskEffect(
            service_name=self.__service_name__,
            actor_id=self._headers.actor_id,
            method_name='SendTask',
            request=request,
            schedule=(datetime.now() + schedule) if isinstance(
                schedule, timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task



class MessageAuthorizerMixin:
    """Mixin that provides a default implementation of the `can_authorize`
    method for all Message authorizers.
    """

    def can_authorize(self, method_name: str) -> bool:
        service_method_names = [
            'resemble.integrations.mailgun.v1.Message.Send',
            'resemble.integrations.mailgun.v1.Message.SendTask',
        ]
        return method_name in service_method_names


MessageStateType: typing.TypeAlias = resemble.integrations.mailgun.v1.mailgun_pb2.Message
MessageRequestTypes: typing.TypeAlias = \
        resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest \
        | resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest


class MessageAuthorizer(
    MessageAuthorizerMixin,
    resemble.aio.auth.authorizers.Authorizer[MessageStateType, MessageRequestTypes],
):
    StateType: typing.TypeAlias = MessageStateType
    RequestTypes: typing.TypeAlias = MessageRequestTypes

    async def authorize(
        self,
        *,
        method_name: str,
        context: resemble.aio.contexts.ReaderContext,
        state: typing.Optional[MessageStateType] = None,
        request: typing.Optional[MessageRequestTypes] = None,
    ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
        if method_name == 'resemble.integrations.mailgun.v1.Message.Send':
            return await self.Send(
                context,
                typing.cast(resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest, request),
            )
        elif method_name == 'resemble.integrations.mailgun.v1.Message.SendTask':
            return await self.SendTask(
                context,
                typing.cast(resemble.integrations.mailgun.v1.mailgun_pb2.Message, state),
                typing.cast(resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest, request),
            )
        else:
            return resemble.v1alpha1.errors_pb2.PermissionDenied()

    async def Send(
        self,
        context: resemble.aio.contexts.ReaderContext,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
    ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
        return resemble.v1alpha1.errors_pb2.PermissionDenied()

    async def SendTask(
        self,
        context: resemble.aio.contexts.ReaderContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
    ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
        return resemble.v1alpha1.errors_pb2.PermissionDenied()


    # Off-the shelf authorizers for Message:

    class AllowAllIfAuthenticated(
        MessageAuthorizerMixin,
        resemble.aio.auth.authorizers.Authorizer,
    ):
        """An authorizer for Message that allows all requests if the
        caller is authenticated.
        """
        async def authorize(
            self,
            *,
            method_name: str,
            context: resemble.aio.contexts.ReaderContext,
            state: typing.Optional[MessageStateType] = None,
            request: typing.Optional[MessageRequestTypes] = None,
        ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
            if context.auth is None:
                return resemble.v1alpha1.errors_pb2.Unauthenticated()

            return resemble.v1alpha1.errors_pb2.Ok()


class MessageServicer(resemble.aio.servicers.Servicer):
    Authorizer: typing.TypeAlias = MessageAuthorizer

    __service_name__ = resemble.aio.types.ServiceName('resemble.integrations.mailgun.v1.MessageInterface')
    __state_type_name__ = resemble.aio.types.StateTypeName('resemble.integrations.mailgun.v1.Message')
    __state_type__ = resemble.integrations.mailgun.v1.mailgun_pb2.Message
    __file_descriptor__ = resemble.integrations.mailgun.v1.mailgun_pb2.DESCRIPTOR

    def __init__(self):
        # NOTE: need to hold on to the middleware so we can do inline
        # writes (see 'self.write(...)').
        #
        # Because '_middleware' is not really private this does mean
        # users may do possibly dangerous things, but this is no more
        # likely given they could have already overridden
        # 'create_middleware()'.
        self._middleware: typing.Optional[MessageServicerMiddleware] = None

    def create_middleware(
        self,
        *,
        application_id: resemble.aio.types.ApplicationId,
        consensus_id: resemble.aio.types.ConsensusId,
        state_manager: resemble.aio.state_managers.StateManager,
        placement_client: resemble.aio.placement.PlacementClient,
        channel_manager: resemble.aio.internals.channel_manager._ChannelManager,
        tasks_cache: resemble.aio.internals.tasks_cache.TasksCache,
        token_verifier: typing.Optional[resemble.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: resemble.aio.contexts.EffectValidation,
        ready: asyncio.Event,
    ) -> MessageServicerMiddleware:
        self._middleware = MessageServicerMiddleware(
            servicer=self,
            application_id=application_id,
            consensus_id=consensus_id,
            state_manager=state_manager,
            placement_client=placement_client,
            channel_manager=channel_manager,
            tasks_cache=tasks_cache,
            token_verifier=token_verifier,
            effect_validation=effect_validation,
            ready=ready,
        )
        return self._middleware

    def authorizer(self) -> typing.Optional[resemble.aio.auth.authorizers.Authorizer]:
        return None

    def token_verifier(self) -> typing.Optional[resemble.aio.auth.token_verifiers.TokenVerifier]:
        return None

    def lookup(
        self,
        *,
        bearer_token: typing.Optional[str] = None,
    ) -> Message.WeakReference:
        # TODO(benh): it's still possible that the `bearer_token` from
        # the context will not be sufficient for making a
        # call/schedule due to a user defined authorizer; consider
        # creating a "per middleware" bearer token that always works
        # for calls from `self.lookup()`.
        context = resemble.aio.contexts.Context.get()

        if context is None:
            raise RuntimeError(
                'Missing asyncio context variable `context`; '
                'are you using this class without Resemble?'
            )

        return Message.WeakReference(
            actor_key_or_id=context.actor_id,
            bearer_token=bearer_token or context.bearer_token,
        )

    class _Schedule:

        def __init__(
            self,
            *,
            when: typing.Optional[datetime | timedelta] = None,
        ):
            self._when = when

        # Message specific methods:
        def SendTask(
            self,
            __context__: resemble.aio.contexts.WriterContext,
            *,
            send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
        ) -> resemble.aio.tasks.TaskEffect:
            if send_request is not None and not isinstance(
                send_request,
                resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest': field 'send_request' is not "
                    f"of required type 'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest'"
                )
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments
            # are always non-None, when in reality they are optional.
            request = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest(
                send_request=send_request,  # type: ignore[arg-type]
            )
            return MessageServicerTasksStub(
                context=__context__,
                actor_id=__context__.actor_id,
            ).SendTask(
                request,
                schedule=self._when,
            )


    class Effects(resemble.aio.state_managers.Effects):
        def __init__(
            self,
            *,
            state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
            response: typing.Optional[google.protobuf.message.Message] = None,
            tasks: typing.Optional[list[resemble.aio.tasks.TaskEffect]] = None,
            _colocated_upserts: typing.Optional[list[tuple[str, typing.Optional[bytes]]]] = None,
        ):
            assert_type(state, [resemble.integrations.mailgun.v1.mailgun_pb2.Message])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)

    class SendEffects(Effects):
        def __init__(
            self,
            *,
            state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
            response: resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse,
            tasks: typing.Optional[list[resemble.aio.tasks.TaskEffect]] = None,
            _colocated_upserts: typing.Optional[list[tuple[str, typing.Optional[bytes]]]] = None,
        ):
            assert_type(state, [resemble.integrations.mailgun.v1.mailgun_pb2.Message])
            assert_type(response, [resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)


    class SendTaskEffects(Effects):
        def __init__(
            self,
            *,
            state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
            response: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse,
            tasks: typing.Optional[list[resemble.aio.tasks.TaskEffect]] = None,
            _colocated_upserts: typing.Optional[list[tuple[str, typing.Optional[bytes]]]] = None,
        ):
            assert_type(state, [resemble.integrations.mailgun.v1.mailgun_pb2.Message])
            assert_type(response, [resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)



    class InlineWriterCallable(typing.Protocol):
        async def __call__(
            self,
            context: resemble.aio.contexts.WriterContext,
            state: resemble.integrations.mailgun.v1.mailgun_pb2.Message
        ) -> MessageServicer.Effects:
            ...

    async def read(
        self, context: resemble.aio.contexts.WorkflowContext
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.Message:
        """Read the current state within a transaction."""

        assert_type(context, [resemble.aio.contexts.WorkflowContext])

        if self._middleware is None:
            raise RuntimeError(
                'Resemble middleware was not created; '
                'are you using this class without Resemble?'
            )

        return await self._middleware._state_manager.read(
            context, self.__state_type__
        )

    async def write(
        self,
        context: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext,
        writer: InlineWriterCallable,
        __options__: typing.Optional[resemble.aio.call.Options] = None,
    ):
        """Perform an "inline write" within a transaction or workflow."""
        assert_type(context, [resemble.aio.contexts.TransactionContext, resemble.aio.contexts.WorkflowContext])

        if self._middleware is None:
            raise RuntimeError(
                'Resemble middleware was not created; '
                'are you using this class without Resemble?'
            )

        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None

        if __options__ is not None:
            if __options__.idempotency_key is not None:
                idempotency = resemble.aio.idempotency.Idempotency(key=__options__.idempotency_key)
            elif __options__.idempotency_alias is not None:
                idempotency = resemble.aio.idempotency.Idempotency(alias=__options__.idempotency_alias)
            elif __options__.generate_idempotency:
                idempotency = resemble.aio.idempotency.Idempotency(generate=True)
            if __options__.metadata is not None:
                metadata = __options__.metadata

        if metadata is None:
            metadata = ()

        headers = resemble.aio.headers.Headers(
            application_id=context.application_id,
            service_name=self.__service_name__,
            actor_id=context.actor_id,
            transaction_ids=context.transaction_ids,
            transaction_coordinator_service=context
            .transaction_coordinator_service,
            transaction_coordinator_actor_id=context
            .transaction_coordinator_actor_id
        )

        metadata += headers.to_grpc_metadata()

        idempotency_key: typing.Optional[str]
        with context.idempotently(
            service=self.__service_name__,
            actor_id=context.actor_id,
            method=None,
            request=None,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:

            if any(t[0] == resemble.aio.headers.IDEMPOTENCY_KEY_HEADER for t in metadata):
                raise ValueError(
                    f"Do not set '{resemble.aio.headers.IDEMPOTENCY_KEY_HEADER}' metadata yourself"
                )

            if idempotency_key is not None:
                metadata += (
                    (resemble.aio.headers.IDEMPOTENCY_KEY_HEADER, idempotency_key),
                )

            with self._middleware.use_context(
                headers=resemble.aio.headers.Headers.from_grpc_metadata(metadata),
                context_type=resemble.aio.contexts.WriterContext,
            ) as writer_context:
                # Check if we already have performed this mutation!
                #
                # We do this _before_ calling 'transactionally()' because
                # if this call is for a transaction method _and_ we've
                # already performed the transaction then we don't want to
                # become a transaction participant (again) we just want to
                # return the transaction's response.
                idempotent_mutation = (
                    self._middleware._state_manager.check_for_idempotent_mutation(
                        writer_context
                    )
                )

                if idempotent_mutation is not None:
                    # NOTE: invariant for now is that inline writers can't
                    # have responses which we also check for below.
                    assert len(idempotent_mutation.response) == 0
                    return

                async with self._middleware._state_manager.transactionally(
                    writer_context, self._middleware.tasks_dispatcher
                ) as transaction:
                    async with self._middleware._state_manager.writer(
                        writer_context,
                        self.__state_type__,
                        transaction=transaction,
                    ) as (state, state_manager_writer):
                        await writer(context=writer_context, state=state)

                        effects = MessageServicer.Effects(
                            state=state,
                            tasks=context._tasks,
                        )

                        # All idempotent mutations require a reponse, so
                        # for now we just use `Empty`.
                        #
                        # TODO(benh): figure out if we want to support
                        # returning a response because we'd need to
                        # pickle it maybe using `memoize` to support
                        # an idempotent mutation.
                        assert effects.response is None
                        effects.response = empty_pb2.Empty()

                        if effects.tasks is not None:
                            # NOTE: we validate tasks added as part of a
                            # transaction when we prepare.
                            if transaction is None:
                                await self._middleware.tasks_dispatcher.validate(
                                    effects.tasks
                                )

                        await state_manager_writer.complete(effects)

                        if effects.tasks is not None:
                            if transaction is None:
                                self._middleware.tasks_dispatcher.dispatch(effects.tasks)
                            else:
                                assert all(
                                    task.task_id.state_type == transaction.state_type
                                    for task in effects.tasks
                                ), 'Task state type does not match transaction state type'
                                transaction.tasks.extend(effects.tasks)

    # Message specific methods:
    class _Idempotently:

        def __init__(
            self,
            *,
            servicer: MessageServicer,
            alias: typing.Optional[str],
            key: typing.Optional[str],
        ):
            self._servicer = servicer
            self._alias = alias
            self._key = key

        async def write(
            self,
            context: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext,
            writer: MessageServicer.InlineWriterCallable,
            __options__: resemble.aio.call.Options = resemble.aio.call.Options(),
        ):
            if __options__.idempotency_key is not None:
                raise RuntimeError(
                    'Found redundant idempotency key in `Options`'
                )

            if __options__.idempotency_alias is not None:
                raise RuntimeError(
                    'Found redundant idempotency alias in `Options`'
                )

            if self._alias is not None:
                assert self._key is None
                __options__ = dataclasses.replace(
                    __options__,
                    idempotency_alias=self._alias,
                )
            elif self._key is not None:
                assert self._alias is None
                __options__ = dataclasses.replace(
                    __options__,
                    idempotency_key=self._key,
                )
            else:
                assert self._alias is None and self._key is None
                __options__ = dataclasses.replace(
                    __options__,
                    generate_idempotency=True,
                )

            return await self._servicer.write(context, writer, __options__)

    def idempotently(
        self,
        alias: typing.Optional[str] = None,
        *,
        key: typing.Optional[str] = None,
    ) -> MessageServicer._Idempotently:
        if alias is not None and key is not None:
            raise RuntimeError(
                'Only one of the positional argument `alias` '
                'or the keyword argument `key` should be specified; '
                f'see {resemble.settings.DOCS_BASE_URL}/docs/model/safety_correctness/idempotency '
                'for more information'
            )

        return MessageServicer._Idempotently(
            servicer=self, alias=alias, key=key
        )

    # Message specific methods:
    @abstractmethod
    async def Send(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        raise NotImplementedError

    @abstractmethod
    async def SendTask(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        raise NotImplementedError


class Message:

    Interface: typing.TypeAlias = MessageServicer

    Effects: typing.TypeAlias = MessageServicer.Effects

    Authorizer: typing.TypeAlias = MessageAuthorizer

    State: typing.TypeAlias = resemble.integrations.mailgun.v1.mailgun_pb2.Message

    __state_type_name__ = resemble.aio.types.StateTypeName("resemble.integrations.mailgun.v1.Message")

    class SendFuture:
        """Represents a future corresponding to a task running on the
        actor. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context_or_workflow: resemble.aio.contexts.Context | resemble.aio.workflows.Workflow,
            *,
            task_id: tasks_pb2.TaskId,
        ) -> None:
            self._channel_manager = context_or_workflow.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> typing.Generator[None, None, resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
                channel = self._channel_manager.get_channel_from_state_type_name(
                    self._task_id.state_type,
                    resemble.aio.types.ActorId(self._task_id.actor_id),
                )

                stub = tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=resemble.aio.headers.Headers(
                            service_name=state_type_to_service(self._task_id.state_type),
                            actor_id=resemble.aio.types.ActorId(self._task_id.actor_id),
                            # TODO(benh): will eventually be necessary to
                            # disambiguate between applications.
                            application_id=None,
                        ).to_grpc_metadata(),
                    )
                except grpc.aio.AioRpcError as error:
                    if error.code() == grpc.StatusCode.NOT_FOUND:
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise resemble.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response = resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse()

                    if (
                        wait_for_task_response.response.TypeName() !=
                        response.DESCRIPTOR.full_name
                    ):
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{wait_for_task_response.response.TypeName()}' "
                            "but expecting type 'resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    wait_for_task_response.response.Unpack(response)
                    return response

            return wait_for_task().__await__()

    SendEffects: typing.TypeAlias = Interface.SendEffects

    class SendAborted(resemble.aio.aborted.Aborted):


        Error = typing.Union[
            resemble.aio.aborted.GrpcError,
            resemble.aio.aborted.ResembleError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            resemble.aio.aborted.GRPC_ERROR_TYPES +
            resemble.aio.aborted.RESEMBLE_ERROR_TYPES
        )

        _error: Error
        _code: grpc.StatusCode
        _message: typing.Optional[str]

        def __init__(
            self,
            error:  resemble.aio.aborted.GrpcError,
            *,
            message: typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + resemble.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Resemble specific or declared method error.
                code = grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> grpc.StatusCode:
            return self._code

        @property
        def message(self) -> typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: google.protobuf.message.Message) -> bool:
            return False

    class SendTaskFuture:
        """Represents a future corresponding to a task running on the
        actor. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context_or_workflow: resemble.aio.contexts.Context | resemble.aio.workflows.Workflow,
            *,
            task_id: tasks_pb2.TaskId,
        ) -> None:
            self._channel_manager = context_or_workflow.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> typing.Generator[None, None, resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
                channel = self._channel_manager.get_channel_from_state_type_name(
                    self._task_id.state_type,
                    resemble.aio.types.ActorId(self._task_id.actor_id),
                )

                stub = tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=resemble.aio.headers.Headers(
                            service_name=state_type_to_service(self._task_id.state_type),
                            actor_id=resemble.aio.types.ActorId(self._task_id.actor_id),
                            # TODO(benh): will eventually be necessary to
                            # disambiguate between applications.
                            application_id=None,
                        ).to_grpc_metadata(),
                    )
                except grpc.aio.AioRpcError as error:
                    if error.code() == grpc.StatusCode.NOT_FOUND:
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise resemble.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse()

                    if (
                        wait_for_task_response.response.TypeName() !=
                        response.DESCRIPTOR.full_name
                    ):
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{wait_for_task_response.response.TypeName()}' "
                            "but expecting type 'resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    wait_for_task_response.response.Unpack(response)
                    return response

            return wait_for_task().__await__()

    SendTaskEffects: typing.TypeAlias = Interface.SendTaskEffects

    class SendTaskAborted(resemble.aio.aborted.Aborted):


        Error = typing.Union[
            resemble.aio.aborted.GrpcError,
            resemble.aio.aborted.ResembleError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            resemble.aio.aborted.GRPC_ERROR_TYPES +
            resemble.aio.aborted.RESEMBLE_ERROR_TYPES
        )

        _error: Error
        _code: grpc.StatusCode
        _message: typing.Optional[str]

        def __init__(
            self,
            error:  resemble.aio.aborted.GrpcError,
            *,
            message: typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + resemble.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Resemble specific or declared method error.
                code = grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> grpc.StatusCode:
            return self._code

        @property
        def message(self) -> typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: google.protobuf.message.Message) -> bool:
            return False


    @classmethod
    async def Send(
        cls,
        __actor_key__: resemble.aio.types.ActorKey | str,
        __context_or_workflow__: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        __options__: typing.Optional[resemble.aio.call.Options] = None,
        *,
        recipient: typing.Optional[str] = None,
        sender: typing.Optional[str] = None,
        subject: typing.Optional[str] = None,
        domain: typing.Optional[str] = None,
        text: typing.Optional[str] = None,
        html: typing.Optional[str] = None,
    ) -> tuple[Message.WeakReference, resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse]:
        if recipient is not None and not isinstance(
            recipient,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'recipient' is not "
                f"of required type 'str'"
            )
        if sender is not None and not isinstance(
            sender,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'sender' is not "
                f"of required type 'str'"
            )
        if subject is not None and not isinstance(
            subject,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'subject' is not "
                f"of required type 'str'"
            )
        if domain is not None and not isinstance(
            domain,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'domain' is not "
                f"of required type 'str'"
            )
        if text is not None and not isinstance(
            text,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'text' is not "
                f"of required type 'str'"
            )
        if html is not None and not isinstance(
            html,
            str,
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest': field 'html' is not "
                f"of required type 'str'"
            )
        # TODO: mypy-protobuf declares that
        # `google.protobuf.message.Message` constructor arguments are
        # always non-None, when in reality they are optional.
        request = resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest(
            recipient=recipient,  # type: ignore[arg-type]
            sender=sender,  # type: ignore[arg-type]
            subject=subject,  # type: ignore[arg-type]
            domain=domain,  # type: ignore[arg-type]
            text=text,  # type: ignore[arg-type]
            html=html,  # type: ignore[arg-type]
        )
        idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None
        metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None
        bearer_token: typing.Optional[str] = None
        if __options__ is not None:
            if __options__.idempotency_key is not None:
                idempotency = resemble.aio.idempotency.Idempotency(key=__options__.idempotency_key)
            elif __options__.idempotency_alias is not None:
                idempotency = resemble.aio.idempotency.Idempotency(alias=__options__.idempotency_alias)
            elif __options__.generate_idempotency:
                idempotency = resemble.aio.idempotency.Idempotency(generate=True)
            if __options__.metadata is not None:
                metadata = __options__.metadata
            if __options__.bearer_token is not None:
                bearer_token = __options__.bearer_token

        reference = cls.lookup(__actor_key__, bearer_token=bearer_token)
        stub = reference._writer(__context_or_workflow__)
        return (
            reference,
            await stub.Send(
                request,
                idempotency=idempotency,
                metadata=metadata,
                bearer_token=bearer_token,
            )
        )


    class WeakReference:

        def __init__(
            self,
            actor_key_or_id: resemble.aio.types.ActorId | resemble.aio.types.ActorKey,
            *,
            bearer_token: typing.Optional[str] = None,
        ):
            self._actor_id = (
                resemble.aio.types.ActorId(actor_key_or_id)
                if resemble.aio.types.ActorId.is_actor_id(actor_key_or_id)
                else resemble.aio.types.ActorId.from_key(Message.__state_type_name__, actor_key_or_id)
            )
            self._idempotency_manager: typing.Optional[resemble.aio.idempotency.IdempotencyManager] = None
            self._reader_stub: typing.Optional[MessageReaderStub] = None
            self._writer_stub: typing.Optional[MessageWriterStub] = None
            self._workflow_stub: typing.Optional[MessageWorkflowStub] = None
            self._tasks_stub: typing.Optional[MessageTasksStub] = None
            self._bearer_token = bearer_token

        def _reader(
            self,
            context_or_workflow: resemble.aio.contexts.ReaderContext | resemble.aio.contexts.WriterContext | resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        ) -> MessageReaderStub:
            if self._reader_stub is None:
                self._reader_stub = MessageReaderStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._reader_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context_or_workflow
            elif self._idempotency_manager != context_or_workflow:
                raise resemble.aio.call.MixedContextsError(
                    "This `WeakReference` for `Message` with ID "
                    f"'{self._actor_id}' has previously been used by a "
                    "different `Context` or `Workflow`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` "
                    "and `Workflow`, by calling "
                    f"`Message.lookup('{self._actor_id}')`."
                )
            return self._reader_stub

        def _writer(
            self,
            context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        ) -> MessageWriterStub:
            if self._writer_stub is None:
                self._writer_stub = MessageWriterStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._writer_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context_or_workflow
            elif self._idempotency_manager != context_or_workflow:
                raise resemble.aio.call.MixedContextsError(
                    "This `WeakReference` for `Message` with ID "
                    f"'{self._actor_id}' has previously been used by a "
                    "different `Context` or `Workflow`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` "
                    "and `Workflow`, by calling "
                    f"`Message.lookup('{self._actor_id}')`."
                )
            return self._writer_stub

        def _workflow(
            self,
            context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        ) -> MessageWorkflowStub:
            if self._workflow_stub is None:
                self._workflow_stub = MessageWorkflowStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._workflow_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context_or_workflow
            elif self._idempotency_manager != context_or_workflow:
                raise resemble.aio.call.MixedContextsError(
                    "This `WeakReference` for `Message` with ID "
                    f"'{self._actor_id}' has previously been used by a "
                    "different `Context` or `Workflow`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` "
                    "and `Workflow`, by calling "
                    f"`Message.lookup('{self._actor_id}')`."
                )
            return self._workflow_stub

        def _tasks(
            self,
            context_or_workflow: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        ) -> MessageTasksStub:
            if self._tasks_stub is None:
                self._tasks_stub = MessageTasksStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._tasks_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context_or_workflow
            elif self._idempotency_manager != context_or_workflow:
                raise resemble.aio.call.MixedContextsError(
                    "This `WeakReference` for `Message` with ID "
                    f"'{self._actor_id}' has previously been used by a "
                    "different `Context` or `Workflow`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` "
                    "and `Workflow`, by calling "
                    f"`Message.lookup('{self._actor_id}')`."
                )
            return self._tasks_stub

        class _Reactively:

            def __init__(
                self,
                *,
                service_name: resemble.aio.types.ServiceName,
                actor_id: resemble.aio.types.ActorId,
                bearer_token: typing.Optional[str] = None,
            ):
                self._service_name = service_name
                self._actor_id = actor_id
                self._bearer_token = bearer_token


        def reactively(self):
            return Message.WeakReference._Reactively(
                service_name=resemble.aio.types.ServiceName('resemble.integrations.mailgun.v1.MessageInterface'),
                actor_id=self._actor_id,
                bearer_token=self._bearer_token,
            )

        class _Idempotently:

            def __init__(
                self,
                *,
                weak_reference: Message.WeakReference,
                alias: typing.Optional[str],
                key: typing.Optional[str],
            ):
                self._weak_reference = weak_reference
                self._alias = alias
                self._key = key

            def schedule(
                self,
                *,
                when: typing.Optional[datetime | timedelta] = None,
            ) -> Message.WeakReference._Schedule:
                return Message.WeakReference._Schedule(
                    self._weak_reference._tasks,
                    when=when,
                    idempotency_alias=self._alias,
                    idempotency_key=self._key,
                    generate_idempotency=self._alias is None and self._key is None,
                )

            async def SendTask(
                self,
                __context_or_workflow__: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
                __options__: resemble.aio.call.Options = resemble.aio.call.Options(),
                *,
                send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
            ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
                if __options__.idempotency_key is not None:
                    raise RuntimeError(
                        'Found redundant idempotency key in `Options`'
                    )

                if __options__.idempotency_alias is not None:
                    raise RuntimeError(
                        'Found redundant idempotency alias in `Options`'
                    )

                if self._alias is not None:
                    assert self._key is None
                    __options__ = dataclasses.replace(
                        __options__,
                        idempotency_alias=self._alias,
                    )
                elif self._key is not None:
                    assert self._alias is None
                    __options__ = dataclasses.replace(
                        __options__,
                        idempotency_key=self._key,
                    )
                else:
                    assert self._alias is None and self._key is None
                    __options__ = dataclasses.replace(
                        __options__,
                        generate_idempotency=True,
                    )

                return await self._weak_reference.SendTask(
                    __context_or_workflow__,
                    __options__,
                    send_request=send_request,
                )


        def idempotently(
            self,
            alias: typing.Optional[str] = None,
            *,
            key: typing.Optional[str] = None,
        ) -> Message.WeakReference._Idempotently:
            if alias is not None and key is not None:
                raise RuntimeError(
                    'Only one of the positional argument `alias` '
                    'or the keyword argument `key` should be specified; '
                    f'see {resemble.settings.DOCS_BASE_URL}/docs/model/safety_correctness/idempotency '
                    'for more information'
                )

            return Message.WeakReference._Idempotently(
                weak_reference=self, alias=alias, key=key
            )

        class _Schedule:

            def __init__(
                self,
                tasks: typing.Callable[[resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow], MessageTasksStub],
                *,
                when: typing.Optional[datetime | timedelta] = None,
                idempotency_alias: typing.Optional[str] = None,
                idempotency_key: typing.Optional[str] = None,
                generate_idempotency: bool = False,
            ) -> None:
                self._tasks = tasks
                self._when = when
                self._idempotency_alias = idempotency_alias
                self._idempotency_key = idempotency_key
                self._generate_idempotency = generate_idempotency

            # Message callable tasks:
            @typing.overload
            async def SendTask(
                self,
                __context_or_workflow__: resemble.aio.contexts.WriterContext | resemble.aio.contexts.TransactionContext,
                __options__: typing.Optional[resemble.aio.call.Options] = None,
                *,
                send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
            ) -> resemble.aio.tasks.TaskEffect:
                ...

            @typing.overload
            async def SendTask(
                self,
                __context_or_workflow__: resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
                __options__: typing.Optional[resemble.aio.call.Options] = None,
                *,
                send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
            ) -> Message.SendTaskFuture:
                ...

            async def SendTask(
                self,
                __context_or_workflow__: resemble.aio.contexts.WriterContext | resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
                __options__: typing.Optional[resemble.aio.call.Options] = None,
                *,
                send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
            ) -> resemble.aio.tasks.TaskEffect | Message.SendTaskFuture:
                if send_request is not None and not isinstance(
                    send_request,
                    resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest': field 'send_request' is not "
                        f"of required type 'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest'"
                    )
                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                request = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest(
                    send_request=send_request,  # type: ignore[arg-type]
                )

                if isinstance(__context_or_workflow__, resemble.aio.contexts.WriterContext):
                    return MessageServicerTasksStub(
                        context=__context_or_workflow__,
                        actor_id=__context_or_workflow__.actor_id,
                    ).SendTask(
                        request,
                        schedule=self._when,
                    )

                schedule: typing.Optional[datetime] = (datetime.now() + self._when) if isinstance(
                    self._when, timedelta
                ) else self._when

                metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None
                idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None
                bearer_token: typing.Optional[str] = None

                if __options__ is not None:
                    if __options__.idempotency_key is not None:
                        if (
                            self._idempotency_key is not None or
                            self._idempotency_alias is not None or
                            self._generate_idempotency
                        ):
                            raise RuntimeError(
                                'Found redundant idempotency key in `Options`'
                            )
                        idempotency = resemble.aio.idempotency.Idempotency(key=__options__.idempotency_key)
                    elif __options__.idempotency_alias is not None:
                        if (
                            self._idempotency_key is not None or
                            self._idempotency_alias is not None or
                            self._generate_idempotency
                        ):
                            raise RuntimeError(
                                'Found redundant idempotency alias in `Options`'
                            )
                        idempotency = resemble.aio.idempotency.Idempotency(alias=__options__.idempotency_alias)
                    elif __options__.generate_idempotency:
                        if (
                            self._idempotency_key is not None or
                            self._idempotency_alias is not None or
                            self._generate_idempotency
                        ):
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        idempotency = resemble.aio.idempotency.Idempotency(generate=True)
                    if __options__.metadata is not None:
                        metadata = __options__.metadata
                    if __options__.bearer_token is not None:
                        bearer_token = __options__.bearer_token

                if self._idempotency_key is not None:
                    assert self._idempotency_alias is None
                    assert not self._generate_idempotency
                    assert idempotency is None
                    idempotency = resemble.aio.idempotency.Idempotency(key=self._idempotency_key)
                elif self._idempotency_alias is not None:
                    assert self._idempotency_key is None
                    assert not self._generate_idempotency
                    assert idempotency is None
                    idempotency = resemble.aio.idempotency.Idempotency(alias=self._idempotency_alias)
                elif self._generate_idempotency is None:
                    assert self._idempotency_key is None
                    assert self._idempotency_alias is None
                    assert idempotency is None
                    idempotency = resemble.aio.idempotency.Idempotency(generate=True)

                # Add scheduling information to the metadata.
                metadata = (
                    (resemble.aio.headers.TASK_SCHEDULE,
                    schedule.isoformat() if schedule else ''),
                ) + (metadata or tuple())

                task_id = await self._tasks(
                    __context_or_workflow__
                ).SendTask(
                    request,
                    idempotency=idempotency,
                    metadata=metadata,
                    bearer_token=bearer_token,
                )

                if isinstance(__context_or_workflow__, resemble.aio.contexts.TransactionContext):
                    return resemble.aio.tasks.TaskEffect(
                        service_name=resemble.aio.types.ServiceName(
                            'resemble.integrations.mailgun.v1.MessageInterface'
                        ),
                        actor_id=__context_or_workflow__.actor_id,
                        method_name='SendTask',
                        request=request,
                        task_uuid=task_id.task_uuid,
                        schedule=schedule,
                    )

                return Message.SendTaskFuture(
                    __context_or_workflow__,
                    task_id=task_id,
                )


        def schedule(
            self,
            *,
            when: typing.Optional[datetime | timedelta] = None,
        ) -> Message.WeakReference._Schedule:
            return Message.WeakReference._Schedule(
                self._tasks, when=when
            )

        # Message specific methods:
        async def SendTask(
            self,
            __context_or_workflow__: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
            __options__: typing.Optional[resemble.aio.call.Options] = None,
            *,
            send_request: typing.Optional[resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest] = None,
        ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
            if send_request is not None and not isinstance(
                send_request,
                resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest': field 'send_request' is not "
                    f"of required type 'resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest'"
                )
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            request = resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest(
                send_request=send_request,  # type: ignore[arg-type]
            )
            idempotency: typing.Optional[resemble.aio.idempotency.Idempotency] = None
            metadata: typing.Optional[resemble.aio.types.GrpcMetadata] = None
            bearer_token: typing.Optional[str] = None
            if __options__ is not None:
                if __options__.idempotency_key is not None:
                    idempotency = resemble.aio.idempotency.Idempotency(key=__options__.idempotency_key)
                elif __options__.idempotency_alias is not None:
                    idempotency = resemble.aio.idempotency.Idempotency(alias=__options__.idempotency_alias)
                elif __options__.generate_idempotency:
                    idempotency = resemble.aio.idempotency.Idempotency(generate=True)
                if __options__.metadata is not None:
                    metadata = __options__.metadata
                if __options__.bearer_token is not None:
                    bearer_token = __options__.bearer_token

            return await self._writer(__context_or_workflow__).SendTask(
                request,
                idempotency=idempotency,
                metadata=metadata,
                bearer_token=bearer_token,
            )


    @classmethod
    def lookup(
        cls,
        actor_key_or_id: resemble.aio.types.ActorKey | resemble.aio.types.ActorId,
        *,
        bearer_token: typing.Optional[str] = None,
    ) -> Message.WeakReference:
        return Message.WeakReference(
            actor_key_or_id=actor_key_or_id,
            bearer_token=bearer_token,
        )

    class _Idempotently:

        def __init__(self, *, alias: typing.Optional[str], key: typing.Optional[str]):
            self._alias = alias
            self._key = key

        async def Send(
            self,
            __actor_key__: resemble.aio.types.ActorKey | str,
            __context_or_workflow__: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
            __options__: resemble.aio.call.Options = resemble.aio.call.Options(),
            *,
            recipient: typing.Optional[str] = None,
            sender: typing.Optional[str] = None,
            subject: typing.Optional[str] = None,
            domain: typing.Optional[str] = None,
            text: typing.Optional[str] = None,
            html: typing.Optional[str] = None,
        ) -> tuple[Message.WeakReference, resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse]:
            if __options__.idempotency_key is not None:
                raise RuntimeError(
                    'Found redundant idempotency key in `Options`'
                )

            if __options__.idempotency_alias is not None:
                raise RuntimeError(
                    'Found redundant idempotency alias in `Options`'
                )

            if self._alias is not None:
                assert self._key is None
                __options__ = dataclasses.replace(
                    __options__,
                    idempotency_alias=self._alias,
                )
            elif self._key is not None:
                assert self._alias is None
                __options__ = dataclasses.replace(
                    __options__,
                    idempotency_key=self._key,
                )
            else:
                assert self._alias is None and self._key is None
                __options__ = dataclasses.replace(
                    __options__,
                    generate_idempotency=True,
                )

            return await Message.Send(
                __actor_key__,
                __context_or_workflow__,
                __options__,
                recipient=recipient,
                sender=sender,
                subject=subject,
                domain=domain,
                text=text,
                html=html,
            )


    @classmethod
    def idempotently(
        cls,
        alias: typing.Optional[str] = None,
        *,
        key: typing.Optional[str] = None,
    ) -> Message._Idempotently:
        if alias is not None and key is not None:
            raise RuntimeError(
                'Only one of the positional argument `alias` '
                'or the keyword argument `key` should be specified; '
                f'see {resemble.settings.DOCS_BASE_URL}/docs/model/safety_correctness/idempotency '
                'for more information'
            )

        return Message._Idempotently(alias=alias, key=key)


class MessageServicerNodeAdaptor(Message.Interface):

    def __init__(self):
        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        self._js_servicer_reference = self._construct_js_servicer()  # type: ignore[attr-defined]

    # Message specific methods:
    async def Send(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendRequest,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse:
        json_state = google.protobuf.json_format.MessageToJson(state)
        json_request = google.protobuf.json_format.MessageToJson(request)

        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        json_effects = await self._trampoline(  # type: ignore[attr-defined]
            self._js_servicer_reference,
            'writer',
            'Send',
            context,
            json_state,
            json_request,
        )

        effects = json.loads(json_effects)

        state.CopyFrom(
            google.protobuf.json_format.ParseDict(
                effects['state'],
                resemble.integrations.mailgun.v1.mailgun_pb2.Message(),
            )
        )

        assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

        return google.protobuf.json_format.ParseDict(
            effects['response'],
            resemble.integrations.mailgun.v1.mailgun_pb2.SendResponse(),
        )

    async def SendTask(
        self,
        context: resemble.aio.contexts.WriterContext,
        state: resemble.integrations.mailgun.v1.mailgun_pb2.Message,
        request: resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskRequest,
    ) -> resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse:
        json_state = google.protobuf.json_format.MessageToJson(state)
        json_request = google.protobuf.json_format.MessageToJson(request)

        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        json_effects = await self._trampoline(  # type: ignore[attr-defined]
            self._js_servicer_reference,
            'writer',
            'SendTask',
            context,
            json_state,
            json_request,
        )

        effects = json.loads(json_effects)

        state.CopyFrom(
            google.protobuf.json_format.ParseDict(
                effects['state'],
                resemble.integrations.mailgun.v1.mailgun_pb2.Message(),
            )
        )

        assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

        return google.protobuf.json_format.ParseDict(
            effects['response'],
            resemble.integrations.mailgun.v1.mailgun_pb2.SendTaskResponse(),
        )



class MessageWeakReferenceNodeAdaptor(Message.WeakReference):

    async def _reader(  # type: ignore[override]
        self,
        method: str,
        context: resemble.aio.contexts.ReaderContext | resemble.aio.contexts.WriterContext | resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        request_type: type[google.protobuf.message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        google.protobuf.json_format.Parse(json_request, request)

        response = await getattr(super()._reader(context), method)(request)

        return google.protobuf.json_format.MessageToJson(response)

    async def _writer(  # type: ignore[override]
        self,
        method: str,
        context: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        request_type: type[google.protobuf.message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        google.protobuf.json_format.Parse(json_request, request)

        response = await getattr(super()._writer(context), method)(request)

        return google.protobuf.json_format.MessageToJson(response)

    async def _transaction(  # type: ignore[override]
        self,
        method: str,
        context: resemble.aio.contexts.TransactionContext | resemble.aio.contexts.WorkflowContext | resemble.aio.workflows.Workflow,
        request_type: type[google.protobuf.message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        google.protobuf.json_format.Parse(json_request, request)

        response = await getattr(super()._workflow(context), method)(request)

        return google.protobuf.json_format.MessageToJson(response)

# yapf: enable
