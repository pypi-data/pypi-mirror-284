"use strict";(self.webpackChunkjlab_homepage=self.webpackChunkjlab_homepage||[]).push([[675],{675:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var o=t(751),a=t(110),i=t(256),s=t(53),r=t(635),d=t(252);class c extends i.Widget{constructor(e){super(),this.addClass("my-apodWidget"),this.node.innerHTML='\n\n        <div class="container">\n            <h1>Databrix Lab</h1>\n            <p class="subtitle">Lernen Sie Data Science und Machine Learning in der Praxis!</p>\n        </div>\n\n        <div class="button-container">        \n            <button data-commandLinker-command="nbgrader:open-assignment-list" class="button">\n                <div class="icon"></div>\n                <span>Praxisprojekte starten</span>\n            </button>\n      \n            <button id = "switchGroupButton" class="button secondary">\n                <div class="icon"></div>\n                <span>Mein Workspace</span>\n            </button>\n        </div>\n          ',this.node.querySelector("#switchGroupButton").addEventListener("click",(()=>{this.showgroupinfo(e)}))}async showgroupinfo(e){try{const n={username:e},t=await async function(e="",n={}){const t=d.ServerConnection.makeSettings(),o=r.URLExt.join(t.baseUrl,"jlab-homepage",e);let a;try{a=await d.ServerConnection.makeRequest(o,n,t)}catch(e){throw new d.ServerConnection.NetworkError(e)}let i=await a.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",a)}if(!a.ok)throw new d.ServerConnection.ResponseError(a,i.message||i);return i}("gruppeninfo",{body:JSON.stringify(n),method:"POST"});(0,a.showDialog)({title:"Workspace Information",body:`\n              Sie sind in der Gruppe: ${t.workspace}\n              Ihre Teammates sind: ${t.members.join(";")}\n          `,buttons:[a.Dialog.okButton()]}),(0,a.showDialog)({title:"Workspace Information",body:"\n              Bei Fragen oder GruppenÃ¤nderungen kontaktieren Sie uns bitte an admin@databrix.org!\n          ",buttons:[a.Dialog.okButton()]})}catch(e){let n="Could not retrieve group information.";e.response&&404===e.response.status?n="Server endpoint not found.":e.message&&(n=e.message),(0,a.showDialog)({title:"Error",body:n,buttons:[a.Dialog.okButton()]})}}}const l={id:"jlab_homepage:plugin",description:"A JupyterLab extension for databrix homepage with frontend and backend",autoStart:!0,requires:[a.ICommandPalette,o.ILabShell],optional:[o.ILayoutRestorer],activate:function(e,n,t,o,i){var r,d;console.log("JupyterLab extension databrix homepage is activated!");const l=e.serviceManager.user,m=null===(d=null===(r=e.serviceManager.user)||void 0===r?void 0:r.identity)||void 0===d?void 0:d.username;let p;l.ready.then((()=>{console.debug("Identity:",l.identity),console.debug("Permissions:",l.permissions)}));const b="launcher:create";e.commands.addCommand(b,{label:"Databrix Lab Homepage",execute:()=>{const n=new c(null!=m?m:"unknown");p=new a.MainAreaWidget({content:n});const o="home-"+u.id++;p.id=o,p.title.label="Databrix Lab Homepage",p.title.closable=!0,e.shell.add(p,"main"),e.shell.activateById(p.id),t.layoutModified.connect((()=>{p.title.closable=(0,s.toArray)(e.shell.widgets("main")).length>1}),p)}}),t&&Promise.all([e.restored,null==i?void 0:i.model.restored]).then((()=>{t.layoutModified.connect((()=>{t.isEmpty("main")&&e.commands.execute(b)}))})),n.addItem({command:b,category:"Databrix"}),t&&(t.addButtonEnabled=!0,t.addRequested.connect(((n,t)=>{var o;const a=(null===(o=t.currentTitle)||void 0===o?void 0:o.owner.id)||t.titles[t.titles.length-1].owner.id;return e.commands.execute(b,{ref:a})})))}};var u;!function(e){e.id=0}(u||(u={}))}}]);