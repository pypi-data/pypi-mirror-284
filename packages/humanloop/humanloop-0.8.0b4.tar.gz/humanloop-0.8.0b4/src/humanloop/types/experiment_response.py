# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .base_metric_response import BaseMetricResponse
from .experiment_status import ExperimentStatus
from .experiment_version_response import ExperimentVersionResponse
from .positive_label import PositiveLabel


class ExperimentResponse(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    String ID of experiment. Starts with `exp_`.
    """

    file_id: str = pydantic_v1.Field()
    """
    String ID of file the experiment belongs to.
    """

    name: str = pydantic_v1.Field()
    """
    Name of experiment.
    """

    status: ExperimentStatus = pydantic_v1.Field()
    """
    Status of experiment.
    """

    versions: typing.Optional[typing.List[ExperimentVersionResponse]] = pydantic_v1.Field(default=None)
    """
    List of Versions associated to the experiment.
    """

    metric: BaseMetricResponse = pydantic_v1.Field()
    """
    Metric used as the experiment's objective.
    """

    positive_labels: typing.List[PositiveLabel] = pydantic_v1.Field()
    """
    Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.
    """

    created_at: dt.datetime
    updated_at: dt.datetime

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
