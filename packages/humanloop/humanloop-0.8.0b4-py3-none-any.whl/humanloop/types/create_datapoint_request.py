# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .chat_message import ChatMessage
from .create_datapoint_request_target_value import CreateDatapointRequestTargetValue


class CreateDatapointRequest(UncheckedBaseModel):
    inputs: typing.Optional[typing.Dict[str, str]] = pydantic_v1.Field(default=None)
    """
    The inputs to the prompt template.
    """

    messages: typing.Optional[typing.List[ChatMessage]] = pydantic_v1.Field(default=None)
    """
    List of chat messages to provide to the model.
    """

    target: typing.Optional[typing.Dict[str, CreateDatapointRequestTargetValue]] = pydantic_v1.Field(default=None)
    """
    Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
