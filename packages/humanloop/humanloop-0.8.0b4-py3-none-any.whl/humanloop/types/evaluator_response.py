# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .environment_response import EnvironmentResponse
from .evaluator_aggregate import EvaluatorAggregate
from .evaluator_response_spec import EvaluatorResponseSpec
from .input_response import InputResponse
from .user_response import UserResponse
from .version_status import VersionStatus


class EvaluatorResponse(UncheckedBaseModel):
    """
    Version of the Evaluator used to provide judgments.
    """

    path: str = pydantic_v1.Field()
    """
    Path of the Evaluator including the Evaluator name, which is used as a unique identifier.
    """

    id: str = pydantic_v1.Field()
    """
    Unique identifier for the Evaluator.
    """

    name: str = pydantic_v1.Field()
    """
    Name of the Evaluator, which is used as a unique identifier.
    """

    version_id: str = pydantic_v1.Field()
    """
    Unique identifier for the specific Evaluator Version. If no query params provided, the default deployed Evaluator Version is returned.
    """

    type: typing.Optional[typing.Literal["evaluator"]] = None
    environments: typing.Optional[typing.List[EnvironmentResponse]] = pydantic_v1.Field(default=None)
    """
    The list of environments the Prompt Version is deployed to.
    """

    created_at: dt.datetime
    updated_at: dt.datetime
    created_by: typing.Optional[UserResponse] = pydantic_v1.Field(default=None)
    """
    The user who created the Prompt.
    """

    status: VersionStatus
    last_used_at: dt.datetime
    commit_message: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Message describing the changes made.
    """

    spec: EvaluatorResponseSpec
    version_logs_count: int = pydantic_v1.Field()
    """
    The number of logs that have been generated for this Prompt Version
    """

    total_logs_count: int = pydantic_v1.Field()
    """
    The number of logs that have been generated across all Prompt Versions
    """

    inputs: typing.List[InputResponse] = pydantic_v1.Field()
    """
    Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template.
    """

    evaluators: typing.Optional[typing.List[MonitoringEvaluatorResponse]] = pydantic_v1.Field(default=None)
    """
    Evaluators that have been attached to this Prompt that are used for monitoring logs.
    """

    evaluator_aggregates: typing.Optional[typing.List[EvaluatorAggregate]] = pydantic_v1.Field(default=None)
    """
    Aggregation of Evaluator results for the Evaluator Version.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


from .monitoring_evaluator_response import MonitoringEvaluatorResponse  # noqa: E402

EvaluatorResponse.update_forward_refs()
