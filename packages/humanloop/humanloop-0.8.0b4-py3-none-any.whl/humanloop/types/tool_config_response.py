# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .base_models_user_response import BaseModelsUserResponse
from .tool_source import ToolSource


class ToolConfigResponse(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    String ID of config. Starts with `config_`.
    """

    other: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Other parameters that define the config.
    """

    type: typing.Literal["tool"] = "tool"
    created_by: typing.Optional[BaseModelsUserResponse] = pydantic_v1.Field(default=None)
    """
    The user who created the config.
    """

    status: str = pydantic_v1.Field()
    """
    Whether the config is committed or not.
    """

    name: str = pydantic_v1.Field()
    """
    Name for the tool referenced by the model.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Description of the tool referenced by the model
    """

    source: typing.Optional[ToolSource] = pydantic_v1.Field(default=None)
    """
    Source of the tool. If defined at an organization level will be 'organization' else 'inline'.
    """

    source_code: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Code source of the tool.
    """

    setup_schema: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/
    """

    parameters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/
    """

    signature: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The function signature of the tool when being called.
    """

    is_preset: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether the tool is one where Humanloop defines runtime or not.
    """

    preset_name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to lookup the Humanloop runtime of the tool
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
