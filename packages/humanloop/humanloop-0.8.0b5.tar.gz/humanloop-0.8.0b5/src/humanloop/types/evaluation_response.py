# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .dataset_response import DatasetResponse
from .evaluatee_response import EvaluateeResponse
from .evaluation_evaluator_response import EvaluationEvaluatorResponse
from .evaluation_status import EvaluationStatus
from .user_response import UserResponse


class EvaluationResponse(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    Unique identifier for the Evaluation. Starts with `evr`.
    """

    dataset: DatasetResponse = pydantic_v1.Field()
    """
    The Dataset used in the Evaluation.
    """

    evaluatees: typing.List[EvaluateeResponse] = pydantic_v1.Field()
    """
    The Prompt/Tool Versions included in the Evaluation.
    """

    evaluators: typing.List[EvaluationEvaluatorResponse] = pydantic_v1.Field()
    """
    The Evaluator Versions used to evaluate.
    """

    status: EvaluationStatus = pydantic_v1.Field()
    """
    The current status of the Evaluation.
    
    - `"pending"`: The Evaluation has been created but is not actively being worked on by Humanloop.
    - `"running"`: Humanloop is checking for any missing Logs and Evaluator Logs, and will generate them where appropriate.
    - `"completed"`: All Logs an Evaluator Logs have been generated.
    - `"cancelled"`: The Evaluation has been cancelled by the user. Humanloop will stop generating Logs and Evaluator Logs.
    """

    created_at: dt.datetime
    created_by: typing.Optional[UserResponse] = None
    updated_at: dt.datetime

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
