# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel


class LinkedToolRequest(UncheckedBaseModel):
    id: str = pydantic_v1.Field()
    """
    The ID of the linked tool. Starts with "oc\_"
    """

    source: typing.Literal["organization"] = pydantic_v1.Field(default="organization")
    """
    The source of the linked tool. For a linked tool it should be `organization`
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The name of the linked tool.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The description of the linked tool.
    """

    parameters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    The parameters of the linked tool.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
