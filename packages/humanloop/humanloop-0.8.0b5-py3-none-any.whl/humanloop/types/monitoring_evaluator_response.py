# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .monitoring_evaluator_state import MonitoringEvaluatorState


class MonitoringEvaluatorResponse(UncheckedBaseModel):
    version_reference: VersionReferenceResponse = pydantic_v1.Field()
    """
    The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment.
    """

    version: typing.Optional[EvaluatorResponse] = pydantic_v1.Field(default=None)
    """
    The deployed Version.
    """

    state: MonitoringEvaluatorState = pydantic_v1.Field()
    """
    The state of the Monitoring Evaluator. Either `active` or `inactive`
    """

    created_at: dt.datetime
    updated_at: dt.datetime

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


from .evaluator_response import EvaluatorResponse  # noqa: E402
from .version_reference_response import VersionReferenceResponse  # noqa: E402

MonitoringEvaluatorResponse.update_forward_refs()
