Metadata-Version: 2.1
Name: faunanet
Version: 0.0.12
Summary: faunanet - A bioacoustics platform for the analysis of animal sounds with neural networks based on birdnetlib
Author-email: Harald Mack <harald.mack@uni-heidelberg.de>, Inga Ulusoy <inga.ulusoy@uni-heidelberg.de>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Project-URL: Repository, https://github.com/ssciwr/iSparrow
Project-URL: Issues, https://github.com/ssciwr/iSparrow/issues
Project-URL: Documentation, https://isparrow.readthedocs.io/en/latest/
Classifier: Programming Language :: Python :: 3.9
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Development Status :: 4 - Beta
Classifier: Topic :: Multimedia :: Sound/Audio :: Analysis
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: librosa
Requires-Dist: PyYAML
Requires-Dist: birdnetlib==0.15.0
Requires-Dist: pooch
Requires-Dist: resampy
Requires-Dist: platformdirs
Requires-Dist: ffmpeg-python
Provides-Extra: tensorflow
Requires-Dist: numpy; extra == "tensorflow"
Requires-Dist: tensorflow; extra == "tensorflow"
Provides-Extra: tensorflow-arm
Requires-Dist: numpy<2.0; extra == "tensorflow-arm"
Requires-Dist: tensorflow-aarch64; extra == "tensorflow-arm"
Provides-Extra: tensorflow-lite
Requires-Dist: numpy<2.0; extra == "tensorflow-lite"
Requires-Dist: tflite-runtime; extra == "tensorflow-lite"
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: pandas; extra == "dev"
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: myst-parser; extra == "doc"
Requires-Dist: sphinxcontrib-napoleon; extra == "doc"
Requires-Dist: sphinx-rtd-theme; extra == "doc"

[![tests](https://github.com/ssciwr/iSparrow/actions/workflows/main.yml/badge.svg?event=push)](https://github.com/ssciwr/iSparrow/actions/workflows/main.yml)
[![codecov](https://codecov.io/gh/ssciwr/iSparrow/graph/badge.svg?token=FwyE0PNiOk)](https://codecov.io/gh/ssciwr/iSparrow)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=ssciwr_iSparrow&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=ssciwr_iSparrow)
[![Supported OS: Linux | macOS | Windows](https://img.shields.io/badge/OS-Linux%20%7C%20macOS%20%7C%20Windows-green.svg)](https://www.linux.org/)
[![Documentation](https://readthedocs.org/projects/isparrow/badge/?version=latest)](https://isparrow.readthedocs.io/en/latest/?badge=latest)
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

# faunanet - A bioacoustics platform based on birdnetlib using neural networks 
## What is faunanet? 
`faunanet` is an extension of [*Birdnet-Analyzer*](https://github.com/kahst/BirdNET-Analyzer), and uses [*birdnetlib*](https://github.com/joeweiss/birdnetlib) as its basis. 
`faunanet` was developed with the goal to provide a platform for bioacoustics research projects, started at the Interdisciplinary center for scientific computing at the University of Heidelberg. 

## Features
Using the birdnetv2.4 model by default, `faunanet` provides three core features: 

- Easily and arbitrarily exchange the underlying maching learning model for bioacoustics.
- Easy configuration using YAML files which are stored alongside the analysis results. 
- Integrated, extendible REPL with which to interact with which to interact with a running instance.

The main element of `faunanet` is a 'watcher' class that continuously monitors a folder for incoming data files and allows for on-the-fly model- or parameter-change via the REPL. It can also be used as a library in your python project.
By extending elements of bridnetlib rather, `faunanet` conserves the latter's capabilities while still adding its own functionality on top of it. 

## Getting started 
Please refer to the 'Getting faunanet up and running' section in the documentation for an introduction. 

## Bugs, issues and feature requests
Please use the [issue tab of the github page](https://github.com/ssciwr/iSparrow/issues) to report any bugs or feature requests. 

## Contributions 
Feel free to contribute to this project by opening a pull request [here](https://github.com/ssciwr/iSparrow/pulls). 

## Usage
### Installation
Make sure that ffmpeg is installed on your system: 
```bash
# for debian based linux
sudo apt install ffmpeg
```
or for macOS using homebrew:
```bash 
brew install ffmpeg
```
On windows, you can use chocolatey or other package managers to the same effect: 
```bash
choco install ffmpeg
```
ffmpeg is needed for the audio preprocessing that is done by faunanet when analyzing your data.

You can install `faunanet` from pip with 
```bash 
pip install faunanet[option]
```
with option being "tensorflow" for the full tensorflow suite, or "tensorflow-lite" to install only the `tflite_runtime` package which only provides restricted support for model operations, while full tensorflow supports all models built with it. Installing it from pip will install the newest release version of `faunanet`. **One of the two is needed to run `faunanet`, with `tensorflow` being the appropriate one for most usecases.** 

You can also install it from source to get the latest development chagnes. To do this, clone the repository, create a [python virtual environment](https://docs.python.org/3/library/venv.html), and install `faunanet`into it: 
```bash 
    cd path/to/dir/where/faunanet/should/live 

    git clone https://github.com/ssciwr/iSparrow.git

    python3 -m venv ./path/to/faunanet/venv

    source ./path/to/where/venv/bin/activate 

    cd ./faunanet 

    python3 -m pip install .[tensorflow]  # or .[tensorflow-lite] for tflite models
``` 
On windows, the line ```source ./path/to/faunanet/venv/bin/activate``` must be replaced with 
```python3 ./path/to/faunanet/venv/scripts/activate```. You can also select which installation options you want in the last line, either ```tensorflow``` or ```tensorflow-lite```. Additionally, 
if you want to do further development, the installation must be modified by replacing the install command, adding 'editable' mode and development dependencies.
```
    python3 -m pip install  -e .[tensorflow, dev]
```

For building the documentation locally, you have to install with yet another set of dependencies: 

### Setup 
faunanet needs three destinations on your filesystem in order to run: 
- a directory where the machine learning models for sound classification should be stored 
- a directory where incoming data files are stored. 
- a directory where the analysis results should be stored

faunanet has a method `set_up` for this purpose, that is called with the path to a .yml configuration file. This file contains all the necessary information to set up a working faunanet installation.
**This method must be called upon first usage in order to have a fully functioning faunanet installation that documents its state correctly upon usage**. 
Below is an example of the structure faunanet demands: 
```yaml 
Directories: 
  home: ~/faunanet
  data: ~/faunanet/data
  models: ~/faunanet/models 
  output: ~/faunanet/output
```
You can copy the above into a .yml file and customize the paths to whatever you want them to be. The `~` will be automatically expanded to the path to your home directory.
The method can be used as follows in python code

```python 
    from faunanet import faunanet_setup as sps 
    filepath = Path("path", "to", "the", "install_config.yml")

    sps.set_up(filepath)
```
It is important to have an outermost node called  `Directories`. Aside from creating the directories named in the installation config file, the installation method will download the default tensorflow models from [hugginface](https://huggingface.co/MaHaWo/faunanet_test_models/tree/main) and will create `faunanet` directories in you OS default config and cache folders. On Linux, these would be `~/.config` and `~/.cache`, respectively.

In the repl, this would work like this: 
```bash
   faunanet # enter repl 

   set_up --cfg=./path/to/custom/install_config.yml 
``` 
This does the same as the call to ```sps.set_up``` call above, so you can refer to the documentation of that function for further information, too. 

### Using faunanet as a library 
faunanet can be used as a library in your own application. Just add  
```python 
import faunanet 
```
to have it available in your module, and make sure you use the correct virtual environment in which faunanet is installed. Keep in mind that `faunanet` in itself extends `birdnetlib`, so make sure to check the latter's documentation, too. 

### Running faunanet 
faunanet provides its own, small, REPL for interacting with a running instance. This can be used to start, stop, pause or continue it, to change classifier models or to query it's current state, input and output folders and so on. To get an overview over the available commands, you can just type  ```faunanet``` in a terminal with the virtual environment being activated that faunanet has been installed into. Alternatively, refer to the documentation.


### Using the docker image

#### Run the docker-hub image
You can also run `faunanet` in docker by pulling the latest `faunanet` image from docker-hub and 
running it via terminal command: 
```bash
docker run -ti --rm \ 
     -v /path/on/host/for/faunanet/configs:/root/faunanet/config \
     -v /path/on/host/for/faunanet/output:/root/faunanet/output \ 
     -v /path/on/host/for/faunanet/models:/root/faunanet/models \ 
     -v /path/on/host/for/faunanet/data:/root/faunanet/data \ 
     mahawo/faunanet_{OPTION}:latest
```
Of special interest are the mounted volumes, i.e., the paths behind the `-v` arguments: 
- first: for config files 
- second: for analysis output 
- third: for models 
- forth: for incoming data. If you run the system via docker compose (see below) in conjunction with faunanet-record you do not need this, because `faunanet-record` will take care of this folder. 

`{OPTION}` corresponds ot `tf` for tensorflow or `tflite` for tensorflow-lite.

#### Built the image yourself
To built the dockerfile that comes with the package yourself you can use the following docker command: 
```bash
docker build --build-arg INSTALL_OPTION=TENSORFLOW_OPTION \
    -t your-dockerhub-username/your-image-name:tag \
    -f path/to/Dockerfile .
```
Where the `TENSORFLOW_OPTION` has to be replaced with either `tensorflow` or `tensorflow-lite`. The dockerfile itself is very simple and can be modified to your liking.
```dockerfile
FROM python:3.11-slim

WORKDIR /root

RUN apt-get update && apt-get install --no-install-recommends -y ffmpeg -y --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

# add install option 
ARG INSTALL_OPTION

# install with the necessary option
RUN pip install faunanet[${INSTALL_OPTION}]
WORKDIR /root

RUN mkdir /root/faunanet/config 

# add entrypoint
CMD ["faunanet"]
```

In order to build an image for the ARM64 architecture often used by raspberry PI or other edge devices, you can use `docker buildx` in conjunction with `qemu` (tested on linux machine):

```bash
 docker buildx build --platform=linux/arm64 -t containername:tag -f ~/path/to/docker/file/dockerfile.dockerfile . --push
```
Have a look [here](https://www.docker.com/blog/multi-arch-images/) for more info.

#### Using `faunanet` with other services via docker compose
`faunanet` can be run together with `faunanet-record` using [docker compose](https://docs.docker.com/compose/) or together with other containers of your choice. You can use the following docker-compose file as a starting point, which also comes with the installation: 
```yaml 
services:
  faunanet:
    image: mahawo/faunanet:latest
    tty: true 
    stdin_open: true
    volumes:
      - ~/faunanet/config:/root/faunanet/config
      - ~/faunanet/output:/root/faunanet/output
      - ~/faunanet/models:/root/faunanet/models
      - ~/faunanet/data:/root/faunanet/data
    environment:
      - RUN_CONFIG=analysis_config.yml
  faunanet_record:
    image: mahawo/faunanet_record:latest
    tty: true 
    stdin_open: true
    volumes:
      - ~/faunanet/config:/root/faunanet/config
      - ~/faunanet/data:/root/faunanet/data
    devices:
      - /dev/snd:/dev/snd # this needs to be the microphone device
    environment:
      - RUN_CONFIG=record_config.yml
```
To locate the files from an existing pip installation, use the following python script, or pull them from the `docker` directory in `faunanet` home directory after it has been set up (see [Setup](#Setup)). The environment variables `RUN_CONFIG` for each service here can hold the name of config files that are stored in the directory mounted into `/root/faunanet/config`.

When working with config files for the docker version, make sure to refer to the folders within the docker container and not the local ones. Otherwise, the system will fail with a 
