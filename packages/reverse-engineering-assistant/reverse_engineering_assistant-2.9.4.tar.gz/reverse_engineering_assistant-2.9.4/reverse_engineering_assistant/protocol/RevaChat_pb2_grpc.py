# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import RevaChat_pb2 as RevaChat__pb2

GRPC_GENERATED_VERSION = '1.65.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in RevaChat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RevaChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.chat = channel.unary_unary(
                '/RevaProtocol.RevaChatService/chat',
                request_serializer=RevaChat__pb2.RevaChatMessage.SerializeToString,
                response_deserializer=RevaChat__pb2.RevaChatMessageResponse.FromString,
                _registered_method=True)
        self.chatResponseStream = channel.unary_stream(
                '/RevaProtocol.RevaChatService/chatResponseStream',
                request_serializer=RevaChat__pb2.RevaChatMessage.SerializeToString,
                response_deserializer=RevaChat__pb2.RevaChatMessageResponse.FromString,
                _registered_method=True)
        self.chatStream = channel.stream_stream(
                '/RevaProtocol.RevaChatService/chatStream',
                request_serializer=RevaChat__pb2.RevaChatMessage.SerializeToString,
                response_deserializer=RevaChat__pb2.RevaChatMessageResponse.FromString,
                _registered_method=True)
        self.shutdown = channel.unary_unary(
                '/RevaProtocol.RevaChatService/shutdown',
                request_serializer=RevaChat__pb2.RevaChatShutdown.SerializeToString,
                response_deserializer=RevaChat__pb2.RevaChatShutdownResponse.FromString,
                _registered_method=True)


class RevaChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def chat(self, request, context):
        """Single turn chat with no history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chatResponseStream(self, request, context):
        """Single turn chat with no history and chain of thought included
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chatStream(self, request_iterator, context):
        """Multi turn chat with history and chain of thought included
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """Shutdown the chat service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RevaChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'chat': grpc.unary_unary_rpc_method_handler(
                    servicer.chat,
                    request_deserializer=RevaChat__pb2.RevaChatMessage.FromString,
                    response_serializer=RevaChat__pb2.RevaChatMessageResponse.SerializeToString,
            ),
            'chatResponseStream': grpc.unary_stream_rpc_method_handler(
                    servicer.chatResponseStream,
                    request_deserializer=RevaChat__pb2.RevaChatMessage.FromString,
                    response_serializer=RevaChat__pb2.RevaChatMessageResponse.SerializeToString,
            ),
            'chatStream': grpc.stream_stream_rpc_method_handler(
                    servicer.chatStream,
                    request_deserializer=RevaChat__pb2.RevaChatMessage.FromString,
                    response_serializer=RevaChat__pb2.RevaChatMessageResponse.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=RevaChat__pb2.RevaChatShutdown.FromString,
                    response_serializer=RevaChat__pb2.RevaChatShutdownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RevaProtocol.RevaChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RevaProtocol.RevaChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RevaChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RevaProtocol.RevaChatService/chat',
            RevaChat__pb2.RevaChatMessage.SerializeToString,
            RevaChat__pb2.RevaChatMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def chatResponseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/RevaProtocol.RevaChatService/chatResponseStream',
            RevaChat__pb2.RevaChatMessage.SerializeToString,
            RevaChat__pb2.RevaChatMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def chatStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/RevaProtocol.RevaChatService/chatStream',
            RevaChat__pb2.RevaChatMessage.SerializeToString,
            RevaChat__pb2.RevaChatMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RevaProtocol.RevaChatService/shutdown',
            RevaChat__pb2.RevaChatShutdown.SerializeToString,
            RevaChat__pb2.RevaChatShutdownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
