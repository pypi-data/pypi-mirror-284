# Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import status_service_pb2 as com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class StatusServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/com.digitalasset.canton.health.admin.v0.StatusService/Status',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.NodeStatus.FromString,
                )
        self.HealthDump = channel.unary_stream(
                '/com.digitalasset.canton.health.admin.v0.StatusService/HealthDump',
                request_serializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpRequest.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpChunk.FromString,
                )


class StatusServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthDump(self, request, context):
        """Streams back a zip file as byte chunks, containing a health dump of the full canton process (including other nodes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.NodeStatus.SerializeToString,
            ),
            'HealthDump': grpc.unary_stream_rpc_method_handler(
                    servicer.HealthDump,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpRequest.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.digitalasset.canton.health.admin.v0.StatusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatusService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.health.admin.v0.StatusService/Status',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.NodeStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.digitalasset.canton.health.admin.v0.StatusService/HealthDump',
            com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpRequest.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_health_dot_admin_dot_v0_dot_status__service__pb2.HealthDumpChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
