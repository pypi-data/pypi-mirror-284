# Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import topology_manager_write_service_pb2 as com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2


class TopologyManagerWriteServiceStub(object):
    """*
    Write operations on the local topology manager.

    Both, participant and domain run a local topology manager exposing the same write interface.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthorizePartyToParticipant = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizePartyToParticipant',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.PartyToParticipantAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeOwnerToKeyMapping = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeOwnerToKeyMapping',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.OwnerToKeyMappingAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeNamespaceDelegation = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeNamespaceDelegation',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.NamespaceDelegationAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeIdentifierDelegation = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeIdentifierDelegation',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.IdentifierDelegationAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeVettedPackages = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeVettedPackages',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.VettedPackagesAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeDomainParametersChange = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeDomainParametersChange',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.DomainParametersChangeAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeParticipantDomainState = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeParticipantDomainState',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.ParticipantDomainStateAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AuthorizeMediatorDomainState = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeMediatorDomainState',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.MediatorDomainStateAuthorization.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
                )
        self.AddSignedTopologyTransaction = channel.unary_unary(
                '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AddSignedTopologyTransaction',
                request_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.SignedTopologyTransactionAddition.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AdditionSuccess.FromString,
                )


class TopologyManagerWriteServiceServicer(object):
    """*
    Write operations on the local topology manager.

    Both, participant and domain run a local topology manager exposing the same write interface.
    """

    def AuthorizePartyToParticipant(self, request, context):
        """*
        Authorizes a party to participant mapping change (add/remove) on the node local topology manager.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeOwnerToKeyMapping(self, request, context):
        """*
        Authorizes an owner to key mapping change (add/remove) on the local topology manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeNamespaceDelegation(self, request, context):
        """*
        Authorizes a namespace delegation (root or intermediate CA) (add/remove) on the local topology manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeIdentifierDelegation(self, request, context):
        """*
        Authorizes a new identifier delegation (identifier certificate) (add/remove) on the local topology manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeVettedPackages(self, request, context):
        """*
        Authorizes a new package vetting transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeDomainParametersChange(self, request, context):
        """* Authorizes a change of parameters for the domain 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeParticipantDomainState(self, request, context):
        """*
        Authorizes a participant domain state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeMediatorDomainState(self, request, context):
        """*
        Authorizes a mediator domain state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSignedTopologyTransaction(self, request, context):
        """*
        Adds a signed topology transaction to the Authorized store
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopologyManagerWriteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthorizePartyToParticipant': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizePartyToParticipant,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.PartyToParticipantAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeOwnerToKeyMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeOwnerToKeyMapping,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.OwnerToKeyMappingAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeNamespaceDelegation': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeNamespaceDelegation,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.NamespaceDelegationAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeIdentifierDelegation': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeIdentifierDelegation,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.IdentifierDelegationAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeVettedPackages': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeVettedPackages,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.VettedPackagesAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeDomainParametersChange': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeDomainParametersChange,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.DomainParametersChangeAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeParticipantDomainState': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeParticipantDomainState,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.ParticipantDomainStateAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AuthorizeMediatorDomainState': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeMediatorDomainState,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.MediatorDomainStateAuthorization.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.SerializeToString,
            ),
            'AddSignedTopologyTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSignedTopologyTransaction,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.SignedTopologyTransactionAddition.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AdditionSuccess.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TopologyManagerWriteService(object):
    """*
    Write operations on the local topology manager.

    Both, participant and domain run a local topology manager exposing the same write interface.
    """

    @staticmethod
    def AuthorizePartyToParticipant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizePartyToParticipant',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.PartyToParticipantAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeOwnerToKeyMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeOwnerToKeyMapping',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.OwnerToKeyMappingAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeNamespaceDelegation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeNamespaceDelegation',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.NamespaceDelegationAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeIdentifierDelegation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeIdentifierDelegation',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.IdentifierDelegationAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeVettedPackages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeVettedPackages',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.VettedPackagesAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeDomainParametersChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeDomainParametersChange',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.DomainParametersChangeAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeParticipantDomainState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeParticipantDomainState',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.ParticipantDomainStateAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeMediatorDomainState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AuthorizeMediatorDomainState',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.MediatorDomainStateAuthorization.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AuthorizationSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSignedTopologyTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService/AddSignedTopologyTransaction',
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.SignedTopologyTransactionAddition.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_topology_dot_admin_dot_v0_dot_topology__manager__write__service__pb2.AdditionSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
