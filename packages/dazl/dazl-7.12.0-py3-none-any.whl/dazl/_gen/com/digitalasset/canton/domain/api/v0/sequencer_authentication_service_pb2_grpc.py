# Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sequencer_authentication_service_pb2 as com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2


class SequencerAuthenticationServiceStub(object):
    """Operations to generate an authentication token for calling sequencer operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Challenge = channel.unary_unary(
                '/com.digitalasset.canton.domain.api.v0.SequencerAuthenticationService/Challenge',
                request_serializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Request.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Response.FromString,
                )
        self.Authenticate = channel.unary_unary(
                '/com.digitalasset.canton.domain.api.v0.SequencerAuthenticationService/Authenticate',
                request_serializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Request.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Response.FromString,
                )


class SequencerAuthenticationServiceServicer(object):
    """Operations to generate an authentication token for calling sequencer operations
    """

    def Challenge(self, request, context):
        """If provided with a supported protocol version and crypto type,
        will return a nonce and fingerprint of the expected key to sign this nonce
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """If provided with a correctly signed nonce, will return a authentication token
        to be supplied to SequencerService operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SequencerAuthenticationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Challenge': grpc.unary_unary_rpc_method_handler(
                    servicer.Challenge,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Request.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Response.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Request.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.digitalasset.canton.domain.api.v0.SequencerAuthenticationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SequencerAuthenticationService(object):
    """Operations to generate an authentication token for calling sequencer operations
    """

    @staticmethod
    def Challenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.domain.api.v0.SequencerAuthenticationService/Challenge',
            com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Request.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Challenge.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.domain.api.v0.SequencerAuthenticationService/Authenticate',
            com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Request.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_domain_dot_api_dot_v0_dot_sequencer__authentication__service__pb2.Authentication.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
