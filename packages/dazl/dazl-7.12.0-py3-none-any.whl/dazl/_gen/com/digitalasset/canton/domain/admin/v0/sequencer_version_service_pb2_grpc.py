# Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ....protocol.v0 import sequencing_pb2 as com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2


class SequencerVersionServiceStub(object):
    """Service allowing a Domain node to initialize the sequencer instance.
    Should typically only be exposed to the domain node and not all clients
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handshake = channel.unary_unary(
                '/com.digitalasset.canton.domain.admin.v0.SequencerVersionService/Handshake',
                request_serializer=com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Request.SerializeToString,
                response_deserializer=com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Response.FromString,
                )


class SequencerVersionServiceServicer(object):
    """Service allowing a Domain node to initialize the sequencer instance.
    Should typically only be exposed to the domain node and not all clients
    """

    def Handshake(self, request, context):
        """Perform a handshake with the initialization service to ensure that the client and server are using compatible versions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SequencerVersionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.Handshake,
                    request_deserializer=com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Request.FromString,
                    response_serializer=com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.digitalasset.canton.domain.admin.v0.SequencerVersionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SequencerVersionService(object):
    """Service allowing a Domain node to initialize the sequencer instance.
    Should typically only be exposed to the domain node and not all clients
    """

    @staticmethod
    def Handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.digitalasset.canton.domain.admin.v0.SequencerVersionService/Handshake',
            com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Request.SerializeToString,
            com_dot_digitalasset_dot_canton_dot_protocol_dot_v0_dot_sequencing__pb2.Handshake.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
